DocVersion: 2
GameVersion: 5.26
APIVersion: 1.26
Interfaces:
  - InterfaceName: PlayerInVolumeListener
    Namespace: ''
    Documentation: Listener for CountPlayersInBrushVolume.
    Methods:
      - Declaration: void PlayerDetected(const bool fInVolume, CBasePlayer@ pPlayer)
        Documentation: Called whenever a player is detected.
  - InterfaceName: ScriptClassInterface
    Namespace: ''
    Documentation: Script class interface
    Methods: []
Classes:
  - ClassName: CModule
    Namespace: ''
    Documentation: |-
      Module class.
      Represents this module.
    Flags: 262145
    Methods:
      - Declaration: CScriptInfo@+ get_ScriptInfo()
        Documentation: Gets this module's script info object.
      - Declaration: string GetModuleName() const
        Documentation: Gets the name of this module.
    Properties: []
  - ClassName: CScriptInfo
    Namespace: ''
    Documentation: |-
      Script info object.
      Contains script information.
    Flags: 1
    Methods:
      - Declaration: void SetMinimumAdminLevel(const AdminLevel_t minimumAdminLevel)
        Documentation: >-
          Sets the minimum admin level required for commands. You cannot lower
          the minimum level.
      - Declaration: AdminLevel_t GetMinimumAdminLevel() const
        Documentation: Gets the minimum admin level required for commands.
      - Declaration: void SetContactInfo(const string& in szContactInfo)
        Documentation: Sets the author's contact info.
      - Declaration: const string& GetContactInfo() const
        Documentation: Gets the author's contact info.
      - Declaration: void SetAuthor(const string& in szAuthor)
        Documentation: Sets the author name.
      - Declaration: const string& GetAuthor() const
        Documentation: Gets the author name.
    Properties: []
  - ClassName: CModuleHookManager
    Namespace: ''
    Documentation: Module hook manager
    Flags: 262145
    Methods:
      - Declaration: void RemoveHook(uint uiHookCode, ?& in pHookFunction)
        Documentation: Removes a hook. Pass in the hook function or delegate to remove.
      - Declaration: void RemoveHook(uint uiHookCode)
        Documentation: Removes all functions hooked into the given hook.
      - Declaration: bool RegisterHook(uint uiHookCode, ?& in pHookFunction)
        Documentation: Registers a hook. Pass in a hook function or delegate.
    Properties: []
  - ClassName: CSurvivalMode
    Namespace: ''
    Documentation: Survival Mode handler
    Flags: 262145
    Methods:
      - Declaration: void SetDelayBeforeStart( float value )
        Documentation: Sets delay before survival mode starts.
      - Declaration: float GetDelayBeforeStart() const
        Documentation: Returns delay before survival mode starts.
      - Declaration: void EndRound()
        Documentation: Can be used to end a round and force a retry to be used.
      - Declaration: void SetNextMap(const string& in szMapName)
        Documentation: Sets name of the next survival map.
      - Declaration: const string& GetNextMap(void) const
        Documentation: Returns name of the next survival map.
      - Declaration: bool GetStartOn()
        Documentation: Returns whether Survival Mode should start when the map is loaded.
      - Declaration: void SetStartOn( bool value )
        Documentation: Sets whether Survival Mode should start when the map is loaded.
      - Declaration: bool MapSupportEnabled()
        Documentation: Returns whether the current map supports Survival Mode or not.
      - Declaration: void EnableMapSupport()
        Documentation: >-
          Tells the game that the current map wants to use Survival Mode. Should
          be called in MapInit. Cannot be disabled once set.
      - Declaration: void ResetVoteState()
        Documentation: Resets the Survival Mode vote state to undefined.
      - Declaration: void VoteToggle()
        Documentation: Toggles Survival Mode vote state.
      - Declaration: int GetVoteState()
        Documentation: Returns Survival Mode vote state.
      - Declaration: void Activate( bool fActivateNow = false )
        Documentation: Activate Survival Mode
      - Declaration: bool IsActive() const
        Documentation: Returns whether Survival Mode is active or not.
      - Declaration: void Toggle()
        Documentation: Toggles Survival Mode.
      - Declaration: void Disable()
        Documentation: Disable Survival Mode
      - Declaration: void Enable( bool fActivateNow = false )
        Documentation: Enable Survival Mode
      - Declaration: bool IsEnabled() const
        Documentation: Returns whether Survival Mode is enabled or not.
    Properties: []
  - ClassName: CClassicMode
    Namespace: ''
    Documentation: Classic Mode handler
    Flags: 262145
    Methods:
      - Declaration: const string& FindItemMapping(const string& in szItemName) const
        Documentation: >-
          Gets the item mapped to the given item name, or an empty string if no
          mapping exists.
      - Declaration: void SetItemMappings(array<ItemMapping@>@ pItemMappings)
        Documentation: |-
          Sets the item mappings to use from now on.
          Does not affect previous mappings.
          Pass null to disable all mappings.
      - Declaration: void SetShouldRestartOnChange(const bool bShouldRestart)
        Documentation: Sets whether the map should restart if Classic Mode is changed.
      - Declaration: bool ShouldRestartOnChange() const
        Documentation: >-
          Returns whether the map should restart if Classic Mode is changed or
          not. Defaults to true if not changed by a script. Reset on map change.
      - Declaration: void EnableMapSupport()
        Documentation: >-
          Tells the game that the current map wants to use Classic Mode. Must be
          called in MapInit. Cannot be disabled once set.This will ask players
          whether they want to enable Classic Mode. Reset on map change.
      - Declaration: void Toggle()
        Documentation: Toggles Classic Mode.
      - Declaration: void ForceItemRemap(const bool fEnabled)
        Documentation: Forces item remapping even if classic mode is disabled.
      - Declaration: void SetEnabled(const bool fEnabled)
        Documentation: Enable or disable Classic Mode.
      - Declaration: bool IsEnabled() const
        Documentation: Returns whether Classic Mode is enabled or not.
      - Declaration: void ResetState()
        Documentation: Resets the Classic Mode state setting to undefined.
      - Declaration: bool IsStateDefined() const
        Documentation: >-
          Returns whether the Classic Mode state setting is defined. If not
          defined, no voting has taken place to choose whether or not to enable
          Classic Mode.
    Properties: []
  - ClassName: ItemMapping
    Namespace: ''
    Documentation: Item mapping for classic mode.
    Flags: 1
    Methods:
      - Declaration: const string& get_To() const
        Documentation: Gets the To item name
      - Declaration: const string& get_From() const
        Documentation: Gets the From item name
      - Declaration: >-
          ItemMapping@ ItemMapping(const string& in szFrom, const string& in
          szTo)
        Documentation: Constructor
    Properties: []
  - ClassName: SayParameters
    Namespace: ''
    Documentation: ClientSay parameters
    Flags: 1
    Methods:
      - Declaration: void set_ShouldHide(bool fShouldHide)
        Documentation: Sets whether this text will be hidden or not
      - Declaration: bool get_ShouldHide() const
        Documentation: Gets whether this text will be hidden or not
      - Declaration: const CCommand@ GetArguments() const
        Documentation: Gets the arguments in this command.
      - Declaration: const string& GetCommand() const
        Documentation: Gets the entire command string
      - Declaration: ClientSayType GetSayType() const
        Documentation: Gets the say type of this text
      - Declaration: CBasePlayer@ GetPlayer() const
        Documentation: Gets the player that is saying something
    Properties: []
  - ClassName: CConCommandSystem
    Namespace: ''
    Documentation: Script console command manager.
    Flags: 262145
    Methods:
      - Declaration: void ServerCommand(const string& in szCommand)
        Documentation: Executes an Angelscript server command.
      - Declaration: CBasePlayer@ GetCurrentPlayer() const
        Documentation: >-
          If the current command was executed by a player, this returns that
          player.
    Properties: []
  - ClassName: CCVar
    Namespace: ''
    Documentation: CVar class
    Flags: 5
    Methods:
      - Declaration: void SetBool(const bool bValue)
        Documentation: Sets the given boolean as the value.
      - Declaration: void SetInt(const int iValue)
        Documentation: Sets the given integer as the value.
      - Declaration: void SetFloat(const float flValue)
        Documentation: Sets the given float as the value.
      - Declaration: void SetString(const string& in szValue)
        Documentation: Sets the given string as the value.
      - Declaration: bool GetBool() const
        Documentation: Converts the value to a boolean.
      - Declaration: int GetInt() const
        Documentation: Converts the value to an integer.
      - Declaration: float GetFloat() const
        Documentation: Converts the value to a float.
      - Declaration: const string& GetString() const
        Documentation: Converts the value to a string.
      - Declaration: const string& GetDefaultValue() const
        Documentation: Gets the default value for this cvar.
      - Declaration: >-
          CCVar@ CCVar(const string& in szName, const string& in szValue, const
          string& in szHelpInfo = "", const ConCommandFlags_t flags =
          ConCommandFlag::None, CVarCallback@ pCallback = null)
        Documentation: Constructor
      - Declaration: >-
          CCVar@ CCVar(const string& in szName, float flValue = 0, const string&
          in szHelpInfo = "", const ConCommandFlags_t flags =
          ConCommandFlag::None, CVarCallback@ pCallback = null)
        Documentation: Constructor
      - Declaration: bool HasBeenAdded() const
        Documentation: |-
          Whether this command was added to the list of commands.
          Must be added to be usable from the console.
      - Declaration: const string& GetOwningModuleName() const
        Documentation: Gets the name of the module that owns (created) this command.
      - Declaration: ConCommandKind::Type GetKind() const
        Documentation: Gets the type of this console command.
      - Declaration: const string& GetHelpInfo() const
        Documentation: Gets the help info describing this command.
      - Declaration: const string& GetFullyQualifiedName() const
        Documentation: >-
          Gets the fully qualified name of this command. This is the name that
          the command is referred by when called.
      - Declaration: const string& GetName() const
        Documentation: Gets the name of this command.
    Properties: []
  - ClassName: CClientCommand
    Namespace: ''
    Documentation: Client console command class
    Flags: 5
    Methods:
      - Declaration: >-
          CClientCommand@ CClientCommand(const string& in szName, const string&
          in szHelpInfo, ClientCommandCallback@ pCallback, const
          ConCommandFlags_t flags = ConCommandFlag::None)
        Documentation: Constructor
      - Declaration: bool HasBeenAdded() const
        Documentation: |-
          Whether this command was added to the list of commands.
          Must be added to be usable from the console.
      - Declaration: const string& GetOwningModuleName() const
        Documentation: Gets the name of the module that owns (created) this command.
      - Declaration: ConCommandKind::Type GetKind() const
        Documentation: Gets the type of this console command.
      - Declaration: const string& GetHelpInfo() const
        Documentation: Gets the help info describing this command.
      - Declaration: const string& GetFullyQualifiedName() const
        Documentation: >-
          Gets the fully qualified name of this command. This is the name that
          the command is referred by when called.
      - Declaration: const string& GetName() const
        Documentation: Gets the name of this command.
    Properties: []
  - ClassName: CConCommand
    Namespace: ''
    Documentation: Console command class
    Flags: 5
    Methods:
      - Declaration: >-
          CConCommand@ CConCommand(const string& in szName, const string& in
          szHelpInfo, ConCommandCallback@ pCallback, const ConCommandFlags_t
          flags = ConCommandFlag::None)
        Documentation: Constructor
      - Declaration: bool HasBeenAdded() const
        Documentation: |-
          Whether this command was added to the list of commands.
          Must be added to be usable from the console.
      - Declaration: const string& GetOwningModuleName() const
        Documentation: Gets the name of the module that owns (created) this command.
      - Declaration: ConCommandKind::Type GetKind() const
        Documentation: Gets the type of this console command.
      - Declaration: const string& GetHelpInfo() const
        Documentation: Gets the help info describing this command.
      - Declaration: const string& GetFullyQualifiedName() const
        Documentation: >-
          Gets the fully qualified name of this command. This is the name that
          the command is referred by when called.
      - Declaration: const string& GetName() const
        Documentation: Gets the name of this command.
    Properties: []
  - ClassName: CCommand
    Namespace: ''
    Documentation: Command arguments.
    Flags: 1
    Methods:
      - Declaration: >-
          int FindIntArg(const string& in szArgument, const int iDefault = 0)
          const
        Documentation: >-
          Find an int value for a given argument. Returns iDefault if no such
          argument exists, or no value exists for it. Otherwise, returns the
          value, converted to an int
      - Declaration: string FindArg(const string& in szArgument) const
        Documentation: >-
          Find a value for a given argument. If the argument does not exist or
          has no value, an empty string is returned. Otherwise, returns the
          value.
      - Declaration: string opIndex(const int iIndex) const
        Documentation: Gets the argument by index.
      - Declaration: string Arg(const int iIndex) const
        Documentation: Gets the argument by index.
      - Declaration: string GetArgumentsString() const
        Documentation: Gets all arguments as a single string.
      - Declaration: string GetCommandString() const
        Documentation: Gets the entire command as a string.
      - Declaration: int ArgC() const
        Documentation: Gets the number of arguments.
    Properties: []
  - ClassName: CLog
    Namespace: ''
    Documentation: This class can log data to the Angelscript log file.
    Flags: 262145
    Methods:
      - Declaration: >-
          bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?&
          in, ?& in, ?& in, ?& in)
        Documentation: Prints formatted data to the file. Uses SC printf formatting style.
      - Declaration: >-
          bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?&
          in, ?& in, ?& in)
        Documentation: Prints formatted data to the file. Uses SC printf formatting style.
      - Declaration: >-
          bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?&
          in, ?& in)
        Documentation: Prints formatted data to the file. Uses SC printf formatting style.
      - Declaration: >-
          bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?&
          in)
        Documentation: Prints formatted data to the file. Uses SC printf formatting style.
      - Declaration: bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in, ?& in)
        Documentation: Prints formatted data to the file. Uses SC printf formatting style.
      - Declaration: bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in)
        Documentation: Prints formatted data to the file. Uses SC printf formatting style.
      - Declaration: bool PrintF(const string& in szFormat, ?& in, ?& in)
        Documentation: Prints formatted data to the file. Uses SC printf formatting style.
      - Declaration: bool PrintF(const string& in szFormat, ?& in)
        Documentation: Prints formatted data to the file. Uses SC printf formatting style.
      - Declaration: bool PrintF(const string& in szFormat)
        Documentation: Prints formatted data to the file. Uses SC printf formatting style.
    Properties: []
  - ClassName: NetworkMessage
    Namespace: ''
    Documentation: Network message class. Used to send messages to clients.
    Flags: 33
    Methods:
      - Declaration: void WriteFloat(float flValue)
        Documentation: Writes a float to the buffer.
      - Declaration: void WriteEntity(CBaseEntity@ pEntity)
        Documentation: Writes an entity index to the buffer.
      - Declaration: void WriteEntity(int iEntity)
        Documentation: Writes an entity index to the buffer.
      - Declaration: void WriteString(const string& in szString)
        Documentation: Writes a string to the buffer.
      - Declaration: void WriteVector(const Vector& in vecVector)
        Documentation: Writes a vector to the buffer.
      - Declaration: void WriteCoord(float flValue)
        Documentation: Writes a coordinate to the buffer.
      - Declaration: void WriteAngle(float flValue)
        Documentation: Writes an angle to the buffer.
      - Declaration: void WriteLong(int32 long)
        Documentation: Writes a long to the buffer.
      - Declaration: void WriteShort(int16 short)
        Documentation: Writes a short to the buffer.
      - Declaration: void WriteChar(const string& in szChar)
        Documentation: Writes a character to the buffer.
      - Declaration: void WriteByte(uint8 byte)
        Documentation: Writes a byte to the buffer.
      - Declaration: void End()
        Documentation: Ends the message. Must be called to send the message.
      - Declaration: >-
          NetworkMessage@ NetworkMessage(NetworkMessageDest dest,
          NetworkMessages::NetworkMessageType type, const Vector& in vecOrigin,
          edict_t@ pEdict = null)
        Documentation: Constructor
      - Declaration: >-
          NetworkMessage@ NetworkMessage(NetworkMessageDest dest,
          NetworkMessages::NetworkMessageType type, edict_t@ pEdict = null)
        Documentation: Constructor
    Properties: []
  - ClassName: CAdminControl
    Namespace: ''
    Documentation: Admin control panel.
    Flags: 262145
    Methods:
      - Declaration: >-
          bool SlapPlayer(CBasePlayer@ pSlappee, float flDamage, int iDamageType
          = 0)
        Documentation: Slaps the given player. Slap direction is randomized.
      - Declaration: >-
          bool SlapPlayer(CBasePlayer@ pSlapper, CBasePlayer@ pSlappee, float
          flDamage, int iDamageType = 0)
        Documentation: >-
          Slaps the given player. Slapping player must have admin rights. Target
          player cannot be an admin. Slap direction is randomized.
      - Declaration: >-
          bool SlapPlayer(CBasePlayer@ pSlappee, float flDamage, const Vector&
          in vecDirection, int iDamageType = 0)
        Documentation: Slaps the given player.
      - Declaration: >-
          bool SlapPlayer(CBasePlayer@ pSlapper, CBasePlayer@ pSlappee, float
          flDamage, const Vector& in vecDirection, int iDamageType = 0)
        Documentation: >-
          Slaps the given player. Slapping player must have admin rights. Target
          player cannot be an admin.
      - Declaration: bool BanPlayer(CBasePlayer@ pBannee, const float flCustomBanTime = -1)
        Documentation: Bans the given player.
      - Declaration: >-
          bool BanPlayer(CBasePlayer@ pBanner, CBasePlayer@ pBannee, const float
          flCustomBanTime = -1)
        Documentation: >-
          Bans the given player. Banning player must have admin rights Target
          player cannot be an admin.
      - Declaration: >-
          bool KickPlayer(CBasePlayer@ pKickee, const float flCustomBanTime =
          -1)
        Documentation: Kicks the given player.
      - Declaration: >-
          bool KickPlayer(CBasePlayer@ pKicker, CBasePlayer@ pKickee, const
          float flCustomBanTime = -1)
        Documentation: >-
          Kicks the given player. Kicking player must have admin rights. Target
          player cannot be an admin.
      - Declaration: bool KillPlayer(CBasePlayer@ pKillee, float flRespawntime = -1.0f)
        Documentation: Kills the given player.
      - Declaration: >-
          bool KillPlayer(CBasePlayer@ pKiller, CBasePlayer@ pKillee, float
          flRespawntime = -1.0f)
        Documentation: >-
          Kills the given player. Killing player must have admin rights. Target
          player cannot be an admin.
      - Declaration: uint GetReservedSlots() const
        Documentation: Gets the number of reserved slots.
      - Declaration: void SetReservedSlots(uint uiReservedSlots)
        Documentation: Sets the number of reserved slots.
    Properties: []
  - ClassName: TimeDifference
    Namespace: ''
    Documentation: Represents the difference between 2 times.
    Flags: 7938
    Methods:
      - Declaration: void SetTime(const DateTime& in time)
        Documentation: Sets the time difference to the range between 0 and time.
      - Declaration: >-
          void SetDifferenceBetween(const DateTime& in end, const DateTime& in
          begin)
        Documentation: >-
          Sets the time difference to the range between beginning and end. If
          begin is later than end, is negative.
      - Declaration: void MakeAbsolute()
        Documentation: Makes the time difference absolute.
      - Declaration: int GetYears() const
        Documentation: Gets the time difference in years.
      - Declaration: int GetDays() const
        Documentation: Gets the time difference in days.
      - Declaration: int GetHours() const
        Documentation: Gets the time difference in hours.
      - Declaration: int GetMinutes() const
        Documentation: Gets the time difference in minutes.
      - Declaration: int GetSeconds() const
        Documentation: Gets the time difference in seconds.
      - Declaration: bool IsPositive() const
        Documentation: Returns whether the time difference is positive.
      - Declaration: double GetTimeDifference() const
        Documentation: Gets the time difference
      - Declaration: TimeDifference& opAssign( const DateTime& in time)
        Documentation: Assignment operator
      - Declaration: TimeDifference& opAssign(double timeDiff)
        Documentation: Assignment operator
      - Declaration: TimeDifference& opAssign(const TimeDifference& in other)
        Documentation: Assignment operator
      - Declaration: void TimeDifference(const DateTime& in time)
        Documentation: Sets the time difference to the range between 0 and time.
      - Declaration: void TimeDifference(const DateTime& in end, const DateTime& in begin)
        Documentation: >-
          Sets the time difference to the range between beginning and end. If
          begin is later than end, is negative.
      - Declaration: void TimeDifference(double flValue)
        Documentation: Sets the time difference to the given value, in seconds
      - Declaration: void TimeDifference(const TimeDifference& in other)
        Documentation: Copy constructor
      - Declaration: void TimeDifference()
        Documentation: Default constructor
    Properties: []
  - ClassName: DateTime
    Namespace: ''
    Documentation: |-
      DateTime class.
      Note: milliseconds default to 0 due to limited accuracy.
    Flags: 7938
    Methods:
      - Declaration: DateTime opAdd(const TimeDifference& in diffTime) const
        Documentation: >-
          Adds this DateTime and the given TimeDifferene together, returning a
          copy containing the new time.
      - Declaration: DateTime& opAddAssign(const TimeDifference& in diffTime)
        Documentation: Adds the given TimeDifference to this one.
      - Declaration: TimeDifference opSub(const DateTime& in other) const
        Documentation: >-
          Subtracts the given DateTime from this one, resulting in a
          TimeDifference object.
      - Declaration: int opCmp(const DateTime& in other) const
        Documentation: Comparison operator.
      - Declaration: bool opEquals(const DateTime& in other) const
        Documentation: Returns whether these two DateTimes represent the same time.
      - Declaration: void ToString(string& out szResult) const
        Documentation: Returns a string representation of this datetime.
      - Declaration: int Format(string& out szResult, const string& in szFormat) const
        Documentation: >-
          Formats this datetime as a string.

          Returns the length of the destination string, or 0 if the buffer was
          not large enough.
      - Declaration: void SetIsDst(int iIsDst)
        Documentation: Set daylight savings active.
      - Declaration: void SetYear(int iYear)
        Documentation: Set year.
      - Declaration: void SetMonth(int iMonth)
        Documentation: Set month of the year (1-12).
      - Declaration: void SetDayOfMonth(int iDay)
        Documentation: Set day of the month (1-31).
      - Declaration: void SetHour(int iHours)
        Documentation: Set hours since midnight (0-23).
      - Declaration: void SetMinutes(int iMinutes)
        Documentation: Set minutes after the hour (0-59).
      - Declaration: void SetSeconds(int iSeconds)
        Documentation: Set seconds after the minute including leap second (0-60).
      - Declaration: void SetMilliseconds(uint uiMilliseconds)
        Documentation: Set milliseconds.
      - Declaration: int GetIsDst() const
        Documentation: Get daylight savings active.
      - Declaration: int GetYear() const
        Documentation: Get year.
      - Declaration: int GetMonth() const
        Documentation: Get month of the year (1-12).
      - Declaration: int GetDayOfMonth() const
        Documentation: Get day of the month (1-31).
      - Declaration: int GetHour() const
        Documentation: Get hours since midnight (0-23).
      - Declaration: int GetMinutes() const
        Documentation: Get minutes after the hour (0-59).
      - Declaration: int GetSeconds() const
        Documentation: Get seconds after the minute including leap second (0-60).
      - Declaration: uint GetMilliseconds() const
        Documentation: Get milliseconds.
      - Declaration: void SetUnixTimestamp(time_t time)
        Documentation: Sets time as a unix timestamp.
      - Declaration: time_t ToUnixTimestamp() const
        Documentation: Get time as a unix timestamp.
      - Declaration: DateTime& opAssign(time_t time)
        Documentation: Assignment operator.
      - Declaration: DateTime& opAssign(const DateTime& in ref)
        Documentation: Assignment operator.
      - Declaration: void DateTime(const DateTime& in ref)
        Documentation: Copy constructor.
      - Declaration: void DateTime(time_t time)
        Documentation: Unix timestamp constructor.
      - Declaration: >-
          void DateTime(uint uiMilliseconds, int iSeconds, int iMinutes, int
          iHour, int iDayOfMonth, int iMonth, int iYear)
        Documentation: Init constructor.
      - Declaration: void DateTime()
        Documentation: Default constructor.
    Properties: []
  - ClassName: Vote
    Namespace: ''
    Documentation: Vote class. Can be used to start custom votes.
    Flags: 5
    Methods:
      - Declaration: void ClearUserData()
        Documentation: Clears the user data set on this vote.
      - Declaration: void SetUserData(any@ pUserData)
        Documentation: Sets the user data on this vote.
      - Declaration: any@ GetUserData()
        Documentation: Gets the user data set on this vote.
      - Declaration: void Start()
        Documentation: Starts this vote.
      - Declaration: void SetVoteEndCallback(VoteEnd@ pCallback)
        Documentation: Sets the vote end callback.
      - Declaration: void SetVoteBlockedCallback(VoteBlocked@ pCallback)
        Documentation: Sets the vote blocked callback.
      - Declaration: void SetNoText(const string& in szNoText)
        Documentation: Sets the no button text.
      - Declaration: const string& GetNoText() const
        Documentation: Gets the no button text.
      - Declaration: void SetYesText(const string& in szYesText)
        Documentation: Sets the yes button text.
      - Declaration: const string& GetYesText() const
        Documentation: Gets the yes button text.
      - Declaration: void SetVoteText(const string& in szVoteText)
        Documentation: Sets the vote text.
      - Declaration: const string& GetVoteText() const
        Documentation: Gets the vote text.
      - Declaration: const string& GetName() const
        Documentation: Gets name of this vote.
      - Declaration: >-
          Vote@ Vote(const string& in szName, const string& in szVoteText, float
          flVoteLength, float flPercentageNeeded)
        Documentation: Constructor
    Properties: []
  - ClassName: CTextMenus
    Namespace: ''
    Documentation: Text menu manager.
    Flags: 262145
    Methods: []
    Properties:
      - Declaration: const TextMenuId_t INVALID_TEXT_MENU_ID
        Documentation: Invalid text menu id.
  - ClassName: CTextMenu
    Namespace: ''
    Documentation: Text menu.
    Flags: 5
    Methods:
      - Declaration: void AddItem( const string& in szName, any@ pUserData = null)
        Documentation: Adds an item to the menu.
      - Declaration: void SetTitle(const string& in szTitle)
        Documentation: Sets the title.
      - Declaration: const string& GetTitle() const
        Documentation: Gets the title.
      - Declaration: const CTextMenuItem@ GetItem(const size_t uiIndex) const
        Documentation: Gets the item at the given index.
      - Declaration: uint GetPageCount() const
        Documentation: Gets the number of pages in this menu.
      - Declaration: size_t GetItemCount() const
        Documentation: Gets the number of items in this menu.
      - Declaration: >-
          void Open(const int iDisplayTime, const uint page, CBasePlayer@
          pPlayer)
        Documentation: >-
          Opens the menu and keeps it open for the given amount of time.

          Time must be a positive value. Maximum 255 seconds. Pass 0 for
          infinite.

          You must pass the player that receives this menu.
      - Declaration: >-
          void Open(const int iDisplayTime, const uint page, array<edict_t@>@
          pPlayers = null)
        Documentation: >-
          Opens the menu and keeps it open for the given amount of time.

          Time must be a positive value. Maximum 255 seconds. Pass 0 for
          infinite.

          You can optionally pass a list of players that receive this menu.
      - Declaration: void Unregister()
        Documentation: Unregisters this text menu.
      - Declaration: bool Register()
        Documentation: Registers this text menu.
      - Declaration: bool IsRegistered() const
        Documentation: Returns whether this menu is registered or not.
      - Declaration: TextMenuId_t get_Id() const
        Documentation: >-
          Gets this text menu's id. If CTextMenus::INVALID_TEXT_MENU_ID, this is
          an unregistered menu.
      - Declaration: CTextMenu@ CTextMenu(TextMenuPlayerSlotCallback@ inputCB)
        Documentation: >-
          Constructor. You must pass a player slot callback and handle the input
          yourself.
    Properties: []
  - ClassName: CTextMenuItem
    Namespace: ''
    Documentation: Text menu item. Do not store handles to this object.
    Flags: 262145
    Methods: []
    Properties:
      - Declaration: any@ m_pUserData
        Documentation: User data. For internal use.
      - Declaration: const string m_szName
        Documentation: Item name. Used for display.
  - ClassName: CStartInventory
    Namespace: ''
    Documentation: >-
      Player start inventory manager

      Can be used to modify the player's start inventory during a map

      Always check if inventory modification is available before trying to make
      any changes
    Flags: 262145
    Methods:
      - Declaration: uint GetAmount(const string& in szEntry) const
        Documentation: |-
          Gets the amount of a given entry.
          Returns 0 if the entry doesn't exist.
      - Declaration: bool Limit(const string& in szItem, uint uiAmount)
        Documentation: |-
          Limits the inventory content of the given item to at most uiAmount.
          Does nothing if there is less than uiAmount in the inventory.
      - Declaration: bool Restock(const string& in szItem, uint uiAmount)
        Documentation: |-
          Restocks the inventory with up to uiAmount of the given item.
          Does nothing if the current amount already exceeds the given amount.
      - Declaration: bool Remove(const string& in szEntry)
        Documentation: Removes an entry from the inventory.
      - Declaration: bool Add(const string& in szEntry, uint uiAmount, bool fAdd = true)
        Documentation: |-
          Add or subtract from an existing value.
          Inserts if the value is not already in the inventory.
      - Declaration: void Set(const string& in szEntry)
        Documentation: Set an entry to the inventory.
      - Declaration: void Set(const string& in szItem, uint uiAmount)
        Documentation: |-
          Set an item in the inventory.
          Sets the amount if the item is already in the inventory.
      - Declaration: bool Exists(const string& in szEntry) const
        Documentation: Returns whether the given entry is present in the inventory.
      - Declaration: bool IsAvailable() const
        Documentation: Returns whether inventory modification is available.
    Properties: []
  - ClassName: CPluginManager
    Namespace: ''
    Documentation: Plugin manager for handling basic plugin operations
    Flags: 262145
    Methods:
      - Declaration: array<string>@ GetPluginList() const
        Documentation: Gets the list of plugins as strings.
    Properties: []
  - ClassName: CPersistence
    Namespace: ''
    Documentation: Persistence manager
    Flags: 262145
    Methods:
      - Declaration: void Clear(const PersistID_t ID)
        Documentation: Clears all values.
      - Declaration: void Clear(const PersistID_t ID, const string& in szKey)
        Documentation: Clears the given value.
      - Declaration: void Set(const PersistID_t ID, const string& in szKey, float flValue)
        Documentation: Sets the given value as a string.
      - Declaration: void Set(const PersistID_t ID, const string& in szKey, uint32 uiValue)
        Documentation: Sets the given value as a string.
      - Declaration: void Set(const PersistID_t ID, const string& in szKey, int32 iValue)
        Documentation: Sets the given value as a string.
      - Declaration: void Set(const PersistID_t ID, const string& in szKey, bool fValue)
        Documentation: Sets the given value as a boolean.
      - Declaration: >-
          void Set(const PersistID_t ID, const string& in szKey, const string&
          in szValue)
        Documentation: Sets the given value as a string.
      - Declaration: float GetFloat(const PersistID_t ID, const string& in szKey)
        Documentation: Returns the given value as a float, or 0.0 if it does not exist.
      - Declaration: >-
          uint32 GetUlong(const PersistID_t ID, const string& in szKey, int
          iRadix = 10)
        Documentation: Returns the given value as a unsigned long, or 0 if it does not exist.
      - Declaration: >-
          int32 GetLong(const PersistID_t ID, const string& in szKey, int iRadix
          = 10)
        Documentation: Returns the given value as a long, or 0 if it does not exist.
      - Declaration: bool GetBoolean(const PersistID_t ID, const string& in szKey)
        Documentation: Returns the given value as a boolean, or false if it does not exist.
      - Declaration: const string& GetString(const PersistID_t ID, const string& in szKey)
        Documentation: Returns the given value as a string, or  if it does not exist.
      - Declaration: bool Exists(const PersistID_t ID, const string& in szKey)
        Documentation: Returns whether the given key exists in this instance.
      - Declaration: size_t Size(int iId) const
        Documentation: Returns the number of persisted items in this instance.
      - Declaration: const string& GetName(const PersistID_t ID) const
        Documentation: Returns the name of this instance.
      - Declaration: void Clear()
        Documentation: |-
          Clears all persistence instances.
          Make sure to avoid calling handles referencing the cleared instances.
      - Declaration: void ClearInstance(const PersistID_t ID)
        Documentation: Clears the specified persistence instance.
      - Declaration: void ClearInstance(const string& in szName)
        Documentation: Clears the specified persistence instance.
      - Declaration: const string& GetCurrentMapName() const
        Documentation: Returns the name of the current map.
      - Declaration: const string& GetPreviousMapName() const
        Documentation: >-
          Returns the name of the previous map. Can be empty if the server has
          just started.
      - Declaration: PersistID_t RegisterInstance(const string& in szName)
        Documentation: >-
          Returns a persistence instance tied to the given name. Will be created
          if it does not already exist.
      - Declaration: bool KeepIfPrevious(const string& in szMapName)
        Documentation: >-
          Will make the persistence manager keep the previous map's persistence
          instancesif the previous map's name matches the given map name.
      - Declaration: bool KeepIfPrevious(const array<string>@ pArray)
        Documentation: >-
          Will make the persistence manager keep the previous map's persistence
          instancesif the previous map's name matches any of the elements in the
          array.
      - Declaration: void SetKeep(bool fValue)
        Documentation: Sets whether the previous map's persistence instances will be kept.
      - Declaration: bool ShouldKeep() const
        Documentation: Returns whether the previous map's persistence instances will be kept.
      - Declaration: bool IsValidHandle(const PersistID_t ID) const
        Documentation: Returns whether the given persistence instance handle is valid.
      - Declaration: bool Exists(const string& in szName) const
        Documentation: Returns whether the given persistence instance exists.
    Properties:
      - Declaration: const PersistID_t INVALID_ID
        Documentation: Id used by invalid persistence objects.
  - ClassName: CMap
    Namespace: ''
    Documentation: Map state variables
    Flags: 262145
    Methods:
      - Declaration: bool LoadSkillFile(const string& in szFileName)
        Documentation: Load a custom skill file.
      - Declaration: bool LoadGlobalSkillFile()
        Documentation: Reload the global skill file.
      - Declaration: bool LoadMapSkillFile()
        Documentation: Reload the standard map skill file (_skl.cfg).
      - Declaration: bool HasForcedPlayerModels() const
        Documentation: Get if player models are forced
    Properties: []
  - ClassName: CMapCycle
    Namespace: ''
    Documentation: Map cycle read only manager
    Flags: 262145
    Methods:
      - Declaration: string GetNextMap(const string& in szMapName) const
        Documentation: Gets the next map in the cycle after the given one.
      - Declaration: string GetNextMap() const
        Documentation: Gets the next map in the cycle.
      - Declaration: size_t Count() const
        Documentation: Returns the number of maps in the map cycle.
      - Declaration: array<string>@ GetMapCycle() const
        Documentation: Gets the map cycle as an array of strings.
    Properties: []
  - ClassName: CAngelscript
    Namespace: ''
    Documentation: Angelscript debugging functions
    Flags: 262145
    Methods:
      - Declaration: uint GetMinorVersion() const
        Documentation: Gets the minor version of the Angelscript Sven Co-op implementation
      - Declaration: uint GetMajorVersion() const
        Documentation: Gets the major version of the Angelscript Sven Co-op implementation
      - Declaration: uint GetAngelscriptVersion() const
        Documentation: Gets the current version of Angelscript
      - Declaration: string GetAngelscriptVersionString() const
        Documentation: Gets the current version of Angelscript as a string
      - Declaration: string GetAngelscriptDescription() const
        Documentation: Returns a brief description of Angelscript
    Properties: []
  - ClassName: CGlobalState
    Namespace: ''
    Documentation: Global state manager
    Flags: 262145
    Methods:
      - Declaration: void DumpGlobals() const
        Documentation: Dumps all global state objects to the console
      - Declaration: bool EntityInTable(const string& in globalName) const
        Documentation: Returns whether the global state object is in the table of objects
      - Declaration: const GLOBALESTATE EntityGetState(const string& in globalName) const
        Documentation: Gets the state of the specified global state object
      - Declaration: const GlobalEntity@ EntityFromTable(const string& in globalName) const
        Documentation: Finds a global state object by name
      - Declaration: >-
          void EntityUpdate(const string& in globalName, const string& in
          mapName)
        Documentation: Updates the level name of the specified global state object
      - Declaration: void EntitySetState(const string& in globalName, GLOBALESTATE state)
        Documentation: Sets the state of an existing global state object
      - Declaration: >-
          void EntityAdd(const string& in globalName, const string& in mapName ,
          GLOBALESTATE state)
        Documentation: Adds a new global state object
      - Declaration: void ClearStates()
        Documentation: Clears all global states
    Properties: []
  - ClassName: GlobalEntity
    Namespace: ''
    Documentation: Global state entity
    Flags: 262145
    Methods:
      - Declaration: string levelName() const
        Documentation: Name of the level where this global state was last updated
      - Declaration: string name() const
        Documentation: Gets the name of this global state
    Properties:
      - Declaration: GlobalEntity@ next
        Documentation: Next global state entity in the list
      - Declaration: GLOBALESTATE state
        Documentation: Global state of this entity
  - ClassName: CWeaponFuncs
    Namespace: ''
    Documentation: Weapon functions class.
    Flags: 262145
    Methods:
      - Declaration: >-
          void RadiusDamage(const Vector& in vecSrc, entvars_t@ pevInflictor,
          entvars_t@ pevAttacker, float flDamage, float flRadius, int
          iClassIgnore, int bitsDamageType)
        Documentation: Deals radius damage.
      - Declaration: int DamageDecal(CBaseEntity@ pEntity, int bitsDamageType)
        Documentation: Creates a damage decal on the given entity.
      - Declaration: >-
          void SpawnBlood(const Vector& in vecSpot, int bloodColor, float
          flDamage)
        Documentation: Spawns blood at the given location.
      - Declaration: void DecalGunshot(TraceResult& in trace, int iBulletType)
        Documentation: Creates a gunshot decal at the trace hit point.
      - Declaration: float WeaponTimeBase()
        Documentation: Gets the weapon time base.
      - Declaration: >-
          void AddMultiDamage(entvars_t@ pevInflictor, CBaseEntity@ pEntity,
          float flDamage, int bitsDamageType)
        Documentation: Add multi damage.
      - Declaration: void ApplyMultiDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker)
        Documentation: Applies multi damage.
      - Declaration: void ClearMultiDamage()
        Documentation: Clears the multi damage data.
    Properties: []
  - ClassName: CPlayerFuncs
    Namespace: ''
    Documentation: Global player functions
    Flags: 262145
    Methods:
      - Declaration: ' void BotDisconnect(CBasePlayer@ pBot)'
        Documentation: >-
          Disconnects the bot. This will call ClientDisconnect and removes the
          entity. Do not use the entity after this call.
      - Declaration: CBasePlayer@ CreateBot(const string& in szName)
        Documentation: Creates a bot with the given name.
      - Declaration: int GetAmmoIndex(const string& in szAmmoName)
        Documentation: Gets the index of the given ammo, or -1 if it is invalid
      - Declaration: float SharedRandomFloat(uint iRandomSeed, float iLow, float iHigh)
        Documentation: >-
          Gets a random float whose value is the same on both the client and
          server.
      - Declaration: int SharedRandomLong(uint iRandomSeed, int iLow, int iHigh)
        Documentation: >-
          Gets a random long whose value is the same on both the client and
          server.
      - Declaration: bool IsSpawnPointOccupied(CBaseEntity@ pSpawnEnt)
        Documentation: Returns whether the given spawn point entity is occupied
      - Declaration: bool IsSpawnPointValid(CBaseEntity@ pSpawnEnt, CBaseEntity@ pPlayer)
        Documentation: Returns whether the given spawn point is valid for the given player
      - Declaration: >-
          bool SpawnPointFilterPasses(CBaseEntity@ pSpawnEnt, CBaseEntity@
          pPlayer)
        Documentation: Returns whether the given player passes the given spawn point's filter
      - Declaration: >-
          void RespawnAllPlayers(bool fMoveLivingPlayers = true, bool
          fRespawnDeadPlayers = false)
        Documentation: >-
          Relocates all players to active spawn points. If a player is dead and
          fRespawnDeadPlayers is true, the player is respawned.
      - Declaration: >-
          void RespawnPlayer(CBasePlayer@ pPlayer, bool fMoveLivingPlayers =
          true, bool fRespawnDeadPlayers = false)
        Documentation: >-
          Relocates the given player to an active spawn point. If the player is
          dead and fRespawnDeadPlayers is true, the player is respawned.
      - Declaration: void ApplyMapCfgToPlayer(CBasePlayer@ pPlayer, bool fReEquip = false)
        Documentation: >-
          Applies the map configuration on the given player.

          Will stack if called multiple times, unless fReEquip is true, in which
          case the player is stripped of all weapons and ammo first.
      - Declaration: AdminLevel_t StringToAdminLevel(const string& in szString) const
        Documentation: >-
          Converts a string containing one of AdminLevelToString's return values
          to an admin level.Returns ADMIN_NO if the string cannot be converted
          to a suitable constant
      - Declaration: string AdminLevelToString(const AdminLevel_t adminLevel) const
        Documentation: >-
          Converts the admin level to a string. If the level is an invalid
          value, an empty string is returned
      - Declaration: AdminLevel_t AdminLevel(CBasePlayer@ pPlayer) const
        Documentation: Returns the admin level for a given player.
      - Declaration: >-
          bool CheatsAllowed(CBasePlayer@ pPlayer, const string& in szCheatName,
          bool fMustBeAlive = true, bool fNoMessage = false) const
        Documentation: Returns whether cheats are enabled for the given player.
      - Declaration: >-
          bool GetNextBestWeapon(CBasePlayer@ pPlayer, CBasePlayerItem@
          pCurrentWeapon)
        Documentation: >-
          Makes the given player select the next best weapon available, based on
          the current weapon.
      - Declaration: >-
          void ConcussionEffect(CBaseEntity@ pEntity, float amplitude, float
          frequency, float fadeTime)
        Documentation: Applies concussion effect to a given player.
      - Declaration: >-
          void ScreenFadeAll(const Vector& in color, float fadeTime, float
          fadeHold, int alpha, int flags)
        Documentation: Shows a message to all players.
      - Declaration: >-
          void ScreenFade(CBaseEntity@ pEntity, const Vector& in color, float
          fadeTime, float fadeHold, int alpha, int flags)
        Documentation: Shows a message to a given player.
      - Declaration: >-
          void ScreenShakeAll(const Vector& in center, float amplitude, float
          frequency, float duration)
        Documentation: Shakes the screen for all players
      - Declaration: >-
          void ScreenShake(const Vector& in center, float amplitude, float
          frequency, float duration, float radius)
        Documentation: Shakes the screen for players near a certain location
      - Declaration: int GetNumPlayers() const
        Documentation: Gets the number of players that are currently connected to the server.
      - Declaration: >-
          CBasePlayer@ FindPlayerByName(const string& in szName, bool
          bCaseSensitive = true)
        Documentation: Finds a player by name
      - Declaration: CBasePlayer@ FindPlayerByIndex(int index)
        Documentation: Finds a player by index
      - Declaration: >-
          void HudUpdateTime(CBasePlayer@ pTargetPlayer, uint8 iChannel, float
          flTime)
        Documentation: Updates value of a custom time display.
      - Declaration: >-
          void HudTimeDisplay(CBasePlayer@ pTargetPlayer, const
          HUDNumDisplayParams& in params)
        Documentation: >-
          Shows a custom time display to a given player or to all players if
          pTargetPlayer is not specified.
      - Declaration: >-
          void HudUpdateNum(CBasePlayer@ pTargetPlayer, uint8 iChannel, float
          flValue)
        Documentation: Updates value of a custom numberic display.
      - Declaration: >-
          void HudNumDisplay(CBasePlayer@ pTargetPlayer, const
          HUDNumDisplayParams& in params)
        Documentation: >-
          Shows a custom numeric display to a given player or to all players if
          pTargetPlayer is not specified.
      - Declaration: >-
          void HudCustomSprite(CBasePlayer@ pTargetPlayer, const
          HUDSpriteParams& in params)
        Documentation: >-
          Shows a custom HUD sprite to a given player or to all players if
          pTargetPlayer is not specified.
      - Declaration: >-
          void HudToggleElement(CBasePlayer@ pTargetPlayer, uint8 iChannel, bool
          fVisible)
        Documentation: Shows or hides HUD element occupying a given channel.
      - Declaration: void PrintKeyBindingStringAll(const string& in szString)
        Documentation: Prints a string containing key bindings to the screen of all players.
      - Declaration: >-
          void PrintKeyBindingString(CBasePlayer@ pPlayer, const string& in
          szString)
        Documentation: >-
          Prints a string containing key bindings to the screen of the given
          player.
      - Declaration: >-
          void HudMessageAll(const HUDTextParams& in textParams, const string&
          in szMessage)
        Documentation: Shows a HUD message to all players.
      - Declaration: >-
          void HudMessage(CBasePlayer@ pTargetPlayer, const HUDTextParams& in
          textParams, const string& in szMessage)
        Documentation: Shows a HUD message to a given player.
      - Declaration: void ShowMessageAll(const string& in szString)
        Documentation: Shows a message to all players.
      - Declaration: >-
          void ShowMessage(CBasePlayer@ pTargetPlayer, const string& in
          szString)
        Documentation: Shows a message to the given player.
      - Declaration: >-
          void CenterPrintAll(const string& in szMessage, const string& in
          szLine2 = "", const string& in szLine3 = "", const string& in szLine4
          = "", const string& in szLine5 = "")
        Documentation: Prints one or more messages centered on the HUD of all players.
      - Declaration: >-
          void ClientPrintAll(HUD iMsgDest, const string& in szMessage, const
          string& in szLine2 = "", const string& in szLine3 = "", const string&
          in szLine4 = "", const string& in szLine5 = "")
        Documentation: |-
          Prints one or more messages on the HUD of all players.
          See HUD enum.
      - Declaration: >-
          void ClientPrint(CBasePlayer@ pTargetPlayer, HUD iMsgDest, const
          string& in szMessage, const string& in szLine2 = "", const string& in
          szLine3 = "", const string& in szLine4 = "", const string& in szLine5
          = "")
        Documentation: |-
          Prints one or more messages on the HUD of the given player.
          See HUD enum.
      - Declaration: >-
          void SayTextAll(CBasePlayer@ pOriginatingPlayer, const string& in
          szText)
        Documentation: Says text to all players
      - Declaration: void SayText(CBasePlayer@ pTargetPlayer, const string& in szText)
        Documentation: Says text to a specific player
    Properties: []
  - ClassName: HUDNumDisplayParams
    Namespace: ''
    Documentation: Holds parameters for custom numeric/time display.
    Flags: 2
    Methods:
      - Declaration: HUDNumDisplayParams& opAssign(const HUDNumDisplayParams& in other)
        Documentation: Assignment operator
      - Declaration: void HUDNumDisplayParams(const HUDNumDisplayParams& in other)
        Documentation: Copy constructor
      - Declaration: void HUDNumDisplayParams()
        Documentation: Constructor
    Properties:
      - Declaration: int16 height
        Documentation: |-
          Sprite height
          Range: 0-512 (0: auto; use total height of the sprite)
      - Declaration: int16 width
        Documentation: |-
          Sprite width
          Range: 0-512 (0: auto; use total width of the sprite)
      - Declaration: uint8 top
        Documentation: |-
          Sprite top offset
          Range: 0-255
      - Declaration: uint8 left
        Documentation: |-
          Sprite left offset
          Range: 0-255
      - Declaration: string_t spritename
        Documentation: Sprite name
      - Declaration: uint8 effect
        Documentation: |-
          Effect
          See HUD_EFFECT enum.
      - Declaration: float fxTime
        Documentation: Effect time
      - Declaration: float holdTime
        Documentation: Hold time
      - Declaration: float fadeoutTime
        Documentation: Fade out time
      - Declaration: float fadeinTime
        Documentation: Fade in time
      - Declaration: RGBA color2
        Documentation: Color 2
      - Declaration: RGBA color1
        Documentation: Color 1
      - Declaration: float y
        Documentation: |-
          Vertical position on the screen.
          <0, 1.0> = top to bottom
          (-1.0, 0) = bottom to top
          -1.0 = centered
      - Declaration: float x
        Documentation: |-
          Horizontal position on the screen.
          <0, 1.0> = left to right
          (-1.0, 0) = right to left
          -1.0 = centered
      - Declaration: uint8 maxdigits
        Documentation: Maximum number of digits (numeric display only)
      - Declaration: uint8 defdigits
        Documentation: Default number of digits (numeric display only)
      - Declaration: float value
        Documentation: Value
      - Declaration: int flags
        Documentation: >-
          Flags

          See HUD_ELEM, HUD_NUM (numeric display only) and HUD_TIME (time
          display only) enums.
      - Declaration: uint8 channel
        Documentation: |-
          Channel.
          Range: 0-15 (each module type has its own channel group).
  - ClassName: HUDSpriteParams
    Namespace: ''
    Documentation: Holds parameters for custom sprite.
    Flags: 2
    Methods:
      - Declaration: HUDSpriteParams& opAssign(const HUDSpriteParams& in other)
        Documentation: Assignment operator
      - Declaration: void HUDSpriteParams(const HUDSpriteParams& in other)
        Documentation: Copy constructor
      - Declaration: void HUDSpriteParams()
        Documentation: Constructor
    Properties:
      - Declaration: uint8 effect
        Documentation: |-
          Effect
          See HUD_EFFECT enum.
      - Declaration: float fxTime
        Documentation: Effect time
      - Declaration: float holdTime
        Documentation: Hold time
      - Declaration: float fadeoutTime
        Documentation: Fade out time
      - Declaration: float fadeinTime
        Documentation: Fade in time
      - Declaration: float framerate
        Documentation: Framerate
      - Declaration: uint8 numframes
        Documentation: Number of frames
      - Declaration: uint8 frame
        Documentation: Frame
      - Declaration: RGBA color2
        Documentation: Color 2
      - Declaration: RGBA color1
        Documentation: Color 1
      - Declaration: float y
        Documentation: |-
          Vertical position on the screen.
          <0, 1.0> = top to bottom
          (-1.0, 0) = bottom to top
          -1.0 = centered
      - Declaration: float x
        Documentation: |-
          Horizontal position on the screen.
          <0, 1.0> = left to right
          (-1.0, 0) = right to left
          -1.0 = centered
      - Declaration: int16 height
        Documentation: |-
          Sprite height
          Range: 0-512 (0: auto; use total height of the sprite)
      - Declaration: int16 width
        Documentation: |-
          Sprite width
          Range: 0-512 (0: auto; use total width of the sprite)
      - Declaration: uint8 top
        Documentation: |-
          Sprite top offset
          Range: 0-255
      - Declaration: uint8 left
        Documentation: |-
          Sprite left offset
          Range: 0-255
      - Declaration: string_t spritename
        Documentation: Sprite name
      - Declaration: int flags
        Documentation: |-
          Flags
          See HUD_ELEM and HUD_SPR enums.
      - Declaration: uint8 channel
        Documentation: |-
          Channel.
          Range: 0-15 (each module type has its own channel group).
  - ClassName: HUDTextParams
    Namespace: ''
    Documentation: Parameters for text output to the HUD.
    Flags: 2
    Methods:
      - Declaration: HUDTextParams& opAssign(const HUDTextParams& in other)
        Documentation: Assignment operator
      - Declaration: void HUDTextParams(const HUDTextParams& in other)
        Documentation: Copy constructor
      - Declaration: void HUDTextParams()
        Documentation: Constructor
    Properties:
      - Declaration: int channel
        Documentation: Channel. 1-4.
      - Declaration: float fxTime
        Documentation: Effect time (scan effect only)
      - Declaration: float holdTime
        Documentation: Hold time
      - Declaration: float fadeoutTime
        Documentation: Fade out time
      - Declaration: float fadeinTime
        Documentation: Fade in time
      - Declaration: uint8 a2
        Documentation: Alpha 2
      - Declaration: uint8 b2
        Documentation: Blue 2
      - Declaration: uint8 g2
        Documentation: Green 2
      - Declaration: uint8 r2
        Documentation: Red 2
      - Declaration: uint8 a1
        Documentation: Alpha 1
      - Declaration: uint8 b1
        Documentation: Blue 1
      - Declaration: uint8 g1
        Documentation: Green 1
      - Declaration: uint8 r1
        Documentation: Red 1
      - Declaration: int effect
        Documentation: |-
          Effects.
          0 : Fade In/Out
          1 : Credits
          2 : Scan Out
      - Declaration: float y
        Documentation: |-
          Vertical position on the screen.
          <0, 1.0> = top to bottom
          (-1.0, 0) = bottom to top
          -1.0 = centered
      - Declaration: float x
        Documentation: |-
          Horizontal position on the screen.
          <0, 1.0> = left to right
          (-1.0, 0) = right to left
          -1.0 = centered
  - ClassName: CEntityFuncs
    Namespace: ''
    Documentation: Global entity functions
    Flags: 262145
    Methods:
      - Declaration: void PrecacheMaterialSounds(const Materials material)
        Documentation: Precaches the sounds used by a particular material
      - Declaration: CBaseEntity@ RandomTargetname(const string& in szTargetname)
        Documentation: Returns a randomly selected entity that has the given target name.
      - Declaration: ScriptClassInterface@ CastToScriptClass(CBaseEntity@ pEntity)
        Documentation: >-
          Casts an CBaseEntity@ representing a custom entity to the
          ScriptClassBaseClass type
      - Declaration: >-
          void EjectBrass(const Vector& in vecOrigin, const Vector& in
          vecVelocity, float flRotation, int iModel, TE_BOUNCE soundtype)
        Documentation: tosses a brass shell from passed origin at passed velocity.
      - Declaration: edict_t@ IndexEnt(int iEdictNum)
        Documentation: Gets the edict for the given index.
      - Declaration: int EntIndex(edict_t@ pEdict)
        Documentation: Gets the index for the given edict.
      - Declaration: bool IsValidEntity(edict_t@ pEntity)
        Documentation: Returns whether this is a valid entity.
      - Declaration: void Remove(CBaseEntity@ pEntity)
        Documentation: Removes the given entity before the next frame starts.
      - Declaration: >-
          bool IsMasterTriggered(const string& in szMaster, CBaseEntity@
          pActivator)
        Documentation: >-
          Returns whether the master with the given name would be triggered if
          activated by the given entity.
      - Declaration: >-
          void FireTargets(const string& in szTargetName, CBaseEntity@
          pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue =
          0.0f, float flDelay = 0.0f)
        Documentation: >-
          Triggers targets. If flDelay is nonzero, causes a temporary entity to
          be spawned to trigger the target at the given time.

          The temporary entity becomes the caller, not the entity passed in.
      - Declaration: CBaseEntity@ Instance(int iEdictNum)
        Documentation: Gets the entity instance based on an edict number
      - Declaration: CBaseEntity@ Instance(entvars_t@ vars)
        Documentation: Gets the entity instance of an entvars instance
      - Declaration: CBaseEntity@ Instance(edict_t@ edict)
        Documentation: Gets the entity instance of an edict instance
      - Declaration: void DispatchObjectCollisionBox(edict_t@ entity)
        Documentation: Dispatches the initialization of the collision box of an entity
      - Declaration: >-
          bool EntvarsKeyvalue(edict_t@ entity, const string& in szKeyName,
          const string& in szValue)
        Documentation: >-
          Handles the initialization of keyvalues located in the entity's
          entvars_t object.
      - Declaration: >-
          bool DispatchKeyValue(edict_t@ entity, const string& in szKeyName,
          const string& in szValue)
        Documentation: Dispatches the passing of a key value pair to an entity
      - Declaration: int DispatchSpawn(edict_t@ entity)
        Documentation: Dispatches the spawning of an entity
      - Declaration: >-
          int BrushEntsInBox(array<CBaseEntity@>@ pArray, const Vector& in mins,
          const Vector& in maxs )
        Documentation: Finds brush entities in a box
      - Declaration: >-
          int TargetsInBox(array<CBaseEntity@>@ pArray, const Vector& in mins,
          const Vector& in maxs)
        Documentation: Finds targets in a box
      - Declaration: >-
          int EntitiesInBox(array<CBaseEntity@>@ pArray, const Vector& in mins,
          const Vector& in maxs, int flagMask)
        Documentation: Finds entities in a box
      - Declaration: >-
          int MonstersInSphere(array<CBaseEntity@>@ pArray, const Vector& in
          vecCenter, float flRadius)
        Documentation: Finds monsters in a sphere
      - Declaration: >-
          CBaseEntity@ FindEntityGeneric(const string& in szName, const Vector&
          in vecSrc, float flRadius)
        Documentation: Finds an entity by target name in a sphere
      - Declaration: >-
          CBaseEntity@ FindEntityByTargetname(CBaseEntity@ startEntity, const
          string& in name)
        Documentation: Finds an entity by target name
      - Declaration: >-
          CBaseEntity@ FindEntityByClassname(CBaseEntity@ startEntity, const
          string& in name)
        Documentation: Finds an entity by class name
      - Declaration: >-
          CBaseEntity@ FindEntityByString(CBaseEntity@ pStartEntity,const
          string& in szKeyword, const string& in szValue)
        Documentation: Finds an entity based on a key value pair
      - Declaration: >-
          CBaseEntity@ FindEntityInSphere(CBaseEntity@ pStartEntity, const
          Vector& in vecCenter, float flRadius,const string& in szValue = "",
          const string& in szKeyword = "targetname")
        Documentation: Finds an entity in a sphere
      - Declaration: >-
          void SetSize(entvars_t@ pev, const Vector& in vecMin, const Vector& in
          vecMax)
        Documentation: Set the size of an entity
      - Declaration: void SetModel(CBaseEntity@ entity, const string& in szFileName)
        Documentation: Set the model of an entity
      - Declaration: void SetOrigin(CBaseEntity@ entity, const Vector& in vecOrigin)
        Documentation: Set the origin of an entity
      - Declaration: >-
          void SpawnStickyGibs(entvars_t@ pevVictim, const Vector& in vecOrigin,
          int cGibs)
        Documentation: |-
          Spawns sticky gibs for the target victim.
          cGibs specifies how many gibs there are.
      - Declaration: void SpawnRandomGibs(entvars_t@ pevVictim, int cGibs, int iHuman)
        Documentation: |-
          Spawns random gibs for the target victim.
          iHuman specifies whether the gibs are human or alien.
      - Declaration: void SpawnHeadGib(entvars_t@ pevVictim)
        Documentation: Spawns a head gib for the target victim.
      - Declaration: void UseSatchelCharges(entvars_t@ pevOwner, SATCHELCODE code)
        Documentation: >-
          Triggers all satchel charges owned by pevOwner to either be released
          from ownership, or detonated.
      - Declaration: >-
          CGrenade@ ShootBananaCluster(entvars_t@ pevOwner, const Vector& in
          vecStart, const Vector& in vecVelocity)
        Documentation: Spawn a banana bomb.
      - Declaration: >-
          CGrenade@ ShootMortar(entvars_t@ pevOwner, const Vector& in vecStart,
          const Vector& in vecVelocity)
        Documentation: Spawns a mortar grenade.
      - Declaration: >-
          CGrenade@ ShootContact(entvars_t@ pevOwner, const Vector& in vecStart,
          const Vector& in vecVelocity)
        Documentation: Spawns a contact grenade.
      - Declaration: >-
          CGrenade@ ShootTimed(entvars_t@ pevOwner, const Vector& in vecStart,
          const Vector& in vecVelocity, float flTime)
        Documentation: Spawns a timed grenade.
      - Declaration: >-
          CGib@ CreateGib( const Vector& in vecOrigin, const Vector& in
          vecAngles)
        Documentation: Creates a server side gib.
      - Declaration: >-
          CBaseEntity@ CreateRPGRocket(const Vector& in vecOrigin, const Vector&
          in vecAngles, const Vector& in vecVelocity, edict_t@ pOwner)
        Documentation: Creates an rpg rocket with custom velocity.
      - Declaration: >-
          CBaseEntity@ CreateRPGRocket(const Vector& in vecOrigin, const Vector&
          in vecAngles, edict_t@ pOwner)
        Documentation: Creates an rpg rocket.
      - Declaration: >-
          CBaseEntity@ CreateDisplacerPortal(const Vector& in vecOrigin, const
          Vector& in vecVelocity, edict_t@ pOwner, float flDamage, float
          flRadius)
        Documentation: Creates a displacer portal.
      - Declaration: >-
          void CreateExplosion(const Vector& in vecCenter, const Vector& in
          vecAngles, edict_t@ pOwner, int iMagnitude, bool fDoDamage)
        Documentation: >-
          Creates an explosion.

          If fDoDamage is true, also deals damage to entities within its effect
          radius, which is determined by the magnitude.
      - Declaration: CBeam@ CreateBeam(const string& in szSpriteName, int width)
        Documentation: Creates a beam entity with the given sprite and width set.
      - Declaration: >-
          CSprite@ CreateSprite(const string& in szSpriteName, const Vector& in
          vecOrigin, bool fAnimated, float flFrameRate = 10.0f)
        Documentation: >-
          Creates a sprite. flFrameRate must be set to a valid value to animate
          the sprite.
      - Declaration: >-
          void CreateDecal(const string& in szDecalName, const Vector& in
          vecOrigin, const string& in szTargetName = "")
        Documentation: >-
          Creates a decal with the specified name.

          If given a name, has to be triggered to be placed, otherwise, is
          placed immediately.
      - Declaration: >-
          CBaseEntity@ Create(const string& in szClassname, const Vector& in
          vecOrigin, const Vector& in vecAngles, bool fCreateAndDontSpawn,
          edict_t@ entOwner = null)
        Documentation: Creates an entity by class name.
      - Declaration: >-
          CBaseEntity@ CreateEntity(const string& in szClassName, dictionary@
          pDictionary = null, bool fSpawn = true)
        Documentation: >-
          Create an entity by class name. Pass keyvalues in using the
          dictionary, if any. Keyvalues must be strings.

          The class name can be either one of the entities included with the
          game or a custom entity.
    Properties: []
  - ClassName: CEngine
    Namespace: ''
    Documentation: Engine global variables
    Flags: 262145
    Methods: []
    Properties:
      - Declaration: const int maxEntities
        Documentation: Maximum entities
      - Declaration: const int maxClients
        Documentation: Maximum connected clients
      - Declaration: int cdAudioTrack
        Documentation: CD audio track
      - Declaration: const int msg_entity
        Documentation: Message entity
      - Declaration: const int trace_flags
        Documentation: Trace flags
      - Declaration: const int trace_hitgroup
        Documentation: Trace hit group
      - Declaration: const float trace_inwater
        Documentation: Trace is in water flag
      - Declaration: const float trace_inopen
        Documentation: Trace is in open flag
      - Declaration: const edict_t@ trace_ent
        Documentation: Trace entity
      - Declaration: const float trace_plane_dist
        Documentation: Trace plane distance
      - Declaration: const Vector trace_plane_normal
        Documentation: Trace plane normal
      - Declaration: const Vector trace_endpos
        Documentation: Trace end position
      - Declaration: const float trace_fraction
        Documentation: Trace fraction
      - Declaration: const float trace_startsolid
        Documentation: Trace start is solid flag
      - Declaration: const float trace_allsolid
        Documentation: Trace all is solid flag
      - Declaration: const Vector v_right
        Documentation: Right vector
      - Declaration: const Vector v_up
        Documentation: Up vector
      - Declaration: const Vector v_forward
        Documentation: Forward vector
      - Declaration: float found_secrets
        Documentation: Found secrets
      - Declaration: const float serverflags
        Documentation: Server flags
      - Declaration: float teamplay
        Documentation: Flag telling whether this is teamplay
      - Declaration: float coop
        Documentation: Flag telling whether this is coop
      - Declaration: float deathmatch
        Documentation: Flag telling whether this is deathmatch
      - Declaration: const string_t startspot
        Documentation: Start location in the map
      - Declaration: const string_t mapname
        Documentation: Name of the current map
      - Declaration: float force_retouch
        Documentation: >-
          How many times to force all entities to retouch entities they are
          currently touching/intersecting. Should always be >= 0.
      - Declaration: const float frametime
        Documentation: Time between frames
      - Declaration: const float time
        Documentation: Current time
  - ClassName: CSoundEngine
    Namespace: ''
    Documentation: >-
      Sound engine.

      Can either play sounds given to it directly, or use sound replacement to
      look up a replacement sample.
    Flags: 262145
    Methods:
      - Declaration: char FindMaterialType(const string& in szMaterial) const
        Documentation: Maps the texture name to a material type. See the TextureType enum.
      - Declaration: >-
          float PlayHitSound( TraceResult& in tr, const Vector& in vecSrc, const
          Vector& in vecEnd, int iBulletType )
        Documentation: >-
          Plays a hit sound based on the trace result's hit target. Returns the
          volume at which the hit is being played.
      - Declaration: >-
          void EmitAmbientSound(edict_t@ entity, const Vector& in vecOrigin,
          const string& in szSample,float flVolume, float flAttenuation, int
          fFlags, int iPitch)
        Documentation: Plays a sentence group sequentially
      - Declaration: >-
          int PlaySentenceGroupSequential(edict_t@ entity, const string& in
          szGroupName,float volume, float attenuation, int flags, int pitch, int
          ipick, const bool bReset)
        Documentation: Plays a sentence group sequentially
      - Declaration: >-
          int PlaySentenceGroup(edict_t@ entity, int iGroupIndex, float volume,
          float attenuation, int flags, int pitch)
        Documentation: Plays a sentence group
      - Declaration: >-
          int PlaySentenceGroup(edict_t@ entity, const string& in szGroupName,
          float volume, float attenuation, int flags, int pitch)
        Documentation: Plays a sentence group
      - Declaration: int LookupSentenceGroupIndex(const string& in szGroup)
        Documentation: Looks up the sentence group index of the given sentence
      - Declaration: int LookupSentenceIndex(const string& in sentenceName)
        Documentation: Looks up the sentence index of the given sentence
      - Declaration: void EmitGroupNameSuit(edict_t@ entity, const string& in szSample)
        Documentation: Play a sentence, randomly selected from the passed in groupname.
      - Declaration: void EmitGroupIdSuit(edict_t@ entity, int isentencereg)
        Documentation: >-
          Play a sentence, randomly selected from the passed in group id, over
          the HEV suit speaker.
      - Declaration: void EmitSoundSuit(edict_t@ entity, const string& in szSample)
        Documentation: >-
          Play a specific sentence over the HEV suit speaker - just pass player
          entity, and !sentencename.
      - Declaration: >-
          void EmitSound(edict_t@ entity, SOUND_CHANNEL channel, const string&
          in szSample, float flVolume, float flAttenuation)
        Documentation: >-
          Plays the given sound with the given parameters. Sound replacement
          will affect this.
      - Declaration: >-
          void EmitSoundDyn(edict_t@ entity, SOUND_CHANNEL channel, const
          string& in szSample,float flVolume, float flAttenuation, int iFlags =
          0, int iPitch = PITCH_NORM, int target_ent_unreliable = 0)
        Documentation: >-
          Plays the given sound with the given parameters. Sound replacement
          will affect this.
      - Declaration: >-
          void StopSound(edict_t@ entity, SOUND_CHANNEL channel, const string&
          in szSample, const bool fUseSoundReplacement = true)
        Documentation: >-
          Stops the given sound on the given entity on the given channel. If the
          sound was started using PlaySound, set fUseSoundReplacement to false.
      - Declaration: >-
          void PlaySound(edict_t@ entity, SOUND_CHANNEL channel, const string&
          in sample,float volume, float attenuation, int flags = 0, int pitch =
          PITCH_NORM,int target_ent_unreliable = 0, bool setOrigin = false,
          const Vector& in vecOrigin = g_vecZero)
        Documentation: >-
          Plays the given sound with the given parameters. Sound replacement is
          not used here.
      - Declaration: >-
          string FindSoundReplacementSample(CBaseEntity@ pEntity, const string&
          in szSample) const
        Documentation: >-
          Finds the sound replacement sample for the given entity and sample.If
          the sample is replaced, it will return the sample used instead.
          Otherwise, szSample is returned.
      - Declaration: void PrecacheSound(CBaseEntity@ pEntity, const string& in szFilename)
        Documentation: >-
          Precaches the given sound for the given entity. Supports entity sound
          replacement.

          Must be called in MapInit
      - Declaration: void PrecacheSound(const string& in szFilename)
        Documentation: |-
          Precaches the given sound.
          Must be called in MapInit
    Properties: []
  - ClassName: CGame
    Namespace: ''
    Documentation: Game functions
    Flags: 262145
    Methods:
      - Declaration: uint32 GetGameVersion() const
        Documentation: >-
          Returns the game version as a number, e.g. 500:

          major version, minor version (3.0 becomes 300, 4.0b1 becomes 401, 4.06
          becomes 406, 4.5 becomes 450, etc...)
      - Declaration: string GetGameVersionString() const
        Documentation: Returns the game version as a string, e.g. "5.0".
      - Declaration: string GetGameName() const
        Documentation: Returns the game name.
      - Declaration: void PrecacheGeneric(const string& in szFileName)
        Documentation: Precaches a file for download to clients.
      - Declaration: void PrecacheMonster(const string& in szClassName, bool fAlly)
        Documentation: >-
          Precaches a monster entity.

          This effectively instances a monster entity with the given class name,
          calls precache on it, and removes the entity.
      - Declaration: void PrecacheOther(const string& in szClassName)
        Documentation: >-
          Precaches an entity.

          This effectively instances an entity with the given class name, calls
          precache on it, and removes the entity.
      - Declaration: int PrecacheModel(CBaseEntity@ pEntity, const string& in szFileName)
        Documentation: |-
          Precaches a model.
          Shuts down the game if not found.
          Can only be called from entity Precache methods.
      - Declaration: int PrecacheModel(const string& in szFileName)
        Documentation: |-
          Precaches a model.
          Shuts down the game if not found.
          Can only be called from MapInit.
      - Declaration: >-
          bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in,
          ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Outputs a message to the console. Uses SC printf formatting style.
      - Declaration: >-
          bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in,
          ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Outputs a message to the console. Uses SC printf formatting style.
      - Declaration: >-
          bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in,
          ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Outputs a message to the console. Uses SC printf formatting style.
      - Declaration: >-
          bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in,
          ?& in, ?& in, ?& in, ?& in)
        Documentation: Outputs a message to the console. Uses SC printf formatting style.
      - Declaration: >-
          bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in,
          ?& in, ?& in, ?& in)
        Documentation: Outputs a message to the console. Uses SC printf formatting style.
      - Declaration: >-
          bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in,
          ?& in, ?& in)
        Documentation: Outputs a message to the console. Uses SC printf formatting style.
      - Declaration: >-
          bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in,
          ?& in)
        Documentation: Outputs a message to the console. Uses SC printf formatting style.
      - Declaration: bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in)
        Documentation: Outputs a message to the console. Uses SC printf formatting style.
      - Declaration: bool AlertMessage(ALERT_TYPE aType, const string& in szFormat)
        Documentation: Outputs a message to the console. Uses SC printf formatting style.
    Properties: []
  - ClassName: CUtility
    Namespace: ''
    Documentation: Utility methods
    Flags: 262145
    Methods:
      - Declaration: string GetPlayerLog(edict_t@ pPlayerEdict) const
        Documentation: Get a player log string.
      - Declaration: >-
          string BuildPlayerLogString(const string& in szName, const string& in
          szUserID = NULL, const string& in szAuthID = NULL) const
        Documentation: Builds a generic player log string.
      - Declaration: >-
          string BuildEntityLogString(const string& in szName, const string& in
          szUserID = NULL, const string& in szAuthID = NULL, const string& in
          szTeam = NULL) const
        Documentation: Builds a generic entity log string.
      - Declaration: >-
          void FindHullIntersection(const Vector& in vecSrc, TraceResult& in
          inTr, TraceResult& out outTr,const Vector& in vecMins, const Vector&
          in vecMaxs, edict_t@ pEntity, float flDistance = 1e6f)
        Documentation: >-
          Finds the hull intersection from a traceline in a given set of bounds.
          The bounds are relative to the input traceline's endpoint.

          The given entity is the entity performing the traceline.
      - Declaration: >-
          int CountPlayersInBrushVolume(const bool fIgnoreDeadPlayers,
          CBaseEntity@ pBrushVolume,int& out iOutPlayersInsideVolume, int& out
          iOutPlayersOutsideVolume, PlayerInVolumeListener@ pListener)
        Documentation: Counts the number of players inside and outside a brush volume.
      - Declaration: void GetCircularGaussianSpread(float& out x, float& out y) const
        Documentation: Gets circular gaussian spread.
      - Declaration: bool VoteActive() const
        Documentation: >-
          Returns whether a vote is active. This only covers the votes started
          using the in-game vote menu, trigger_vote and the Vote class.
      - Declaration: >-
          bool IsPlayerInVolume(CBasePlayer@ pPlayer, CBaseEntity@
          pEntityVolume)
        Documentation: Returns whether the given player is in the given volume.
      - Declaration: TraceResult GetGlobalTrace()
        Documentation: Gets the global trace data stored in g_Engine as a TraceResult object.
      - Declaration: CBaseEntity@ FindEntityForward(CBaseEntity@ pLooker)
        Documentation: >-
          Convience function that finds the entity that the given entity is
          currently looking at. Uses a maximum distance of 12048 units.
      - Declaration: >-
          CBaseEntity@ FindEntityForward(CBaseEntity@ pLooker, float
          flMaxDistance)
        Documentation: >-
          Convience function that finds the entity that the given entity is
          currently looking at.
      - Declaration: >-
          string TraceTexture(edict_t@ pEntity, const Vector& in vecStart, const
          Vector& in vecEnd)
        Documentation: Trace texture
      - Declaration: >-
          void TraceModel(const Vector& in vecStart, const Vector& in vecEnd,
          int iHullNumber, edict_t@ pEntityToIgnore, TraceResult& out ptr)
        Documentation: TraceModel
      - Declaration: >-
          bool TraceMonsterHull(edict_t@ pEntity, const Vector& in vecStart,
          const Vector& in vecEnd, IGNORE_MONSTERS igmon, edict_t@
          pEntityToIgnore, TraceResult& out ptr)
        Documentation: >-
          Trace monster hull. Returns true if the trace was entirely in a solid
          object, or hit something.
      - Declaration: >-
          void TraceToss(edict_t@ pEntity, edict_t@ pEntityToIgnore,
          TraceResult& out traceResult)
        Documentation: Trace toss
      - Declaration: >-
          void TraceHull(const Vector& in vecStart, const Vector& in vecEnd,
          IGNORE_MONSTERS igmon,HULL_NUMBER hullNumber, edict_t@ pEntIgnore,
          TraceResult& out ptr)
        Documentation: >-
          Calculates a trace along the given line, storing the results in ptr,
          using the specified hull type.
      - Declaration: >-
          void TraceLine(const Vector& in vecStart, const Vector& in vecEnd,
          IGNORE_MONSTERS igmon,IGNORE_GLASS ignoreGlass, edict_t@ pEntIgnore,
          TraceResult& out ptr)
        Documentation: Calculates a trace along the given line, storing the results in ptr.
      - Declaration: >-
          void TraceLine(const Vector& in vecStart, const Vector& in vecEnd,
          IGNORE_MONSTERS igmon,edict_t@ pEntIgnore, TraceResult& out ptr)
        Documentation: Calculates a trace along the given line, storing the results in ptr.
      - Declaration: bool IsString3DVec(const string& in szString)
        Documentation: Returns whether the given string is a 3D vector
      - Declaration: bool IsWholeNumber(const float flNum, int& out iRounded)
        Documentation: >-
          Returns whether the given float is a whole number, and returns the
          rounded number
      - Declaration: bool IsStringFloat(const string& in szString)
        Documentation: Returns whether the given string is a float
      - Declaration: bool IsStringInt(const string& in szString)
        Documentation: Returns whether the given string is an integer
      - Declaration: >-
          void StringToRGBA(RGBA& out rgba, const string& in szString, const
          char delimiter = char(' '))
        Documentation: Converts the given string to an RGBA (alpha component is optional)
      - Declaration: >-
          void StringToVector(Vector& out vecVector, const string& in szString,
          const char delimiter = char(' '))
        Documentation: Converts the given string to a vector
      - Declaration: >-
          void BubbleTrail(const Vector& in vecFrom, const Vector& in vecTo, int
          iCount)
        Documentation: Creates a trail of bubbles
      - Declaration: >-
          void Bubbles(const Vector& in vecMins, const Vector& in vecMaxs, int
          iCount)
        Documentation: Creates a box filled with bubbles
      - Declaration: float WaterLevel(const Vector& in vecPosition, float minz, float maxz)
        Documentation: >-
          Determines the Z level at which a water surface level is, given a
          position to start searching from and a range to search.
      - Declaration: void Ricochet(const Vector& in vecPosition, float flScale)
        Documentation: Creates a ricochet at the given location
      - Declaration: void Sparks(const Vector& in vecPosition)
        Documentation: Creates sparks at the given location
      - Declaration: void GunshotDecalTrace(TraceResult& in trace, int iDecalNumber)
        Documentation: Applies gunshot decal to the trace hit location
      - Declaration: >-
          void PlayerDecalTrace(TraceResult& in trace, int iPlayerNum, int
          iDecalNumber, const bool bIsCustom)
        Documentation: Applies player decal to the trace hit location
      - Declaration: void DecalTrace(TraceResult& in trace, int iDecalNumber)
        Documentation: Applies decal to the trace hit location
      - Declaration: void BloodDecalTrace(TraceResult& in trace, int iBloodColor)
        Documentation: Applies blood decal to the trace hit location
      - Declaration: bool ShouldShowBlood(int iBloodColor)
        Documentation: Returns whether blood of the given type should be shown.
      - Declaration: Vector RandomBloodVector()
        Documentation: Returns a random blood direction vector
      - Declaration: >-
          void BloodDrips(const Vector& in vecOrigin, const Vector& in
          vecDirection, int iColor, int iAmount)
        Documentation: Creates blood drips. Use BLOOD_COLOR enum for the color.
      - Declaration: >-
          void BloodStream(const Vector& in vecOrigin, const Vector& in
          vecDirection, int iColor, int iAmount)
        Documentation: Creates a blood stream. Use BLOOD_COLOR enum for the color.
    Properties: []
  - ClassName: BaseItem
    Namespace: ''
    Documentation: |-
      Baseclass for CItem.
      Allows calling of the base implementation of certain methods.
    Flags: 262145
    Methods:
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of EndRevive
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of BeginRevive
      - Declaration: bool IsRevivable()
        Documentation: Calls the base class implementation of IsRevivable
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Calls the base class implementation of GetPointsForDamage
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceBleed
      - Declaration: int BloodColor()
        Documentation: Calls the base class implementation of BloodColor
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGib)
        Documentation: Calls the base class implementation of Killed
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)
        Documentation: Calls the base class implementation of TakeArmor
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, float health_cap =
          0)
        Documentation: Calls the base class implementation of TakeHealth
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: Calls the base class implementation of TakeDamage
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in ptr, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceAttack
      - Declaration: int ObjectCaps()
        Documentation: Calls the base class implementation of ObjectCaps
      - Declaration: void UpdateOnRemove()
        Documentation: Calls the base class implementation of UpdateOnRemove
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Blocked
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Calls the base class implementation of Use
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Touch
      - Declaration: void Think()
        Documentation: Calls the base class implementation of Think
      - Declaration: void PostSpawn()
        Documentation: Calls the base class implementation of PostSpawn
      - Declaration: void Spawn()
        Documentation: Calls the base class implementation of Spawn
      - Declaration: void PreSpawn()
        Documentation: Calls the base class implementation of PreSpawn
      - Declaration: void Precache()
        Documentation: Calls the base class implementation of Precache
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Calls the base class implementation of KeyValue
      - Declaration: BaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties: []
  - ClassName: BasePlayerAmmo
    Namespace: ''
    Documentation: |-
      Baseclass for CBasePlayerAmmo.
      Allows calling of the base implementation of certain methods.
    Flags: 262145
    Methods:
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of EndRevive
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of BeginRevive
      - Declaration: bool IsRevivable()
        Documentation: Calls the base class implementation of IsRevivable
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Calls the base class implementation of GetPointsForDamage
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceBleed
      - Declaration: int BloodColor()
        Documentation: Calls the base class implementation of BloodColor
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGib)
        Documentation: Calls the base class implementation of Killed
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)
        Documentation: Calls the base class implementation of TakeArmor
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, float health_cap =
          0)
        Documentation: Calls the base class implementation of TakeHealth
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: Calls the base class implementation of TakeDamage
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in ptr, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceAttack
      - Declaration: int ObjectCaps()
        Documentation: Calls the base class implementation of ObjectCaps
      - Declaration: void UpdateOnRemove()
        Documentation: Calls the base class implementation of UpdateOnRemove
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Blocked
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Calls the base class implementation of Use
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Touch
      - Declaration: void Think()
        Documentation: Calls the base class implementation of Think
      - Declaration: void PostSpawn()
        Documentation: Calls the base class implementation of PostSpawn
      - Declaration: void Spawn()
        Documentation: Calls the base class implementation of Spawn
      - Declaration: void PreSpawn()
        Documentation: Calls the base class implementation of PreSpawn
      - Declaration: void Precache()
        Documentation: Calls the base class implementation of Precache
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Calls the base class implementation of KeyValue
      - Declaration: BaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties: []
  - ClassName: BasePlayerWeapon
    Namespace: ''
    Documentation: |-
      Baseclass for CBasePlayerWeapon.
      Allows calling of the base implementation of certain methods.
    Flags: 262145
    Methods:
      - Declaration: void BurstSupplement()
        Documentation: Calls the base class implementation of BurstSupplement
      - Declaration: bool UseDecrement()
        Documentation: Calls the base class implementation of UseDecrement
      - Declaration: bool ShouldWeaponIdle()
        Documentation: Calls the base class implementation of ShouldWeaponIdle
      - Declaration: void RetireWeapon()
        Documentation: Calls the base class implementation of RetireWeapon
      - Declaration: void WeaponIdle()
        Documentation: Calls the base class implementation of WeaponIdle
      - Declaration: bool ShouldReload()
        Documentation: Calls the base class implementation of ShouldReload
      - Declaration: void FinishReload()
        Documentation: Calls the base class implementation of FinishReload
      - Declaration: void Reload()
        Documentation: Calls the base class implementation of Reload
      - Declaration: void TertiaryAttack()
        Documentation: Calls the base class implementation of TertiaryAttack
      - Declaration: void SecondaryAttack()
        Documentation: Calls the base class implementation of SecondaryAttack
      - Declaration: void PrimaryAttack()
        Documentation: Calls the base class implementation of PrimaryAttack
      - Declaration: bool IsUseable()
        Documentation: Calls the base class implementation of IsUseable
      - Declaration: >-
          Vector BulletAccuracy(const Vector& in vecMoving, const Vector& in
          vecStanding, const Vector& in vecCrouched)
        Documentation: Calls the base class implementation of BulletAccuracy
      - Declaration: void SendWeaponAnim(int iAnim, int skiplocal = 0, int body = 0)
        Documentation: Calls the base class implementation of SendWeaponAnim
      - Declaration: void ResetEmptySound()
        Documentation: Calls the base class implementation of ResetEmptySound
      - Declaration: bool PlayEmptySound()
        Documentation: Calls the base class implementation of PlayEmptySound
      - Declaration: bool AddWeapon()
        Documentation: Calls the base class implementation of AddWeapon
      - Declaration: bool ExtractAmmo(CBasePlayerWeapon@ pWeapon)
        Documentation: Calls the base class implementation of ExtractAmmo
      - Declaration: bool CanHaveDuplicates()
        Documentation: Calls the base class implementation of CanHaveDuplicates
      - Declaration: CBasePlayerItem@ DropItem()
        Documentation: Calls the base class implementation of DropItem
      - Declaration: float GetRespawnTime() const
        Documentation: Calls the base class implementation of GetRespawnTime
      - Declaration: bool UpdateClientData(CBasePlayer@ pPlayer)
        Documentation: Calls the base class implementation of UpdateClientData
      - Declaration: int SecondaryAmmoIndex()
        Documentation: Calls the base class implementation of SecondaryAmmoIndex
      - Declaration: int PrimaryAmmoIndex()
        Documentation: Calls the base class implementation of PrimaryAmmoIndex
      - Declaration: void AttachToPlayer(CBasePlayer@ pPlayer)
        Documentation: Calls the base class implementation of AttachToPlayer
      - Declaration: void Kill()
        Documentation: Calls the base class implementation of Kill
      - Declaration: void InactiveItemPostFrame()
        Documentation: Calls the base class implementation of InactiveItemPostFrame
      - Declaration: void InactiveItemPreFrame()
        Documentation: Calls the base class implementation of InactiveItemPreFrame
      - Declaration: void ItemPostFrame()
        Documentation: Calls the base class implementation of ItemPostFrame
      - Declaration: void ItemPreFrame()
        Documentation: Calls the base class implementation of ItemPreFrame
      - Declaration: void UpdateItemInfo()
        Documentation: Calls the base class implementation of UpdateItemInfo
      - Declaration: void Holster(int skiplocal = 0)
        Documentation: Calls the base class implementation of Holster
      - Declaration: bool CanHolster()
        Documentation: Calls the base class implementation of CanHolster
      - Declaration: bool Deploy()
        Documentation: Calls the base class implementation of Deploy
      - Declaration: bool CanDeploy()
        Documentation: Calls the base class implementation of CanDeploy
      - Declaration: bool GetItemInfo(ItemInfo& out info)
        Documentation: Calls the base class implementation of GetItemInfo
      - Declaration: void Materialize()
        Documentation: Calls the base class implementation of Materialize
      - Declaration: bool AddDuplicate(CBasePlayerItem@ pItem)
        Documentation: Calls the base class implementation of AddDuplicate
      - Declaration: bool AddToPlayer(CBasePlayer@ pPlayer)
        Documentation: Calls the base class implementation of AddToPlayer
      - Declaration: BasePlayerItem@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of EndRevive
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of BeginRevive
      - Declaration: bool IsRevivable()
        Documentation: Calls the base class implementation of IsRevivable
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Calls the base class implementation of GetPointsForDamage
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceBleed
      - Declaration: int BloodColor()
        Documentation: Calls the base class implementation of BloodColor
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGib)
        Documentation: Calls the base class implementation of Killed
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)
        Documentation: Calls the base class implementation of TakeArmor
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, float health_cap =
          0)
        Documentation: Calls the base class implementation of TakeHealth
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: Calls the base class implementation of TakeDamage
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in ptr, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceAttack
      - Declaration: int ObjectCaps()
        Documentation: Calls the base class implementation of ObjectCaps
      - Declaration: void UpdateOnRemove()
        Documentation: Calls the base class implementation of UpdateOnRemove
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Blocked
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Calls the base class implementation of Use
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Touch
      - Declaration: void Think()
        Documentation: Calls the base class implementation of Think
      - Declaration: void PostSpawn()
        Documentation: Calls the base class implementation of PostSpawn
      - Declaration: void Spawn()
        Documentation: Calls the base class implementation of Spawn
      - Declaration: void PreSpawn()
        Documentation: Calls the base class implementation of PreSpawn
      - Declaration: void Precache()
        Documentation: Calls the base class implementation of Precache
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Calls the base class implementation of KeyValue
      - Declaration: BaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties: []
  - ClassName: BasePlayerItem
    Namespace: ''
    Documentation: |-
      Baseclass for CBasePlayerItem.
      Allows calling of the base implementation of certain methods.
    Flags: 262145
    Methods:
      - Declaration: BasePlayerWeapon@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: bool CanHaveDuplicates()
        Documentation: Calls the base class implementation of CanHaveDuplicates
      - Declaration: CBasePlayerItem@ DropItem()
        Documentation: Calls the base class implementation of DropItem
      - Declaration: float GetRespawnTime() const
        Documentation: Calls the base class implementation of GetRespawnTime
      - Declaration: bool UpdateClientData(CBasePlayer@ pPlayer)
        Documentation: Calls the base class implementation of UpdateClientData
      - Declaration: int SecondaryAmmoIndex()
        Documentation: Calls the base class implementation of SecondaryAmmoIndex
      - Declaration: int PrimaryAmmoIndex()
        Documentation: Calls the base class implementation of PrimaryAmmoIndex
      - Declaration: void AttachToPlayer(CBasePlayer@ pPlayer)
        Documentation: Calls the base class implementation of AttachToPlayer
      - Declaration: void Kill()
        Documentation: Calls the base class implementation of Kill
      - Declaration: void InactiveItemPostFrame()
        Documentation: Calls the base class implementation of InactiveItemPostFrame
      - Declaration: void InactiveItemPreFrame()
        Documentation: Calls the base class implementation of InactiveItemPreFrame
      - Declaration: void ItemPostFrame()
        Documentation: Calls the base class implementation of ItemPostFrame
      - Declaration: void ItemPreFrame()
        Documentation: Calls the base class implementation of ItemPreFrame
      - Declaration: void UpdateItemInfo()
        Documentation: Calls the base class implementation of UpdateItemInfo
      - Declaration: void Holster(int skiplocal = 0)
        Documentation: Calls the base class implementation of Holster
      - Declaration: bool CanHolster()
        Documentation: Calls the base class implementation of CanHolster
      - Declaration: bool Deploy()
        Documentation: Calls the base class implementation of Deploy
      - Declaration: bool CanDeploy()
        Documentation: Calls the base class implementation of CanDeploy
      - Declaration: bool GetItemInfo(ItemInfo& out info)
        Documentation: Calls the base class implementation of GetItemInfo
      - Declaration: void Materialize()
        Documentation: Calls the base class implementation of Materialize
      - Declaration: bool AddDuplicate(CBasePlayerItem@ pItem)
        Documentation: Calls the base class implementation of AddDuplicate
      - Declaration: bool AddToPlayer(CBasePlayer@ pPlayer)
        Documentation: Calls the base class implementation of AddToPlayer
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of EndRevive
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of BeginRevive
      - Declaration: bool IsRevivable()
        Documentation: Calls the base class implementation of IsRevivable
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Calls the base class implementation of GetPointsForDamage
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceBleed
      - Declaration: int BloodColor()
        Documentation: Calls the base class implementation of BloodColor
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGib)
        Documentation: Calls the base class implementation of Killed
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)
        Documentation: Calls the base class implementation of TakeArmor
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, float health_cap =
          0)
        Documentation: Calls the base class implementation of TakeHealth
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: Calls the base class implementation of TakeDamage
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in ptr, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceAttack
      - Declaration: int ObjectCaps()
        Documentation: Calls the base class implementation of ObjectCaps
      - Declaration: void UpdateOnRemove()
        Documentation: Calls the base class implementation of UpdateOnRemove
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Blocked
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Calls the base class implementation of Use
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Touch
      - Declaration: void Think()
        Documentation: Calls the base class implementation of Think
      - Declaration: void PostSpawn()
        Documentation: Calls the base class implementation of PostSpawn
      - Declaration: void Spawn()
        Documentation: Calls the base class implementation of Spawn
      - Declaration: void PreSpawn()
        Documentation: Calls the base class implementation of PreSpawn
      - Declaration: void Precache()
        Documentation: Calls the base class implementation of Precache
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Calls the base class implementation of KeyValue
      - Declaration: BaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties: []
  - ClassName: BaseTank
    Namespace: ''
    Documentation: |-
      Baseclass for CBaseTank.
      Allows calling of the base implementation of certain methods.
    Flags: 262145
    Methods:
      - Declaration: int BulletCount()
        Documentation: Calls the base class implementation of BulletCount
      - Declaration: Vector UpdateTargetPosition(CBaseEntity@ pTargetEntity)
        Documentation: Calls the base class implementation of UpdateTargetPosition
      - Declaration: >-
          void Fire(const Vector& in vecBarrelEnd, const Vector& in vecForward,
          entvars_t@ pevAttacker)
        Documentation: Calls the base class implementation of Fire
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of EndRevive
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of BeginRevive
      - Declaration: bool IsRevivable()
        Documentation: Calls the base class implementation of IsRevivable
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Calls the base class implementation of GetPointsForDamage
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceBleed
      - Declaration: int BloodColor()
        Documentation: Calls the base class implementation of BloodColor
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGib)
        Documentation: Calls the base class implementation of Killed
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)
        Documentation: Calls the base class implementation of TakeArmor
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, float health_cap =
          0)
        Documentation: Calls the base class implementation of TakeHealth
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: Calls the base class implementation of TakeDamage
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in ptr, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceAttack
      - Declaration: int ObjectCaps()
        Documentation: Calls the base class implementation of ObjectCaps
      - Declaration: void UpdateOnRemove()
        Documentation: Calls the base class implementation of UpdateOnRemove
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Blocked
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Calls the base class implementation of Use
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Touch
      - Declaration: void Think()
        Documentation: Calls the base class implementation of Think
      - Declaration: void PostSpawn()
        Documentation: Calls the base class implementation of PostSpawn
      - Declaration: void Spawn()
        Documentation: Calls the base class implementation of Spawn
      - Declaration: void PreSpawn()
        Documentation: Calls the base class implementation of PreSpawn
      - Declaration: void Precache()
        Documentation: Calls the base class implementation of Precache
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Calls the base class implementation of KeyValue
      - Declaration: BaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties: []
  - ClassName: BaseMonster
    Namespace: ''
    Documentation: |-
      Baseclass for CBaseMonster.
      Allows calling of the base implementation of certain methods.
    Flags: 262145
    Methods:
      - Declaration: void GibMonster()
        Documentation: Calls the base class implementation of GibMonster
      - Declaration: void CallGibMonster()
        Documentation: Calls the base class implementation of CallGibMonster
      - Declaration: void RunAI()
        Documentation: Calls the base class implementation of RunAI
      - Declaration: Schedule@ ScheduleFromName(const string& in szName)
        Documentation: Calls the base class implementation of ScheduleFromName
      - Declaration: Schedule@ GetSchedule()
        Documentation: Calls the base class implementation of GetSchedule
      - Declaration: Schedule@ GetScheduleOfType(int iType)
        Documentation: Calls the base class implementation of GetScheduleOfType
      - Declaration: void HandleAnimEvent(MonsterEvent@ pEvent)
        Documentation: Calls the base class implementation of HandleAnimEvent
      - Declaration: void RunTask(Task@ pTask)
        Documentation: Calls the base class implementation of RunTask
      - Declaration: void StartTask(Task@ pTask)
        Documentation: Calls the base class implementation of StartTask
      - Declaration: void SetYawSpeed()
        Documentation: Calls the base class implementation of SetYawSpeed
      - Declaration: void CheckAmmo()
        Documentation: Calls the base class implementation of CheckAmmo
      - Declaration: bool CheckMeleeAttack2_Move(float flDot, float flDist)
        Documentation: Calls the base class implementation of CheckMeleeAttack2_Move
      - Declaration: bool CheckMeleeAttack2(float flDot, float flDist)
        Documentation: Calls the base class implementation of CheckMeleeAttack2
      - Declaration: bool CheckMeleeAttack1_Move(float flDot, float flDist)
        Documentation: Calls the base class implementation of CheckMeleeAttack1_Move
      - Declaration: bool CheckMeleeAttack1(float flDot, float flDist)
        Documentation: Calls the base class implementation of CheckMeleeAttack1
      - Declaration: bool CheckRangeAttack2_Move(float flDot, float flDist)
        Documentation: Calls the base class implementation of CheckRangeAttack2_Move
      - Declaration: bool CheckRangeAttack2(float flDot, float flDist)
        Documentation: Calls the base class implementation of CheckRangeAttack2
      - Declaration: bool CheckRangeAttack1_Move(float flDot, float flDist)
        Documentation: Calls the base class implementation of CheckRangeAttack1_Move
      - Declaration: bool CheckRangeAttack1(float flDot, float flDist)
        Documentation: Calls the base class implementation of CheckRangeAttack1
      - Declaration: int ISoundMask()
        Documentation: Calls the base class implementation of ISoundMask
      - Declaration: void DeathSound()
        Documentation: Calls the base class implementation of DeathSound
      - Declaration: void PainSound()
        Documentation: Calls the base class implementation of PainSound
      - Declaration: void AlertSound()
        Documentation: Calls the base class implementation of AlertSound
      - Declaration: int IgnoreConditions()
        Documentation: Calls the base class implementation of IgnoreConditions
      - Declaration: int Classify()
        Documentation: Calls the base class implementation of Classify
      - Declaration: void SetupFriendly()
        Documentation: Calls the base class implementation of SetupFriendly
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of EndRevive
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of BeginRevive
      - Declaration: bool IsRevivable()
        Documentation: Calls the base class implementation of IsRevivable
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Calls the base class implementation of GetPointsForDamage
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceBleed
      - Declaration: int BloodColor()
        Documentation: Calls the base class implementation of BloodColor
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGib)
        Documentation: Calls the base class implementation of Killed
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)
        Documentation: Calls the base class implementation of TakeArmor
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, float health_cap =
          0)
        Documentation: Calls the base class implementation of TakeHealth
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: Calls the base class implementation of TakeDamage
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in ptr, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceAttack
      - Declaration: int ObjectCaps()
        Documentation: Calls the base class implementation of ObjectCaps
      - Declaration: void UpdateOnRemove()
        Documentation: Calls the base class implementation of UpdateOnRemove
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Blocked
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Calls the base class implementation of Use
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Touch
      - Declaration: void Think()
        Documentation: Calls the base class implementation of Think
      - Declaration: void PostSpawn()
        Documentation: Calls the base class implementation of PostSpawn
      - Declaration: void Spawn()
        Documentation: Calls the base class implementation of Spawn
      - Declaration: void PreSpawn()
        Documentation: Calls the base class implementation of PreSpawn
      - Declaration: void Precache()
        Documentation: Calls the base class implementation of Precache
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Calls the base class implementation of KeyValue
      - Declaration: BaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties: []
  - ClassName: BaseEntity
    Namespace: ''
    Documentation: |-
      Baseclass for CBaseEntity.
      Allows calling of the base implementation of certain methods.
    Flags: 262145
    Methods:
      - Declaration: BaseItem@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: BasePlayerAmmo@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: BasePlayerWeapon@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: BasePlayerItem@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: BaseTank@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: BaseMonster@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of EndRevive
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: Calls the base class implementation of BeginRevive
      - Declaration: bool IsRevivable()
        Documentation: Calls the base class implementation of IsRevivable
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Calls the base class implementation of GetPointsForDamage
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceBleed
      - Declaration: int BloodColor()
        Documentation: Calls the base class implementation of BloodColor
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGib)
        Documentation: Calls the base class implementation of Killed
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)
        Documentation: Calls the base class implementation of TakeArmor
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, float health_cap =
          0)
        Documentation: Calls the base class implementation of TakeHealth
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: Calls the base class implementation of TakeDamage
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in ptr, int bitsDamageType)
        Documentation: Calls the base class implementation of TraceAttack
      - Declaration: int ObjectCaps()
        Documentation: Calls the base class implementation of ObjectCaps
      - Declaration: void UpdateOnRemove()
        Documentation: Calls the base class implementation of UpdateOnRemove
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Blocked
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Calls the base class implementation of Use
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Calls the base class implementation of Touch
      - Declaration: void Think()
        Documentation: Calls the base class implementation of Think
      - Declaration: void PostSpawn()
        Documentation: Calls the base class implementation of PostSpawn
      - Declaration: void Spawn()
        Documentation: Calls the base class implementation of Spawn
      - Declaration: void PreSpawn()
        Documentation: Calls the base class implementation of PreSpawn
      - Declaration: void Precache()
        Documentation: Calls the base class implementation of Precache
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Calls the base class implementation of KeyValue
    Properties: []
  - ClassName: CCustomEntityFuncs
    Namespace: ''
    Documentation: Custom entity functions.
    Flags: 262145
    Methods:
      - Declaration: void UnRegisterCustomEntity(const string& in szEntityname)
        Documentation: Unregisters a custom entity by the given name
      - Declaration: >-
          void RegisterCustomEntity(const string& in szClassname, const string&
          in szEntityname)
        Documentation: >-
          Registers a class called szClassname as a custom entity named
          szEntityname. The class must inherit from a script entity base class.
      - Declaration: bool IsCustomEntity(const string& in szEntityname) const
        Documentation: Returns whether the given entity name is a registered custom entity
    Properties: []
  - ClassName: CustomEntityCallbackHandler
    Namespace: ''
    Documentation: Custom entity callback handler. Is used to set callbacks to methods
    Flags: 262145
    Methods:
      - Declaration: void SetUseFunction(UseFunction@ pFunction)
        Documentation: Sets the use function for this handler's owning instance.
      - Declaration: void SetBlockedFunction(BlockedFunction@ pFunction)
        Documentation: Sets the blocked function for this handler's owning instance.
      - Declaration: void SetTouchFunction(TouchFunction@ pFunction)
        Documentation: Sets the touch function for this handler's owning instance.
      - Declaration: void SetThinkFunction(ThinkFunction@ pFunction)
        Documentation: Sets the think function for this handler's owning instance.
    Properties: []
  - ClassName: CEntityLoader
    Namespace: ''
    Documentation: "Entity loader.\nLoads entity keyvalue data and instances the entities.\nFile format:\n\"Entity\"{\t\"classname\" \"info_player_deathmatch\"\t<additional keyvalues>}..."
    Flags: 262145
    Methods:
      - Declaration: >-
          bool LoadFromFile(const string& in szFileName, const Vector& in
          vecOffset = g_vecZero)
        Documentation: Loads entities from a file.
    Properties: []
  - ClassName: CItemRegistry
    Namespace: ''
    Documentation: Item registry.
    Flags: 262145
    Methods:
      - Declaration: >-
          int RegisterWeapon(const string& in szName, const string& in
          szSpriteDir, const string& in szPrimaryAmmoName = "", const string& in
          szSecondaryAmmoName = "", const string& in szPrimaryAmmoClass = "",
          const string& in szSecondaryAmmoClass = "")
        Documentation: >-
          Registers the given entity name as a weapon and returns the id
          associated with it.

          Returns WEAPON_NONE if no id could be assigned to it.
      - Declaration: >-
          int RegisterItem(const string& in szName, const string& in
          szSpriteDir, const string& in szPrimaryAmmoName = "", const string& in
          szSecondaryAmmoName = "", const string& in szPrimaryAmmoClass = "",
          const string& in szSecondaryAmmoClass = "")
        Documentation: >-
          Registers the given entity name as an item and returns the id
          associated with it.

          Returns WEAPON_NONE if no id could be assigned to it.
      - Declaration: int GetIdForName(const string& in szName) const
        Documentation: >-
          Gets the id associated with the given weapon name. Returns WEAPON_NONE
          if no id is associated with the given name.
    Properties: []
  - ClassName: ItemInfo
    Namespace: ''
    Documentation: Item info object.
    Flags: 5890
    Methods:
      - Declaration: string szAmmo2() const
        Documentation: Gets the secondary ammo name of this weapon.
      - Declaration: string szAmmo1() const
        Documentation: Gets the primary ammo name of this weapon.
      - Declaration: string szName() const
        Documentation: Gets the name of this weapon.
      - Declaration: ItemInfo& opAssign(const ItemInfo& in other)
        Documentation: Assignment operator
      - Declaration: void ItemInfo(const ItemInfo& in other)
        Documentation: Constructor
      - Declaration: void ItemInfo()
        Documentation: Constructor
    Properties:
      - Declaration: int iMaxClip
        Documentation: Item primary ammo max clip contents.
      - Declaration: int iAmmo2Drop
        Documentation: Amount of dropped secondary ammo.
      - Declaration: int iMaxAmmo2
        Documentation: >-
          Item secondary max ammo. -1 if this weapon does not use secondary
          ammo.
      - Declaration: int iAmmo1Drop
        Documentation: Amount of dropped primary ammo.
      - Declaration: int iMaxAmmo1
        Documentation: Item primary max ammo. -1 if this weapon does not use primary ammo.
      - Declaration: int iWeight
        Documentation: >-
          Item weight.

          This value used to determine this weapon's importance in
          autoselection.
      - Declaration: int iFlags
        Documentation: Item flags.
      - Declaration: int iPosition
        Documentation: Item HUD slot position.
      - Declaration: int iSlot
        Documentation: Item HUD slot.
      - Declaration: int iId
        Documentation: Item id.
  - ClassName: CInventoryMisc
    Namespace: ''
    Documentation: Misc functions for handling inventories across classes
    Flags: 262145
    Methods:
      - Declaration: >-
          void RemoveAllFromHolder(CBaseMonster@ pHolder, const bool fDrop =
          false, const bool fBlockingWeaponsOnly = false, const bool
          fKeepOnRespawn = false)
        Documentation: Clears all held inventory
      - Declaration: bool HasAllInGroup(CBaseMonster@ pHolder, const string& in szGroup)
        Documentation: Returns true if is holding all items of a group
      - Declaration: int HaveNumFromGroup(CBaseMonster@ pHolder, const string& in szGroup)
        Documentation: Returns count of how many items someone holds of a group
      - Declaration: int ExistsInGroup(const string& in szGroup)
        Documentation: Counts all the existing items in a group
      - Declaration: float GetWeight(CBaseMonster@ pHolder)
        Documentation: Gets the total weight of all inventory items held by the given holder
      - Declaration: int Count(CBaseMonster@ pHolder)
        Documentation: Counts the number of inventory items held by the given holder
      - Declaration: >-
          bool CheckTokenStringRule(const string& in szRule, const string& in
          szValue)
        Documentation: Returns whether the given value is in the given rule
      - Declaration: bool IsValidInventoryHolder(CBaseEntity@ pOther)
        Documentation: Returns whether the given entity is a valid inventory holder
    Properties: []
  - ClassName: InventoryList
    Namespace: ''
    Documentation: Structure for a list of item_inventory's stored within CBaseMonster
    Flags: 262145
    Methods: []
    Properties:
      - Declaration: InventoryList@ pNext
        Documentation: Next item in the list
      - Declaration: EHandle hItem
        Documentation: Item
  - ClassName: InventoryRules
    Namespace: ''
    Documentation: |-
      Inventory rules: Contained by CBaseToggle to hold and
      manage inventory rules attached to a triggerable entity
    Flags: 262145
    Methods:
      - Declaration: >-
          bool CanUseTrigger(CBaseEntity@ pActivator, bool fContinueByDefault =
          false)
        Documentation: >-
          Returns whether the owning trigger can be triggered by the given
          activator.
    Properties:
      - Declaration: string_t m_szTargetOnFail
        Documentation: 'Target: Inventory rules failed'
      - Declaration: bool m_fIgnoreDestroyTriggers
        Documentation: 'On pass: Ignore item''s on destroy triggers?'
      - Declaration: string_t m_szDestroyItemGroupOnUse
        Documentation: 'On pass: Destroy item(s) in these group(s)'
      - Declaration: string_t m_szDestroyItemNameOnUse
        Documentation: 'On pass: Destroy item(s)'
      - Declaration: bool m_fIgnoreReturnTriggers
        Documentation: 'On pass: Ignore item''s on return triggers?'
      - Declaration: string_t m_szReturnItemGroupOnUse
        Documentation: 'On pass: Return item(s) in these group(s)'
      - Declaration: string_t m_szReturnItemNameOnUse
        Documentation: 'On pass: Return item(s)'
      - Declaration: bool m_fIgnoreDropTriggers
        Documentation: 'On pass: Ignore item''s on drop triggers?'
      - Declaration: string_t m_szDropItemGroupOnUse
        Documentation: 'On pass: Drop item(s) in these group(s)'
      - Declaration: string_t m_szDropItemNameOnUse
        Documentation: 'On pass: Drop item(s)'
      - Declaration: bool m_fIgnoreUseTriggers
        Documentation: 'On pass: Ignore item''s on use triggers?'
      - Declaration: int m_iCantHaveItemGroupNum
        Documentation: 'Inventory: Number of item(s) from the can''t have group(s) (0 = all)'
      - Declaration: string_t m_szCantHaveItemGroup
        Documentation: 'Inventory: Must not have an item in these group(s)'
      - Declaration: string_t m_szCantHaveItemName
        Documentation: 'Inventory: Must not have these item(s)'
      - Declaration: int m_iRequiresItemGroupNum
        Documentation: >-
          Inventory: Number of item(s) from the required group(s) required (0 =
          all)
      - Declaration: string_t m_szRequiresItemGroup
        Documentation: 'Inventory: Require an item from these group(s)'
      - Declaration: string_t m_szRequiresItemName
        Documentation: 'Inventory: Require these item(s)'
      - Declaration: EHandle m_hEntity
        Documentation: Owning entity
  - ClassName: CSoundEnt
    Namespace: ''
    Documentation: >-
      Sound manager entity. Manages sound events made in the world, like
      gunfire.

      Does not handle the playing of sounds, see CSoundEngine for actual sound
      playing.
    Flags: 262145
    Methods:
      - Declaration: int ISoundsInList(int iListType)
        Documentation: >-
          Returns the number of sounds in the given list. Must be either
          SOUNDLISTTYPE_FREE or SOUNDLISTTYPE_ACTIVE.
      - Declaration: bool IsEmpty()
        Documentation: Returns whether the sound list is empty.
      - Declaration: int ClientSoundIndex(edict_t@ pClient)
        Documentation: Gets the index for the given client.
      - Declaration: CSound@ SoundPointerForIndex(int iIndex)
        Documentation: |-
          Return a pointer for this index in the sound list.
          Index must be between 0 and MAX_WORLD_SOUNDS.
      - Declaration: int FreeList()
        Documentation: Returns the head of the free list.
      - Declaration: int ActiveList()
        Documentation: Returns the head of the active list.
      - Declaration: >-
          void InsertSound(int iType, const Vector& in vecOrigin, int iVolume,
          float flDuration, CBaseEntity@ pOwner)
        Documentation: Inserts a sound. iType is one of the bits_SOUND enum.
    Properties:
      - Declaration: const int m_cLastActiveSounds
        Documentation: >-
          keeps track of the number of active sounds at the last update. (for
          diagnostic work)
  - ClassName: CSound
    Namespace: ''
    Documentation: Sound class used by CSoundEnt
    Flags: 262145
    Methods:
      - Declaration: bool FIsScent()
        Documentation: Returns whether this is a scent
      - Declaration: bool FIsSound()
        Documentation: Returns whether this is a sound
      - Declaration: void Reset()
        Documentation: Resets the sound
      - Declaration: void Clear()
        Documentation: Clears the sound
    Properties:
      - Declaration: EHandle hOwner
        Documentation: Sounds now have OWNERS... (For various AI checks)
      - Declaration: int m_iNextAudible
        Documentation: Temporary link that monsters use to build a list of audible sounds
      - Declaration: int m_iNext
        Documentation: Index of next sound in this list ( Active or Free )
      - Declaration: float m_flExpireTime
        Documentation: When the sound should be purged from the list
      - Declaration: int m_iVolume
        Documentation: How loud the sound is
      - Declaration: int m_iType
        Documentation: What type of sound this is
      - Declaration: Vector m_vecOrigin
        Documentation: Sound's location in space
  - ClassName: CModelFuncs
    Namespace: ''
    Documentation: Model functions
    Flags: 262145
    Methods:
      - Declaration: int GetAttachmentCount(int iModelIndex)
        Documentation: Gets the number of attachments in a model.
      - Declaration: int GetBodygroupSubmodelCount(int iModelIndex, int iGroup)
        Documentation: Gets the number of submodels.
      - Declaration: int GetBodygroup(int iModelIndex, int iBody, int iGroup)
        Documentation: Gets bodygroup configuration.
      - Declaration: int SetBodygroup(int iModelIndex, int iBody, int iGroup, int iValue)
        Documentation: Builds bodygroup configuration.
      - Declaration: int ModelIndex(const string& in szModelName)
        Documentation: Gets model index.
    Properties: []
  - ClassName: CEngineFuncs
    Namespace: ''
    Documentation: Engine functions
    Flags: 262145
    Methods:
      - Declaration: string GetPlayerAuthId(edict_t@ pEdict)
        Documentation: Get the player's Auth ID. (WON/Steam ID)
      - Declaration: >-
          bool Voice_SetClientListening(int iReceiver, int iSender, bool
          fListen)
        Documentation: Voice system - Set client listening.
      - Declaration: bool Voice_GetClientListening(int iReceiver, int iSender)
        Documentation: Voice system - Get client listening.
      - Declaration: >-
          void GetPlayerStats(const edict_t@ pEdict, int& out iPing, int& out
          iPacketLoss)
        Documentation: Get player stats.
      - Declaration: const Cvar@ CVarGetPointer(const string& in szCvar) const
        Documentation: Gets a pointer to a cvar.
      - Declaration: bool IsDedicatedServer() const
        Documentation: Returns whether this is a dedicated server.
      - Declaration: int GetPlayerUserId(edict_t@ pEdict)
        Documentation: >-
          Get player user ID. This is a unique id generated when a player
          connects. It remains valid as long as the player stays connected to
          the server.
      - Declaration: >-
          void StaticDecal(const Vector& in vecOrigin, int iDecalIndex, int
          iEntityIndex, int iModelIndex)
        Documentation: Project a static decal.
      - Declaration: bool IsMapValid(const string& in szMapName) const
        Documentation: Returns whether the given map is valid.
      - Declaration: KeyValueBuffer@ GetPhysicsKeyBuffer(edict_t@ pEdict)
        Documentation: Get physics key buffer.
      - Declaration: KeyValueBuffer@ GetInfoKeyBuffer(edict_t@ pEdict)
        Documentation: Get info key buffer.
      - Declaration: int NumberOfEntities()
        Documentation: Get number of entities.
      - Declaration: >-
          void RunPlayerMove(edict_t@ pEdict, const Vector& in vecViewAngles,
          float flFowardMove, float flSideMove, float flUpMove, uint16 iButtons,
          uint8 iImpulse, uint8 iMsec)
        Documentation: Run player move.
      - Declaration: string GetGameDir()
        Documentation: Get game directory.
      - Declaration: void CrosshairAngle(const edict_t@ pEdict, float flPitch, float flYaw)
        Documentation: >-
          Sets the angles of the given player's crosshairs to the given
          settings. Set both to 0 to disable. May not have any effect in SC.
      - Declaration: float Time()
        Documentation: Get current time.
      - Declaration: void SetView(const edict_t@ pEdict, const edict_t@ pViewEntity)
        Documentation: Set view.
      - Declaration: >-
          void GetAttachment(const edict_t@ pEdict, int iAttachment, Vector& out
          vecOrigin, Vector& out vecAngles)
        Documentation: Get attachment position.
      - Declaration: int Cmd_Argc()
        Documentation: Get number of command arguments.
      - Declaration: string Cmd_Argv(int iIndex)
        Documentation: Get command argument by index.
      - Declaration: string Cmd_Args()
        Documentation: Get command arguments.
      - Declaration: void ServerPrint(const string& in szMessage)
        Documentation: Server print
      - Declaration: >-
          void ClientPrintf(CBasePlayer@ pPlayer, PRINT_TYPE printType, const
          string& in szMessage)
        Documentation: Client print
      - Declaration: >-
          void GetBonePosition(const edict_t@ pEdict, int iBone, Vector& out
          vecOrigin, Vector& out vecAngles)
        Documentation: Get bone position.
      - Declaration: edict_t@ FindEntityByVars(entvars_t@ pVars)
        Documentation: Find entity by variables.
      - Declaration: edict_t@ PEntityOfEntIndex(int iIndex)
        Documentation: Get entity by entity index.
      - Declaration: int IndexOfEdict(const edict_t@ pEdict)
        Documentation: Get index of edict.
      - Declaration: entvars_t@ GetVarsOfEnt(edict_t@ pEdict)
        Documentation: Gets entity variables of entity.
      - Declaration: void CVarSetString(const string& in szCvar, const string& in szValue)
        Documentation: Set cvar string value.
      - Declaration: void CVarSetFloat(const string& in szCvar, float flValue)
        Documentation: Set cvar float value.
      - Declaration: string CVarGetString(const string& in szCvar)
        Documentation: Get cvar string value.
      - Declaration: float CVarGetFloat(const string& in szCvar)
        Documentation: Get cvar float value.
      - Declaration: CONTENTS PointContents(const Vector& in vecPoint)
        Documentation: Check if point is in contents.
      - Declaration: int DecalIndex(const string& in szName)
        Documentation: Get decal index.
      - Declaration: void LightStyle(int iStyle, const string& in szVal)
        Documentation: Set a light style.
      - Declaration: >-
          void ParticleEffect(const Vector& in vecOrigin, const Vector& in
          vecDir, float flColor, float flCount)
        Documentation: Emit a particle effect.
      - Declaration: void ServerExecute()
        Documentation: Executes all pending server commands. Plugins only.
      - Declaration: void ServerCommand(const string& in szCommand)
        Documentation: Issues a command to the server. Plugins only.
      - Declaration: >-
          void GetAimVector(edict_t@ pEntity, float flSpeed, Vector& out
          vecReturn)
        Documentation: Get aim vector for entity.
      - Declaration: int WalkMove(edict_t@ pEntity, float flYaw, float flDist, int iMove)
        Documentation: |-
          Make entity walk.
          See WALKMOVE enum
      - Declaration: int DropToFloor(edict_t@ pEntity)
        Documentation: Drop entity to floor.
      - Declaration: int EntIsOnFloor(edict_t@ pEntity)
        Documentation: Returns whether entity is on the floor.
      - Declaration: void MakeStatic(edict_t@ pEntity)
        Documentation: >-
          Make entity static. This moves the entity to the client.Its current
          visual state is copied over, and the entity is removed on the server
          side.Only valid while the level is loading.
      - Declaration: >-
          void AngleVectors(const Vector& in vecIn, Vector& out vecForward,
          Vector& out vecRight, Vector& out vecUp)
        Documentation: Angle vectors
      - Declaration: void MakeVectors(const Vector& in vec)
        Documentation: >-
          Make vectors. The results are stored in g_Engine::v_forward, v_right,
          and v_up.
      - Declaration: edict_t@ EntitiesInPVS(edict_t@ pStartEntity)
        Documentation: >-
          Find entities in Potentially Visible Set. Edict::vars::chain is used
          for this list, and is temporary.
      - Declaration: edict_t@ FindClientInPVS(edict_t@ pStartEntity)
        Documentation: Find client in Potentially Visible Set.
      - Declaration: int GetEntityIllum(edict_t@ pEntity)
        Documentation: >-
          Get entity illumination. This is a weighted value between 0 and 255,
          inclusive.
      - Declaration: void ChangePitch(edict_t@ pEntity)
        Documentation: >-
          Change pitch. This updates entvars_t::angles[ 0 ] to approach
          entvars_t::idealpitch, at entvars_t::pitch_speed degrees speed.
      - Declaration: void ChangeYaw(edict_t@ pEntity)
        Documentation: >-
          Change yaw. This updates entvars_t::angles[ 1 ] to approach
          entvars_t::ideal_yaw, at entvars_t::yaw_speed degrees speed.
      - Declaration: >-
          void MoveToOrigin(edict_t@ pEntity, const Vector& in vecGoal, float
          flDist, int iMoveType)
        Documentation: Move entity to origin.
      - Declaration: void VecToAngles(const Vector& in vec, Vector& out angles)
        Documentation: Vector to angles
      - Declaration: float VecToYaw(const Vector& in vec)
        Documentation: Vector to yaw
      - Declaration: void ChangeLevel(const string& in szLevelName)
        Documentation: Changes the current level to the one specified.
      - Declaration: int ModelFrames(int iModelIndex)
        Documentation: Gets the number of frames in a model.
      - Declaration: int ModelIndex(const string& in szModelName)
        Documentation: Gets the model index of a model.
    Properties: []
  - ClassName: KeyValueBuffer
    Namespace: ''
    Documentation: Buffer containing keyvalue pairs
    Flags: 1
    Methods:
      - Declaration: void RemoveValue(const string& in szKey)
        Documentation: >-
          Removes a key value. If this is a physics key buffer, this will set
          the key to an empty string instead.
      - Declaration: void SetValue(const string& in szKey, const string& in szValue) const
        Documentation: Sets a key value.
      - Declaration: string GetValue(const string& in szKey) const
        Documentation: Gets a key value
      - Declaration: edict_t@ GetClient() const
        Documentation: Gets the client that this buffer belongs to.
    Properties: []
  - ClassName: Cvar
    Namespace: ''
    Documentation: Cvar structure
    Flags: 262145
    Methods:
      - Declaration: string GetString()
        Documentation: Gets the value of the cvar as a string.
      - Declaration: string GetName()
        Documentation: Gets the name of the cvar.
    Properties:
      - Declaration: const float value
        Documentation: The value of this cvar as a float.
      - Declaration: const int flags
        Documentation: The flags of this cvar.
  - ClassName: DamageInfo
    Namespace: ''
    Documentation: Damage info structure
    Flags: 262145
    Methods: []
    Properties:
      - Declaration: int bitsDamageType
        Documentation: Damage type.
      - Declaration: float flDamage
        Documentation: Damage amount.
      - Declaration: CBaseEntity@ pAttacker
        Documentation: Attacker entity.
      - Declaration: CBaseEntity@ pInflictor
        Documentation: Inflictor entity.
      - Declaration: CBaseEntity@ pVictim
        Documentation: Victim entity.
  - ClassName: TraceResult
    Namespace: ''
    Documentation: Trace result structure
    Flags: 5890
    Methods:
      - Declaration: TraceResult& opAssign(const TraceResult& in tr)
        Documentation: Assignment operator
      - Declaration: void TraceResult(const TraceResult& in tr)
        Documentation: Constructor.
      - Declaration: void TraceResult()
        Documentation: Constructor.
    Properties:
      - Declaration: int iHitgroup
        Documentation: Hit group.
      - Declaration: edict_t@ pHit
        Documentation: Hit entity
      - Declaration: Vector vecPlaneNormal
        Documentation: Plane normal
      - Declaration: float flPlaneDist
        Documentation: Plane distance.
      - Declaration: Vector vecEndPos
        Documentation: End position.
      - Declaration: float flFraction
        Documentation: Fraction.
      - Declaration: int fInWater
        Documentation: Flag telling whether the trace ended in water
      - Declaration: int fInOpen
        Documentation: Flag telling whether the trace ended in an open area.
      - Declaration: int fStartSolid
        Documentation: Flag telling whether the trace started in a solid area.
      - Declaration: int fAllSolid
        Documentation: Flag telling whether the trace occured in an all solid area.
  - ClassName: Observer
    Namespace: ''
    Documentation: Observer mode management class.
    Flags: 262145
    Methods:
      - Declaration: void RemoveDeadBody()
        Documentation: Removes the player's dead body, if it exists.
      - Declaration: void SetObserverModeControlEnabled(bool fEnabled)
        Documentation: Sets whether this player can control the observer mode.
      - Declaration: bool CanControlObserverMode() const
        Documentation: Returns whether this player can control the observer mode.
      - Declaration: bool HasCorpse()
        Documentation: Returns whether this player has a corpse.
      - Declaration: CBaseEntity@ FindObserverStartPoint()
        Documentation: Find a point to start a player at for observer.
      - Declaration: void SetMode(ObserverMode iMode)
        Documentation: Sets the observer mode.
      - Declaration: void HandleButtons()
        Documentation: Handles button input.
      - Declaration: void FindNextPlayer(bool fReverse)
        Documentation: Find the next player to observe.
      - Declaration: void StopObserver(bool fRespawn)
        Documentation: Stops observer mode.
      - Declaration: >-
          void StartObserver(const Vector& in vecPosition, const Vector& in
          vecViewAngle, bool fCreateBody = true)
        Documentation: Starts observer mode.
      - Declaration: bool IsObserver() const
        Documentation: Returns whether this player is an observer.
      - Declaration: bool CanUseObserver()
        Documentation: Returns whether this player can use observer mode.
      - Declaration: void SetObserverTarget(CBasePlayer@ pPlayer)
        Documentation: Sets the observer target.
      - Declaration: void ResetObserverTarget()
        Documentation: Resets the observer target and finds the next suitable candidate.
      - Declaration: CBaseEntity@ GetObserverTarget()
        Documentation: Gets the current observer target, if any.
    Properties: []
  - ClassName: MonsterEvent
    Namespace: ''
    Documentation: Monster event type
    Flags: 262145
    Methods:
      - Declaration: string options() const
        Documentation: Options. Usually a sound name.
    Properties:
      - Declaration: int event
        Documentation: |-
          Event type.
          See MonsterEventType enum
  - ClassName: Waypoint
    Namespace: ''
    Documentation: Waypoint for monsters to follow.
    Flags: 262145
    Methods: []
    Properties:
      - Declaration: int iType
        Documentation: Type(s) of this waypoint.
      - Declaration: float flSavedMoveWait
        Documentation: How long to wait on this waypoint.
      - Declaration: EHandle hDoor
        Documentation: Handle to a door to use.
      - Declaration: Vector vecLadderVelocity
        Documentation: Saved ladder velocity.
      - Declaration: Vector vecJumpVelocity
        Documentation: Saved jump velocity.
      - Declaration: Vector vecLocation
        Documentation: Location of this waypoint.
  - ClassName: ScriptSchedule
    Namespace: ''
    Documentation: Script schedule class
    Flags: 262145
    Methods:
      - Declaration: void AddTask(const ScriptTask& in task)
        Documentation: Adds a task to the list
      - Declaration: Schedule@ opImplCast()
        Documentation: Cast to Schedule
      - Declaration: >-
          ScriptSchedule@ ScriptSchedule(int iInterruptMask, int iSoundMask,
          const string& in szName)
        Documentation: Constructor
      - Declaration: string szName() const
        Documentation: Gets the name of this schedule.
      - Declaration: Task@ GetTask(int iIndex) const
        Documentation: |-
          Gets a task in this schedule.
          Must be between 0 and cTasks.
    Properties:
      - Declaration: int iSoundMask
        Documentation: >-
          A more specific mask that indicates which TYPES of sounds will
          interrupt the schedule in the event that the schedule is broken by
          COND_HEAR_SOUND.
      - Declaration: int iInterruptMask
        Documentation: A bit mask of conditions that can interrupt this schedule.
      - Declaration: int cTasks
        Documentation: Number of tasks in this schedule.
  - ClassName: ScriptTask
    Namespace: ''
    Documentation: Script task class
    Flags: 1794
    Methods:
      - Declaration: void ScriptTask(int iTask, float flData = 0.0f)
        Documentation: Constructor
      - Declaration: void ScriptTask()
        Documentation: Constructor
    Properties:
      - Declaration: float flData
        Documentation: Task data
      - Declaration: int iTask
        Documentation: |-
          Task to execute.
          Can be monster-specific.
  - ClassName: Schedule
    Namespace: ''
    Documentation: Schedule for monsters to follow.
    Flags: 262145
    Methods:
      - Declaration: string szName() const
        Documentation: Gets the name of this schedule.
      - Declaration: Task@ GetTask(int iIndex) const
        Documentation: |-
          Gets a task in this schedule.
          Must be between 0 and cTasks.
    Properties:
      - Declaration: int iSoundMask
        Documentation: >-
          A more specific mask that indicates which TYPES of sounds will
          interrupt the schedule in the event that the schedule is broken by
          COND_HEAR_SOUND.
      - Declaration: int iInterruptMask
        Documentation: A bit mask of conditions that can interrupt this schedule.
      - Declaration: int cTasks
        Documentation: Number of tasks in this schedule.
  - ClassName: Task
    Namespace: ''
    Documentation: Task for monsters to execute.
    Flags: 262145
    Methods: []
    Properties:
      - Declaration: float flData
        Documentation: Task data
      - Declaration: int iTask
        Documentation: |-
          Task to execute.
          Can be monster-specific.
  - ClassName: CActivityMap
    Namespace: ''
    Documentation: Activity map
    Flags: 262145
    Methods:
      - Declaration: string GetName(Activity activity) const
        Documentation: Gets the name of the given activity
    Properties: []
  - ClassName: CustomKeyvalues
    Namespace: ''
    Documentation: Custom keyvalues. Do not keep handles to instances of these objects.
    Flags: 262145
    Methods:
      - Declaration: CustomKeyvalue GetKeyvalue(const string& in szKey) const
        Documentation: >-
          Gets the keyvalue with the given name. Check if it exists by calling
          Exists.
      - Declaration: bool HasKeyvalue(const string& in szKey) const
        Documentation: Returns whether the keyvalue with the given name exists.
      - Declaration: void InitializeKeyvalueWithDefault(const string& in szKey)
        Documentation: Initializes a keyvalue with the default value for its type.
      - Declaration: bool SetKeyvalue(const string& in szKey, int iValue)
        Documentation: |-
          Sets a custom keyvalue to the given integer value.
          Returns true if the key existed and was overwritten.
      - Declaration: bool SetKeyvalue(const string& in szKey, float flValue)
        Documentation: |-
          Sets a custom keyvalue to the given float value.
          Returns true if the key existed and was overwritten.
      - Declaration: bool SetKeyvalue(const string& in szKey, const Vector& in vecValue)
        Documentation: |-
          Sets a custom keyvalue to the given vector value.
          Returns true if the key existed and was overwritten.
      - Declaration: bool SetKeyvalue(const string& in szKey, const string& in szValue)
        Documentation: |-
          Sets a custom keyvalue to the given string value.
          Returns true if the key existed and was overwritten.
    Properties: []
  - ClassName: CustomKeyvalue
    Namespace: ''
    Documentation: Custom keyvalue. Only use this as a local variable, do not store them!
    Flags: 5890
    Methods:
      - Declaration: int GetInteger() const
        Documentation: Gets the value as an integer.
      - Declaration: float GetFloat() const
        Documentation: Gets the value as a float.
      - Declaration: Vector GetVector() const
        Documentation: Gets the value as a vector.
      - Declaration: string GetString() const
        Documentation: Gets the value as a string.
      - Declaration: Entvartype GetType() const
        Documentation: |-
          Gets the type of the keyvalue.
          Returns VAR_INVALID if this value does not exist.
      - Declaration: bool Exists() const
        Documentation: Returns whether the value exists.
      - Declaration: void CustomKeyvalue(const CustomKeyvalue& in other)
        Documentation: Constructor
      - Declaration: void CustomKeyvalue()
        Documentation: Constructor
    Properties: []
  - ClassName: EHandle
    Namespace: ''
    Documentation: Safe way to point to CBaseEntities who may die between frames.
    Flags: 2
    Methods:
      - Declaration: int GetSerialNumber() const
        Documentation: >-
          CBaseEntity serial number. Used to determine if the entity is still
          valid.
      - Declaration: EHandle& opAssign(const EHandle& in other)
        Documentation: Makes this handle refer to the same entity as the given handle.
      - Declaration: CBaseEntity@ opAssign(CBaseEntity@ pEntity)
        Documentation: Assigns the given entity to this handle.
      - Declaration: CBaseEntity@ opImplCast() const
        Documentation: |-
          Gets the Entity this handle refers to.
          Returns null if invalid.
      - Declaration: CBaseEntity@ GetEntity() const
        Documentation: |-
          Gets the Entity this handle refers to.
          Returns null if invalid.
      - Declaration: bool opImplConv() const
        Documentation: Returns whether this handle is valid.
      - Declaration: bool IsValid() const
        Documentation: Returns whether this handle is valid.
      - Declaration: void EHandle(CBaseEntity@ pEntity)
        Documentation: Constructs this handle with a reference to the given entity.
      - Declaration: void EHandle(const EHandle& in other)
        Documentation: Copy constructs this handle.
      - Declaration: void EHandle()
        Documentation: Default constructs this handle.
    Properties: []
  - ClassName: CGib
    Namespace: ''
    Documentation: Gib class
    Flags: 262145
    Methods:
      - Declaration: void LimitVelocity()
        Documentation: Limits the velocity of the gib
      - Declaration: void Spawn(const string& in szModelName)
        Documentation: >-
          Spawns the gib with the given model. Note: this sets several of CGib's
          variables. Set variables after calling this.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Calls use on targets.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: float m_lifeTime
        Documentation: Lifetime of this gib, in seconds
      - Declaration: int m_material
        Documentation: >-
          Gib material type. One of the Materials enum values should be used
          here.
      - Declaration: int m_cBloodDecals
        Documentation: Maximum number of blood decals this gib can spray.
      - Declaration: int m_bloodColor
        Documentation: >-
          The color of the blood that is sprayed onto walls when the gib touches
          it.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBaseDoor
    Namespace: ''
    Documentation: Door entity base class
    Flags: 262145
    Methods:
      - Declaration: bool DoorChangeDirection()
        Documentation: >-
          If the door is moving, changes the movement direction. Returns true if
          the door was moving.
      - Declaration: void DoorGoDown()
        Documentation: Makes the door go down.
      - Declaration: void DoorGoUp()
        Documentation: Makes the door go up.
      - Declaration: void DoorTouch(CBaseEntity@ pOther)
        Documentation: Door touch function.
      - Declaration: InventoryRules@ get_m_pInventoryRules() const
        Documentation: The inventory rules.
      - Declaration: bool IsToggleLockedByMaster()
        Documentation: |-
          Returns whether this entity is locked by its master.
          Separate from IsLockedByMaster due to limitations.
      - Declaration: void AngularMove(Vector vecDestAngle, float flSpeed)
        Documentation: Performs angular movement.
      - Declaration: void LinearMove(Vector vecDest, float flSpeed)
        Documentation: Performs linear movement.
      - Declaration: int GetSequenceActivityName(int iSequence)
        Documentation: Gets activity for the given sequence.
      - Declaration: void SetSequenceBox()
        Documentation: Sets the sequence box.
      - Declaration: int GetAttachmentCount()
        Documentation: Gets the number of attachments that the current model has.
      - Declaration: bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)
        Documentation: Extracts the bounding box of the current model.
      - Declaration: int GetBodygroup(int iGroup)
        Documentation: Gets the value of the given body group.
      - Declaration: void SetBodygroup(int iGroup, int iValue)
        Documentation: Sets the given body group to the given value.
      - Declaration: >-
          void GetAttachment(int iAttachment, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the attachment position.
      - Declaration: int FindTransition(int iEndingSequence, int iGoalSequence)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          int FindTransition(int iEndingSequence, int iGoalSequence, int& out
          iDir)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          void GetAutomovement(Vector& out origin, Vector& out angles, float
          flInterval = 0.1f)
        Documentation: Gets automatic movement.
      - Declaration: >-
          void GetBonePosition(int iBone, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the position of the given bone.
      - Declaration: float SetBlending(int iBlender, float flValue)
        Documentation: Sets the given blending controller to the given value.
      - Declaration: void InitBoneControllers()
        Documentation: Initializes bone controllers.
      - Declaration: float SetBoneController(int iController, float flValue)
        Documentation: Sets the specified bone controller to the given value.
      - Declaration: void DispatchAnimEvents(float flFutureInterval = 0.1f)
        Documentation: >-
          Handle events that have happend since last time called up until X
          seconds into the future.
      - Declaration: void ResetGaitSequenceInfo()
        Documentation: Resets gait sequence info.
      - Declaration: void ResetSequenceInfo()
        Documentation: Resets sequence info.
      - Declaration: int LookupSequence(const string& in szLabel)
        Documentation: >-
          Returns the index of the given sequence, or -1 if no such sequence
          exists.
      - Declaration: int LookupActivityHeaviest(int iActivity)
        Documentation: >-
          Returns the index of the given activity that has the heaviest weight,
          or -1 if no such activity exists.
      - Declaration: int LookupActivity(int iActivity)
        Documentation: >-
          Returns the index of the given activity, or -1 if no such activity
          exists.
      - Declaration: int GetSequenceFlags()
        Documentation: Get sequence flags.
      - Declaration: float StudioFrameAdvance(float flInterval = 0.0f)
        Documentation: Accumulate animation frame time from last time called until now.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseDelay@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseAnimating@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseToggle@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: string_t m_sMaster
        Documentation: This entity's master, if any.
      - Declaration: int m_bitsDamageInflict
        Documentation: DMG_ damage type that the door or trigger does.
      - Declaration: Vector m_vecFinalAngle
        Documentation: Final angle.
      - Declaration: Vector m_vecFinalDest
        Documentation: Final destination.
      - Declaration: Vector m_vecAngle2
        Documentation: Open angle.
      - Declaration: Vector m_vecAngle1
        Documentation: Closed angle.
      - Declaration: Vector m_vecPosition2
        Documentation: Open position.
      - Declaration: Vector m_vecPosition1
        Documentation: Closed position.
      - Declaration: EHandle m_hActivator
        Documentation: Handle to the activator.
      - Declaration: float m_flHeight
        Documentation: Height.
      - Declaration: int m_cTriggersLeft
        Documentation: 'Trigger_counter only: # of activations remaining.'
      - Declaration: float m_flTLength
        Documentation: For plats.
      - Declaration: float m_flTWidth
        Documentation: For plats.
      - Declaration: float m_flLip
        Documentation: >-
          How much to stick out of a wall. Will recede further into walls if
          negative.
      - Declaration: float m_flWait
        Documentation: How long to wait before resetting.
      - Declaration: float m_flMoveDistance
        Documentation: How far a door should slide or rotate.
      - Declaration: TOGGLE_STATE m_toggle_state
        Documentation: Current toggle state.
      - Declaration: bool m_fSequenceLoops
        Documentation: True if the sequence loops.
      - Declaration: bool m_fSequenceFinished
        Documentation: Flag set when StudioAdvanceFrame moves across a frame boundry.
      - Declaration: float m_flLastGaitEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flLastEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flGroundSpeed
        Documentation: Computed linear movement rate for current sequence.
      - Declaration: float m_flFrameRate
        Documentation: Computed FPS for current sequence.
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBaseButton
    Namespace: ''
    Documentation: Button entity base class
    Flags: 262145
    Methods:
      - Declaration: ButtonCode ButtonResponseToTouch()
        Documentation: Gets the button response to a touch event.
      - Declaration: >-
          void ButtonUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue)
        Documentation: Button Use function.
      - Declaration: void ButtonBackHome()
        Documentation: Button has returned to start state.  Quiesce it.
      - Declaration: void ButtonReturn()
        Documentation: Starts the button moving "out/down"
      - Declaration: void TriggerAndWait()
        Documentation: >-
          Button has reached the "in/up" position.  Activate its "targets", and
          pause before "popping out".
      - Declaration: void ButtonSpark()
        Documentation: >-
          Makes the button start sparking. The button will spark randomly after
          this.
      - Declaration: void ButtonTouch(CBaseEntity@ pOther)
        Documentation: Button Touch function.
      - Declaration: void ButtonActivate()
        Documentation: Activates the button.
      - Declaration: InventoryRules@ get_m_pInventoryRules() const
        Documentation: The inventory rules.
      - Declaration: bool IsToggleLockedByMaster()
        Documentation: |-
          Returns whether this entity is locked by its master.
          Separate from IsLockedByMaster due to limitations.
      - Declaration: void AngularMove(Vector vecDestAngle, float flSpeed)
        Documentation: Performs angular movement.
      - Declaration: void LinearMove(Vector vecDest, float flSpeed)
        Documentation: Performs linear movement.
      - Declaration: int GetSequenceActivityName(int iSequence)
        Documentation: Gets activity for the given sequence.
      - Declaration: void SetSequenceBox()
        Documentation: Sets the sequence box.
      - Declaration: int GetAttachmentCount()
        Documentation: Gets the number of attachments that the current model has.
      - Declaration: bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)
        Documentation: Extracts the bounding box of the current model.
      - Declaration: int GetBodygroup(int iGroup)
        Documentation: Gets the value of the given body group.
      - Declaration: void SetBodygroup(int iGroup, int iValue)
        Documentation: Sets the given body group to the given value.
      - Declaration: >-
          void GetAttachment(int iAttachment, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the attachment position.
      - Declaration: int FindTransition(int iEndingSequence, int iGoalSequence)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          int FindTransition(int iEndingSequence, int iGoalSequence, int& out
          iDir)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          void GetAutomovement(Vector& out origin, Vector& out angles, float
          flInterval = 0.1f)
        Documentation: Gets automatic movement.
      - Declaration: >-
          void GetBonePosition(int iBone, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the position of the given bone.
      - Declaration: float SetBlending(int iBlender, float flValue)
        Documentation: Sets the given blending controller to the given value.
      - Declaration: void InitBoneControllers()
        Documentation: Initializes bone controllers.
      - Declaration: float SetBoneController(int iController, float flValue)
        Documentation: Sets the specified bone controller to the given value.
      - Declaration: void DispatchAnimEvents(float flFutureInterval = 0.1f)
        Documentation: >-
          Handle events that have happend since last time called up until X
          seconds into the future.
      - Declaration: void ResetGaitSequenceInfo()
        Documentation: Resets gait sequence info.
      - Declaration: void ResetSequenceInfo()
        Documentation: Resets sequence info.
      - Declaration: int LookupSequence(const string& in szLabel)
        Documentation: >-
          Returns the index of the given sequence, or -1 if no such sequence
          exists.
      - Declaration: int LookupActivityHeaviest(int iActivity)
        Documentation: >-
          Returns the index of the given activity that has the heaviest weight,
          or -1 if no such activity exists.
      - Declaration: int LookupActivity(int iActivity)
        Documentation: >-
          Returns the index of the given activity, or -1 if no such activity
          exists.
      - Declaration: int GetSequenceFlags()
        Documentation: Get sequence flags.
      - Declaration: float StudioFrameAdvance(float flInterval = 0.0f)
        Documentation: Accumulate animation frame time from last time called until now.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseDelay@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseAnimating@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseToggle@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: bool m_fRotating
        Documentation: a rotating button?  default is a sliding button.
      - Declaration: bool m_fStayPushed
        Documentation: button stays pushed in until touched again?
      - Declaration: string_t m_sMaster
        Documentation: This entity's master, if any.
      - Declaration: int m_bitsDamageInflict
        Documentation: DMG_ damage type that the door or trigger does.
      - Declaration: Vector m_vecFinalAngle
        Documentation: Final angle.
      - Declaration: Vector m_vecFinalDest
        Documentation: Final destination.
      - Declaration: Vector m_vecAngle2
        Documentation: Open angle.
      - Declaration: Vector m_vecAngle1
        Documentation: Closed angle.
      - Declaration: Vector m_vecPosition2
        Documentation: Open position.
      - Declaration: Vector m_vecPosition1
        Documentation: Closed position.
      - Declaration: EHandle m_hActivator
        Documentation: Handle to the activator.
      - Declaration: float m_flHeight
        Documentation: Height.
      - Declaration: int m_cTriggersLeft
        Documentation: 'Trigger_counter only: # of activations remaining.'
      - Declaration: float m_flTLength
        Documentation: For plats.
      - Declaration: float m_flTWidth
        Documentation: For plats.
      - Declaration: float m_flLip
        Documentation: >-
          How much to stick out of a wall. Will recede further into walls if
          negative.
      - Declaration: float m_flWait
        Documentation: How long to wait before resetting.
      - Declaration: float m_flMoveDistance
        Documentation: How far a door should slide or rotate.
      - Declaration: TOGGLE_STATE m_toggle_state
        Documentation: Current toggle state.
      - Declaration: bool m_fSequenceLoops
        Documentation: True if the sequence loops.
      - Declaration: bool m_fSequenceFinished
        Documentation: Flag set when StudioAdvanceFrame moves across a frame boundry.
      - Declaration: float m_flLastGaitEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flLastEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flGroundSpeed
        Documentation: Computed linear movement rate for current sequence.
      - Declaration: float m_flFrameRate
        Documentation: Computed FPS for current sequence.
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CPathCondition
    Namespace: ''
    Documentation: Path condition entity
    Flags: 262145
    Methods: []
    Properties: []
  - ClassName: CBaseTank
    Namespace: ''
    Documentation: Tank base class
    Flags: 262145
    Methods:
      - Declaration: const CBasePlayer@ GetController()
        Documentation: Gets the current player controlling this tank, if any.
      - Declaration: void Look(int iDistance)
        Documentation: >-
          Looks around itself in a box that is iDistance * 2 in width and height
          for possible targets and stores the list in m_pLink.

          The target stores the next target in the list in its m_pLink, and so
          on.
      - Declaration: void MonsterStopControl()
        Documentation: >-
          If a monster is controlling this tank, makes the monster stop
          controlling the tank.
      - Declaration: void StopControl()
        Documentation: >-
          If a player is controlling this tank, makes the player stop
          controlling the tank.
      - Declaration: bool StartControl(CBasePlayer@ pController)
        Documentation: Makes the given player start controlling this tank.
      - Declaration: >-
          Vector AdjustAnglesForBarrel(const Vector& in vecInAngles, float
          flDistance)
        Documentation: Adjusts the given angles to point at the target.
      - Declaration: int BulletCount()
        Documentation: Gets the bullet count at this time.
      - Declaration: Vector BarrelPosition()
        Documentation: Returns the barrel position.
      - Declaration: >-
          void TankTrace(const Vector& in vecStart, const Vector& in vecForward,
          const Vector& in vecSpread, TraceResult& out tr)
        Documentation: >-
          Performs a traceline using a random spread based on the given spread
          amount.
      - Declaration: void MonsterStartup(CBaseMonster@ pMonster)
        Documentation: >-
          Makes the given monster begin controlling this tank, if no other
          monster had control before.
      - Declaration: CBaseEntity@ FindTarget()
        Documentation: Finds a target to attack, if any.
      - Declaration: bool InRange(float flRange)
        Documentation: >-
          Returns whether the given range is within the minimum and maximum
          range of this tank.
      - Declaration: bool CanFire() const
        Documentation: Returns whether this tank is able to fire.
      - Declaration: void TankDeactivate()
        Documentation: Deactivates the tank. Active tanks are AI controlled.
      - Declaration: void TankActivate()
        Documentation: Activates the tank. Active tanks are AI controlled.
      - Declaration: bool IsActive() const
        Documentation: Returns whether the tank is active. Active tanks are AI controlled.
      - Declaration: void StopRotSound()
        Documentation: Stop playing the rotating sound.
      - Declaration: void StartRotSound()
        Documentation: Start playing the rotating sound, if defined.
      - Declaration: Vector UpdateTargetPosition(CBaseEntity@ pTargetEntity)
        Documentation: Gets the updated position of the given target. Target must be valid.
      - Declaration: void Fire()
        Documentation: >-
          Fires the tank. Uses this tank's settings to fire, does not determine
          if it is targeting anything.
      - Declaration: >-
          void Fire(const Vector& in vecBarrelEnd, const Vector& in vecForward,
          entvars_t@ pevAttacker)
        Documentation: >-
          Fires the tank. Barrel end position, aiming direction and attacker
          entvars_t must be given.
      - Declaration: bool PointAt(const Vector& in vecDestination)
        Documentation: Points the tank at the target location.
      - Declaration: void TrackTarget()
        Documentation: >-
          Updates the tank's angles to match either its controlling player, or
          its current target.Accounts for rotation speed. Will fire at the
          target if it's automated.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Calls use on targets.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: string_t m_iszMaster
        Documentation: Master entity (game_team_master or multisource)
      - Declaration: int m_spread
        Documentation: firing spread
      - Declaration: Vector m_sightOrigin
        Documentation: Last sight of target
      - Declaration: int m_iBulletDamage
        Documentation: 0 means use Bullet type's default damage
      - Declaration: TANKBULLET m_bulletType
        Documentation: Bullet type
      - Declaration: float m_spriteScale
        Documentation: Scale of any sprites we shoot
      - Declaration: Vector m_barrelPos
        Documentation: Length of the freakin barrel
      - Declaration: float m_maxRange
        Documentation: Max range to aim/track
      - Declaration: float m_minRange
        Documentation: Minimum range to aim/track
      - Declaration: float m_persist
        Documentation: Persistence of firing (how long do I shoot when I can't see)
      - Declaration: float m_lastSightTime
        Documentation: Last time I saw target
      - Declaration: float m_fireRate
        Documentation: How many rounds/second
      - Declaration: float m_fireLast
        Documentation: Last time I fired
      - Declaration: float m_pitchTolerance
        Documentation: Tolerance angle
      - Declaration: float m_pitchRange
        Documentation: Range of pitch motion as above
      - Declaration: float m_pitchRate
        Documentation: Max turn rate on pitch
      - Declaration: float m_pitchCenter
        Documentation: '"Center" pitch'
      - Declaration: float m_yawTolerance
        Documentation: Tolerance angle
      - Declaration: float m_yawRange
        Documentation: |-
          Range of turning motion (one-sided: 30 is +/- 30 degress from center)
          Zero is full rotation
      - Declaration: float m_yawRate
        Documentation: Max turn rate to track targets
      - Declaration: float m_yawCenter
        Documentation: '"Center" yaw'
      - Declaration: float m_flNextAttack
        Documentation: Next attack time
      - Declaration: Vector m_vecControllerUsePos
        Documentation: >-
          Start origin of the player that is currently controlling this tank.

          Used to determine when a player has moved too far to continue
          controlling this tank.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CLaser
    Namespace: ''
    Documentation: Laser class
    Flags: 262145
    Methods:
      - Declaration: void FireAtPoint(TraceResult& in tr)
        Documentation: >-
          Fires the laser at a point defined by where the TraceResult hit.

          Also causes beam damage as if CBeam::BeamDamage were used, and sparks
          at both ends, if the approprite spawn flags have been set.
      - Declaration: bool IsOn()
        Documentation: Returns whether the laser is on
      - Declaration: void TurnOff()
        Documentation: Turns the laser off
      - Declaration: void TurnOn()
        Documentation: Turns the laser on
      - Declaration: void XenTeleport(const Vector& in vecSrc, int iRadius = 256)
        Documentation: >-
          Creates a Xen teleport effect at the given location, with zaps
          occuring within the given radius.
      - Declaration: void XenTeleportZap(const Vector& in vecSrc, const Vector& in vecDest)
        Documentation: Creates a Xen teleport zap effect between the given points.
      - Declaration: void BeamDamageInstant(TraceResult& in tr, float flDamage)
        Documentation: >-
          Causes the given amount of damage to be done to the entity hit by the
          given traceresult, as if the damage occured one second ago.
      - Declaration: void LiveForTime(float flTime)
        Documentation: >-
          Sets this beam to live for the given amount of time, after which it is
          removed.
      - Declaration: >-
          void HoseInit(const Vector& in vecStart, const Vector& in
          vecDirection)
        Documentation: >-
          Initializes this beam to be a beam going from a point in a given
          direction (BEAM_HOSE).
      - Declaration: void EntsInit(CBaseEntity@ pEntStart, CBaseEntity@ pEntEnd)
        Documentation: >-
          Initializes this beam to be a beam between 2 given entities
          (BEAM_ENTS).
      - Declaration: void EntsInit(int startIndex, int endIndex)
        Documentation: >-
          Initializes this beam to be a beam between 2 given entities
          (BEAM_ENTS).
      - Declaration: void PointEntInit(const Vector& in vecStart, CBaseEntity@ pEntEnd)
        Documentation: >-
          Initializes this beam to be a beam between a point and an entity
          (BEAM_ENTPOINT).
      - Declaration: void PointEntInit(const Vector& in vecStart, int endIndex)
        Documentation: >-
          Initializes this beam to be a beam between a point and an entity
          (BEAM_ENTPOINT).
      - Declaration: void PointsInit(const Vector& in vecStart, const Vector& in vecEnd)
        Documentation: >-
          Initializes this beam to be a beam between 2 given points
          (BEAM_POINTS).
      - Declaration: void BeamInit(const string& in szSpriteName, int iWidth)
        Documentation: >-
          Initializes this beam with default values and sets the given sprite as
          the sprite used, with the given width.
      - Declaration: void BeamDamage(TraceResult& in tr)
        Documentation: >-
          Damages the entity hit by the given trace line with the amount set in
          this entity's pev->dmg variable.

          Also applies decals to BSP models if the appropriate spawnflag is set.
      - Declaration: void DoSparks(const Vector& in vecStart, const Vector& in vecEnd)
        Documentation: >-
          Creates sparks at the given start and end points, if appropriate spawn
          flags are set.
      - Declaration: void RelinkBeam()
        Documentation: Call after you change start/end positions.
      - Declaration: int GetScrollRate()
        Documentation: Gets the beam's scroll rate.
      - Declaration: int GetFrame()
        Documentation: Gets the beam's frame number.
      - Declaration: int GetBrightness()
        Documentation: Gets the beam's brightness.
      - Declaration: void GetColor(int& out r, int& out g, int& out b)
        Documentation: Gets the beam's color.
      - Declaration: int GetNoise()
        Documentation: Gets the beam's noise.
      - Declaration: int GetWidth()
        Documentation: Gets the beam's width.
      - Declaration: int GetTexture()
        Documentation: Gets the beam's texture (sprite) index.
      - Declaration: const Vector& GetEndPos()
        Documentation: Gets the beam's ending position.
      - Declaration: const Vector& GetStartPos()
        Documentation: Gets the beam's starting position.
      - Declaration: void SetScrollRate(int speed)
        Documentation: Sets the scroll rate of the beam.
      - Declaration: void SetFrame(float frame)
        Documentation: Sets the frame number of the beam.
      - Declaration: void SetBrightness(int brightness)
        Documentation: Sets the brightness of the beam. Value is between 0-255.
      - Declaration: void SetColor(int r, int g, int b)
        Documentation: Sets the color of the beam.
      - Declaration: void SetNoise(int iAmplitude)
        Documentation: Sets the noise (amplitude) of the beam.
      - Declaration: void SetWidth(int iWidth)
        Documentation: Sets the width of the beam.
      - Declaration: void SetTexture(int spriteIndex)
        Documentation: >-
          Sets the sprite to use. The index is the one returned from
          CGame::PrecacheModel.
      - Declaration: void SetEndAttachment(int attachment)
        Documentation: >-
          Sets the end attachment of the beam. Attachment is a point on the
          entity's model. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT. Set
          to 0 to disable.
      - Declaration: void SetStartAttachment(int attachment)
        Documentation: >-
          Sets the start attachment of the beam. Attachment is a point on the
          entity's model. Must be a beam of type BEAM_ENTS. Set to 0 to disable.
      - Declaration: void SetEndEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets the ending entity of the beam. Must be a beam of type BEAM_ENTS
          or BEAM_ENTPOINT.
      - Declaration: void SetEndEntity(int entityIndex)
        Documentation: >-
          Sets the ending entity of the beam. Must be a beam of type BEAM_ENTS
          or BEAM_ENTPOINT.
      - Declaration: void SetStartEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets the starting entity of the beam. Must be a beam of type
          BEAM_ENTS.
      - Declaration: void SetStartEntity(int entityIndex)
        Documentation: >-
          Sets the starting entity of the beam. Must be a beam of type
          BEAM_ENTS.
      - Declaration: void SetEndPos(const Vector& in vecPos)
        Documentation: >-
          Sets the ending position of the beam. Must be a beam of type
          BEAM_POINTS or BEAM_HOSE.
      - Declaration: void SetStartPos(const Vector& in vecPos)
        Documentation: >-
          Sets the starting position of the beam. Must be a beam of type
          BEAM_POINTS, BEAM_ENTPOINT or BEAM_HOSE.
      - Declaration: void SetFlags(int flags)
        Documentation: >-
          Sets the flags of the beam. Must be a combination of BeamFlags values,
          or 0.
      - Declaration: void SetType(BeamType type)
        Documentation: Sets the type of the beam.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Calls use on targets.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBeam@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBeam
    Namespace: ''
    Documentation: Beam class
    Flags: 262145
    Methods:
      - Declaration: CLaser@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: void XenTeleport(const Vector& in vecSrc, int iRadius = 256)
        Documentation: >-
          Creates a Xen teleport effect at the given location, with zaps
          occuring within the given radius.
      - Declaration: void XenTeleportZap(const Vector& in vecSrc, const Vector& in vecDest)
        Documentation: Creates a Xen teleport zap effect between the given points.
      - Declaration: void BeamDamageInstant(TraceResult& in tr, float flDamage)
        Documentation: >-
          Causes the given amount of damage to be done to the entity hit by the
          given traceresult, as if the damage occured one second ago.
      - Declaration: void LiveForTime(float flTime)
        Documentation: >-
          Sets this beam to live for the given amount of time, after which it is
          removed.
      - Declaration: >-
          void HoseInit(const Vector& in vecStart, const Vector& in
          vecDirection)
        Documentation: >-
          Initializes this beam to be a beam going from a point in a given
          direction (BEAM_HOSE).
      - Declaration: void EntsInit(CBaseEntity@ pEntStart, CBaseEntity@ pEntEnd)
        Documentation: >-
          Initializes this beam to be a beam between 2 given entities
          (BEAM_ENTS).
      - Declaration: void EntsInit(int startIndex, int endIndex)
        Documentation: >-
          Initializes this beam to be a beam between 2 given entities
          (BEAM_ENTS).
      - Declaration: void PointEntInit(const Vector& in vecStart, CBaseEntity@ pEntEnd)
        Documentation: >-
          Initializes this beam to be a beam between a point and an entity
          (BEAM_ENTPOINT).
      - Declaration: void PointEntInit(const Vector& in vecStart, int endIndex)
        Documentation: >-
          Initializes this beam to be a beam between a point and an entity
          (BEAM_ENTPOINT).
      - Declaration: void PointsInit(const Vector& in vecStart, const Vector& in vecEnd)
        Documentation: >-
          Initializes this beam to be a beam between 2 given points
          (BEAM_POINTS).
      - Declaration: void BeamInit(const string& in szSpriteName, int iWidth)
        Documentation: >-
          Initializes this beam with default values and sets the given sprite as
          the sprite used, with the given width.
      - Declaration: void BeamDamage(TraceResult& in tr)
        Documentation: >-
          Damages the entity hit by the given trace line with the amount set in
          this entity's pev->dmg variable.

          Also applies decals to BSP models if the appropriate spawnflag is set.
      - Declaration: void DoSparks(const Vector& in vecStart, const Vector& in vecEnd)
        Documentation: >-
          Creates sparks at the given start and end points, if appropriate spawn
          flags are set.
      - Declaration: void RelinkBeam()
        Documentation: Call after you change start/end positions.
      - Declaration: int GetScrollRate()
        Documentation: Gets the beam's scroll rate.
      - Declaration: int GetFrame()
        Documentation: Gets the beam's frame number.
      - Declaration: int GetBrightness()
        Documentation: Gets the beam's brightness.
      - Declaration: void GetColor(int& out r, int& out g, int& out b)
        Documentation: Gets the beam's color.
      - Declaration: int GetNoise()
        Documentation: Gets the beam's noise.
      - Declaration: int GetWidth()
        Documentation: Gets the beam's width.
      - Declaration: int GetTexture()
        Documentation: Gets the beam's texture (sprite) index.
      - Declaration: const Vector& GetEndPos()
        Documentation: Gets the beam's ending position.
      - Declaration: const Vector& GetStartPos()
        Documentation: Gets the beam's starting position.
      - Declaration: void SetScrollRate(int speed)
        Documentation: Sets the scroll rate of the beam.
      - Declaration: void SetFrame(float frame)
        Documentation: Sets the frame number of the beam.
      - Declaration: void SetBrightness(int brightness)
        Documentation: Sets the brightness of the beam. Value is between 0-255.
      - Declaration: void SetColor(int r, int g, int b)
        Documentation: Sets the color of the beam.
      - Declaration: void SetNoise(int iAmplitude)
        Documentation: Sets the noise (amplitude) of the beam.
      - Declaration: void SetWidth(int iWidth)
        Documentation: Sets the width of the beam.
      - Declaration: void SetTexture(int spriteIndex)
        Documentation: >-
          Sets the sprite to use. The index is the one returned from
          CGame::PrecacheModel.
      - Declaration: void SetEndAttachment(int attachment)
        Documentation: >-
          Sets the end attachment of the beam. Attachment is a point on the
          entity's model. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT. Set
          to 0 to disable.
      - Declaration: void SetStartAttachment(int attachment)
        Documentation: >-
          Sets the start attachment of the beam. Attachment is a point on the
          entity's model. Must be a beam of type BEAM_ENTS. Set to 0 to disable.
      - Declaration: void SetEndEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets the ending entity of the beam. Must be a beam of type BEAM_ENTS
          or BEAM_ENTPOINT.
      - Declaration: void SetEndEntity(int entityIndex)
        Documentation: >-
          Sets the ending entity of the beam. Must be a beam of type BEAM_ENTS
          or BEAM_ENTPOINT.
      - Declaration: void SetStartEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets the starting entity of the beam. Must be a beam of type
          BEAM_ENTS.
      - Declaration: void SetStartEntity(int entityIndex)
        Documentation: >-
          Sets the starting entity of the beam. Must be a beam of type
          BEAM_ENTS.
      - Declaration: void SetEndPos(const Vector& in vecPos)
        Documentation: >-
          Sets the ending position of the beam. Must be a beam of type
          BEAM_POINTS or BEAM_HOSE.
      - Declaration: void SetStartPos(const Vector& in vecPos)
        Documentation: >-
          Sets the starting position of the beam. Must be a beam of type
          BEAM_POINTS, BEAM_ENTPOINT or BEAM_HOSE.
      - Declaration: void SetFlags(int flags)
        Documentation: >-
          Sets the flags of the beam. Must be a combination of BeamFlags values,
          or 0.
      - Declaration: void SetType(BeamType type)
        Documentation: Sets the type of the beam.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Calls use on targets.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CPathTrack
    Namespace: ''
    Documentation: Path track class
    Flags: 262145
    Methods:
      - Declaration: CPathTrack@ GetPrevious()
        Documentation: ''
      - Declaration: CPathTrack@ GetNext()
        Documentation: ''
      - Declaration: CPathTrack@ Nearest(Vector vecOrigin)
        Documentation: ''
      - Declaration: >-
          CPathTrack@ LookAhead(Vector& in vecOrigin, Vector& out
          vecResultOrigin, float flDist, const bool bMove)
        Documentation: ''
      - Declaration: >-
          void Project(CPathTrack@ pStart, CPathTrack@ pEnd, Vector& out
          vecOrigin, float flDist)
        Documentation: ''
      - Declaration: CPathTrack@ ValidPath(CPathTrack@ pPath, const bool testFlag)
        Documentation: Returns pPath if enabled, null otherwise.
      - Declaration: void Link()
        Documentation: Links the tracks together
      - Declaration: void SetPrevious(CPathTrack@ pPrevious)
        Documentation: Sets the previous track in this path
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Calls use on targets.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: float m_flNewSpeed
        Documentation: New train speed
      - Declaration: float m_flMaxSpeed
        Documentation: New maximum speed
      - Declaration: EHandle m_hAltpath
        Documentation: ''
      - Declaration: EHandle m_hPrevious
        Documentation: ''
      - Declaration: EHandle m_hNext
        Documentation: ''
      - Declaration: string_t m_altName
        Documentation: ''
      - Declaration: float m_length
        Documentation: ''
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CSprite
    Namespace: ''
    Documentation: Sprite class
    Flags: 262145
    Methods:
      - Declaration: void AnimateAndDie(float flFramerate)
        Documentation: >-
          Makes this sprite play until time pev->dmgtime has been passed, then
          removes itself.
      - Declaration: void SetBrightness(int brightness)
        Documentation: Sets the brightness (render amount).
      - Declaration: void SetColor(int r, int g, int b)
        Documentation: Sets the color.
      - Declaration: void SetScale(float flScale)
        Documentation: Sets the current scale.
      - Declaration: void SetTexture(int iSpriteIndex)
        Documentation: >-
          Sets the texture used by this sprite. Is a model index returned by
          g_Game.PrecacheModel.
      - Declaration: >-
          void SetTransparency(int renderMode, int r, int g, int b, int
          renderAmount, int renderFx)
        Documentation: Sets the transparency of this sprite.
      - Declaration: int Frames() const
        Documentation: Gets the number of frames in this sprite.
      - Declaration: void TurnOn()
        Documentation: Turns on this sprite.
      - Declaration: void TurnOff()
        Documentation: Turns off this sprite.
      - Declaration: void SetAttachment(edict_t@ pEntity, int iAttachment)
        Documentation: Makes this sprite follow the given entity.
      - Declaration: >-
          void SpriteInit(const string& in szSpriteName, const Vector& in
          vecOrigin)
        Documentation: Initializes this sprite.
      - Declaration: void Expand(float flScaleSpeed, float flFadeSpeed)
        Documentation: |-
          Causes this sprite to scale up and fade at the given rates.
          This sprite will be removed once faded.
      - Declaration: void Animate(float flFrames)
        Documentation: Advances this sprite's frame by the given amount of frames.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Calls use on targets.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBasePlayer
    Namespace: ''
    Documentation: Player entity base class
    Flags: 262145
    Methods:
      - Declaration: int GetCheats()
        Documentation: Get a player's cheat bits.
      - Declaration: bool GetCheat(int iBit)
        Documentation: Get a player's cheat bit.
      - Declaration: bool SetCheat(int iBit, bool fValue, bool fRequestedBySelf = false)
        Documentation: >-
          Set a player's cheat bit. (Requires cheat permission. If requested by
          self a permission message will be shown/logged.)
      - Declaration: void SendScoreInfo(edict_t@ edPlayer = null)
        Documentation: Refresh the player's score information with one or all players.
      - Declaration: void SetOverriddenPlayerModel(const string& in szOverrideModel)
        Documentation: Set an overriden player model.
      - Declaration: >-
          void ResetOverriddenPlayerModel(const bool bResetToClModel, const bool
          bForceReset)
        Documentation: Reset an overriden player model.
      - Declaration: int GetMaxSpeedOverride()
        Documentation: Get the player max speed override (-1 = not overriding)
      - Declaration: int GetMaxSpeed()
        Documentation: 'Get the player persistent max speed. default: sv_maxspeed'
      - Declaration: void SetMaxSpeedOverride(int Speed)
        Documentation: Override players max speed (temporarily) -1 will restore
      - Declaration: void SetMaxSpeed(int Speed)
        Documentation: 'Set player persistent max speed. default: sv_maxspeed'
      - Declaration: void ResetVModelPos()
        Documentation: Reset viewmodel position.
      - Declaration: void SetVModelPos( const Vector& in vecPos )
        Documentation: Set custom viewmodel position.
      - Declaration: >-
          void ShowOverheadSprite(const string& in szSpriteName, const float
          flZOffset, const float flLifeTime)
        Documentation: Creates a sprite above the player's head
      - Declaration: void SetViewMode(PlayerViewMode viewMode)
        Documentation: Sets the player's view mode
      - Declaration: void SetHasSuit(bool fHasSuit)
        Documentation: Sets whether the player has an HEV suit.
      - Declaration: bool HasSuit()
        Documentation: Returns whether the player has an HEV suit.
      - Declaration: void RemoveAllExcessAmmo()
        Documentation: Clamps all the player's ammo to their maximum amounts.
      - Declaration: void RemoveExcessAmmo(const string& in szName)
        Documentation: Clamps this player's ammo of the given type to the range 0 - MAX_AMMO.
      - Declaration: void RemoveExcessAmmo(size_t uiIndex)
        Documentation: Clamps this player's ammo at the given inex to the range 0 - MAX_AMMO.
      - Declaration: void ResetAllMaxAmmoToDefault()
        Documentation: >-
          Resets the ammo settings for this player for all ammo to their default
          values.
      - Declaration: void ResetMaxAmmoToDefault(const string& in szName)
        Documentation: >-
          Resets the ammo setting for this player for the given ammo type to its
          default value.
      - Declaration: void ResetMaxAmmoToDefault(size_t uiIndex)
        Documentation: >-
          Resets the ammo setting for this player at the given index to its
          default value.
      - Declaration: void SetMaxAmmo(const string& in szName, int iMaxAmmo)
        Documentation: >-
          Sets the maximum ammo setting for this player for the given ammo type.
          Value must be >= 0.
      - Declaration: void SetMaxAmmo(size_t uiIndex, int iMaxAmmo)
        Documentation: >-
          Sets the maximum ammo setting for this player for the ammo at the
          given index. Value must be >= 0.
      - Declaration: int GetMaxAmmo(const string& in szName) const
        Documentation: >-
          Gets the maximum ammo setting for this player for the given ammo type.
          Returns -1 if no ammo setting is present.
      - Declaration: int GetMaxAmmo(size_t uiIndex) const
        Documentation: >-
          Gets the maximum ammo setting for this player for the ammo at the
          given index. Returns -1 if no ammo setting is present.
      - Declaration: Vector GetAutoaimVector(float flDelta)
        Documentation: Gets the autoaim vector for the given delta.
      - Declaration: int AmmoInventory(int iAmmoIndex)
        Documentation: >-
          Returns the amount of ammo currently in inventory of the given ammo
          index.
      - Declaration: >-
          void SetSuitUpdate(const string& in szName, const bool bGroup, int
          iNoRepeat)
        Documentation: Set a suit update.
      - Declaration: void CheckSuitUpdate()
        Documentation: Check for suit update messages.
      - Declaration: void PlayerUse()
        Documentation: Triggers the player's use behavior.
      - Declaration: void EnableControl(const bool bControl)
        Documentation: Sets whether the player has control.
      - Declaration: >-
          void GiveNamedItem(const string& in szName, int iFlags = 0, int
          iAmmoCount = 0)
        Documentation: |-
          Gives this player the item with the given name.
          Flags are spawnflags passed to the item.
      - Declaration: void SelectItem(const string& in szItemName)
        Documentation: Selects the item with the given name.
      - Declaration: void SelectLastItem()
        Documentation: Selects the last active item.
      - Declaration: void SelectNextItem(int iItem)
        Documentation: Selects the next item relative to the given item.
      - Declaration: void SelectPrevItem(int iItem)
        Documentation: Selects the previous item relative to the given item.
      - Declaration: bool HasWeapons() const
        Documentation: Returns whether this player has any weapons.
      - Declaration: CBasePlayerItem@ HasNamedPlayerItem(const string& in szItemName)
        Documentation: >-
          Returns the given item, or null if this player has no item by that
          name.
      - Declaration: bool HasPlayerItem(CBasePlayerItem@ pCheckItem)
        Documentation: Returns whether this player has the given item.
      - Declaration: CBasePlayerItem@ DropAmmo(const string& in szItemName)
        Documentation: Drops ammo used by the named item.
      - Declaration: CBaseEntity@ DropItem(const string& in szItemName)
        Documentation: Drops the given item, or if no name, the current weapon.
      - Declaration: Observer@ GetObserver()
        Documentation: Gets the Observer instance that represents this player.
      - Declaration: void ShowForcedRespawnMessage(int iSeconds)
        Documentation: Shows the forced respawn message.
      - Declaration: >-
          void StartPlayerDeathView(const Vector& in vecPosition, const Vector&
          in vecViewAngle)
        Documentation: Sets the player's view to that of a dead person.
      - Declaration: bool CanSpawn()
        Documentation: Returns whether this player can spawn.
      - Declaration: void StartDeathCam()
        Documentation: Starts the death camera.
      - Declaration: void CheatImpulseCommands(int iImpulse)
        Documentation: Triggers the given impulse command.
      - Declaration: void set_m_szAnimExtension(const string& in szAnimExtension)
        Documentation: Sets the current animation extension.
      - Declaration: string get_m_szAnimExtension() const
        Documentation: Gets the current animation extension.
      - Declaration: void SetAnimation(PLAYER_ANIM anim, int mode = 0)
        Documentation: Set the player's animation.
      - Declaration: void FlashlightTurnOff()
        Documentation: Turns off the flashlight.
      - Declaration: void FlashlightTurnOn()
        Documentation: Turns on the flashlight.
      - Declaration: bool FlashlightIsOn() const
        Documentation: Returns whether the flashlight is on.
      - Declaration: bool IsOnLadder() const
        Documentation: Returns whether the player is on a ladder.
      - Declaration: void SetItemPickupTimes(float flTime)
        Documentation: Sets all item pickup times the given absolute time.
      - Declaration: bool GetWeaponsBlocked()
        Documentation: Returns whether the weapons are currently blocked.
      - Declaration: void UnblockWeapons(CBaseEntity@ pSetter)
        Documentation: Shows active weapon and unblocks weapon selection.
      - Declaration: void BlockWeapons(CBaseEntity@ pSetter)
        Documentation: Hides active weapon and blocks weapon selection.
      - Declaration: void DeployWeapon()
        Documentation: Deploy weapon.
      - Declaration: void HolsterWeapon()
        Documentation: Holster weapon.
      - Declaration: bool SwitchWeapon(CBasePlayerItem@ pWeapon)
        Documentation: Switches weapons to the given item.
      - Declaration: >-
          void RemoveAllItems(const bool removeSuit = false, const bool
          removeLongJump = false)
        Documentation: Removes all items from the player's inventory.
      - Declaration: void PackDeadPlayerItems()
        Documentation: Packs player weapons into a weapon box if possible.
      - Declaration: bool IsConnected() const
        Documentation: Returns whether this player is connected.
      - Declaration: void Duck()
        Documentation: Makes the player duck.
      - Declaration: void Jump()
        Documentation: Makes the player jump.
      - Declaration: void m_rgAmmo(size_t uiIndex, int iValue)
        Documentation: Set player ammo amount.
      - Declaration: int m_rgAmmo(size_t uiIndex)
        Documentation: Get player ammo amount.
      - Declaration: CBasePlayerItem@ m_rgpPlayerItems(size_t uiIndex)
        Documentation: Get player weapons. Index must be between 0 and MAX_ITEM_TYPES.
      - Declaration: void ResetEffects()
        Documentation: Reset all effect modifiers
      - Declaration: void ApplyEffects()
        Documentation: Re-calculate compounded effect modifiers and apply to the monster
      - Declaration: void ClearEnemyList()
        Documentation: Clears this monster's list of enemies
      - Declaration: InventoryList@ get_m_pInventory() const
        Documentation: The inventory items this monster has
      - Declaration: void MedicCallSound(float flDistance = 0.0f)
        Documentation: Medic call sound.
      - Declaration: string m_szTextureName()
        Documentation: Current texture name we're standing on.
      - Declaration: void StopPlayerFollowing(const bool bClearSchedule)
        Documentation: Stops following a player.
      - Declaration: void StartPlayerFollowing(CBaseEntity@ pLeader)
        Documentation: Starts following a given player.
      - Declaration: bool CanPlayerFollow()
        Documentation: Returns whether this monster can follow a player.
      - Declaration: bool IsPlayerFollowing()
        Documentation: Returns whether this monster is following a player.
      - Declaration: >-
          void FollowerPlayerUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller,
          USE_TYPE useType, float flValue)
        Documentation: Use method for following players (set only if friendly)
      - Declaration: void ShockGlowEffect(bool fMode)
        Documentation: Turns the shock glow effect on or off.
      - Declaration: >-
          CBaseEntity@ DropItem(const string& in szItemName, const Vector& in
          vecPos, const Vector& in vecAng)
        Documentation: Drops the given item from the given position at the given angle.
      - Declaration: bool CineCleanup()
        Documentation: Cleans up after a cinematic event.
      - Declaration: bool ExitScriptedSequence()
        Documentation: Exits the scripted sequence this monster is currently in, if any.
      - Declaration: bool HasAllMemories(int iMemory) const
        Documentation: Returns whether this monster remembers all of the given memories.
      - Declaration: bool HasMemory(int iMemory) const
        Documentation: Returns whether this monster remembers any of the given memories.
      - Declaration: void Forget(int iMemory)
        Documentation: Makes this monster forget the given memories.
      - Declaration: void Remember(int iMemory)
        Documentation: Makes this monster remember the given memories.
      - Declaration: >-
          void StopPlayerFollowing(const bool clearSchedule, bool bSilent =
          false)
        Documentation: Stops following its target.
      - Declaration: void StartPlayerFollowing(CBaseEntity@ pLeader, bool bSilent = false)
        Documentation: Starts following its target.
      - Declaration: void PainSound()
        Documentation: Plays this monster's pain sound.
      - Declaration: void IdleSound()
        Documentation: Plays this monster's idle sound.
      - Declaration: void AlertSound()
        Documentation: Plays this monster's alert sound.
      - Declaration: void DeathSound()
        Documentation: Plays this monster's death sound.
      - Declaration: Vector GetGunPosition()
        Documentation: ''
      - Declaration: Vector ShootAtEnemy(const Vector& in vecShootOrigin)
        Documentation: Shoots at the specified location.
      - Declaration: void FadeMonster()
        Documentation: |-
          Fades this monster.
          Note: does not kill the monster.
      - Declaration: bool HasAlienGibs()
        Documentation: Returns whether this monster has alien gibs.
      - Declaration: bool HasHumanGibs()
        Documentation: Returns whether this monster has human gibs.
      - Declaration: void CallGibMonster()
        Documentation: Determines whether to gib or fade this monster, and acts accordingly.
      - Declaration: bool ShouldGibMonster(int iGib)
        Documentation: |-
          Returns whether the monster should be gibbed given the gib type.
          See GIB enum.
      - Declaration: void GibMonster()
        Documentation: Gibs the monster.
      - Declaration: bool GetEnemy()
        Documentation: Tries to find the best suitable enemy for this monster.
      - Declaration: bool NoFriendlyFireToPos(Vector vecPos)
        Documentation: >-
          Returns whether attacking the target location at this time would
          result in friendly fire
      - Declaration: bool NoFriendlyFire(Vector vecPos, CBaseEntity@ pTarget)
        Documentation: >-
          Returns whether attacking the given target at this time from the given
          location would result in friendly fire
      - Declaration: bool NoFriendlyFire(Vector vecPos)
        Documentation: >-
          Returns whether attacking at this time from the given location would
          result in friendly fire
      - Declaration: bool NoFriendlyFire()
        Documentation: Returns whether attacking at this time would result in friendly fire
      - Declaration: bool FCheckAITrigger()
        Documentation: Checks and, if necessary, fires the monster's trigger target.
      - Declaration: void Eat(float flFullDuration)
        Documentation: Make the monster 'full' for a while.
      - Declaration: bool FShouldEat()
        Documentation: Returns whether this monster should eat.
      - Declaration: CSound@ PBestSound()
        Documentation: Returns a pointer to the sound the monster should react to.
      - Declaration: bool HasAllConditions(int iConditions) const
        Documentation: Returns whether this monster has all of the given AI conditions.
      - Declaration: bool HasConditions(int iConditions) const
        Documentation: Returns whether this monster has any of the given AI conditions.
      - Declaration: void ClearConditions(int iConditions)
        Documentation: Clears AI conditions.
      - Declaration: void SetConditions(int iConditions)
        Documentation: Sets AI conditions.
      - Declaration: bool CheckAttacker(CBaseEntity@ pAttacker)
        Documentation: Determine if we should ignore damage.
      - Declaration: int RouteClassify(int iMoveFlag)
        Documentation: Returns the MOVEGOAL for the given move flag.
      - Declaration: void SetYawSpeed()
        Documentation: Allows different yaw_speeds for each activity.
      - Declaration: void MakeIdealYaw(Vector vecTarget)
        Documentation: |-
          gets a yaw value for the caller that would
          face the supplied vector. Value is stuffed into the monster's
          ideal_yaw.
      - Declaration: int IScheduleFlags()
        Documentation: |-
          Returns an integer with all Conditions
          bits that are currently set and also set in the current
          schedule's Interrupt mask.
      - Declaration: bool MovementIsComplete()
        Documentation: Returns whether movement is complete.
      - Declaration: bool TaskIsComplete()
        Documentation: Returns whether the task is complete.
      - Declaration: bool TaskIsRunning()
        Documentation: Returns whether a task is running.
      - Declaration: void TaskBegin()
        Documentation: Sets the task status to running.
      - Declaration: void TaskFail()
        Documentation: Sets the condition bit for a failed task.
      - Declaration: void MovementComplete()
        Documentation: Called when movement has completed.
      - Declaration: void TaskComplete()
        Documentation: Sets the task status to complete.
      - Declaration: bool TestFGetNodeRoute(Vector vecDest)
        Documentation: TEST FGetNodeRoute.
      - Declaration: bool FGetNodeRoute(Vector vecDest)
        Documentation: >-
          tries to build an entire node path from

          the callers origin to the passed vector.

          If this is  possible, ROUTE_SIZE waypoints will be copied into the
          callers m_Route.

          true is returned if the operation  succeeds (path is valid) or false
          if failed (no path  exists ).
      - Declaration: bool PopEnemy()
        Documentation: Try remembering the last few enemies.
      - Declaration: void PushEnemy(CBaseEntity@ pTarget, Vector& in vecLastKnownPos)
        Documentation: Remember the last few enemies, always remember the player.
      - Declaration: bool CheckEnemy(CBaseEntity@ pEnemy)
        Documentation: >-
          part of the Condition collection process, gets and stores data and
          conditions pertaining to a monster's enemy.

          Returns true if Enemy LKP was updated.
      - Declaration: >-
          bool CheckAttacksFromPosition(CBaseEntity@ pTarget, float flDist,
          Vector vecPos)
        Documentation: Check whether attacks are possible from the given position.
      - Declaration: void CheckAttacks_Move(CBaseEntity@ pTarget, float flDist)
        Documentation: Check attacks to the given enemy at the given distance while moving.
      - Declaration: void CheckAttacks(CBaseEntity@ pTarget, float flDist)
        Documentation: Check attacks to the given enemy at the given distance.
      - Declaration: void ReportAIState()
        Documentation: Reports the AI state.
      - Declaration: void SetState(MONSTERSTATE state)
        Documentation: Sets the current monster state.
      - Declaration: void SetSequenceByName(const string& in szSequence)
        Documentation: Sets the current sequence by name.
      - Declaration: void SetGaitActivity(Activity newActivity)
        Documentation: Sets the current gait activity.
      - Declaration: void SetActivity(Activity newActivity)
        Documentation: Sets the current activity.
      - Declaration: MONSTERSTATE GetIdealState()
        Documentation: Gets the ideal monster state.
      - Declaration: Task@ GetTask()
        Documentation: Gets the current task.
      - Declaration: void SentenceStop()
        Documentation: Stops playing its current sentence.
      - Declaration: >-
          void PlayScriptedSentence(const string& in szSentence, float duration,
          float volume, float attenuation, const bool bConcurrent, CBaseEntity@
          pListener)
        Documentation: Plays the given scripted sentence.
      - Declaration: >-
          void PlaySentence(const string& in szSentence, float duration, float
          volume, float attenuation)
        Documentation: Plays the given sentence.
      - Declaration: bool CanPlaySentence(const bool bDisregardState)
        Documentation: Returns whether this monster can play its sentence.
      - Declaration: bool CanPlaySequence(const bool bDisregardState, int iInterruptLevel)
        Documentation: Returns whether this monster can play its sequence.
      - Declaration: void ScheduleChange()
        Documentation: Called after the monster's schedule changes.
      - Declaration: Schedule@ GetSchedule()
        Documentation: Gets the current schedule.
      - Declaration: Schedule@ GetScheduleOfType(int iType)
        Documentation: Gets one of the available schedules of the given type.
      - Declaration: void RunTask(Task@ pTask)
        Documentation: Runs the given task.
      - Declaration: void StartTask(Task@ pTask)
        Documentation: Starts the given task.
      - Declaration: void MaintainSchedule()
        Documentation: Maintains the monster's schedule.
      - Declaration: Schedule@ ScheduleFromName(const string& in szName)
        Documentation: Returns the schedule with name szName if it exists, NULL otherwise.
      - Declaration: >-
          Schedule@ ScheduleInList(const string& in szName, array<Schedule@>@
          pArray)
        Documentation: >-
          Returns the schedule with name szName if it's in the list, NULL
          otherwise.
      - Declaration: bool NextScheduledTask()
        Documentation: Moves to the next scheduled task.
      - Declaration: void ChangeSchedule(Schedule@ pNewSchedule)
        Documentation: Changes this monster's schedule.
      - Declaration: bool FScheduleDone()
        Documentation: Returns whether this monster's schedule is done.
      - Declaration: void ClearSchedule()
        Documentation: Clears this monster's schedule.
      - Declaration: bool FScheduleValid()
        Documentation: Returns whether this monster's schedule is valid.
      - Declaration: bool FHaveSchedule()
        Documentation: Returns whether this monster has a schedule.
      - Declaration: bool CheckTankUsage()
        Documentation: >-
          Checks whether the monster can use a func_tank. Return true if
          possible.
      - Declaration: bool CheckMeleeAttack2_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack2(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack1_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack1(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack2_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack2(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack1_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack1(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: void StopAnimation()
        Documentation: >-
          This will stop animation until you call ResetSequenceInfo() at some
          point in the future
      - Declaration: void Stop()
        Documentation: Stops this monster moving
      - Declaration: Activity GetStoppedActivity()
        Documentation: Gets the stopped activity
      - Declaration: bool ShouldAdvanceRoute(float flWaypointDist)
        Documentation: Returns whether this monster should advance its route
      - Declaration: >-
          void MoveExecute(CBaseEntity@ pTargetEnt, const Vector& in vecDir,
          float flInterval)
        Documentation: Starts the monster
      - Declaration: void Move(float flInterval = 0.1f)
        Documentation: Starts the monster
      - Declaration: >-
          int CheckLocalMove(const Vector& in vecStart, const Vector& in
          vecEnd,CBaseEntity@ pTarget, float& out flDist, Vector& out
          vecEndPosition, bool fOriginalCheck = false)
        Documentation: finds best visible enemy for attack
      - Declaration: bool FInViewCone(const Vector& in vecOrigin)
        Documentation: see if given location is in monster's view cone
      - Declaration: bool FInViewCone(CBaseEntity@ pEntity)
        Documentation: see if pEntity is in monster's view cone
      - Declaration: CBaseEntity@ BestVisibleEnemy()
        Documentation: Finds best visible enemy for attack
      - Declaration: void StartMonster()
        Documentation: Starts the monster
      - Declaration: void Revive()
        Documentation: Revives the monster
      - Declaration: void BecomeDead(float flSavedHealth)
        Documentation: Makes the monster become dead
      - Declaration: void MonsterInitDead()
        Documentation: Call after animation/pose is set up
      - Declaration: void MonsterInit()
        Documentation: Initializes the monster
      - Declaration: void SetupFriendly()
        Documentation: use this overridden to make some other friendly monsters
      - Declaration: float DamageForce(float flDamage)
        Documentation: >-
          Returns the amount of force applied to this monster when the given
          amount of damage is done.
      - Declaration: float DamageForce(float flDamage, int bitsDamageType)
        Documentation: >-
          Returns the amount of force applied to this monster when the given
          amount of damage is done.
      - Declaration: float FlYawDiff()
        Documentation: >-
          returns the difference ( in degrees ) between monster's current yaw
          and ideal_yaw.

          Positive result is left turn, negative is right turn.
      - Declaration: float VecToYaw(Vector vecDir)
        Documentation: >-
          turns a directional vector into a yaw value that points down that
          vector.
      - Declaration: float ChangeYaw(int iSpeed)
        Documentation: turns a monster towards its ideal_yaw
      - Declaration: bool ShouldFadeOnDeath()
        Documentation: Returns whether this monster should fade on death.
      - Declaration: void Listen()
        Documentation: Listens for anything that is within audible distance.
      - Declaration: void RunAI()
        Documentation: Runs this monster's AI.
      - Declaration: void Look(int iDistance)
        Documentation: |-
          Look - Base class monster function to find enemies or
          food by sight. iDistance is distance ( in units ) that the
          monster can see.
          Sets the sight bits of the m_afConditions mask to indicate
          which types of entities were sighted.
          Function also sets the Looker's m_pLink
          to the head of a link list that contains all visible ents.
          (linked via each ent's m_pLink field)
      - Declaration: >-
          void MonsterUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller,
          USE_TYPE useType, float flValue = 0.0f)
        Documentation: Will make a monster angry at whomever activated it.
      - Declaration: int8& m_rgbTimeBasedDamage(size_t uiIndex)
        Documentation: >-
          time based damage counters, decr. 1 per 2 seconds. Index must be
          between 0 and CMG_TIMEBASED.
      - Declaration: Waypoint& m_Route(size_t uiIndex)
        Documentation: Positions of movement. Index must be between 0 and ROUTE_SIZE
      - Declaration: Vector& m_vecOldEnemy(size_t uiIndex)
        Documentation: Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.
      - Declaration: EHandle& m_hOldEnemy(size_t uiIndex)
        Documentation: Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.
      - Declaration: InventoryRules@ get_m_pInventoryRules() const
        Documentation: The inventory rules.
      - Declaration: bool IsToggleLockedByMaster()
        Documentation: |-
          Returns whether this entity is locked by its master.
          Separate from IsLockedByMaster due to limitations.
      - Declaration: void AngularMove(Vector vecDestAngle, float flSpeed)
        Documentation: Performs angular movement.
      - Declaration: void LinearMove(Vector vecDest, float flSpeed)
        Documentation: Performs linear movement.
      - Declaration: int GetSequenceActivityName(int iSequence)
        Documentation: Gets activity for the given sequence.
      - Declaration: void SetSequenceBox()
        Documentation: Sets the sequence box.
      - Declaration: int GetAttachmentCount()
        Documentation: Gets the number of attachments that the current model has.
      - Declaration: bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)
        Documentation: Extracts the bounding box of the current model.
      - Declaration: int GetBodygroup(int iGroup)
        Documentation: Gets the value of the given body group.
      - Declaration: void SetBodygroup(int iGroup, int iValue)
        Documentation: Sets the given body group to the given value.
      - Declaration: >-
          void GetAttachment(int iAttachment, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the attachment position.
      - Declaration: int FindTransition(int iEndingSequence, int iGoalSequence)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          int FindTransition(int iEndingSequence, int iGoalSequence, int& out
          iDir)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          void GetAutomovement(Vector& out origin, Vector& out angles, float
          flInterval = 0.1f)
        Documentation: Gets automatic movement.
      - Declaration: >-
          void GetBonePosition(int iBone, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the position of the given bone.
      - Declaration: float SetBlending(int iBlender, float flValue)
        Documentation: Sets the given blending controller to the given value.
      - Declaration: void InitBoneControllers()
        Documentation: Initializes bone controllers.
      - Declaration: float SetBoneController(int iController, float flValue)
        Documentation: Sets the specified bone controller to the given value.
      - Declaration: void DispatchAnimEvents(float flFutureInterval = 0.1f)
        Documentation: >-
          Handle events that have happend since last time called up until X
          seconds into the future.
      - Declaration: void ResetGaitSequenceInfo()
        Documentation: Resets gait sequence info.
      - Declaration: void ResetSequenceInfo()
        Documentation: Resets sequence info.
      - Declaration: int LookupSequence(const string& in szLabel)
        Documentation: >-
          Returns the index of the given sequence, or -1 if no such sequence
          exists.
      - Declaration: int LookupActivityHeaviest(int iActivity)
        Documentation: >-
          Returns the index of the given activity that has the heaviest weight,
          or -1 if no such activity exists.
      - Declaration: int LookupActivity(int iActivity)
        Documentation: >-
          Returns the index of the given activity, or -1 if no such activity
          exists.
      - Declaration: int GetSequenceFlags()
        Documentation: Get sequence flags.
      - Declaration: float StudioFrameAdvance(float flInterval = 0.0f)
        Documentation: Accumulate animation frame time from last time called until now.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseDelay@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseAnimating@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseToggle@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseMonster@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: int m_iPlayerClass
        Documentation: The player's class type.
      - Declaration: float m_flNextDecalTime
        Documentation: Next time this player can spray a decal.
      - Declaration: int m_iDeaths
        Documentation: get player death count.
      - Declaration: EHandle m_hActiveItem
        Documentation: The active item.
      - Declaration: int m_iFOV
        Documentation: Field of view.
      - Declaration: int m_iHideHUD
        Documentation: The players hud weapon info is to be hidden.
      - Declaration: bool m_fLongJump
        Documentation: Does this player have the longjump module?
      - Declaration: float m_fDeadTime
        Documentation: the time at which the player died
      - Declaration: EHandle m_hTank
        Documentation: the tank which the player is currently controlling, NULL if no tank
      - Declaration: int m_iTrain
        Documentation: Train control position
      - Declaration: int m_iDrownRestored
        Documentation: Track drowning damage restored.
      - Declaration: int m_iDrownDmg
        Documentation: Track drowning damage taken.
      - Declaration: int m_lastPlayerDamageAmount
        Documentation: Last damage taken.
      - Declaration: float m_flSwimTime
        Documentation: How long this player has been underwater.
      - Declaration: uint m_afPhysicsFlags
        Documentation: ''
      - Declaration: float m_flPlayerFallVelocity
        Documentation: Player fall velocity.
      - Declaration: int m_afButtonReleased
        Documentation: ''
      - Declaration: int m_afButtonPressed
        Documentation: ''
      - Declaration: int m_afButtonLast
        Documentation: ''
      - Declaration: int m_iFlashBattery
        Documentation: Player flashlight amount. 0 <= amount <= 100.
      - Declaration: float m_flStopExtraSoundTime
        Documentation: When to stop the m_iExtraSoundTypes sounds.
      - Declaration: int m_iWeaponFlash
        Documentation: Brightness of the weapon flash.
      - Declaration: int m_iExtraSoundTypes
        Documentation: Additional classification for this weapon's sound.
      - Declaration: int m_iWeaponVolume
        Documentation: How loud the player's weapon is right now.
      - Declaration: float m_flLastMove
        Documentation: When did this player move or tried to move (with the IN_ keys) ?
      - Declaration: EHandle m_hSpawnPoint
        Documentation: Pointer for a spawn point to use.
      - Declaration: float m_flRespawnDelayTime
        Documentation: >-
          Gets added to the standard respawn delay time when killed, reset in
          spawn to 0.0.
      - Declaration: float m_flTimeOfLastDeath
        Documentation: Time of last death.
      - Declaration: float m_flNextClientCommandTime
        Documentation: The next time this player can execute a vocal client command
      - Declaration: const int random_seed
        Documentation: The player's random seed.
      - Declaration: float m_flEffectDamage
        Documentation: Damage modifier (%)
      - Declaration: float m_flEffectSpeed
        Documentation: Movement speed modifier (%)
      - Declaration: float m_flEffectFriction
        Documentation: Movement friction modifier (%)
      - Declaration: float m_flEffectGravity
        Documentation: Gravity modifier (%)
      - Declaration: float m_flEffectRespiration
        Documentation: Extra/less breathing time underwater in seconds
      - Declaration: int m_iEffectNonSolid
        Documentation: is non-solid
      - Declaration: int m_iEffectInvisible
        Documentation: is invisible (render + non-targetable)
      - Declaration: int m_iEffectInvulnerable
        Documentation: is invulnerable (god mode)
      - Declaration: int m_iEffectBlockWeapons
        Documentation: Monster can't use weapons.
      - Declaration: Vector m_vecEffectGlowColor
        Documentation: Glow shell.
      - Declaration: string_t m_iszGuardEntName
        Documentation: Guard entity name.
      - Declaration: EHandle m_hGuardEnt
        Documentation: Monster will guard this entity and turn down follow requests.
      - Declaration: float m_flFallVelocity
        Documentation: Current fall speed.
      - Declaration: float m_flAutomaticAttackTime
        Documentation: How long an npc will attempt to fire full auto.
      - Declaration: bool m_fCanFearCreatures
        Documentation: Whether this monster can fear creatures.
      - Declaration: int8 m_chTextureType
        Documentation: |-
          Current texture type.
          See TextureType enum.
      - Declaration: string_t m_FormattedName
        Documentation: |-
          The formatted name.
          For better name outputs. E.g. "Alien Slave" rather than "alien_slave".
      - Declaration: float m_useTime
        Documentation: Don't allow +USE until this time.
      - Declaration: EHandle m_hCineBlocker
        Documentation: Entity that is blocking cinematic execution.
      - Declaration: EHandle m_hCine
        Documentation: Cinematic entity.
      - Declaration: SCRIPTSTATE m_scriptState
        Documentation: internal cinematic state.
      - Declaration: Vector m_HackedGunPos
        Documentation: HACK until we can query end of gun.
      - Declaration: string_t m_iszTriggerTarget
        Documentation: Name of target that should be fired.
      - Declaration: int m_iTriggerCondition
        Documentation: >-
          for scripted AI, this is the condition that will cause the activation
          of the monster's TriggerTarget.
      - Declaration: float m_flDistLook
        Documentation: distance monster sees (Default 2048).
      - Declaration: float m_flDistTooFar
        Documentation: >-
          if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in
          CheckEnemy.
      - Declaration: float m_flHungryTime
        Documentation: Time based damage inflictor.
      - Declaration: int m_failSchedule
        Documentation: Schedule type to choose if current schedule fails.
      - Declaration: entvars_t@ pevTimeBasedInflictor
        Documentation: Time based damage inflictor.
      - Declaration: float m_tbdPrev
        Documentation: Time-based damage timer.
      - Declaration: float m_lastDamageAmount
        Documentation: how much damage did monster (player) last take.
      - Declaration: int m_bitsDamageType
        Documentation: what types of damage has monster (player) taken.
      - Declaration: float m_flNextAttack
        Documentation: cannot attack again until this time.
      - Declaration: int m_afMoveShootCap
        Documentation: tells us what a monster can/can't do, while moving.
      - Declaration: int m_afCapability
        Documentation: tells us what a monster can/can't do.
      - Declaration: int m_cAmmoLoaded
        Documentation: >-
          how much ammo is in the weapon (used to trigger reload anim
          sequences).
      - Declaration: Vector m_vecEnemyLKP
        Documentation: last known position of enemy. (enemy's origin).
      - Declaration: int m_iMaxHealth
        Documentation: keeps track of monster's maximum health value (for re-healing, etc).
      - Declaration: int m_bloodColor
        Documentation: color of blood particles.
      - Declaration: int m_afMemory
        Documentation: Monster memory.
      - Declaration: int m_iHintNode
        Documentation: >-
          this is the hint node that the monster is moving towards or performing
          active idle on..
      - Declaration: Vector m_vecLastPosition
        Documentation: >-
          monster sometimes wants to return to where it started after an
          operation..
      - Declaration: int m_afSoundTypes
        Documentation: Sound types that can be heard.
      - Declaration: int m_iAudibleList
        Documentation: first index of a linked list of sounds that the monster can hear.
      - Declaration: Activity m_movementActivity
        Documentation: When moving, set this activity.
      - Declaration: Vector m_vecMoveGoal
        Documentation: Kept around for node graph moves, so we know our ultimate goal.
      - Declaration: float m_moveradius
        Documentation: Minimum radius.
      - Declaration: float m_moveWaitTime
        Documentation: How long I should wait for something to move.
      - Declaration: int m_iRouteIndex
        Documentation: Index into m_Route[].
      - Declaration: int m_movementGoal
        Documentation: Goal that defines route.
      - Declaration: int m_iScheduleIndex
        Documentation: Schedule index.
      - Declaration: Schedule@ m_pScheduleSaved
        Documentation: For land_on_ground schedules (remember last schedule and continue).
      - Declaration: Schedule@ m_pSchedule
        Documentation: Current schedule.
      - Declaration: int m_iTaskStatus
        Documentation: Task status.
      - Declaration: MONSTERSTATE m_IdealMonsterState
        Documentation: monster should change to this state.
      - Declaration: MONSTERSTATE m_MonsterState
        Documentation: monster's current state.
      - Declaration: int m_LastHitGroup
        Documentation: the last body region that took damage.
      - Declaration: Activity m_GaitActivity
        Documentation: gaitsequence.
      - Declaration: Activity m_IdealActivity
        Documentation: monster should switch to this activity.
      - Declaration: Activity m_Activity
        Documentation: what the monster is doing (animation).
      - Declaration: float m_flMoveWaitFinished
        Documentation: >-
          if we're told to wait before moving, this is the time that the wait
          will be over.
      - Declaration: float m_flWaitFinished
        Documentation: if we're told to wait, this is the time that the wait will be over.
      - Declaration: float m_flFieldOfView
        Documentation: width of monster's field of view ( dot product ).
      - Declaration: EHandle m_hTargetTank
        Documentation: Target tank to control.
      - Declaration: EHandle m_hTargetEnt
        Documentation: the entity that the monster is trying to reach.
      - Declaration: EHandle m_hEnemy
        Documentation: the entity that the monster is fighting.
      - Declaration: string_t m_sMaster
        Documentation: This entity's master, if any.
      - Declaration: int m_bitsDamageInflict
        Documentation: DMG_ damage type that the door or trigger does.
      - Declaration: Vector m_vecFinalAngle
        Documentation: Final angle.
      - Declaration: Vector m_vecFinalDest
        Documentation: Final destination.
      - Declaration: Vector m_vecAngle2
        Documentation: Open angle.
      - Declaration: Vector m_vecAngle1
        Documentation: Closed angle.
      - Declaration: Vector m_vecPosition2
        Documentation: Open position.
      - Declaration: Vector m_vecPosition1
        Documentation: Closed position.
      - Declaration: EHandle m_hActivator
        Documentation: Handle to the activator.
      - Declaration: float m_flHeight
        Documentation: Height.
      - Declaration: int m_cTriggersLeft
        Documentation: 'Trigger_counter only: # of activations remaining.'
      - Declaration: float m_flTLength
        Documentation: For plats.
      - Declaration: float m_flTWidth
        Documentation: For plats.
      - Declaration: float m_flLip
        Documentation: >-
          How much to stick out of a wall. Will recede further into walls if
          negative.
      - Declaration: float m_flWait
        Documentation: How long to wait before resetting.
      - Declaration: float m_flMoveDistance
        Documentation: How far a door should slide or rotate.
      - Declaration: TOGGLE_STATE m_toggle_state
        Documentation: Current toggle state.
      - Declaration: bool m_fSequenceLoops
        Documentation: True if the sequence loops.
      - Declaration: bool m_fSequenceFinished
        Documentation: Flag set when StudioAdvanceFrame moves across a frame boundry.
      - Declaration: float m_flLastGaitEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flLastEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flGroundSpeed
        Documentation: Computed linear movement rate for current sequence.
      - Declaration: float m_flFrameRate
        Documentation: Computed FPS for current sequence.
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CCineMonster
    Namespace: ''
    Documentation: Cinematic monster entity base class
    Flags: 262145
    Methods:
      - Declaration: int IgnoreConditions()
        Documentation: Gets the ignore conditions.
      - Declaration: bool CanInterrupt()
        Documentation: Returns whether this script can be interrupted.
      - Declaration: bool FCanOverrideState() const
        Documentation: >-
          If this returns false, scripted sequences cannot possess entities
          regardless of state.
      - Declaration: >-
          bool StartSequence(CBaseMonster@ pTarget, const string& in szSequence,
          const bool fCompleteOnEmpty)
        Documentation: Make the entity enter a scripted sequence.
      - Declaration: void CancelScript()
        Documentation: >-
          Find all the cinematic entities with my targetname and stop them from
          playing.
      - Declaration: void PossessEntity()
        Documentation: Make the entity enter a scripted sequence.
      - Declaration: void DelayStart(int iState)
        Documentation: >-
          Find all the cinematic entities with my targetname and tell them to
          wait before starting.
      - Declaration: void ResetEffects()
        Documentation: Reset all effect modifiers
      - Declaration: void ApplyEffects()
        Documentation: Re-calculate compounded effect modifiers and apply to the monster
      - Declaration: void ClearEnemyList()
        Documentation: Clears this monster's list of enemies
      - Declaration: InventoryList@ get_m_pInventory() const
        Documentation: The inventory items this monster has
      - Declaration: void MedicCallSound(float flDistance = 0.0f)
        Documentation: Medic call sound.
      - Declaration: string m_szTextureName()
        Documentation: Current texture name we're standing on.
      - Declaration: void StopPlayerFollowing(const bool bClearSchedule)
        Documentation: Stops following a player.
      - Declaration: void StartPlayerFollowing(CBaseEntity@ pLeader)
        Documentation: Starts following a given player.
      - Declaration: bool CanPlayerFollow()
        Documentation: Returns whether this monster can follow a player.
      - Declaration: bool IsPlayerFollowing()
        Documentation: Returns whether this monster is following a player.
      - Declaration: >-
          void FollowerPlayerUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller,
          USE_TYPE useType, float flValue)
        Documentation: Use method for following players (set only if friendly)
      - Declaration: void ShockGlowEffect(bool fMode)
        Documentation: Turns the shock glow effect on or off.
      - Declaration: >-
          CBaseEntity@ DropItem(const string& in szItemName, const Vector& in
          vecPos, const Vector& in vecAng)
        Documentation: Drops the given item from the given position at the given angle.
      - Declaration: bool CineCleanup()
        Documentation: Cleans up after a cinematic event.
      - Declaration: bool ExitScriptedSequence()
        Documentation: Exits the scripted sequence this monster is currently in, if any.
      - Declaration: bool HasAllMemories(int iMemory) const
        Documentation: Returns whether this monster remembers all of the given memories.
      - Declaration: bool HasMemory(int iMemory) const
        Documentation: Returns whether this monster remembers any of the given memories.
      - Declaration: void Forget(int iMemory)
        Documentation: Makes this monster forget the given memories.
      - Declaration: void Remember(int iMemory)
        Documentation: Makes this monster remember the given memories.
      - Declaration: >-
          void StopPlayerFollowing(const bool clearSchedule, bool bSilent =
          false)
        Documentation: Stops following its target.
      - Declaration: void StartPlayerFollowing(CBaseEntity@ pLeader, bool bSilent = false)
        Documentation: Starts following its target.
      - Declaration: void PainSound()
        Documentation: Plays this monster's pain sound.
      - Declaration: void IdleSound()
        Documentation: Plays this monster's idle sound.
      - Declaration: void AlertSound()
        Documentation: Plays this monster's alert sound.
      - Declaration: void DeathSound()
        Documentation: Plays this monster's death sound.
      - Declaration: Vector GetGunPosition()
        Documentation: ''
      - Declaration: Vector ShootAtEnemy(const Vector& in vecShootOrigin)
        Documentation: Shoots at the specified location.
      - Declaration: void FadeMonster()
        Documentation: |-
          Fades this monster.
          Note: does not kill the monster.
      - Declaration: bool HasAlienGibs()
        Documentation: Returns whether this monster has alien gibs.
      - Declaration: bool HasHumanGibs()
        Documentation: Returns whether this monster has human gibs.
      - Declaration: void CallGibMonster()
        Documentation: Determines whether to gib or fade this monster, and acts accordingly.
      - Declaration: bool ShouldGibMonster(int iGib)
        Documentation: |-
          Returns whether the monster should be gibbed given the gib type.
          See GIB enum.
      - Declaration: void GibMonster()
        Documentation: Gibs the monster.
      - Declaration: bool GetEnemy()
        Documentation: Tries to find the best suitable enemy for this monster.
      - Declaration: bool NoFriendlyFireToPos(Vector vecPos)
        Documentation: >-
          Returns whether attacking the target location at this time would
          result in friendly fire
      - Declaration: bool NoFriendlyFire(Vector vecPos, CBaseEntity@ pTarget)
        Documentation: >-
          Returns whether attacking the given target at this time from the given
          location would result in friendly fire
      - Declaration: bool NoFriendlyFire(Vector vecPos)
        Documentation: >-
          Returns whether attacking at this time from the given location would
          result in friendly fire
      - Declaration: bool NoFriendlyFire()
        Documentation: Returns whether attacking at this time would result in friendly fire
      - Declaration: bool FCheckAITrigger()
        Documentation: Checks and, if necessary, fires the monster's trigger target.
      - Declaration: void Eat(float flFullDuration)
        Documentation: Make the monster 'full' for a while.
      - Declaration: bool FShouldEat()
        Documentation: Returns whether this monster should eat.
      - Declaration: CSound@ PBestSound()
        Documentation: Returns a pointer to the sound the monster should react to.
      - Declaration: bool HasAllConditions(int iConditions) const
        Documentation: Returns whether this monster has all of the given AI conditions.
      - Declaration: bool HasConditions(int iConditions) const
        Documentation: Returns whether this monster has any of the given AI conditions.
      - Declaration: void ClearConditions(int iConditions)
        Documentation: Clears AI conditions.
      - Declaration: void SetConditions(int iConditions)
        Documentation: Sets AI conditions.
      - Declaration: bool CheckAttacker(CBaseEntity@ pAttacker)
        Documentation: Determine if we should ignore damage.
      - Declaration: int RouteClassify(int iMoveFlag)
        Documentation: Returns the MOVEGOAL for the given move flag.
      - Declaration: void SetYawSpeed()
        Documentation: Allows different yaw_speeds for each activity.
      - Declaration: void MakeIdealYaw(Vector vecTarget)
        Documentation: |-
          gets a yaw value for the caller that would
          face the supplied vector. Value is stuffed into the monster's
          ideal_yaw.
      - Declaration: int IScheduleFlags()
        Documentation: |-
          Returns an integer with all Conditions
          bits that are currently set and also set in the current
          schedule's Interrupt mask.
      - Declaration: bool MovementIsComplete()
        Documentation: Returns whether movement is complete.
      - Declaration: bool TaskIsComplete()
        Documentation: Returns whether the task is complete.
      - Declaration: bool TaskIsRunning()
        Documentation: Returns whether a task is running.
      - Declaration: void TaskBegin()
        Documentation: Sets the task status to running.
      - Declaration: void TaskFail()
        Documentation: Sets the condition bit for a failed task.
      - Declaration: void MovementComplete()
        Documentation: Called when movement has completed.
      - Declaration: void TaskComplete()
        Documentation: Sets the task status to complete.
      - Declaration: bool TestFGetNodeRoute(Vector vecDest)
        Documentation: TEST FGetNodeRoute.
      - Declaration: bool FGetNodeRoute(Vector vecDest)
        Documentation: >-
          tries to build an entire node path from

          the callers origin to the passed vector.

          If this is  possible, ROUTE_SIZE waypoints will be copied into the
          callers m_Route.

          true is returned if the operation  succeeds (path is valid) or false
          if failed (no path  exists ).
      - Declaration: bool PopEnemy()
        Documentation: Try remembering the last few enemies.
      - Declaration: void PushEnemy(CBaseEntity@ pTarget, Vector& in vecLastKnownPos)
        Documentation: Remember the last few enemies, always remember the player.
      - Declaration: bool CheckEnemy(CBaseEntity@ pEnemy)
        Documentation: >-
          part of the Condition collection process, gets and stores data and
          conditions pertaining to a monster's enemy.

          Returns true if Enemy LKP was updated.
      - Declaration: >-
          bool CheckAttacksFromPosition(CBaseEntity@ pTarget, float flDist,
          Vector vecPos)
        Documentation: Check whether attacks are possible from the given position.
      - Declaration: void CheckAttacks_Move(CBaseEntity@ pTarget, float flDist)
        Documentation: Check attacks to the given enemy at the given distance while moving.
      - Declaration: void CheckAttacks(CBaseEntity@ pTarget, float flDist)
        Documentation: Check attacks to the given enemy at the given distance.
      - Declaration: void ReportAIState()
        Documentation: Reports the AI state.
      - Declaration: void SetState(MONSTERSTATE state)
        Documentation: Sets the current monster state.
      - Declaration: void SetSequenceByName(const string& in szSequence)
        Documentation: Sets the current sequence by name.
      - Declaration: void SetGaitActivity(Activity newActivity)
        Documentation: Sets the current gait activity.
      - Declaration: void SetActivity(Activity newActivity)
        Documentation: Sets the current activity.
      - Declaration: MONSTERSTATE GetIdealState()
        Documentation: Gets the ideal monster state.
      - Declaration: Task@ GetTask()
        Documentation: Gets the current task.
      - Declaration: void SentenceStop()
        Documentation: Stops playing its current sentence.
      - Declaration: >-
          void PlayScriptedSentence(const string& in szSentence, float duration,
          float volume, float attenuation, const bool bConcurrent, CBaseEntity@
          pListener)
        Documentation: Plays the given scripted sentence.
      - Declaration: >-
          void PlaySentence(const string& in szSentence, float duration, float
          volume, float attenuation)
        Documentation: Plays the given sentence.
      - Declaration: bool CanPlaySentence(const bool bDisregardState)
        Documentation: Returns whether this monster can play its sentence.
      - Declaration: bool CanPlaySequence(const bool bDisregardState, int iInterruptLevel)
        Documentation: Returns whether this monster can play its sequence.
      - Declaration: void ScheduleChange()
        Documentation: Called after the monster's schedule changes.
      - Declaration: Schedule@ GetSchedule()
        Documentation: Gets the current schedule.
      - Declaration: Schedule@ GetScheduleOfType(int iType)
        Documentation: Gets one of the available schedules of the given type.
      - Declaration: void RunTask(Task@ pTask)
        Documentation: Runs the given task.
      - Declaration: void StartTask(Task@ pTask)
        Documentation: Starts the given task.
      - Declaration: void MaintainSchedule()
        Documentation: Maintains the monster's schedule.
      - Declaration: Schedule@ ScheduleFromName(const string& in szName)
        Documentation: Returns the schedule with name szName if it exists, NULL otherwise.
      - Declaration: >-
          Schedule@ ScheduleInList(const string& in szName, array<Schedule@>@
          pArray)
        Documentation: >-
          Returns the schedule with name szName if it's in the list, NULL
          otherwise.
      - Declaration: bool NextScheduledTask()
        Documentation: Moves to the next scheduled task.
      - Declaration: void ChangeSchedule(Schedule@ pNewSchedule)
        Documentation: Changes this monster's schedule.
      - Declaration: bool FScheduleDone()
        Documentation: Returns whether this monster's schedule is done.
      - Declaration: void ClearSchedule()
        Documentation: Clears this monster's schedule.
      - Declaration: bool FScheduleValid()
        Documentation: Returns whether this monster's schedule is valid.
      - Declaration: bool FHaveSchedule()
        Documentation: Returns whether this monster has a schedule.
      - Declaration: bool CheckTankUsage()
        Documentation: >-
          Checks whether the monster can use a func_tank. Return true if
          possible.
      - Declaration: bool CheckMeleeAttack2_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack2(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack1_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack1(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack2_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack2(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack1_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack1(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: void StopAnimation()
        Documentation: >-
          This will stop animation until you call ResetSequenceInfo() at some
          point in the future
      - Declaration: void Stop()
        Documentation: Stops this monster moving
      - Declaration: Activity GetStoppedActivity()
        Documentation: Gets the stopped activity
      - Declaration: bool ShouldAdvanceRoute(float flWaypointDist)
        Documentation: Returns whether this monster should advance its route
      - Declaration: >-
          void MoveExecute(CBaseEntity@ pTargetEnt, const Vector& in vecDir,
          float flInterval)
        Documentation: Starts the monster
      - Declaration: void Move(float flInterval = 0.1f)
        Documentation: Starts the monster
      - Declaration: >-
          int CheckLocalMove(const Vector& in vecStart, const Vector& in
          vecEnd,CBaseEntity@ pTarget, float& out flDist, Vector& out
          vecEndPosition, bool fOriginalCheck = false)
        Documentation: finds best visible enemy for attack
      - Declaration: bool FInViewCone(const Vector& in vecOrigin)
        Documentation: see if given location is in monster's view cone
      - Declaration: bool FInViewCone(CBaseEntity@ pEntity)
        Documentation: see if pEntity is in monster's view cone
      - Declaration: CBaseEntity@ BestVisibleEnemy()
        Documentation: Finds best visible enemy for attack
      - Declaration: void StartMonster()
        Documentation: Starts the monster
      - Declaration: void Revive()
        Documentation: Revives the monster
      - Declaration: void BecomeDead(float flSavedHealth)
        Documentation: Makes the monster become dead
      - Declaration: void MonsterInitDead()
        Documentation: Call after animation/pose is set up
      - Declaration: void MonsterInit()
        Documentation: Initializes the monster
      - Declaration: void SetupFriendly()
        Documentation: use this overridden to make some other friendly monsters
      - Declaration: float DamageForce(float flDamage)
        Documentation: >-
          Returns the amount of force applied to this monster when the given
          amount of damage is done.
      - Declaration: float DamageForce(float flDamage, int bitsDamageType)
        Documentation: >-
          Returns the amount of force applied to this monster when the given
          amount of damage is done.
      - Declaration: float FlYawDiff()
        Documentation: >-
          returns the difference ( in degrees ) between monster's current yaw
          and ideal_yaw.

          Positive result is left turn, negative is right turn.
      - Declaration: float VecToYaw(Vector vecDir)
        Documentation: >-
          turns a directional vector into a yaw value that points down that
          vector.
      - Declaration: float ChangeYaw(int iSpeed)
        Documentation: turns a monster towards its ideal_yaw
      - Declaration: bool ShouldFadeOnDeath()
        Documentation: Returns whether this monster should fade on death.
      - Declaration: void Listen()
        Documentation: Listens for anything that is within audible distance.
      - Declaration: void RunAI()
        Documentation: Runs this monster's AI.
      - Declaration: void Look(int iDistance)
        Documentation: |-
          Look - Base class monster function to find enemies or
          food by sight. iDistance is distance ( in units ) that the
          monster can see.
          Sets the sight bits of the m_afConditions mask to indicate
          which types of entities were sighted.
          Function also sets the Looker's m_pLink
          to the head of a link list that contains all visible ents.
          (linked via each ent's m_pLink field)
      - Declaration: >-
          void MonsterUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller,
          USE_TYPE useType, float flValue = 0.0f)
        Documentation: Will make a monster angry at whomever activated it.
      - Declaration: int8& m_rgbTimeBasedDamage(size_t uiIndex)
        Documentation: >-
          time based damage counters, decr. 1 per 2 seconds. Index must be
          between 0 and CMG_TIMEBASED.
      - Declaration: Waypoint& m_Route(size_t uiIndex)
        Documentation: Positions of movement. Index must be between 0 and ROUTE_SIZE
      - Declaration: Vector& m_vecOldEnemy(size_t uiIndex)
        Documentation: Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.
      - Declaration: EHandle& m_hOldEnemy(size_t uiIndex)
        Documentation: Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.
      - Declaration: InventoryRules@ get_m_pInventoryRules() const
        Documentation: The inventory rules.
      - Declaration: bool IsToggleLockedByMaster()
        Documentation: |-
          Returns whether this entity is locked by its master.
          Separate from IsLockedByMaster due to limitations.
      - Declaration: void AngularMove(Vector vecDestAngle, float flSpeed)
        Documentation: Performs angular movement.
      - Declaration: void LinearMove(Vector vecDest, float flSpeed)
        Documentation: Performs linear movement.
      - Declaration: int GetSequenceActivityName(int iSequence)
        Documentation: Gets activity for the given sequence.
      - Declaration: void SetSequenceBox()
        Documentation: Sets the sequence box.
      - Declaration: int GetAttachmentCount()
        Documentation: Gets the number of attachments that the current model has.
      - Declaration: bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)
        Documentation: Extracts the bounding box of the current model.
      - Declaration: int GetBodygroup(int iGroup)
        Documentation: Gets the value of the given body group.
      - Declaration: void SetBodygroup(int iGroup, int iValue)
        Documentation: Sets the given body group to the given value.
      - Declaration: >-
          void GetAttachment(int iAttachment, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the attachment position.
      - Declaration: int FindTransition(int iEndingSequence, int iGoalSequence)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          int FindTransition(int iEndingSequence, int iGoalSequence, int& out
          iDir)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          void GetAutomovement(Vector& out origin, Vector& out angles, float
          flInterval = 0.1f)
        Documentation: Gets automatic movement.
      - Declaration: >-
          void GetBonePosition(int iBone, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the position of the given bone.
      - Declaration: float SetBlending(int iBlender, float flValue)
        Documentation: Sets the given blending controller to the given value.
      - Declaration: void InitBoneControllers()
        Documentation: Initializes bone controllers.
      - Declaration: float SetBoneController(int iController, float flValue)
        Documentation: Sets the specified bone controller to the given value.
      - Declaration: void DispatchAnimEvents(float flFutureInterval = 0.1f)
        Documentation: >-
          Handle events that have happend since last time called up until X
          seconds into the future.
      - Declaration: void ResetGaitSequenceInfo()
        Documentation: Resets gait sequence info.
      - Declaration: void ResetSequenceInfo()
        Documentation: Resets sequence info.
      - Declaration: int LookupSequence(const string& in szLabel)
        Documentation: >-
          Returns the index of the given sequence, or -1 if no such sequence
          exists.
      - Declaration: int LookupActivityHeaviest(int iActivity)
        Documentation: >-
          Returns the index of the given activity that has the heaviest weight,
          or -1 if no such activity exists.
      - Declaration: int LookupActivity(int iActivity)
        Documentation: >-
          Returns the index of the given activity, or -1 if no such activity
          exists.
      - Declaration: int GetSequenceFlags()
        Documentation: Get sequence flags.
      - Declaration: float StudioFrameAdvance(float flInterval = 0.0f)
        Documentation: Accumulate animation frame time from last time called until now.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseDelay@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseAnimating@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseToggle@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseMonster@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: float m_flMoveToRadius
        Documentation: When in radius, script is done.
      - Declaration: bool m_interruptable
        Documentation: Whether this scripted sequence can be interrupted.
      - Declaration: float m_startTime
        Documentation: When to start the script.
      - Declaration: int m_iDelay
        Documentation: Delay before execution.
      - Declaration: float m_flRepeat
        Documentation: How much time has to pass before the scripted sequence can repeat.
      - Declaration: float m_flRadius
        Documentation: The radius to search in.
      - Declaration: string_t m_iszEntity
        Documentation: The target entity name.
      - Declaration: string_t m_iszPlay
        Documentation: The play animation name.
      - Declaration: string_t m_iszIdle
        Documentation: Te idle animation name.
      - Declaration: float m_flEffectDamage
        Documentation: Damage modifier (%)
      - Declaration: float m_flEffectSpeed
        Documentation: Movement speed modifier (%)
      - Declaration: float m_flEffectFriction
        Documentation: Movement friction modifier (%)
      - Declaration: float m_flEffectGravity
        Documentation: Gravity modifier (%)
      - Declaration: float m_flEffectRespiration
        Documentation: Extra/less breathing time underwater in seconds
      - Declaration: int m_iEffectNonSolid
        Documentation: is non-solid
      - Declaration: int m_iEffectInvisible
        Documentation: is invisible (render + non-targetable)
      - Declaration: int m_iEffectInvulnerable
        Documentation: is invulnerable (god mode)
      - Declaration: int m_iEffectBlockWeapons
        Documentation: Monster can't use weapons.
      - Declaration: Vector m_vecEffectGlowColor
        Documentation: Glow shell.
      - Declaration: string_t m_iszGuardEntName
        Documentation: Guard entity name.
      - Declaration: EHandle m_hGuardEnt
        Documentation: Monster will guard this entity and turn down follow requests.
      - Declaration: float m_flFallVelocity
        Documentation: Current fall speed.
      - Declaration: float m_flAutomaticAttackTime
        Documentation: How long an npc will attempt to fire full auto.
      - Declaration: bool m_fCanFearCreatures
        Documentation: Whether this monster can fear creatures.
      - Declaration: int8 m_chTextureType
        Documentation: |-
          Current texture type.
          See TextureType enum.
      - Declaration: string_t m_FormattedName
        Documentation: |-
          The formatted name.
          For better name outputs. E.g. "Alien Slave" rather than "alien_slave".
      - Declaration: float m_useTime
        Documentation: Don't allow +USE until this time.
      - Declaration: EHandle m_hCineBlocker
        Documentation: Entity that is blocking cinematic execution.
      - Declaration: EHandle m_hCine
        Documentation: Cinematic entity.
      - Declaration: SCRIPTSTATE m_scriptState
        Documentation: internal cinematic state.
      - Declaration: Vector m_HackedGunPos
        Documentation: HACK until we can query end of gun.
      - Declaration: string_t m_iszTriggerTarget
        Documentation: Name of target that should be fired.
      - Declaration: int m_iTriggerCondition
        Documentation: >-
          for scripted AI, this is the condition that will cause the activation
          of the monster's TriggerTarget.
      - Declaration: float m_flDistLook
        Documentation: distance monster sees (Default 2048).
      - Declaration: float m_flDistTooFar
        Documentation: >-
          if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in
          CheckEnemy.
      - Declaration: float m_flHungryTime
        Documentation: Time based damage inflictor.
      - Declaration: int m_failSchedule
        Documentation: Schedule type to choose if current schedule fails.
      - Declaration: entvars_t@ pevTimeBasedInflictor
        Documentation: Time based damage inflictor.
      - Declaration: float m_tbdPrev
        Documentation: Time-based damage timer.
      - Declaration: float m_lastDamageAmount
        Documentation: how much damage did monster (player) last take.
      - Declaration: int m_bitsDamageType
        Documentation: what types of damage has monster (player) taken.
      - Declaration: float m_flNextAttack
        Documentation: cannot attack again until this time.
      - Declaration: int m_afMoveShootCap
        Documentation: tells us what a monster can/can't do, while moving.
      - Declaration: int m_afCapability
        Documentation: tells us what a monster can/can't do.
      - Declaration: int m_cAmmoLoaded
        Documentation: >-
          how much ammo is in the weapon (used to trigger reload anim
          sequences).
      - Declaration: Vector m_vecEnemyLKP
        Documentation: last known position of enemy. (enemy's origin).
      - Declaration: int m_iMaxHealth
        Documentation: keeps track of monster's maximum health value (for re-healing, etc).
      - Declaration: int m_bloodColor
        Documentation: color of blood particles.
      - Declaration: int m_afMemory
        Documentation: Monster memory.
      - Declaration: int m_iHintNode
        Documentation: >-
          this is the hint node that the monster is moving towards or performing
          active idle on..
      - Declaration: Vector m_vecLastPosition
        Documentation: >-
          monster sometimes wants to return to where it started after an
          operation..
      - Declaration: int m_afSoundTypes
        Documentation: Sound types that can be heard.
      - Declaration: int m_iAudibleList
        Documentation: first index of a linked list of sounds that the monster can hear.
      - Declaration: Activity m_movementActivity
        Documentation: When moving, set this activity.
      - Declaration: Vector m_vecMoveGoal
        Documentation: Kept around for node graph moves, so we know our ultimate goal.
      - Declaration: float m_moveradius
        Documentation: Minimum radius.
      - Declaration: float m_moveWaitTime
        Documentation: How long I should wait for something to move.
      - Declaration: int m_iRouteIndex
        Documentation: Index into m_Route[].
      - Declaration: int m_movementGoal
        Documentation: Goal that defines route.
      - Declaration: int m_iScheduleIndex
        Documentation: Schedule index.
      - Declaration: Schedule@ m_pScheduleSaved
        Documentation: For land_on_ground schedules (remember last schedule and continue).
      - Declaration: Schedule@ m_pSchedule
        Documentation: Current schedule.
      - Declaration: int m_iTaskStatus
        Documentation: Task status.
      - Declaration: MONSTERSTATE m_IdealMonsterState
        Documentation: monster should change to this state.
      - Declaration: MONSTERSTATE m_MonsterState
        Documentation: monster's current state.
      - Declaration: int m_LastHitGroup
        Documentation: the last body region that took damage.
      - Declaration: Activity m_GaitActivity
        Documentation: gaitsequence.
      - Declaration: Activity m_IdealActivity
        Documentation: monster should switch to this activity.
      - Declaration: Activity m_Activity
        Documentation: what the monster is doing (animation).
      - Declaration: float m_flMoveWaitFinished
        Documentation: >-
          if we're told to wait before moving, this is the time that the wait
          will be over.
      - Declaration: float m_flWaitFinished
        Documentation: if we're told to wait, this is the time that the wait will be over.
      - Declaration: float m_flFieldOfView
        Documentation: width of monster's field of view ( dot product ).
      - Declaration: EHandle m_hTargetTank
        Documentation: Target tank to control.
      - Declaration: EHandle m_hTargetEnt
        Documentation: the entity that the monster is trying to reach.
      - Declaration: EHandle m_hEnemy
        Documentation: the entity that the monster is fighting.
      - Declaration: string_t m_sMaster
        Documentation: This entity's master, if any.
      - Declaration: int m_bitsDamageInflict
        Documentation: DMG_ damage type that the door or trigger does.
      - Declaration: Vector m_vecFinalAngle
        Documentation: Final angle.
      - Declaration: Vector m_vecFinalDest
        Documentation: Final destination.
      - Declaration: Vector m_vecAngle2
        Documentation: Open angle.
      - Declaration: Vector m_vecAngle1
        Documentation: Closed angle.
      - Declaration: Vector m_vecPosition2
        Documentation: Open position.
      - Declaration: Vector m_vecPosition1
        Documentation: Closed position.
      - Declaration: EHandle m_hActivator
        Documentation: Handle to the activator.
      - Declaration: float m_flHeight
        Documentation: Height.
      - Declaration: int m_cTriggersLeft
        Documentation: 'Trigger_counter only: # of activations remaining.'
      - Declaration: float m_flTLength
        Documentation: For plats.
      - Declaration: float m_flTWidth
        Documentation: For plats.
      - Declaration: float m_flLip
        Documentation: >-
          How much to stick out of a wall. Will recede further into walls if
          negative.
      - Declaration: float m_flWait
        Documentation: How long to wait before resetting.
      - Declaration: float m_flMoveDistance
        Documentation: How far a door should slide or rotate.
      - Declaration: TOGGLE_STATE m_toggle_state
        Documentation: Current toggle state.
      - Declaration: bool m_fSequenceLoops
        Documentation: True if the sequence loops.
      - Declaration: bool m_fSequenceFinished
        Documentation: Flag set when StudioAdvanceFrame moves across a frame boundry.
      - Declaration: float m_flLastGaitEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flLastEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flGroundSpeed
        Documentation: Computed linear movement rate for current sequence.
      - Declaration: float m_flFrameRate
        Documentation: Computed FPS for current sequence.
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBaseMonster
    Namespace: ''
    Documentation: Monster entity base class
    Flags: 262145
    Methods:
      - Declaration: CGrenade@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayer@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CCineMonster@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: void ResetEffects()
        Documentation: Reset all effect modifiers
      - Declaration: void ApplyEffects()
        Documentation: Re-calculate compounded effect modifiers and apply to the monster
      - Declaration: void ClearEnemyList()
        Documentation: Clears this monster's list of enemies
      - Declaration: InventoryList@ get_m_pInventory() const
        Documentation: The inventory items this monster has
      - Declaration: void MedicCallSound(float flDistance = 0.0f)
        Documentation: Medic call sound.
      - Declaration: string m_szTextureName()
        Documentation: Current texture name we're standing on.
      - Declaration: void StopPlayerFollowing(const bool bClearSchedule)
        Documentation: Stops following a player.
      - Declaration: void StartPlayerFollowing(CBaseEntity@ pLeader)
        Documentation: Starts following a given player.
      - Declaration: bool CanPlayerFollow()
        Documentation: Returns whether this monster can follow a player.
      - Declaration: bool IsPlayerFollowing()
        Documentation: Returns whether this monster is following a player.
      - Declaration: >-
          void FollowerPlayerUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller,
          USE_TYPE useType, float flValue)
        Documentation: Use method for following players (set only if friendly)
      - Declaration: void ShockGlowEffect(bool fMode)
        Documentation: Turns the shock glow effect on or off.
      - Declaration: >-
          CBaseEntity@ DropItem(const string& in szItemName, const Vector& in
          vecPos, const Vector& in vecAng)
        Documentation: Drops the given item from the given position at the given angle.
      - Declaration: bool CineCleanup()
        Documentation: Cleans up after a cinematic event.
      - Declaration: bool ExitScriptedSequence()
        Documentation: Exits the scripted sequence this monster is currently in, if any.
      - Declaration: bool HasAllMemories(int iMemory) const
        Documentation: Returns whether this monster remembers all of the given memories.
      - Declaration: bool HasMemory(int iMemory) const
        Documentation: Returns whether this monster remembers any of the given memories.
      - Declaration: void Forget(int iMemory)
        Documentation: Makes this monster forget the given memories.
      - Declaration: void Remember(int iMemory)
        Documentation: Makes this monster remember the given memories.
      - Declaration: >-
          void StopPlayerFollowing(const bool clearSchedule, bool bSilent =
          false)
        Documentation: Stops following its target.
      - Declaration: void StartPlayerFollowing(CBaseEntity@ pLeader, bool bSilent = false)
        Documentation: Starts following its target.
      - Declaration: void PainSound()
        Documentation: Plays this monster's pain sound.
      - Declaration: void IdleSound()
        Documentation: Plays this monster's idle sound.
      - Declaration: void AlertSound()
        Documentation: Plays this monster's alert sound.
      - Declaration: void DeathSound()
        Documentation: Plays this monster's death sound.
      - Declaration: Vector GetGunPosition()
        Documentation: ''
      - Declaration: Vector ShootAtEnemy(const Vector& in vecShootOrigin)
        Documentation: Shoots at the specified location.
      - Declaration: void FadeMonster()
        Documentation: |-
          Fades this monster.
          Note: does not kill the monster.
      - Declaration: bool HasAlienGibs()
        Documentation: Returns whether this monster has alien gibs.
      - Declaration: bool HasHumanGibs()
        Documentation: Returns whether this monster has human gibs.
      - Declaration: void CallGibMonster()
        Documentation: Determines whether to gib or fade this monster, and acts accordingly.
      - Declaration: bool ShouldGibMonster(int iGib)
        Documentation: |-
          Returns whether the monster should be gibbed given the gib type.
          See GIB enum.
      - Declaration: void GibMonster()
        Documentation: Gibs the monster.
      - Declaration: bool GetEnemy()
        Documentation: Tries to find the best suitable enemy for this monster.
      - Declaration: bool NoFriendlyFireToPos(Vector vecPos)
        Documentation: >-
          Returns whether attacking the target location at this time would
          result in friendly fire
      - Declaration: bool NoFriendlyFire(Vector vecPos, CBaseEntity@ pTarget)
        Documentation: >-
          Returns whether attacking the given target at this time from the given
          location would result in friendly fire
      - Declaration: bool NoFriendlyFire(Vector vecPos)
        Documentation: >-
          Returns whether attacking at this time from the given location would
          result in friendly fire
      - Declaration: bool NoFriendlyFire()
        Documentation: Returns whether attacking at this time would result in friendly fire
      - Declaration: bool FCheckAITrigger()
        Documentation: Checks and, if necessary, fires the monster's trigger target.
      - Declaration: void Eat(float flFullDuration)
        Documentation: Make the monster 'full' for a while.
      - Declaration: bool FShouldEat()
        Documentation: Returns whether this monster should eat.
      - Declaration: CSound@ PBestSound()
        Documentation: Returns a pointer to the sound the monster should react to.
      - Declaration: bool HasAllConditions(int iConditions) const
        Documentation: Returns whether this monster has all of the given AI conditions.
      - Declaration: bool HasConditions(int iConditions) const
        Documentation: Returns whether this monster has any of the given AI conditions.
      - Declaration: void ClearConditions(int iConditions)
        Documentation: Clears AI conditions.
      - Declaration: void SetConditions(int iConditions)
        Documentation: Sets AI conditions.
      - Declaration: bool CheckAttacker(CBaseEntity@ pAttacker)
        Documentation: Determine if we should ignore damage.
      - Declaration: int RouteClassify(int iMoveFlag)
        Documentation: Returns the MOVEGOAL for the given move flag.
      - Declaration: void SetYawSpeed()
        Documentation: Allows different yaw_speeds for each activity.
      - Declaration: void MakeIdealYaw(Vector vecTarget)
        Documentation: |-
          gets a yaw value for the caller that would
          face the supplied vector. Value is stuffed into the monster's
          ideal_yaw.
      - Declaration: int IScheduleFlags()
        Documentation: |-
          Returns an integer with all Conditions
          bits that are currently set and also set in the current
          schedule's Interrupt mask.
      - Declaration: bool MovementIsComplete()
        Documentation: Returns whether movement is complete.
      - Declaration: bool TaskIsComplete()
        Documentation: Returns whether the task is complete.
      - Declaration: bool TaskIsRunning()
        Documentation: Returns whether a task is running.
      - Declaration: void TaskBegin()
        Documentation: Sets the task status to running.
      - Declaration: void TaskFail()
        Documentation: Sets the condition bit for a failed task.
      - Declaration: void MovementComplete()
        Documentation: Called when movement has completed.
      - Declaration: void TaskComplete()
        Documentation: Sets the task status to complete.
      - Declaration: bool TestFGetNodeRoute(Vector vecDest)
        Documentation: TEST FGetNodeRoute.
      - Declaration: bool FGetNodeRoute(Vector vecDest)
        Documentation: >-
          tries to build an entire node path from

          the callers origin to the passed vector.

          If this is  possible, ROUTE_SIZE waypoints will be copied into the
          callers m_Route.

          true is returned if the operation  succeeds (path is valid) or false
          if failed (no path  exists ).
      - Declaration: bool PopEnemy()
        Documentation: Try remembering the last few enemies.
      - Declaration: void PushEnemy(CBaseEntity@ pTarget, Vector& in vecLastKnownPos)
        Documentation: Remember the last few enemies, always remember the player.
      - Declaration: bool CheckEnemy(CBaseEntity@ pEnemy)
        Documentation: >-
          part of the Condition collection process, gets and stores data and
          conditions pertaining to a monster's enemy.

          Returns true if Enemy LKP was updated.
      - Declaration: >-
          bool CheckAttacksFromPosition(CBaseEntity@ pTarget, float flDist,
          Vector vecPos)
        Documentation: Check whether attacks are possible from the given position.
      - Declaration: void CheckAttacks_Move(CBaseEntity@ pTarget, float flDist)
        Documentation: Check attacks to the given enemy at the given distance while moving.
      - Declaration: void CheckAttacks(CBaseEntity@ pTarget, float flDist)
        Documentation: Check attacks to the given enemy at the given distance.
      - Declaration: void ReportAIState()
        Documentation: Reports the AI state.
      - Declaration: void SetState(MONSTERSTATE state)
        Documentation: Sets the current monster state.
      - Declaration: void SetSequenceByName(const string& in szSequence)
        Documentation: Sets the current sequence by name.
      - Declaration: void SetGaitActivity(Activity newActivity)
        Documentation: Sets the current gait activity.
      - Declaration: void SetActivity(Activity newActivity)
        Documentation: Sets the current activity.
      - Declaration: MONSTERSTATE GetIdealState()
        Documentation: Gets the ideal monster state.
      - Declaration: Task@ GetTask()
        Documentation: Gets the current task.
      - Declaration: void SentenceStop()
        Documentation: Stops playing its current sentence.
      - Declaration: >-
          void PlayScriptedSentence(const string& in szSentence, float duration,
          float volume, float attenuation, const bool bConcurrent, CBaseEntity@
          pListener)
        Documentation: Plays the given scripted sentence.
      - Declaration: >-
          void PlaySentence(const string& in szSentence, float duration, float
          volume, float attenuation)
        Documentation: Plays the given sentence.
      - Declaration: bool CanPlaySentence(const bool bDisregardState)
        Documentation: Returns whether this monster can play its sentence.
      - Declaration: bool CanPlaySequence(const bool bDisregardState, int iInterruptLevel)
        Documentation: Returns whether this monster can play its sequence.
      - Declaration: void ScheduleChange()
        Documentation: Called after the monster's schedule changes.
      - Declaration: Schedule@ GetSchedule()
        Documentation: Gets the current schedule.
      - Declaration: Schedule@ GetScheduleOfType(int iType)
        Documentation: Gets one of the available schedules of the given type.
      - Declaration: void RunTask(Task@ pTask)
        Documentation: Runs the given task.
      - Declaration: void StartTask(Task@ pTask)
        Documentation: Starts the given task.
      - Declaration: void MaintainSchedule()
        Documentation: Maintains the monster's schedule.
      - Declaration: Schedule@ ScheduleFromName(const string& in szName)
        Documentation: Returns the schedule with name szName if it exists, NULL otherwise.
      - Declaration: >-
          Schedule@ ScheduleInList(const string& in szName, array<Schedule@>@
          pArray)
        Documentation: >-
          Returns the schedule with name szName if it's in the list, NULL
          otherwise.
      - Declaration: bool NextScheduledTask()
        Documentation: Moves to the next scheduled task.
      - Declaration: void ChangeSchedule(Schedule@ pNewSchedule)
        Documentation: Changes this monster's schedule.
      - Declaration: bool FScheduleDone()
        Documentation: Returns whether this monster's schedule is done.
      - Declaration: void ClearSchedule()
        Documentation: Clears this monster's schedule.
      - Declaration: bool FScheduleValid()
        Documentation: Returns whether this monster's schedule is valid.
      - Declaration: bool FHaveSchedule()
        Documentation: Returns whether this monster has a schedule.
      - Declaration: bool CheckTankUsage()
        Documentation: >-
          Checks whether the monster can use a func_tank. Return true if
          possible.
      - Declaration: bool CheckMeleeAttack2_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack2(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack1_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack1(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack2_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack2(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack1_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack1(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: void StopAnimation()
        Documentation: >-
          This will stop animation until you call ResetSequenceInfo() at some
          point in the future
      - Declaration: void Stop()
        Documentation: Stops this monster moving
      - Declaration: Activity GetStoppedActivity()
        Documentation: Gets the stopped activity
      - Declaration: bool ShouldAdvanceRoute(float flWaypointDist)
        Documentation: Returns whether this monster should advance its route
      - Declaration: >-
          void MoveExecute(CBaseEntity@ pTargetEnt, const Vector& in vecDir,
          float flInterval)
        Documentation: Starts the monster
      - Declaration: void Move(float flInterval = 0.1f)
        Documentation: Starts the monster
      - Declaration: >-
          int CheckLocalMove(const Vector& in vecStart, const Vector& in
          vecEnd,CBaseEntity@ pTarget, float& out flDist, Vector& out
          vecEndPosition, bool fOriginalCheck = false)
        Documentation: finds best visible enemy for attack
      - Declaration: bool FInViewCone(const Vector& in vecOrigin)
        Documentation: see if given location is in monster's view cone
      - Declaration: bool FInViewCone(CBaseEntity@ pEntity)
        Documentation: see if pEntity is in monster's view cone
      - Declaration: CBaseEntity@ BestVisibleEnemy()
        Documentation: Finds best visible enemy for attack
      - Declaration: void StartMonster()
        Documentation: Starts the monster
      - Declaration: void Revive()
        Documentation: Revives the monster
      - Declaration: void BecomeDead(float flSavedHealth)
        Documentation: Makes the monster become dead
      - Declaration: void MonsterInitDead()
        Documentation: Call after animation/pose is set up
      - Declaration: void MonsterInit()
        Documentation: Initializes the monster
      - Declaration: void SetupFriendly()
        Documentation: use this overridden to make some other friendly monsters
      - Declaration: float DamageForce(float flDamage)
        Documentation: >-
          Returns the amount of force applied to this monster when the given
          amount of damage is done.
      - Declaration: float DamageForce(float flDamage, int bitsDamageType)
        Documentation: >-
          Returns the amount of force applied to this monster when the given
          amount of damage is done.
      - Declaration: float FlYawDiff()
        Documentation: >-
          returns the difference ( in degrees ) between monster's current yaw
          and ideal_yaw.

          Positive result is left turn, negative is right turn.
      - Declaration: float VecToYaw(Vector vecDir)
        Documentation: >-
          turns a directional vector into a yaw value that points down that
          vector.
      - Declaration: float ChangeYaw(int iSpeed)
        Documentation: turns a monster towards its ideal_yaw
      - Declaration: bool ShouldFadeOnDeath()
        Documentation: Returns whether this monster should fade on death.
      - Declaration: void Listen()
        Documentation: Listens for anything that is within audible distance.
      - Declaration: void RunAI()
        Documentation: Runs this monster's AI.
      - Declaration: void Look(int iDistance)
        Documentation: |-
          Look - Base class monster function to find enemies or
          food by sight. iDistance is distance ( in units ) that the
          monster can see.
          Sets the sight bits of the m_afConditions mask to indicate
          which types of entities were sighted.
          Function also sets the Looker's m_pLink
          to the head of a link list that contains all visible ents.
          (linked via each ent's m_pLink field)
      - Declaration: >-
          void MonsterUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller,
          USE_TYPE useType, float flValue = 0.0f)
        Documentation: Will make a monster angry at whomever activated it.
      - Declaration: int8& m_rgbTimeBasedDamage(size_t uiIndex)
        Documentation: >-
          time based damage counters, decr. 1 per 2 seconds. Index must be
          between 0 and CMG_TIMEBASED.
      - Declaration: Waypoint& m_Route(size_t uiIndex)
        Documentation: Positions of movement. Index must be between 0 and ROUTE_SIZE
      - Declaration: Vector& m_vecOldEnemy(size_t uiIndex)
        Documentation: Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.
      - Declaration: EHandle& m_hOldEnemy(size_t uiIndex)
        Documentation: Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.
      - Declaration: InventoryRules@ get_m_pInventoryRules() const
        Documentation: The inventory rules.
      - Declaration: bool IsToggleLockedByMaster()
        Documentation: |-
          Returns whether this entity is locked by its master.
          Separate from IsLockedByMaster due to limitations.
      - Declaration: void AngularMove(Vector vecDestAngle, float flSpeed)
        Documentation: Performs angular movement.
      - Declaration: void LinearMove(Vector vecDest, float flSpeed)
        Documentation: Performs linear movement.
      - Declaration: int GetSequenceActivityName(int iSequence)
        Documentation: Gets activity for the given sequence.
      - Declaration: void SetSequenceBox()
        Documentation: Sets the sequence box.
      - Declaration: int GetAttachmentCount()
        Documentation: Gets the number of attachments that the current model has.
      - Declaration: bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)
        Documentation: Extracts the bounding box of the current model.
      - Declaration: int GetBodygroup(int iGroup)
        Documentation: Gets the value of the given body group.
      - Declaration: void SetBodygroup(int iGroup, int iValue)
        Documentation: Sets the given body group to the given value.
      - Declaration: >-
          void GetAttachment(int iAttachment, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the attachment position.
      - Declaration: int FindTransition(int iEndingSequence, int iGoalSequence)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          int FindTransition(int iEndingSequence, int iGoalSequence, int& out
          iDir)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          void GetAutomovement(Vector& out origin, Vector& out angles, float
          flInterval = 0.1f)
        Documentation: Gets automatic movement.
      - Declaration: >-
          void GetBonePosition(int iBone, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the position of the given bone.
      - Declaration: float SetBlending(int iBlender, float flValue)
        Documentation: Sets the given blending controller to the given value.
      - Declaration: void InitBoneControllers()
        Documentation: Initializes bone controllers.
      - Declaration: float SetBoneController(int iController, float flValue)
        Documentation: Sets the specified bone controller to the given value.
      - Declaration: void DispatchAnimEvents(float flFutureInterval = 0.1f)
        Documentation: >-
          Handle events that have happend since last time called up until X
          seconds into the future.
      - Declaration: void ResetGaitSequenceInfo()
        Documentation: Resets gait sequence info.
      - Declaration: void ResetSequenceInfo()
        Documentation: Resets sequence info.
      - Declaration: int LookupSequence(const string& in szLabel)
        Documentation: >-
          Returns the index of the given sequence, or -1 if no such sequence
          exists.
      - Declaration: int LookupActivityHeaviest(int iActivity)
        Documentation: >-
          Returns the index of the given activity that has the heaviest weight,
          or -1 if no such activity exists.
      - Declaration: int LookupActivity(int iActivity)
        Documentation: >-
          Returns the index of the given activity, or -1 if no such activity
          exists.
      - Declaration: int GetSequenceFlags()
        Documentation: Get sequence flags.
      - Declaration: float StudioFrameAdvance(float flInterval = 0.0f)
        Documentation: Accumulate animation frame time from last time called until now.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseDelay@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseAnimating@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseToggle@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: float m_flEffectDamage
        Documentation: Damage modifier (%)
      - Declaration: float m_flEffectSpeed
        Documentation: Movement speed modifier (%)
      - Declaration: float m_flEffectFriction
        Documentation: Movement friction modifier (%)
      - Declaration: float m_flEffectGravity
        Documentation: Gravity modifier (%)
      - Declaration: float m_flEffectRespiration
        Documentation: Extra/less breathing time underwater in seconds
      - Declaration: int m_iEffectNonSolid
        Documentation: is non-solid
      - Declaration: int m_iEffectInvisible
        Documentation: is invisible (render + non-targetable)
      - Declaration: int m_iEffectInvulnerable
        Documentation: is invulnerable (god mode)
      - Declaration: int m_iEffectBlockWeapons
        Documentation: Monster can't use weapons.
      - Declaration: Vector m_vecEffectGlowColor
        Documentation: Glow shell.
      - Declaration: string_t m_iszGuardEntName
        Documentation: Guard entity name.
      - Declaration: EHandle m_hGuardEnt
        Documentation: Monster will guard this entity and turn down follow requests.
      - Declaration: float m_flFallVelocity
        Documentation: Current fall speed.
      - Declaration: float m_flAutomaticAttackTime
        Documentation: How long an npc will attempt to fire full auto.
      - Declaration: bool m_fCanFearCreatures
        Documentation: Whether this monster can fear creatures.
      - Declaration: int8 m_chTextureType
        Documentation: |-
          Current texture type.
          See TextureType enum.
      - Declaration: string_t m_FormattedName
        Documentation: |-
          The formatted name.
          For better name outputs. E.g. "Alien Slave" rather than "alien_slave".
      - Declaration: float m_useTime
        Documentation: Don't allow +USE until this time.
      - Declaration: EHandle m_hCineBlocker
        Documentation: Entity that is blocking cinematic execution.
      - Declaration: EHandle m_hCine
        Documentation: Cinematic entity.
      - Declaration: SCRIPTSTATE m_scriptState
        Documentation: internal cinematic state.
      - Declaration: Vector m_HackedGunPos
        Documentation: HACK until we can query end of gun.
      - Declaration: string_t m_iszTriggerTarget
        Documentation: Name of target that should be fired.
      - Declaration: int m_iTriggerCondition
        Documentation: >-
          for scripted AI, this is the condition that will cause the activation
          of the monster's TriggerTarget.
      - Declaration: float m_flDistLook
        Documentation: distance monster sees (Default 2048).
      - Declaration: float m_flDistTooFar
        Documentation: >-
          if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in
          CheckEnemy.
      - Declaration: float m_flHungryTime
        Documentation: Time based damage inflictor.
      - Declaration: int m_failSchedule
        Documentation: Schedule type to choose if current schedule fails.
      - Declaration: entvars_t@ pevTimeBasedInflictor
        Documentation: Time based damage inflictor.
      - Declaration: float m_tbdPrev
        Documentation: Time-based damage timer.
      - Declaration: float m_lastDamageAmount
        Documentation: how much damage did monster (player) last take.
      - Declaration: int m_bitsDamageType
        Documentation: what types of damage has monster (player) taken.
      - Declaration: float m_flNextAttack
        Documentation: cannot attack again until this time.
      - Declaration: int m_afMoveShootCap
        Documentation: tells us what a monster can/can't do, while moving.
      - Declaration: int m_afCapability
        Documentation: tells us what a monster can/can't do.
      - Declaration: int m_cAmmoLoaded
        Documentation: >-
          how much ammo is in the weapon (used to trigger reload anim
          sequences).
      - Declaration: Vector m_vecEnemyLKP
        Documentation: last known position of enemy. (enemy's origin).
      - Declaration: int m_iMaxHealth
        Documentation: keeps track of monster's maximum health value (for re-healing, etc).
      - Declaration: int m_bloodColor
        Documentation: color of blood particles.
      - Declaration: int m_afMemory
        Documentation: Monster memory.
      - Declaration: int m_iHintNode
        Documentation: >-
          this is the hint node that the monster is moving towards or performing
          active idle on..
      - Declaration: Vector m_vecLastPosition
        Documentation: >-
          monster sometimes wants to return to where it started after an
          operation..
      - Declaration: int m_afSoundTypes
        Documentation: Sound types that can be heard.
      - Declaration: int m_iAudibleList
        Documentation: first index of a linked list of sounds that the monster can hear.
      - Declaration: Activity m_movementActivity
        Documentation: When moving, set this activity.
      - Declaration: Vector m_vecMoveGoal
        Documentation: Kept around for node graph moves, so we know our ultimate goal.
      - Declaration: float m_moveradius
        Documentation: Minimum radius.
      - Declaration: float m_moveWaitTime
        Documentation: How long I should wait for something to move.
      - Declaration: int m_iRouteIndex
        Documentation: Index into m_Route[].
      - Declaration: int m_movementGoal
        Documentation: Goal that defines route.
      - Declaration: int m_iScheduleIndex
        Documentation: Schedule index.
      - Declaration: Schedule@ m_pScheduleSaved
        Documentation: For land_on_ground schedules (remember last schedule and continue).
      - Declaration: Schedule@ m_pSchedule
        Documentation: Current schedule.
      - Declaration: int m_iTaskStatus
        Documentation: Task status.
      - Declaration: MONSTERSTATE m_IdealMonsterState
        Documentation: monster should change to this state.
      - Declaration: MONSTERSTATE m_MonsterState
        Documentation: monster's current state.
      - Declaration: int m_LastHitGroup
        Documentation: the last body region that took damage.
      - Declaration: Activity m_GaitActivity
        Documentation: gaitsequence.
      - Declaration: Activity m_IdealActivity
        Documentation: monster should switch to this activity.
      - Declaration: Activity m_Activity
        Documentation: what the monster is doing (animation).
      - Declaration: float m_flMoveWaitFinished
        Documentation: >-
          if we're told to wait before moving, this is the time that the wait
          will be over.
      - Declaration: float m_flWaitFinished
        Documentation: if we're told to wait, this is the time that the wait will be over.
      - Declaration: float m_flFieldOfView
        Documentation: width of monster's field of view ( dot product ).
      - Declaration: EHandle m_hTargetTank
        Documentation: Target tank to control.
      - Declaration: EHandle m_hTargetEnt
        Documentation: the entity that the monster is trying to reach.
      - Declaration: EHandle m_hEnemy
        Documentation: the entity that the monster is fighting.
      - Declaration: string_t m_sMaster
        Documentation: This entity's master, if any.
      - Declaration: int m_bitsDamageInflict
        Documentation: DMG_ damage type that the door or trigger does.
      - Declaration: Vector m_vecFinalAngle
        Documentation: Final angle.
      - Declaration: Vector m_vecFinalDest
        Documentation: Final destination.
      - Declaration: Vector m_vecAngle2
        Documentation: Open angle.
      - Declaration: Vector m_vecAngle1
        Documentation: Closed angle.
      - Declaration: Vector m_vecPosition2
        Documentation: Open position.
      - Declaration: Vector m_vecPosition1
        Documentation: Closed position.
      - Declaration: EHandle m_hActivator
        Documentation: Handle to the activator.
      - Declaration: float m_flHeight
        Documentation: Height.
      - Declaration: int m_cTriggersLeft
        Documentation: 'Trigger_counter only: # of activations remaining.'
      - Declaration: float m_flTLength
        Documentation: For plats.
      - Declaration: float m_flTWidth
        Documentation: For plats.
      - Declaration: float m_flLip
        Documentation: >-
          How much to stick out of a wall. Will recede further into walls if
          negative.
      - Declaration: float m_flWait
        Documentation: How long to wait before resetting.
      - Declaration: float m_flMoveDistance
        Documentation: How far a door should slide or rotate.
      - Declaration: TOGGLE_STATE m_toggle_state
        Documentation: Current toggle state.
      - Declaration: bool m_fSequenceLoops
        Documentation: True if the sequence loops.
      - Declaration: bool m_fSequenceFinished
        Documentation: Flag set when StudioAdvanceFrame moves across a frame boundry.
      - Declaration: float m_flLastGaitEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flLastEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flGroundSpeed
        Documentation: Computed linear movement rate for current sequence.
      - Declaration: float m_flFrameRate
        Documentation: Computed FPS for current sequence.
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CGrenade
    Namespace: ''
    Documentation: Grenade class
    Flags: 262145
    Methods:
      - Declaration: void Explode(Vector vecSrc, Vector vecAim)
        Documentation: Makes this grenade explode
      - Declaration: void ResetEffects()
        Documentation: Reset all effect modifiers
      - Declaration: void ApplyEffects()
        Documentation: Re-calculate compounded effect modifiers and apply to the monster
      - Declaration: void ClearEnemyList()
        Documentation: Clears this monster's list of enemies
      - Declaration: InventoryList@ get_m_pInventory() const
        Documentation: The inventory items this monster has
      - Declaration: void MedicCallSound(float flDistance = 0.0f)
        Documentation: Medic call sound.
      - Declaration: string m_szTextureName()
        Documentation: Current texture name we're standing on.
      - Declaration: void StopPlayerFollowing(const bool bClearSchedule)
        Documentation: Stops following a player.
      - Declaration: void StartPlayerFollowing(CBaseEntity@ pLeader)
        Documentation: Starts following a given player.
      - Declaration: bool CanPlayerFollow()
        Documentation: Returns whether this monster can follow a player.
      - Declaration: bool IsPlayerFollowing()
        Documentation: Returns whether this monster is following a player.
      - Declaration: >-
          void FollowerPlayerUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller,
          USE_TYPE useType, float flValue)
        Documentation: Use method for following players (set only if friendly)
      - Declaration: void ShockGlowEffect(bool fMode)
        Documentation: Turns the shock glow effect on or off.
      - Declaration: >-
          CBaseEntity@ DropItem(const string& in szItemName, const Vector& in
          vecPos, const Vector& in vecAng)
        Documentation: Drops the given item from the given position at the given angle.
      - Declaration: bool CineCleanup()
        Documentation: Cleans up after a cinematic event.
      - Declaration: bool ExitScriptedSequence()
        Documentation: Exits the scripted sequence this monster is currently in, if any.
      - Declaration: bool HasAllMemories(int iMemory) const
        Documentation: Returns whether this monster remembers all of the given memories.
      - Declaration: bool HasMemory(int iMemory) const
        Documentation: Returns whether this monster remembers any of the given memories.
      - Declaration: void Forget(int iMemory)
        Documentation: Makes this monster forget the given memories.
      - Declaration: void Remember(int iMemory)
        Documentation: Makes this monster remember the given memories.
      - Declaration: >-
          void StopPlayerFollowing(const bool clearSchedule, bool bSilent =
          false)
        Documentation: Stops following its target.
      - Declaration: void StartPlayerFollowing(CBaseEntity@ pLeader, bool bSilent = false)
        Documentation: Starts following its target.
      - Declaration: void PainSound()
        Documentation: Plays this monster's pain sound.
      - Declaration: void IdleSound()
        Documentation: Plays this monster's idle sound.
      - Declaration: void AlertSound()
        Documentation: Plays this monster's alert sound.
      - Declaration: void DeathSound()
        Documentation: Plays this monster's death sound.
      - Declaration: Vector GetGunPosition()
        Documentation: ''
      - Declaration: Vector ShootAtEnemy(const Vector& in vecShootOrigin)
        Documentation: Shoots at the specified location.
      - Declaration: void FadeMonster()
        Documentation: |-
          Fades this monster.
          Note: does not kill the monster.
      - Declaration: bool HasAlienGibs()
        Documentation: Returns whether this monster has alien gibs.
      - Declaration: bool HasHumanGibs()
        Documentation: Returns whether this monster has human gibs.
      - Declaration: void CallGibMonster()
        Documentation: Determines whether to gib or fade this monster, and acts accordingly.
      - Declaration: bool ShouldGibMonster(int iGib)
        Documentation: |-
          Returns whether the monster should be gibbed given the gib type.
          See GIB enum.
      - Declaration: void GibMonster()
        Documentation: Gibs the monster.
      - Declaration: bool GetEnemy()
        Documentation: Tries to find the best suitable enemy for this monster.
      - Declaration: bool NoFriendlyFireToPos(Vector vecPos)
        Documentation: >-
          Returns whether attacking the target location at this time would
          result in friendly fire
      - Declaration: bool NoFriendlyFire(Vector vecPos, CBaseEntity@ pTarget)
        Documentation: >-
          Returns whether attacking the given target at this time from the given
          location would result in friendly fire
      - Declaration: bool NoFriendlyFire(Vector vecPos)
        Documentation: >-
          Returns whether attacking at this time from the given location would
          result in friendly fire
      - Declaration: bool NoFriendlyFire()
        Documentation: Returns whether attacking at this time would result in friendly fire
      - Declaration: bool FCheckAITrigger()
        Documentation: Checks and, if necessary, fires the monster's trigger target.
      - Declaration: void Eat(float flFullDuration)
        Documentation: Make the monster 'full' for a while.
      - Declaration: bool FShouldEat()
        Documentation: Returns whether this monster should eat.
      - Declaration: CSound@ PBestSound()
        Documentation: Returns a pointer to the sound the monster should react to.
      - Declaration: bool HasAllConditions(int iConditions) const
        Documentation: Returns whether this monster has all of the given AI conditions.
      - Declaration: bool HasConditions(int iConditions) const
        Documentation: Returns whether this monster has any of the given AI conditions.
      - Declaration: void ClearConditions(int iConditions)
        Documentation: Clears AI conditions.
      - Declaration: void SetConditions(int iConditions)
        Documentation: Sets AI conditions.
      - Declaration: bool CheckAttacker(CBaseEntity@ pAttacker)
        Documentation: Determine if we should ignore damage.
      - Declaration: int RouteClassify(int iMoveFlag)
        Documentation: Returns the MOVEGOAL for the given move flag.
      - Declaration: void SetYawSpeed()
        Documentation: Allows different yaw_speeds for each activity.
      - Declaration: void MakeIdealYaw(Vector vecTarget)
        Documentation: |-
          gets a yaw value for the caller that would
          face the supplied vector. Value is stuffed into the monster's
          ideal_yaw.
      - Declaration: int IScheduleFlags()
        Documentation: |-
          Returns an integer with all Conditions
          bits that are currently set and also set in the current
          schedule's Interrupt mask.
      - Declaration: bool MovementIsComplete()
        Documentation: Returns whether movement is complete.
      - Declaration: bool TaskIsComplete()
        Documentation: Returns whether the task is complete.
      - Declaration: bool TaskIsRunning()
        Documentation: Returns whether a task is running.
      - Declaration: void TaskBegin()
        Documentation: Sets the task status to running.
      - Declaration: void TaskFail()
        Documentation: Sets the condition bit for a failed task.
      - Declaration: void MovementComplete()
        Documentation: Called when movement has completed.
      - Declaration: void TaskComplete()
        Documentation: Sets the task status to complete.
      - Declaration: bool TestFGetNodeRoute(Vector vecDest)
        Documentation: TEST FGetNodeRoute.
      - Declaration: bool FGetNodeRoute(Vector vecDest)
        Documentation: >-
          tries to build an entire node path from

          the callers origin to the passed vector.

          If this is  possible, ROUTE_SIZE waypoints will be copied into the
          callers m_Route.

          true is returned if the operation  succeeds (path is valid) or false
          if failed (no path  exists ).
      - Declaration: bool PopEnemy()
        Documentation: Try remembering the last few enemies.
      - Declaration: void PushEnemy(CBaseEntity@ pTarget, Vector& in vecLastKnownPos)
        Documentation: Remember the last few enemies, always remember the player.
      - Declaration: bool CheckEnemy(CBaseEntity@ pEnemy)
        Documentation: >-
          part of the Condition collection process, gets and stores data and
          conditions pertaining to a monster's enemy.

          Returns true if Enemy LKP was updated.
      - Declaration: >-
          bool CheckAttacksFromPosition(CBaseEntity@ pTarget, float flDist,
          Vector vecPos)
        Documentation: Check whether attacks are possible from the given position.
      - Declaration: void CheckAttacks_Move(CBaseEntity@ pTarget, float flDist)
        Documentation: Check attacks to the given enemy at the given distance while moving.
      - Declaration: void CheckAttacks(CBaseEntity@ pTarget, float flDist)
        Documentation: Check attacks to the given enemy at the given distance.
      - Declaration: void ReportAIState()
        Documentation: Reports the AI state.
      - Declaration: void SetState(MONSTERSTATE state)
        Documentation: Sets the current monster state.
      - Declaration: void SetSequenceByName(const string& in szSequence)
        Documentation: Sets the current sequence by name.
      - Declaration: void SetGaitActivity(Activity newActivity)
        Documentation: Sets the current gait activity.
      - Declaration: void SetActivity(Activity newActivity)
        Documentation: Sets the current activity.
      - Declaration: MONSTERSTATE GetIdealState()
        Documentation: Gets the ideal monster state.
      - Declaration: Task@ GetTask()
        Documentation: Gets the current task.
      - Declaration: void SentenceStop()
        Documentation: Stops playing its current sentence.
      - Declaration: >-
          void PlayScriptedSentence(const string& in szSentence, float duration,
          float volume, float attenuation, const bool bConcurrent, CBaseEntity@
          pListener)
        Documentation: Plays the given scripted sentence.
      - Declaration: >-
          void PlaySentence(const string& in szSentence, float duration, float
          volume, float attenuation)
        Documentation: Plays the given sentence.
      - Declaration: bool CanPlaySentence(const bool bDisregardState)
        Documentation: Returns whether this monster can play its sentence.
      - Declaration: bool CanPlaySequence(const bool bDisregardState, int iInterruptLevel)
        Documentation: Returns whether this monster can play its sequence.
      - Declaration: void ScheduleChange()
        Documentation: Called after the monster's schedule changes.
      - Declaration: Schedule@ GetSchedule()
        Documentation: Gets the current schedule.
      - Declaration: Schedule@ GetScheduleOfType(int iType)
        Documentation: Gets one of the available schedules of the given type.
      - Declaration: void RunTask(Task@ pTask)
        Documentation: Runs the given task.
      - Declaration: void StartTask(Task@ pTask)
        Documentation: Starts the given task.
      - Declaration: void MaintainSchedule()
        Documentation: Maintains the monster's schedule.
      - Declaration: Schedule@ ScheduleFromName(const string& in szName)
        Documentation: Returns the schedule with name szName if it exists, NULL otherwise.
      - Declaration: >-
          Schedule@ ScheduleInList(const string& in szName, array<Schedule@>@
          pArray)
        Documentation: >-
          Returns the schedule with name szName if it's in the list, NULL
          otherwise.
      - Declaration: bool NextScheduledTask()
        Documentation: Moves to the next scheduled task.
      - Declaration: void ChangeSchedule(Schedule@ pNewSchedule)
        Documentation: Changes this monster's schedule.
      - Declaration: bool FScheduleDone()
        Documentation: Returns whether this monster's schedule is done.
      - Declaration: void ClearSchedule()
        Documentation: Clears this monster's schedule.
      - Declaration: bool FScheduleValid()
        Documentation: Returns whether this monster's schedule is valid.
      - Declaration: bool FHaveSchedule()
        Documentation: Returns whether this monster has a schedule.
      - Declaration: bool CheckTankUsage()
        Documentation: >-
          Checks whether the monster can use a func_tank. Return true if
          possible.
      - Declaration: bool CheckMeleeAttack2_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack2(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack1_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckMeleeAttack1(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack2_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack2(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack1_Move(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: bool CheckRangeAttack1(float flDot, float flDist)
        Documentation: >-
          this function will survey conditions and set appropriate conditions
          bits for attack types.
      - Declaration: void StopAnimation()
        Documentation: >-
          This will stop animation until you call ResetSequenceInfo() at some
          point in the future
      - Declaration: void Stop()
        Documentation: Stops this monster moving
      - Declaration: Activity GetStoppedActivity()
        Documentation: Gets the stopped activity
      - Declaration: bool ShouldAdvanceRoute(float flWaypointDist)
        Documentation: Returns whether this monster should advance its route
      - Declaration: >-
          void MoveExecute(CBaseEntity@ pTargetEnt, const Vector& in vecDir,
          float flInterval)
        Documentation: Starts the monster
      - Declaration: void Move(float flInterval = 0.1f)
        Documentation: Starts the monster
      - Declaration: >-
          int CheckLocalMove(const Vector& in vecStart, const Vector& in
          vecEnd,CBaseEntity@ pTarget, float& out flDist, Vector& out
          vecEndPosition, bool fOriginalCheck = false)
        Documentation: finds best visible enemy for attack
      - Declaration: bool FInViewCone(const Vector& in vecOrigin)
        Documentation: see if given location is in monster's view cone
      - Declaration: bool FInViewCone(CBaseEntity@ pEntity)
        Documentation: see if pEntity is in monster's view cone
      - Declaration: CBaseEntity@ BestVisibleEnemy()
        Documentation: Finds best visible enemy for attack
      - Declaration: void StartMonster()
        Documentation: Starts the monster
      - Declaration: void Revive()
        Documentation: Revives the monster
      - Declaration: void BecomeDead(float flSavedHealth)
        Documentation: Makes the monster become dead
      - Declaration: void MonsterInitDead()
        Documentation: Call after animation/pose is set up
      - Declaration: void MonsterInit()
        Documentation: Initializes the monster
      - Declaration: void SetupFriendly()
        Documentation: use this overridden to make some other friendly monsters
      - Declaration: float DamageForce(float flDamage)
        Documentation: >-
          Returns the amount of force applied to this monster when the given
          amount of damage is done.
      - Declaration: float DamageForce(float flDamage, int bitsDamageType)
        Documentation: >-
          Returns the amount of force applied to this monster when the given
          amount of damage is done.
      - Declaration: float FlYawDiff()
        Documentation: >-
          returns the difference ( in degrees ) between monster's current yaw
          and ideal_yaw.

          Positive result is left turn, negative is right turn.
      - Declaration: float VecToYaw(Vector vecDir)
        Documentation: >-
          turns a directional vector into a yaw value that points down that
          vector.
      - Declaration: float ChangeYaw(int iSpeed)
        Documentation: turns a monster towards its ideal_yaw
      - Declaration: bool ShouldFadeOnDeath()
        Documentation: Returns whether this monster should fade on death.
      - Declaration: void Listen()
        Documentation: Listens for anything that is within audible distance.
      - Declaration: void RunAI()
        Documentation: Runs this monster's AI.
      - Declaration: void Look(int iDistance)
        Documentation: |-
          Look - Base class monster function to find enemies or
          food by sight. iDistance is distance ( in units ) that the
          monster can see.
          Sets the sight bits of the m_afConditions mask to indicate
          which types of entities were sighted.
          Function also sets the Looker's m_pLink
          to the head of a link list that contains all visible ents.
          (linked via each ent's m_pLink field)
      - Declaration: >-
          void MonsterUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller,
          USE_TYPE useType, float flValue = 0.0f)
        Documentation: Will make a monster angry at whomever activated it.
      - Declaration: int8& m_rgbTimeBasedDamage(size_t uiIndex)
        Documentation: >-
          time based damage counters, decr. 1 per 2 seconds. Index must be
          between 0 and CMG_TIMEBASED.
      - Declaration: Waypoint& m_Route(size_t uiIndex)
        Documentation: Positions of movement. Index must be between 0 and ROUTE_SIZE
      - Declaration: Vector& m_vecOldEnemy(size_t uiIndex)
        Documentation: Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.
      - Declaration: EHandle& m_hOldEnemy(size_t uiIndex)
        Documentation: Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES.
      - Declaration: InventoryRules@ get_m_pInventoryRules() const
        Documentation: The inventory rules.
      - Declaration: bool IsToggleLockedByMaster()
        Documentation: |-
          Returns whether this entity is locked by its master.
          Separate from IsLockedByMaster due to limitations.
      - Declaration: void AngularMove(Vector vecDestAngle, float flSpeed)
        Documentation: Performs angular movement.
      - Declaration: void LinearMove(Vector vecDest, float flSpeed)
        Documentation: Performs linear movement.
      - Declaration: int GetSequenceActivityName(int iSequence)
        Documentation: Gets activity for the given sequence.
      - Declaration: void SetSequenceBox()
        Documentation: Sets the sequence box.
      - Declaration: int GetAttachmentCount()
        Documentation: Gets the number of attachments that the current model has.
      - Declaration: bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)
        Documentation: Extracts the bounding box of the current model.
      - Declaration: int GetBodygroup(int iGroup)
        Documentation: Gets the value of the given body group.
      - Declaration: void SetBodygroup(int iGroup, int iValue)
        Documentation: Sets the given body group to the given value.
      - Declaration: >-
          void GetAttachment(int iAttachment, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the attachment position.
      - Declaration: int FindTransition(int iEndingSequence, int iGoalSequence)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          int FindTransition(int iEndingSequence, int iGoalSequence, int& out
          iDir)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          void GetAutomovement(Vector& out origin, Vector& out angles, float
          flInterval = 0.1f)
        Documentation: Gets automatic movement.
      - Declaration: >-
          void GetBonePosition(int iBone, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the position of the given bone.
      - Declaration: float SetBlending(int iBlender, float flValue)
        Documentation: Sets the given blending controller to the given value.
      - Declaration: void InitBoneControllers()
        Documentation: Initializes bone controllers.
      - Declaration: float SetBoneController(int iController, float flValue)
        Documentation: Sets the specified bone controller to the given value.
      - Declaration: void DispatchAnimEvents(float flFutureInterval = 0.1f)
        Documentation: >-
          Handle events that have happend since last time called up until X
          seconds into the future.
      - Declaration: void ResetGaitSequenceInfo()
        Documentation: Resets gait sequence info.
      - Declaration: void ResetSequenceInfo()
        Documentation: Resets sequence info.
      - Declaration: int LookupSequence(const string& in szLabel)
        Documentation: >-
          Returns the index of the given sequence, or -1 if no such sequence
          exists.
      - Declaration: int LookupActivityHeaviest(int iActivity)
        Documentation: >-
          Returns the index of the given activity that has the heaviest weight,
          or -1 if no such activity exists.
      - Declaration: int LookupActivity(int iActivity)
        Documentation: >-
          Returns the index of the given activity, or -1 if no such activity
          exists.
      - Declaration: int GetSequenceFlags()
        Documentation: Get sequence flags.
      - Declaration: float StudioFrameAdvance(float flInterval = 0.0f)
        Documentation: Accumulate animation frame time from last time called until now.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseDelay@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseAnimating@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseToggle@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseMonster@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: float m_flEffectDamage
        Documentation: Damage modifier (%)
      - Declaration: float m_flEffectSpeed
        Documentation: Movement speed modifier (%)
      - Declaration: float m_flEffectFriction
        Documentation: Movement friction modifier (%)
      - Declaration: float m_flEffectGravity
        Documentation: Gravity modifier (%)
      - Declaration: float m_flEffectRespiration
        Documentation: Extra/less breathing time underwater in seconds
      - Declaration: int m_iEffectNonSolid
        Documentation: is non-solid
      - Declaration: int m_iEffectInvisible
        Documentation: is invisible (render + non-targetable)
      - Declaration: int m_iEffectInvulnerable
        Documentation: is invulnerable (god mode)
      - Declaration: int m_iEffectBlockWeapons
        Documentation: Monster can't use weapons.
      - Declaration: Vector m_vecEffectGlowColor
        Documentation: Glow shell.
      - Declaration: string_t m_iszGuardEntName
        Documentation: Guard entity name.
      - Declaration: EHandle m_hGuardEnt
        Documentation: Monster will guard this entity and turn down follow requests.
      - Declaration: float m_flFallVelocity
        Documentation: Current fall speed.
      - Declaration: float m_flAutomaticAttackTime
        Documentation: How long an npc will attempt to fire full auto.
      - Declaration: bool m_fCanFearCreatures
        Documentation: Whether this monster can fear creatures.
      - Declaration: int8 m_chTextureType
        Documentation: |-
          Current texture type.
          See TextureType enum.
      - Declaration: string_t m_FormattedName
        Documentation: |-
          The formatted name.
          For better name outputs. E.g. "Alien Slave" rather than "alien_slave".
      - Declaration: float m_useTime
        Documentation: Don't allow +USE until this time.
      - Declaration: EHandle m_hCineBlocker
        Documentation: Entity that is blocking cinematic execution.
      - Declaration: EHandle m_hCine
        Documentation: Cinematic entity.
      - Declaration: SCRIPTSTATE m_scriptState
        Documentation: internal cinematic state.
      - Declaration: Vector m_HackedGunPos
        Documentation: HACK until we can query end of gun.
      - Declaration: string_t m_iszTriggerTarget
        Documentation: Name of target that should be fired.
      - Declaration: int m_iTriggerCondition
        Documentation: >-
          for scripted AI, this is the condition that will cause the activation
          of the monster's TriggerTarget.
      - Declaration: float m_flDistLook
        Documentation: distance monster sees (Default 2048).
      - Declaration: float m_flDistTooFar
        Documentation: >-
          if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in
          CheckEnemy.
      - Declaration: float m_flHungryTime
        Documentation: Time based damage inflictor.
      - Declaration: int m_failSchedule
        Documentation: Schedule type to choose if current schedule fails.
      - Declaration: entvars_t@ pevTimeBasedInflictor
        Documentation: Time based damage inflictor.
      - Declaration: float m_tbdPrev
        Documentation: Time-based damage timer.
      - Declaration: float m_lastDamageAmount
        Documentation: how much damage did monster (player) last take.
      - Declaration: int m_bitsDamageType
        Documentation: what types of damage has monster (player) taken.
      - Declaration: float m_flNextAttack
        Documentation: cannot attack again until this time.
      - Declaration: int m_afMoveShootCap
        Documentation: tells us what a monster can/can't do, while moving.
      - Declaration: int m_afCapability
        Documentation: tells us what a monster can/can't do.
      - Declaration: int m_cAmmoLoaded
        Documentation: >-
          how much ammo is in the weapon (used to trigger reload anim
          sequences).
      - Declaration: Vector m_vecEnemyLKP
        Documentation: last known position of enemy. (enemy's origin).
      - Declaration: int m_iMaxHealth
        Documentation: keeps track of monster's maximum health value (for re-healing, etc).
      - Declaration: int m_bloodColor
        Documentation: color of blood particles.
      - Declaration: int m_afMemory
        Documentation: Monster memory.
      - Declaration: int m_iHintNode
        Documentation: >-
          this is the hint node that the monster is moving towards or performing
          active idle on..
      - Declaration: Vector m_vecLastPosition
        Documentation: >-
          monster sometimes wants to return to where it started after an
          operation..
      - Declaration: int m_afSoundTypes
        Documentation: Sound types that can be heard.
      - Declaration: int m_iAudibleList
        Documentation: first index of a linked list of sounds that the monster can hear.
      - Declaration: Activity m_movementActivity
        Documentation: When moving, set this activity.
      - Declaration: Vector m_vecMoveGoal
        Documentation: Kept around for node graph moves, so we know our ultimate goal.
      - Declaration: float m_moveradius
        Documentation: Minimum radius.
      - Declaration: float m_moveWaitTime
        Documentation: How long I should wait for something to move.
      - Declaration: int m_iRouteIndex
        Documentation: Index into m_Route[].
      - Declaration: int m_movementGoal
        Documentation: Goal that defines route.
      - Declaration: int m_iScheduleIndex
        Documentation: Schedule index.
      - Declaration: Schedule@ m_pScheduleSaved
        Documentation: For land_on_ground schedules (remember last schedule and continue).
      - Declaration: Schedule@ m_pSchedule
        Documentation: Current schedule.
      - Declaration: int m_iTaskStatus
        Documentation: Task status.
      - Declaration: MONSTERSTATE m_IdealMonsterState
        Documentation: monster should change to this state.
      - Declaration: MONSTERSTATE m_MonsterState
        Documentation: monster's current state.
      - Declaration: int m_LastHitGroup
        Documentation: the last body region that took damage.
      - Declaration: Activity m_GaitActivity
        Documentation: gaitsequence.
      - Declaration: Activity m_IdealActivity
        Documentation: monster should switch to this activity.
      - Declaration: Activity m_Activity
        Documentation: what the monster is doing (animation).
      - Declaration: float m_flMoveWaitFinished
        Documentation: >-
          if we're told to wait before moving, this is the time that the wait
          will be over.
      - Declaration: float m_flWaitFinished
        Documentation: if we're told to wait, this is the time that the wait will be over.
      - Declaration: float m_flFieldOfView
        Documentation: width of monster's field of view ( dot product ).
      - Declaration: EHandle m_hTargetTank
        Documentation: Target tank to control.
      - Declaration: EHandle m_hTargetEnt
        Documentation: the entity that the monster is trying to reach.
      - Declaration: EHandle m_hEnemy
        Documentation: the entity that the monster is fighting.
      - Declaration: string_t m_sMaster
        Documentation: This entity's master, if any.
      - Declaration: int m_bitsDamageInflict
        Documentation: DMG_ damage type that the door or trigger does.
      - Declaration: Vector m_vecFinalAngle
        Documentation: Final angle.
      - Declaration: Vector m_vecFinalDest
        Documentation: Final destination.
      - Declaration: Vector m_vecAngle2
        Documentation: Open angle.
      - Declaration: Vector m_vecAngle1
        Documentation: Closed angle.
      - Declaration: Vector m_vecPosition2
        Documentation: Open position.
      - Declaration: Vector m_vecPosition1
        Documentation: Closed position.
      - Declaration: EHandle m_hActivator
        Documentation: Handle to the activator.
      - Declaration: float m_flHeight
        Documentation: Height.
      - Declaration: int m_cTriggersLeft
        Documentation: 'Trigger_counter only: # of activations remaining.'
      - Declaration: float m_flTLength
        Documentation: For plats.
      - Declaration: float m_flTWidth
        Documentation: For plats.
      - Declaration: float m_flLip
        Documentation: >-
          How much to stick out of a wall. Will recede further into walls if
          negative.
      - Declaration: float m_flWait
        Documentation: How long to wait before resetting.
      - Declaration: float m_flMoveDistance
        Documentation: How far a door should slide or rotate.
      - Declaration: TOGGLE_STATE m_toggle_state
        Documentation: Current toggle state.
      - Declaration: bool m_fSequenceLoops
        Documentation: True if the sequence loops.
      - Declaration: bool m_fSequenceFinished
        Documentation: Flag set when StudioAdvanceFrame moves across a frame boundry.
      - Declaration: float m_flLastGaitEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flLastEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flGroundSpeed
        Documentation: Computed linear movement rate for current sequence.
      - Declaration: float m_flFrameRate
        Documentation: Computed FPS for current sequence.
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CItem
    Namespace: ''
    Documentation: Generic item class
    Flags: 262145
    Methods:
      - Declaration: bool MyTouch(CBasePlayer@ pPlayer)
        Documentation: The item's touch function.
      - Declaration: void Materialize()
        Documentation: Makes this entity visible and tangible.
      - Declaration: void ItemTouch(CBaseEntity@ pOther)
        Documentation: Item touch function
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Calls use on targets.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CItemInventory
    Namespace: ''
    Documentation: >-
      Item_inventory entity class

      Collection rules -- DENY/CAN'T have rules take precedence over
      REQUIRE/MUST

      All string filters can be tokenized with a semi-colon ';'
    Flags: 262145
    Methods:
      - Declaration: void RemoveItemEffects()
        Documentation: Prepares to remove effects from holder.
      - Declaration: void AddItemEffects()
        Documentation: Prepares to add effects to holder.
      - Declaration: void Destroy(bool fIgnoreTriggers = false)
        Documentation: Destroy this item.
      - Declaration: void Return(bool fIgnoreTriggers = false)
        Documentation: Return this item to its original spawn location.
      - Declaration: >-
          bool Drop(bool fForce = false, CBaseEntity@ pCaller = null, bool
          fIgnoreTriggers = false)
        Documentation: Drop this item if it's being carried.
      - Declaration: bool CanCollect(CBaseEntity@ pOther)
        Documentation: Returns whether this item can be collected by the given entity.
      - Declaration: bool TryCollect(CBaseEntity@ pOther, bool fIgnoreTriggers = false)
        Documentation: Try to collect this item.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Calls use on targets.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: bool m_fHandledWearingOut
        Documentation: Item has performed its wearing out trigger
      - Declaration: bool m_fRemovedByForced
        Documentation: Item was just removed by force
      - Declaration: float m_flActivateTime
        Documentation: Time the item was last self-activated
      - Declaration: float m_flDropTime
        Documentation: Time the item was last dropped
      - Declaration: float m_flCollectTime
        Documentation: Time the item was last collected
      - Declaration: float m_flTouchedTime
        Documentation: Time the item was last touched
      - Declaration: int m_iActivateCount
        Documentation: Number of times the item has been self-activated
      - Declaration: int m_iCollectCount
        Documentation: Number of times the item has been collected
      - Declaration: float m_flEffectDamage
        Documentation: Damage modifier (%)
      - Declaration: float m_flEffectSpeed
        Documentation: Movement speed modifier (%)
      - Declaration: float m_flEffectFriction
        Documentation: Movement friction modifier (%)
      - Declaration: float m_flEffectGravity
        Documentation: Gravity modifier (%)
      - Declaration: float m_flEffectRespiration
        Documentation: Extra/less breathing time underwater in seconds
      - Declaration: bool m_fEffectNonSolid
        Documentation: Holder is non-solid
      - Declaration: bool m_fEffectInvisible
        Documentation: Holder is invisible (render + non-targetable)
      - Declaration: bool m_fEffectInvulnerable
        Documentation: Holder is invulnerable (god mode)
      - Declaration: bool m_fEffectBlockWeapons
        Documentation: Holder can't use weapons
      - Declaration: Vector m_vecEffectGlowColor
        Documentation: Holder has a glow shell
      - Declaration: bool m_fEffectsPermanent
        Documentation: Holder keeps effects after dropping the item
      - Declaration: bool m_fEffectsWaitUntilActivated
        Documentation: >-
          Holder effects do not apply until the item is activated (ignored if
          m_fCanBeActivated is false)
      - Declaration: string_t m_szTriggerOnDestroy
        Documentation: On destruction
      - Declaration: string_t m_szTriggerOnMaterialise
        Documentation: On materialise after return
      - Declaration: string_t m_szTriggerOnReturnOther
        Documentation: On return (for everyone else)
      - Declaration: string_t m_szTriggerOnReturnTeam
        Documentation: On return (for collector's team)
      - Declaration: string_t m_szTriggerOnReturnSelf
        Documentation: On return (for collector)
      - Declaration: string_t m_szTriggerOnWearingOutOther
        Documentation: On wearing out (for everyone else)
      - Declaration: string_t m_szTriggerOnWearingOutTeam
        Documentation: On wearing out (for collector's team)
      - Declaration: string_t m_szTriggerOnWearingOutSelf
        Documentation: On wearing out (for collector)
      - Declaration: string_t m_szTriggerOnUseOther
        Documentation: On use by trigger (for everyone else)
      - Declaration: string_t m_szTriggerOnUseTeam
        Documentation: On use by trigger (for collector's team)
      - Declaration: string_t m_szTriggerOnUseSelf
        Documentation: On use by trigger (for collector)
      - Declaration: string_t m_szTriggerOnCantActivateOther
        Documentation: On failed self-activation (for everyone else)
      - Declaration: string_t m_szTriggerOnCantActivateTeam
        Documentation: On failed self-activation (for collector's team)
      - Declaration: string_t m_szTriggerOnCantActivateSelf
        Documentation: On failed self - activation(for collector)
      - Declaration: string_t m_szTriggerOnActivateOther
        Documentation: On self-activation (for everyone else)
      - Declaration: string_t m_szTriggerOnActivateTeam
        Documentation: On self-activation (for collector's team)
      - Declaration: string_t m_szTriggerOnActivateSelf
        Documentation: On self-activation (for collector)
      - Declaration: string_t m_szTriggerOnCantDropOther
        Documentation: On failed drop (for everyone else)
      - Declaration: string_t m_szTriggerOnCantDropTeam
        Documentation: On failed drop (for collector's team)
      - Declaration: string_t m_szTriggerOnCantDropSelf
        Documentation: On failed drop (for collector)
      - Declaration: string_t m_szTriggerOnDropOther
        Documentation: On successful drop (for everyone else)
      - Declaration: string_t m_szTriggerOnDropTeam
        Documentation: On successful drop (for collector's team)
      - Declaration: string_t m_szTriggerOnDropSelf
        Documentation: On successful drop (for collector)
      - Declaration: string_t m_szTriggerOnCantCollectOther
        Documentation: On failed collection (for everyone else)
      - Declaration: string_t m_szTriggerOnCantCollectTeam
        Documentation: On failed collection (for collector's team)
      - Declaration: string_t m_szTriggerOnCantCollectSelf
        Documentation: On failed collection (for collector)
      - Declaration: string_t m_szTriggerOnCollectOther
        Documentation: On successful collection (for everyone else)
      - Declaration: string_t m_szTriggerOnCollectTeam
        Documentation: On successful collection (for collector's team)
      - Declaration: string_t m_szTriggerOnCollectSelf
        Documentation: On successful collection (for collector)
      - Declaration: bool m_fKeepOnRespawn
        Documentation: >-
          Holder still has the item after respawning (only applies to players --
          re-equip NPC's manually)
      - Declaration: bool m_fKeepOnDeath
        Documentation: >-
          Holder still has the item after dying (i.e. so they can keep it while
          being revived)
      - Declaration: bool m_fDelayedRespawn
        Documentation: Delayed respawn on return (like with weapons/ammo/pickups)
      - Declaration: float m_flReturnTime
        Documentation: >-
          How long this item returns to its' original location when dropped (-1
          = never, 0 = instant)
      - Declaration: bool m_fCanBeDropped
        Documentation: Holder is allowed to drop this item by choice
      - Declaration: bool m_fHoldTimeWaitUntilActivated
        Documentation: >-
          Maximum hold time is not started until the item is activated (ignored
          if m_fCanBeActivated is false)
      - Declaration: bool m_fCanBeActivated
        Documentation: Holder is allowed to activate this item by choice at any time
      - Declaration: float m_flWearOutTime
        Documentation: Perform a trigger prior to this item being forcibly dropped (0 = none)
      - Declaration: float m_flActivateWaitTime
        Documentation: Time to wait between each activation (0 = none)
      - Declaration: float m_flMaximumHoldTime
        Documentation: >-
          Limit to how long this item can be held for, forcibly dropped after (0
          = no limit)
      - Declaration: string_t m_szItemNameNotMoved
        Documentation: These item(s) must NOT have moved
      - Declaration: int m_iCantHaveItemGroupNum
        Documentation: Number of item(s) from the can't have group(s) (0 = all)
      - Declaration: string_t m_szCantHaveItemGroup
        Documentation: Must not have an item in these group(s)
      - Declaration: string_t m_szCantHaveItemName
        Documentation: Must not have these item(s)
      - Declaration: string_t m_szItemNameMoved
        Documentation: These item(s) must have moved
      - Declaration: int m_iRequiresItemGroupNum
        Documentation: Number of item(s) from the required group(s) required (0 = all)
      - Declaration: string_t m_szRequiresItemGroup
        Documentation: Require an item from these group(s)
      - Declaration: string_t m_szRequiresItemName
        Documentation: Require these item(s)
      - Declaration: int m_iAllowedNpcClassify
        Documentation: NPC classification filter
      - Declaration: string_t m_szAllowedTeams
        Documentation: Team filters
      - Declaration: string_t m_szAllowedClassNames
        Documentation: CBaseEntity class name filters
      - Declaration: string_t m_szAllowedTargetNames
        Documentation: CBaseEntity target name filters
      - Declaration: int m_iCarriedSequence
        Documentation: Model sequence number while CARRIED.
      - Declaration: string_t m_szCarriedSequenceName
        Documentation: Model sequence name while CARRIED.
      - Declaration: int m_iCarriedBody
        Documentation: Model body while CARRIED.
      - Declaration: int m_iCarriedSkin
        Documentation: Model skin while CARRIED.
      - Declaration: int m_iIdleSequence
        Documentation: Model sequence number while IDLE.
      - Declaration: string_t m_szIdleSequenceName
        Documentation: Model sequence name while IDLE.
      - Declaration: int m_iIdleBody
        Documentation: Model body while IDLE.
      - Declaration: int m_iIdleSkin
        Documentation: Model skin while IDLE (not carried).
      - Declaration: bool m_fHiddenWhenCarried
        Documentation: Model is hidden while it is being carried.
      - Declaration: float m_flWeight
        Documentation: >-
          How heavy the item is (0-100),

          holders can hold multiple items up to a total weight 100, think of
          this as KG if you like (though what person can carry 100KG!?).
      - Declaration: int m_iActivateLimit
        Documentation: How many times the item can be activated (0 = infinite).
      - Declaration: int m_iCollectLimit
        Documentation: >-
          How many times the item can be picked up, destroyed when limit is
          reached (0 = infinite).
      - Declaration: string_t m_szDescription
        Documentation: Friendly item description for client-side UI.
      - Declaration: string_t m_szDisplayName
        Documentation: Friendly item name for client-side UI.
      - Declaration: string_t m_szItemGroup
        Documentation: Group name referred to by triggers.
      - Declaration: string_t m_szItemName
        Documentation: >-
          Item name referred to by triggers, doesn't need to be unique --
          remember the targetname refers to the entity itself only.
      - Declaration: int m_iMoveType
        Documentation: Spawn-time move type.
      - Declaration: Vector m_vecSpawnAngles
        Documentation: Spawn-time angles.
      - Declaration: Vector m_vecSpawnOrigin
        Documentation: Spawn-time origin.
      - Declaration: EHandle m_hHolder
        Documentation: The monster or player holding this item.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBasePlayerAmmo
    Namespace: ''
    Documentation: Player ammo class
    Flags: 262145
    Methods:
      - Declaration: void Materialize()
        Documentation: Makes this entity visible and tangible.
      - Declaration: bool AddAmmo(CBaseEntity@ pOther)
        Documentation: Adds ammo to the given entity.
      - Declaration: void DefaultTouch(CBaseEntity@ pOther)
        Documentation: Default touch
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Calls use on targets.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBasePlayerWeapon
    Namespace: ''
    Documentation: Player Weapon entity base class
    Flags: 262145
    Methods:
      - Declaration: void ChangeWeaponSkin(int16 skin)
        Documentation: ''
      - Declaration: void SetFOV(int iFOV)
        Documentation: 0 means reset to default fov
      - Declaration: void PrecacheCustomModels()
        Documentation: Precaches custom models if needed.
      - Declaration: string GetV_Model(const string& in szAlternative)
        Documentation: Gets the weapon's V model.
      - Declaration: string GetV_Model()
        Documentation: Gets the weapon's V model.
      - Declaration: string GetW_Model(const string& in szAlternative)
        Documentation: Gets the weapon's W model.
      - Declaration: string GetW_Model()
        Documentation: Gets the weapon's W model.
      - Declaration: string GetP_Model(const string& in szAlternative)
        Documentation: Gets the weapon's P model.
      - Declaration: string GetP_Model()
        Documentation: Gets the weapon's P model.
      - Declaration: void BurstSupplement()
        Documentation: ''
      - Declaration: bool UseDecrement()
        Documentation: Whether the client predicts this weapon
      - Declaration: bool ShouldWeaponIdle()
        Documentation: ''
      - Declaration: void RetireWeapon()
        Documentation: no more ammo for this gun, put it away.
      - Declaration: void WeaponIdle()
        Documentation: called when no buttons pressed
      - Declaration: bool ShouldReload()
        Documentation: Returns whether this weapon should reload automatically.
      - Declaration: void FinishReload()
        Documentation: Finishes the reload for this weapon.
      - Declaration: void Reload()
        Documentation: ''
      - Declaration: void TertiaryAttack()
        Documentation: do "+ATTACK3"
      - Declaration: void SecondaryAttack()
        Documentation: do "+ATTACK2"
      - Declaration: void PrimaryAttack()
        Documentation: do "+ATTACK"
      - Declaration: >-
          bool DefaultReload(int iClipSize, int iAnim, float flDelay, int
          iSubModel = 0)
        Documentation: ''
      - Declaration: >-
          bool DefaultReload(int iClipSize, int iAnim, float flDelay, int
          iSubModel, int iClip, int iAmmoType)
        Documentation: ''
      - Declaration: >-
          bool DefaultDeploy(const string& in szViewModel, const string& in
          szWeaponModel, int iAnim, const string& in szAnimExt, int skiplocal =
          0, int body = 0)
        Documentation: ''
      - Declaration: bool IsUseable()
        Documentation: ''
      - Declaration: >-
          Vector BulletAccuracy(const Vector& in vecMoving, const Vector& in
          vecStanding, const Vector& in vecCrouched)
        Documentation: >-
          Universal code to determine player bullet accuracy based on
          speed/stance
      - Declaration: void SendWeaponAnim(int iAnim, int skiplocal = 0, int body = 0)
        Documentation: skiplocal is 1 if client is predicting weapon animations
      - Declaration: void ResetEmptySound()
        Documentation: ''
      - Declaration: bool PlayEmptySound()
        Documentation: ''
      - Declaration: >-
          int AddSecondaryAmmo(int iCount, const string& in szName, int
          iMaxCarry)
        Documentation: ''
      - Declaration: >-
          int AddPrimaryAmmo(int iCount, const string& in szName, int iMaxClip,
          int iMaxCarry)
        Documentation: ''
      - Declaration: bool AddWeapon()
        Documentation: ''
      - Declaration: bool ExtractClipAmmo(CBasePlayerWeapon@ pWeapon)
        Documentation: ''
      - Declaration: bool ExtractAmmo(CBasePlayerWeapon@ pWeapon)
        Documentation: ''
      - Declaration: bool CanHaveDuplicates()
        Documentation: Can this weapon have duplicates added?
      - Declaration: CBasePlayerItem@ DropItem()
        Documentation: |-
          CBaseEntity to drop.
          By default, this entity.
      - Declaration: float GetRespawnTime() const
        Documentation: Gets this item's respawn time (time from pickup to respawn).
      - Declaration: int iFlags()
        Documentation: Gets the item flags.
      - Declaration: int iWeight()
        Documentation: Gets the item weight.
      - Declaration: int iMaxClip()
        Documentation: Gets the max clip amount.
      - Declaration: string pszName()
        Documentation: Gets the name of this item.
      - Declaration: int iMaxAmmo2()
        Documentation: Gets the secondary ammo maximum.
      - Declaration: string pszAmmo2()
        Documentation: Gets the name of the secondary ammo.
      - Declaration: int iMaxAmmo1()
        Documentation: Gets the primary ammo maximum.
      - Declaration: string pszAmmo1()
        Documentation: Gets the name of the primary ammo.
      - Declaration: int iItemPosition()
        Documentation: Gets the item position.
      - Declaration: int iItemSlot()
        Documentation: Gets the slot this item is in. 0 to MAX_ITEMS_SLOTS.
      - Declaration: CBasePlayerWeapon@ GetWeaponPtr()
        Documentation: Gets this item as a weapon. Returns null if this is not a weapon.
      - Declaration: bool UpdateClientData(CBasePlayer@ pPlayer)
        Documentation: Updates client data.
      - Declaration: int SecondaryAmmoIndex()
        Documentation: >-
          Gets the secondary ammo index, or -1 if this item doesn't use
          secondary ammo.
      - Declaration: int PrimaryAmmoIndex()
        Documentation: >-
          Gets the primary ammo index, or -1 if this item doesn't use primary
          ammo.
      - Declaration: void AttachToPlayer(CBasePlayer@ pPlayer)
        Documentation: Attach this item to the given player.
      - Declaration: void Kill()
        Documentation: Kills this item.
      - Declaration: void LoadSprites(CBasePlayer@ pPlayer, const string& in szName)
        Documentation: Load item sprites.
      - Declaration: void UpdateItemInfo()
        Documentation: Updates item info.
      - Declaration: void Holster(int iSkipLocal = 0)
        Documentation: Holsters this weapon.
      - Declaration: bool CanHolster()
        Documentation: Can this weapon be put away right now?
      - Declaration: bool Deploy()
        Documentation: Returns if deploy was successful.
      - Declaration: bool CanDeploy()
        Documentation: Returns whether this item can deploy.
      - Declaration: bool GetItemInfo(ItemInfo& out info)
        Documentation: Gets item info.
      - Declaration: void CheckRespawn()
        Documentation: Check respawn.
      - Declaration: void FallInit()
        Documentation: Fall init.
      - Declaration: CBasePlayerItem@ RespawnItem()
        Documentation: Copy a weapon.
      - Declaration: void AttemptToMaterialize()
        Documentation: >-
          Think function. The weapon desires to become visible and tangible, if
          the game rules allow for it.
      - Declaration: void Materialize()
        Documentation: Make a weapon visible and tangible.
      - Declaration: void FallThink()
        Documentation: >-
          Think function. When an item is first spawned, this think is run to
          determine when the object has hit the ground.
      - Declaration: >-
          void ItemUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue)
        Documentation: Default weapon use function.
      - Declaration: void DefaultTouch(CBaseEntity@ pOther)
        Documentation: Touch function. Default touch.
      - Declaration: void Collect(CBaseEntity@ pOther, CollectTypes collectType)
        Documentation: >-
          Attempts to let pOther collect this item, while specifying the collect
          type.
      - Declaration: void Collect(CBaseEntity@ pOther)
        Documentation: Attempts to let pOther collect this item.
      - Declaration: void DestroyItem()
        Documentation: Think function. Destroys this item.
      - Declaration: bool AddDuplicate(CBasePlayerItem@ pItem)
        Documentation: returns true if this item wants the duplicate removed from the world.
      - Declaration: bool AddToPlayer(CBasePlayer@ pPlayer)
        Documentation: >-
          Returns true if this item wants itself added to the player's
          inventory.
      - Declaration: int GetSequenceActivityName(int iSequence)
        Documentation: Gets activity for the given sequence.
      - Declaration: void SetSequenceBox()
        Documentation: Sets the sequence box.
      - Declaration: int GetAttachmentCount()
        Documentation: Gets the number of attachments that the current model has.
      - Declaration: bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)
        Documentation: Extracts the bounding box of the current model.
      - Declaration: int GetBodygroup(int iGroup)
        Documentation: Gets the value of the given body group.
      - Declaration: void SetBodygroup(int iGroup, int iValue)
        Documentation: Sets the given body group to the given value.
      - Declaration: >-
          void GetAttachment(int iAttachment, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the attachment position.
      - Declaration: int FindTransition(int iEndingSequence, int iGoalSequence)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          int FindTransition(int iEndingSequence, int iGoalSequence, int& out
          iDir)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          void GetAutomovement(Vector& out origin, Vector& out angles, float
          flInterval = 0.1f)
        Documentation: Gets automatic movement.
      - Declaration: >-
          void GetBonePosition(int iBone, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the position of the given bone.
      - Declaration: float SetBlending(int iBlender, float flValue)
        Documentation: Sets the given blending controller to the given value.
      - Declaration: void InitBoneControllers()
        Documentation: Initializes bone controllers.
      - Declaration: float SetBoneController(int iController, float flValue)
        Documentation: Sets the specified bone controller to the given value.
      - Declaration: void DispatchAnimEvents(float flFutureInterval = 0.1f)
        Documentation: >-
          Handle events that have happend since last time called up until X
          seconds into the future.
      - Declaration: void ResetGaitSequenceInfo()
        Documentation: Resets gait sequence info.
      - Declaration: void ResetSequenceInfo()
        Documentation: Resets sequence info.
      - Declaration: int LookupSequence(const string& in szLabel)
        Documentation: >-
          Returns the index of the given sequence, or -1 if no such sequence
          exists.
      - Declaration: int LookupActivityHeaviest(int iActivity)
        Documentation: >-
          Returns the index of the given activity that has the heaviest weight,
          or -1 if no such activity exists.
      - Declaration: int LookupActivity(int iActivity)
        Documentation: >-
          Returns the index of the given activity, or -1 if no such activity
          exists.
      - Declaration: int GetSequenceFlags()
        Documentation: Get sequence flags.
      - Declaration: float StudioFrameAdvance(float flInterval = 0.0f)
        Documentation: Accumulate animation frame time from last time called until now.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseDelay@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseAnimating@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBasePlayerItem@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: int m_iDefaultSecAmmo
        Documentation: >-
          The amount of secondary ammo you receive when you pick up this weapon
          as placed by a level designer.
      - Declaration: int m_iDefaultAmmo
        Documentation: >-
          The amount of primary ammo you receive when you pick up this weapon as
          placed by a level designer.
      - Declaration: float m_flNextBurstRound
        Documentation: When the next burst round is to be fired
      - Declaration: bool m_fInZoom
        Documentation: Weapon is zoomed in
      - Declaration: bool m_fIsAkimbo
        Documentation: Weapon is in 'akimbo' mode
      - Declaration: float m_flCustomDmg
        Documentation: Per-entity weapon damage
      - Declaration: bool m_fInReload
        Documentation: Are we in the middle of a reload
      - Declaration: int m_iClip2
        Documentation: number of shots left in the secondary weapon clip, -1 it not used
      - Declaration: int m_iClip
        Documentation: number of shots left in the primary weapon clip, -1 it not used
      - Declaration: int m_iSecondaryAmmoType
        Documentation: '"secondary" ammo index into players m_rgAmmo[]'
      - Declaration: int m_iPrimaryAmmoType
        Documentation: '"primary" ammo index into players m_rgAmmo[]'
      - Declaration: float m_flTimeWeaponIdle
        Documentation: soonest time ItemPostFrame will call WeaponIdle
      - Declaration: float m_flNextTertiaryAttack
        Documentation: soonest time ItemPostFrame will call TertiaryAttack
      - Declaration: float m_flNextSecondaryAttack
        Documentation: soonest time ItemPostFrame will call SecondaryAttack
      - Declaration: float m_flNextPrimaryAttack
        Documentation: soonest time ItemPostFrame will call PrimaryAttack
      - Declaration: bool m_bFireOnEmpty
        Documentation: >-
          True when the gun is empty and the player is still holding down the
          attack key(s)
      - Declaration: bool m_bPlayEmptySound
        Documentation: Whether to play the empty sound when the player attempts to fire
      - Declaration: int m_dropType
        Documentation: The current drop type. Check the DROP_TYPE Enum.
      - Declaration: bool m_bExclusiveHold
        Documentation: >-
          If set, as long as a player has this item, the player must keep this
          weapon selected.No more than one item with this set can be carried at
          one time.
      - Declaration: float m_flLastBounce
        Documentation: The last bounce time.
      - Declaration: const int m_iId
        Documentation: The item id.
      - Declaration: EHandle m_hNextItem
        Documentation: Gets the next item. null if no next item.
      - Declaration: EHandle m_hPlayer
        Documentation: The owning player. null if no owner.
      - Declaration: bool m_fSequenceLoops
        Documentation: True if the sequence loops.
      - Declaration: bool m_fSequenceFinished
        Documentation: Flag set when StudioAdvanceFrame moves across a frame boundry.
      - Declaration: float m_flLastGaitEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flLastEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flGroundSpeed
        Documentation: Computed linear movement rate for current sequence.
      - Declaration: float m_flFrameRate
        Documentation: Computed FPS for current sequence.
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBasePlayerItem
    Namespace: ''
    Documentation: Player item base class
    Flags: 262145
    Methods:
      - Declaration: CBasePlayerWeapon@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: bool CanHaveDuplicates()
        Documentation: Can this weapon have duplicates added?
      - Declaration: CBasePlayerItem@ DropItem()
        Documentation: |-
          CBaseEntity to drop.
          By default, this entity.
      - Declaration: float GetRespawnTime() const
        Documentation: Gets this item's respawn time (time from pickup to respawn).
      - Declaration: int iFlags()
        Documentation: Gets the item flags.
      - Declaration: int iWeight()
        Documentation: Gets the item weight.
      - Declaration: int iMaxClip()
        Documentation: Gets the max clip amount.
      - Declaration: string pszName()
        Documentation: Gets the name of this item.
      - Declaration: int iMaxAmmo2()
        Documentation: Gets the secondary ammo maximum.
      - Declaration: string pszAmmo2()
        Documentation: Gets the name of the secondary ammo.
      - Declaration: int iMaxAmmo1()
        Documentation: Gets the primary ammo maximum.
      - Declaration: string pszAmmo1()
        Documentation: Gets the name of the primary ammo.
      - Declaration: int iItemPosition()
        Documentation: Gets the item position.
      - Declaration: int iItemSlot()
        Documentation: Gets the slot this item is in. 0 to MAX_ITEMS_SLOTS.
      - Declaration: CBasePlayerWeapon@ GetWeaponPtr()
        Documentation: Gets this item as a weapon. Returns null if this is not a weapon.
      - Declaration: bool UpdateClientData(CBasePlayer@ pPlayer)
        Documentation: Updates client data.
      - Declaration: int SecondaryAmmoIndex()
        Documentation: >-
          Gets the secondary ammo index, or -1 if this item doesn't use
          secondary ammo.
      - Declaration: int PrimaryAmmoIndex()
        Documentation: >-
          Gets the primary ammo index, or -1 if this item doesn't use primary
          ammo.
      - Declaration: void AttachToPlayer(CBasePlayer@ pPlayer)
        Documentation: Attach this item to the given player.
      - Declaration: void Kill()
        Documentation: Kills this item.
      - Declaration: void LoadSprites(CBasePlayer@ pPlayer, const string& in szName)
        Documentation: Load item sprites.
      - Declaration: void UpdateItemInfo()
        Documentation: Updates item info.
      - Declaration: void Holster(int iSkipLocal = 0)
        Documentation: Holsters this weapon.
      - Declaration: bool CanHolster()
        Documentation: Can this weapon be put away right now?
      - Declaration: bool Deploy()
        Documentation: Returns if deploy was successful.
      - Declaration: bool CanDeploy()
        Documentation: Returns whether this item can deploy.
      - Declaration: bool GetItemInfo(ItemInfo& out info)
        Documentation: Gets item info.
      - Declaration: void CheckRespawn()
        Documentation: Check respawn.
      - Declaration: void FallInit()
        Documentation: Fall init.
      - Declaration: CBasePlayerItem@ RespawnItem()
        Documentation: Copy a weapon.
      - Declaration: void AttemptToMaterialize()
        Documentation: >-
          Think function. The weapon desires to become visible and tangible, if
          the game rules allow for it.
      - Declaration: void Materialize()
        Documentation: Make a weapon visible and tangible.
      - Declaration: void FallThink()
        Documentation: >-
          Think function. When an item is first spawned, this think is run to
          determine when the object has hit the ground.
      - Declaration: >-
          void ItemUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue)
        Documentation: Default weapon use function.
      - Declaration: void DefaultTouch(CBaseEntity@ pOther)
        Documentation: Touch function. Default touch.
      - Declaration: void Collect(CBaseEntity@ pOther, CollectTypes collectType)
        Documentation: >-
          Attempts to let pOther collect this item, while specifying the collect
          type.
      - Declaration: void Collect(CBaseEntity@ pOther)
        Documentation: Attempts to let pOther collect this item.
      - Declaration: void DestroyItem()
        Documentation: Think function. Destroys this item.
      - Declaration: bool AddDuplicate(CBasePlayerItem@ pItem)
        Documentation: returns true if this item wants the duplicate removed from the world.
      - Declaration: bool AddToPlayer(CBasePlayer@ pPlayer)
        Documentation: >-
          Returns true if this item wants itself added to the player's
          inventory.
      - Declaration: int GetSequenceActivityName(int iSequence)
        Documentation: Gets activity for the given sequence.
      - Declaration: void SetSequenceBox()
        Documentation: Sets the sequence box.
      - Declaration: int GetAttachmentCount()
        Documentation: Gets the number of attachments that the current model has.
      - Declaration: bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)
        Documentation: Extracts the bounding box of the current model.
      - Declaration: int GetBodygroup(int iGroup)
        Documentation: Gets the value of the given body group.
      - Declaration: void SetBodygroup(int iGroup, int iValue)
        Documentation: Sets the given body group to the given value.
      - Declaration: >-
          void GetAttachment(int iAttachment, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the attachment position.
      - Declaration: int FindTransition(int iEndingSequence, int iGoalSequence)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          int FindTransition(int iEndingSequence, int iGoalSequence, int& out
          iDir)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          void GetAutomovement(Vector& out origin, Vector& out angles, float
          flInterval = 0.1f)
        Documentation: Gets automatic movement.
      - Declaration: >-
          void GetBonePosition(int iBone, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the position of the given bone.
      - Declaration: float SetBlending(int iBlender, float flValue)
        Documentation: Sets the given blending controller to the given value.
      - Declaration: void InitBoneControllers()
        Documentation: Initializes bone controllers.
      - Declaration: float SetBoneController(int iController, float flValue)
        Documentation: Sets the specified bone controller to the given value.
      - Declaration: void DispatchAnimEvents(float flFutureInterval = 0.1f)
        Documentation: >-
          Handle events that have happend since last time called up until X
          seconds into the future.
      - Declaration: void ResetGaitSequenceInfo()
        Documentation: Resets gait sequence info.
      - Declaration: void ResetSequenceInfo()
        Documentation: Resets sequence info.
      - Declaration: int LookupSequence(const string& in szLabel)
        Documentation: >-
          Returns the index of the given sequence, or -1 if no such sequence
          exists.
      - Declaration: int LookupActivityHeaviest(int iActivity)
        Documentation: >-
          Returns the index of the given activity that has the heaviest weight,
          or -1 if no such activity exists.
      - Declaration: int LookupActivity(int iActivity)
        Documentation: >-
          Returns the index of the given activity, or -1 if no such activity
          exists.
      - Declaration: int GetSequenceFlags()
        Documentation: Get sequence flags.
      - Declaration: float StudioFrameAdvance(float flInterval = 0.0f)
        Documentation: Accumulate animation frame time from last time called until now.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseDelay@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseAnimating@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: int m_dropType
        Documentation: The current drop type. Check the DROP_TYPE Enum.
      - Declaration: bool m_bExclusiveHold
        Documentation: >-
          If set, as long as a player has this item, the player must keep this
          weapon selected.No more than one item with this set can be carried at
          one time.
      - Declaration: float m_flLastBounce
        Documentation: The last bounce time.
      - Declaration: const int m_iId
        Documentation: The item id.
      - Declaration: EHandle m_hNextItem
        Documentation: Gets the next item. null if no next item.
      - Declaration: EHandle m_hPlayer
        Documentation: The owning player. null if no owner.
      - Declaration: bool m_fSequenceLoops
        Documentation: True if the sequence loops.
      - Declaration: bool m_fSequenceFinished
        Documentation: Flag set when StudioAdvanceFrame moves across a frame boundry.
      - Declaration: float m_flLastGaitEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flLastEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flGroundSpeed
        Documentation: Computed linear movement rate for current sequence.
      - Declaration: float m_flFrameRate
        Documentation: Computed FPS for current sequence.
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBaseToggle
    Namespace: ''
    Documentation: All entities that can be toggled derive from this
    Flags: 262145
    Methods:
      - Declaration: CBaseDoor@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseButton@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CGrenade@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayer@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CCineMonster@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseMonster@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: InventoryRules@ get_m_pInventoryRules() const
        Documentation: The inventory rules.
      - Declaration: bool IsToggleLockedByMaster()
        Documentation: |-
          Returns whether this entity is locked by its master.
          Separate from IsLockedByMaster due to limitations.
      - Declaration: void AngularMove(Vector vecDestAngle, float flSpeed)
        Documentation: Performs angular movement.
      - Declaration: void LinearMove(Vector vecDest, float flSpeed)
        Documentation: Performs linear movement.
      - Declaration: int GetSequenceActivityName(int iSequence)
        Documentation: Gets activity for the given sequence.
      - Declaration: void SetSequenceBox()
        Documentation: Sets the sequence box.
      - Declaration: int GetAttachmentCount()
        Documentation: Gets the number of attachments that the current model has.
      - Declaration: bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)
        Documentation: Extracts the bounding box of the current model.
      - Declaration: int GetBodygroup(int iGroup)
        Documentation: Gets the value of the given body group.
      - Declaration: void SetBodygroup(int iGroup, int iValue)
        Documentation: Sets the given body group to the given value.
      - Declaration: >-
          void GetAttachment(int iAttachment, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the attachment position.
      - Declaration: int FindTransition(int iEndingSequence, int iGoalSequence)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          int FindTransition(int iEndingSequence, int iGoalSequence, int& out
          iDir)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          void GetAutomovement(Vector& out origin, Vector& out angles, float
          flInterval = 0.1f)
        Documentation: Gets automatic movement.
      - Declaration: >-
          void GetBonePosition(int iBone, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the position of the given bone.
      - Declaration: float SetBlending(int iBlender, float flValue)
        Documentation: Sets the given blending controller to the given value.
      - Declaration: void InitBoneControllers()
        Documentation: Initializes bone controllers.
      - Declaration: float SetBoneController(int iController, float flValue)
        Documentation: Sets the specified bone controller to the given value.
      - Declaration: void DispatchAnimEvents(float flFutureInterval = 0.1f)
        Documentation: >-
          Handle events that have happend since last time called up until X
          seconds into the future.
      - Declaration: void ResetGaitSequenceInfo()
        Documentation: Resets gait sequence info.
      - Declaration: void ResetSequenceInfo()
        Documentation: Resets sequence info.
      - Declaration: int LookupSequence(const string& in szLabel)
        Documentation: >-
          Returns the index of the given sequence, or -1 if no such sequence
          exists.
      - Declaration: int LookupActivityHeaviest(int iActivity)
        Documentation: >-
          Returns the index of the given activity that has the heaviest weight,
          or -1 if no such activity exists.
      - Declaration: int LookupActivity(int iActivity)
        Documentation: >-
          Returns the index of the given activity, or -1 if no such activity
          exists.
      - Declaration: int GetSequenceFlags()
        Documentation: Get sequence flags.
      - Declaration: float StudioFrameAdvance(float flInterval = 0.0f)
        Documentation: Accumulate animation frame time from last time called until now.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseDelay@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseAnimating@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: string_t m_sMaster
        Documentation: This entity's master, if any.
      - Declaration: int m_bitsDamageInflict
        Documentation: DMG_ damage type that the door or trigger does.
      - Declaration: Vector m_vecFinalAngle
        Documentation: Final angle.
      - Declaration: Vector m_vecFinalDest
        Documentation: Final destination.
      - Declaration: Vector m_vecAngle2
        Documentation: Open angle.
      - Declaration: Vector m_vecAngle1
        Documentation: Closed angle.
      - Declaration: Vector m_vecPosition2
        Documentation: Open position.
      - Declaration: Vector m_vecPosition1
        Documentation: Closed position.
      - Declaration: EHandle m_hActivator
        Documentation: Handle to the activator.
      - Declaration: float m_flHeight
        Documentation: Height.
      - Declaration: int m_cTriggersLeft
        Documentation: 'Trigger_counter only: # of activations remaining.'
      - Declaration: float m_flTLength
        Documentation: For plats.
      - Declaration: float m_flTWidth
        Documentation: For plats.
      - Declaration: float m_flLip
        Documentation: >-
          How much to stick out of a wall. Will recede further into walls if
          negative.
      - Declaration: float m_flWait
        Documentation: How long to wait before resetting.
      - Declaration: float m_flMoveDistance
        Documentation: How far a door should slide or rotate.
      - Declaration: TOGGLE_STATE m_toggle_state
        Documentation: Current toggle state.
      - Declaration: bool m_fSequenceLoops
        Documentation: True if the sequence loops.
      - Declaration: bool m_fSequenceFinished
        Documentation: Flag set when StudioAdvanceFrame moves across a frame boundry.
      - Declaration: float m_flLastGaitEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flLastEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flGroundSpeed
        Documentation: Computed linear movement rate for current sequence.
      - Declaration: float m_flFrameRate
        Documentation: Computed FPS for current sequence.
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBaseAnimating
    Namespace: ''
    Documentation: All entities that can animate derive from this
    Flags: 262145
    Methods:
      - Declaration: CBaseDoor@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseButton@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayerWeapon@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CGrenade@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayer@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CCineMonster@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseMonster@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayerItem@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseToggle@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: int GetSequenceActivityName(int iSequence)
        Documentation: Gets activity for the given sequence.
      - Declaration: void SetSequenceBox()
        Documentation: Sets the sequence box.
      - Declaration: int GetAttachmentCount()
        Documentation: Gets the number of attachments that the current model has.
      - Declaration: bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)
        Documentation: Extracts the bounding box of the current model.
      - Declaration: int GetBodygroup(int iGroup)
        Documentation: Gets the value of the given body group.
      - Declaration: void SetBodygroup(int iGroup, int iValue)
        Documentation: Sets the given body group to the given value.
      - Declaration: >-
          void GetAttachment(int iAttachment, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the attachment position.
      - Declaration: int FindTransition(int iEndingSequence, int iGoalSequence)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          int FindTransition(int iEndingSequence, int iGoalSequence, int& out
          iDir)
        Documentation: Find the transition between 2 sequences.
      - Declaration: >-
          void GetAutomovement(Vector& out origin, Vector& out angles, float
          flInterval = 0.1f)
        Documentation: Gets automatic movement.
      - Declaration: >-
          void GetBonePosition(int iBone, Vector& out origin, Vector& out
          angles)
        Documentation: Gets the position of the given bone.
      - Declaration: float SetBlending(int iBlender, float flValue)
        Documentation: Sets the given blending controller to the given value.
      - Declaration: void InitBoneControllers()
        Documentation: Initializes bone controllers.
      - Declaration: float SetBoneController(int iController, float flValue)
        Documentation: Sets the specified bone controller to the given value.
      - Declaration: void DispatchAnimEvents(float flFutureInterval = 0.1f)
        Documentation: >-
          Handle events that have happend since last time called up until X
          seconds into the future.
      - Declaration: void ResetGaitSequenceInfo()
        Documentation: Resets gait sequence info.
      - Declaration: void ResetSequenceInfo()
        Documentation: Resets sequence info.
      - Declaration: int LookupSequence(const string& in szLabel)
        Documentation: >-
          Returns the index of the given sequence, or -1 if no such sequence
          exists.
      - Declaration: int LookupActivityHeaviest(int iActivity)
        Documentation: >-
          Returns the index of the given activity that has the heaviest weight,
          or -1 if no such activity exists.
      - Declaration: int LookupActivity(int iActivity)
        Documentation: >-
          Returns the index of the given activity, or -1 if no such activity
          exists.
      - Declaration: int GetSequenceFlags()
        Documentation: Get sequence flags.
      - Declaration: float StudioFrameAdvance(float flInterval = 0.0f)
        Documentation: Accumulate animation frame time from last time called until now.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
      - Declaration: CBaseDelay@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: bool m_fSequenceLoops
        Documentation: True if the sequence loops.
      - Declaration: bool m_fSequenceFinished
        Documentation: Flag set when StudioAdvanceFrame moves across a frame boundry.
      - Declaration: float m_flLastGaitEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flLastEventCheck
        Documentation: Last time the event list was checked.
      - Declaration: float m_flGroundSpeed
        Documentation: Computed linear movement rate for current sequence.
      - Declaration: float m_flFrameRate
        Documentation: Computed FPS for current sequence.
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBaseDelay
    Namespace: ''
    Documentation: All entities that can trigger with a delay derive from this
    Flags: 262145
    Methods:
      - Declaration: CBaseDoor@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseButton@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayerWeapon@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CGrenade@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayer@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CCineMonster@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseMonster@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayerItem@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseToggle@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseAnimating@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: void DelayThink()
        Documentation: Think function. Used internally.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Causes this entity to trigger its targets with an optional delay.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CBaseEntity@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties:
      - Declaration: string_t m_iszKillTarget
        Documentation: The name of the kill target, if any.
      - Declaration: float m_flDelay
        Documentation: Delay before fire.
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: CBaseEntity
    Namespace: ''
    Documentation: All entities derive from this
    Flags: 262145
    Methods:
      - Declaration: CGib@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseDoor@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseButton@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CItem@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayerAmmo@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseTank@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CLaser@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBeam@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CPathTrack@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayerWeapon@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CSprite@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CGrenade@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayer@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CCineMonster@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseMonster@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBasePlayerItem@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseToggle@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseAnimating@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: CBaseDelay@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: void ClearUserData()
        Documentation: |-
          Clears the user data on this entity. WARNING: clears all data.
          Only map scripts can use this.
      - Declaration: dictionaryValue& GetUserData(const string& in szKey)
        Documentation: >-
          Gets the user data stored under the specified key on this entity.

          Do not keep references to this data, the object might be removed from
          this entity.

          Only map scripts can use this.
      - Declaration: dictionary@ GetUserData()
        Documentation: >-
          Gets the user data on this entity. Do not keep references to this
          data, the object might be removed from this entity.

          Only map scripts can use this.
      - Declaration: void ClearEntityFlags()
        Documentation: Clear all entity flag masks (EFLAG)
      - Declaration: bool HasEntityFlag(int FlagMask) const
        Documentation: Check if it has such entity flag mask (EFLAG) set
      - Declaration: void RemoveEntityFlag(int FlagMask)
        Documentation: Remove a entity flag mask (EFLAG)
      - Declaration: void AddEntityFlag(int FlagMask)
        Documentation: Add a entity flag mask (EFLAG)
      - Declaration: void EndRevive(float flTimeUntilRevive)
        Documentation: >-
          Called when this entity should be revived. flTimeUntilRevive is the
          time until the revival should start.
      - Declaration: void BeginRevive(float flTimeUntilRevive)
        Documentation: >-
          Prepares this entity for revival. flTimeUntilRevive is the time until
          the revive action completes.
      - Declaration: bool IsRevivable()
        Documentation: Returns whether this entity is revivable at this time.
      - Declaration: void OnSetOriginByMap()
        Documentation: Entity callback after trigger_setorigin has moved the entity.
      - Declaration: void OnDestroy()
        Documentation: Entity destructor.
      - Declaration: void OnCreate()
        Documentation: Entity constructor.
      - Declaration: >-
          void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor,
          float flDamage)
        Documentation: Adds damage points to the inflicting entity.
      - Declaration: float GetPointsForDamage(float flDamage)
        Documentation: Returns the points received for damage done.
      - Declaration: >-
          bool IsFacing(entvars_t@ pevTest, float flDotProduct =
          VIEW_FIELD_ULTRA_NARROW)
        Documentation: >-
          Returns whether this entity is facing the given entity, within the
          given view field.
      - Declaration: bool FVisible(const Vector& in vecOrigin)
        Documentation: Returns whether this entity is visible from the given origin.
      - Declaration: bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)
        Documentation: Returns whether this entity is visible to the given entity.
      - Declaration: int Illumination()
        Documentation: Returns this entity's illumination.
      - Declaration: Vector BodyTarget(const Vector& in posSrc)
        Documentation: Returns this entity's body target for shooting.
      - Declaration: Vector EarPosition()
        Documentation: Returns this entity's ear position.
      - Declaration: Vector EyePosition()
        Documentation: Returns this entity's eye position.
      - Declaration: Vector Center()
        Documentation: Returns this entity's center.
      - Declaration: bool FBecomeProne(CBaseEntity@ pOther)
        Documentation: Makes this entity become prone.
      - Declaration: CBaseEntity@ Respawn()
        Documentation: Respawns this entity.
      - Declaration: void UpdateOnRemove()
        Documentation: Updates this entity when removed.
      - Declaration: void Blocked(CBaseEntity@ pOther)
        Documentation: Triggers this entity's blocked function.
      - Declaration: >-
          void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
          useType, float flValue = 0.0f)
        Documentation: Trigger's this entity's use function.
      - Declaration: void Touch(CBaseEntity@ pOther)
        Documentation: Triggers this entity's touch function.
      - Declaration: void Think()
        Documentation: Makes this entity think. Do not call directly.
      - Declaration: CBaseEntity@ GetNextTarget()
        Documentation: Gets the next target to trigger.
      - Declaration: bool CriticalRemove()
        Documentation: Removes this entity in critical situations.
      - Declaration: bool IsMachine()
        Documentation: Returns whether this is a machine.
      - Declaration: bool IsBreakable()
        Documentation: Returns whether this is a breakable brush entity.
      - Declaration: bool IsPointEnt()
        Documentation: Returns whether this is a point entity.
      - Declaration: bool IsNetClient()
        Documentation: Returns whether this is a net client.
      - Declaration: bool IsPlayer()
        Documentation: Returns whether this entity is a player.
      - Declaration: bool IsMonster()
        Documentation: Returns whether this entity is a monster.
      - Declaration: bool IsInWorld()
        Documentation: Returns whether this entity is in the world.
      - Declaration: bool ReflectGauss()
        Documentation: Returns whether this entity reflects gauss shots.
      - Declaration: bool IsBSPModel()
        Documentation: Returns whether this entity is a BSP model.
      - Declaration: bool IsAlive()
        Documentation: Returns whether this entity is alive.
      - Declaration: bool IsSneaking()
        Documentation: Returns whether this entity is sneaking.
      - Declaration: bool OnControls(entvars_t@ pev)
        Documentation: Reacts to controls set on the pev.
      - Declaration: void StopSneaking()
        Documentation: Stops sneaking.
      - Declaration: void StartSneaking()
        Documentation: Starts sneaking.
      - Declaration: void SetToggleState(int state)
        Documentation: Sets this entity's toggle state.
      - Declaration: int DamageDecal(int bitsDamageType)
        Documentation: |-
          Returns the damage decal
          See decal_e.
      - Declaration: void OverrideReset()
        Documentation: Resets this entity.
      - Declaration: bool IsMoving()
        Documentation: Returns whether this entity is moving.
      - Declaration: float GetDelay()
        Documentation: Gets this entity's trigger delay.
      - Declaration: bool RemovePlayerItem(CBasePlayerItem@ pItem)
        Documentation: Removes the given player item to this entity.
      - Declaration: AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)
        Documentation: Adds the given player item to this entity.
      - Declaration: void AddPointsToTeam(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity's team.
      - Declaration: void AddPoints(int score, const bool bAllowNegativeScore)
        Documentation: Adds points to this entity.
      - Declaration: int GetToggleState()
        Documentation: |-
          Gets the toggle state.
          See the TOGGLE_STATE enum.
      - Declaration: bool SetupModel()
        Documentation: Sets up the model.
      - Declaration: int entindex()
        Documentation: Returns this entity's index.
      - Declaration: edict_t@ edict()
        Documentation: Returns this entity's edict.
      - Declaration: bool IsLockedByMaster()
        Documentation: Returns whether this entity is locked by its master.
      - Declaration: bool IsDormant()
        Documentation: Returns whether this entity is dormant.
      - Declaration: void MakeDormant()
        Documentation: Makes this entity dormant.
      - Declaration: bool Intersects(CBaseEntity@ pOther)
        Documentation: Returns whether this entity intersects with the given entity.
      - Declaration: >-
          void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float
          flValue)
        Documentation: Calls use on targets.
      - Declaration: >-
          void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting,
          Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq
          = 4, int iDamage = 0, entvars_t@ pevAttacker = null,
          FireBulletsDrawMode fDraw = FBDM_DRAW)
        Documentation: >-
          Fires bullets. Must call CMath::MakeAimVectors with an angle vector
          first.
      - Declaration: bool ShouldToggle(USE_TYPE useType, const bool currentState)
        Documentation: Returns whether this entity should toggle.
      - Declaration: void SUB_CallUseToggle()
        Documentation: Think function. Calls use toggle on this entity.
      - Declaration: void SUB_FadeOut()
        Documentation: Think function. Fades this entity.
      - Declaration: void SUB_StartFadeOut()
        Documentation: Think function. Starts fading this entity.
      - Declaration: void SUB_DoNothing()
        Documentation: Think function. Explicitly does nothing.
      - Declaration: void SUB_Remove()
        Documentation: Think function. Delay-removes this entity.
      - Declaration: bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)
        Documentation: >-
          Returns true if you should be blocked by the entity, false otherwise.
          Also deals blocking damage to the entity, if applicable.
      - Declaration: CustomKeyvalues@ GetCustomKeyvalues()
        Documentation: Gets this entity's custom keyvalues.
      - Declaration: CBaseMonster@ MyMonsterPointer()
        Documentation: Returns this entity as its monster entity, if it is a monster.
      - Declaration: bool IsTriggered(CBaseEntity@ pActivator)
        Documentation: Returns whether this entity is triggered by the given entity.
      - Declaration: int BloodColor()
        Documentation: Returns the blood color. See the BLOOD_COLOR enum.
      - Declaration: void Killed(entvars_t@ pevAttacker, int iGibbed)
        Documentation: >-
          Tells this entity it's been killed. See the GIB enum for possible
          values.
      - Declaration: bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)
        Documentation: >-
          Takes armor from this entity. Note: flArmor is added to entity armor.
          Use negative values to subtract.If armor_cap is non-zero, won't add
          more than armor_cap. Returns 1 if it took damage, 0 otherwise.
      - Declaration: >-
          bool TakeHealth(float flHealth, int bitsDamageType, int health_cap =
          0)
        Documentation: >-
          Takes health from this entity. Note: flHealth is added to entity
          health. Use negative values to subtract.If health_cap is non-zero,
          won't add more than health_cap. Returns true if it took damage, false
          otherwise.
      - Declaration: >-
          int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float
          flDamage, int bitsDamageType)
        Documentation: >-
          Causes this entity to take damage. Returns 1 if it took damage, 0
          otherwise.
      - Declaration: int Classify()
        Documentation: Gets this entity's classification.
      - Declaration: int IRelationshipByClass(CLASS iClass)
        Documentation: >-
          Gets the relationship between this entity and the given entity
          classification. See the RELATIONSHIP enum.
      - Declaration: int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)
        Documentation: >-
          Gets the relationship between this entity and the given entity. See
          the RELATIONSHIP enum.
      - Declaration: void ClearClassification()
        Documentation: Clears this entity's classification override.
      - Declaration: void SetClassificationFromEntity(CBaseEntity@ pEntity)
        Documentation: >-
          Sets this entity's classification override to the classification
          override set on the given entity. Can override the entity's player
          ally setting.
      - Declaration: void SetClassification(int cl)
        Documentation: >-
          Sets this entity's classification override. Can override the entity's
          player ally setting.
      - Declaration: int GetClassification(int cl)
        Documentation: >-
          Gets this entity's classification. Returns the given value if none is
          set. See the CLASSIFICATION enum.
      - Declaration: void SetObjectCollisionBox()
        Documentation: Sets up the object collision box.
      - Declaration: int ObjectCaps()
        Documentation: Gets this entity's objects caps. See the FCAP enum.
      - Declaration: void Precache()
        Documentation: Precaches the entity. Do not call directly.
      - Declaration: bool opEquals(CBaseEntity@ pOther)
        Documentation: Compares 2 entities for equality.
      - Declaration: void SetPlayerAllyDirect(bool fState)
        Documentation: >-
          Sets this entity's player ally status.

          Use this only if you need the setting to be exactly what you give it
          (e.g. when copying from another monster)
      - Declaration: void SetPlayerAlly(bool fState)
        Documentation: Sets this entity's player ally status.
      - Declaration: bool IsPlayerAlly() const
        Documentation: Returns whether this entity is allied to players.
      - Declaration: int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)
        Documentation: Finds monsters in the world
      - Declaration: string SOUNDREPLACEMENT_Find(const string& in szFilename)
        Documentation: Find sound replacement for the given file.
      - Declaration: >-
          bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in
          vecStart)
        Documentation: Returns whether this entity is visible from the given position.
      - Declaration: string GetTargetname() const
        Documentation: Returns this entity's target name.
      - Declaration: string GetClassificationName() const
        Documentation: Returns this entity's classification name.
      - Declaration: string GetClassificationTag() const
        Documentation: Returns this entity's classification tag.
      - Declaration: string GetClassname() const
        Documentation: Returns this entity's class name.
      - Declaration: string TeamID()
        Documentation: Returns this entity's team ID.
      - Declaration: bool HasTarget(const string& in szTarget)
        Documentation: Returns whether this entity has the given target.
      - Declaration: >-
          int GiveAmmo(int iAmount, const string& in szName, int iMax, const
          bool fFromWeapon = true)
        Documentation: Gives ammo to this entity.
      - Declaration: >-
          void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult&
          in traceResult, int bitsDamageType)
        Documentation: Traces entity bleed event.
      - Declaration: >-
          void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector&
          in vecDir, TraceResult& in traceResult, int bitsDamageType)
        Documentation: Traces an attack by the given entity to this entity.
      - Declaration: bool KeyValue(const string& in szKeyName, const string& in szValue)
        Documentation: Sets keyvalue data on this entity
      - Declaration: void SetOrigin(const Vector& in vecOrigin)
        Documentation: Sets this entity's (absolute) origin
      - Declaration: const Vector& GetOrigin() const
        Documentation: Gets the entity's (absolute) origin.
      - Declaration: CItemInventory@ opCast()
        Documentation: Explicitly casts to sub type.
    Properties:
      - Declaration: Vector m_vecOriginalRenderColor
        Documentation: Original render color.
      - Declaration: float m_flOriginalRenderAmount
        Documentation: Original render amount.
      - Declaration: int m_iOriginalRenderFX
        Documentation: Original render FX.
      - Declaration: int m_iOriginalRenderMode
        Documentation: Original render model.
      - Declaration: string_t classnameInFilterType
        Documentation: Class name in filter type.
      - Declaration: string_t targetnameInFilterType
        Documentation: Target name in filter type.
      - Declaration: string_t classnameOutFilterType
        Documentation: Class name out filter type.
      - Declaration: string_t targetnameOutFilterType
        Documentation: Target name out filter type.
      - Declaration: Vector m_vecLastOrigin
        Documentation: Last origin vector
      - Declaration: bool m_fCustomModel
        Documentation: Whether a custom model is used.
      - Declaration: bool m_fCanFadeStart
        Documentation: Whether fading can start.
      - Declaration: float m_flMaximumFadeWaitB
        Documentation: Maximum fade wait time B.
      - Declaration: float m_flMaximumFadeWait
        Documentation: Maximum fade wait time.
      - Declaration: int m_iClassSelection
        Documentation: The overridden classification.
      - Declaration: bool m_fOverrideClass
        Documentation: Whether this entity overrides the classification.
      - Declaration: entvars_t@ pev
        Documentation: Entity variables
  - ClassName: RGBA
    Namespace: ''
    Documentation: Color stored as four uint8 components
    Flags: 2
    Methods:
      - Declaration: string ToString(const bool withAlpha = true) const
        Documentation: Returns a string representation of this RGBA
      - Declaration: bool opEquals(const RGBA& in other) const
        Documentation: Compare colors
      - Declaration: RGBA& opAssign(const RGBA& in other)
        Documentation: Assignment operator
      - Declaration: void RGBA(const RGBA& in other)
        Documentation: Copy constructor
      - Declaration: void RGBA(const Vector& in color, uint8 a = 255)
        Documentation: Constructor
      - Declaration: void RGBA(uint8 r, uint8 g, uint8 b, uint8 a = 255)
        Documentation: Constructor
      - Declaration: void RGBA()
        Documentation: Constructor
    Properties:
      - Declaration: uint8 a
        Documentation: Alpha component
      - Declaration: uint8 b
        Documentation: Blue component
      - Declaration: uint8 g
        Documentation: Green component
      - Declaration: uint8 r
        Documentation: Red component
  - ClassName: CDecals
    Namespace: ''
    Documentation: Dynamic decal manager
    Flags: 262145
    Methods:
      - Declaration: string GetIndex(decal_e decal) const
        Documentation: Gets the texture frame index of the given decal.
      - Declaration: string GetName(decal_e decal) const
        Documentation: Gets the name of the texture representing the given decal.
    Properties: []
  - ClassName: entvars_t
    Namespace: ''
    Documentation: Networked entity variables
    Flags: 262145
    Methods:
      - Declaration: edict_t@ get_pContainingEntity() const
        Documentation: >-
          Entity containing entity. pContainingEntity.vars equals this entvars
          instance.
      - Declaration: bool FlagBitSet(int iFlags)
        Documentation: >-
          Returns whether the given flag(s) are set on the entvars flags
          variable
      - Declaration: bool SpawnFlagBitSet(int iFlags)
        Documentation: >-
          Returns whether the given flag(s) are set on the entvars spawnflags
          variable
      - Declaration: void set_blending(uint, int8)
        Documentation: >-
          Set entity blending by index (0..1, 0..255). Used by entities with
          models to set x or y axis blending.
      - Declaration: int8 get_blending(uint)
        Documentation: >-
          Get entity blending by index (0..1). Used by entities with models to
          get x or y axis blending.
      - Declaration: void set_controller(uint, int8)
        Documentation: >-
          Set entity controller by index (0..3, 0..255) Used by entities with
          studio models to set bone controller settings.
      - Declaration: int8 get_controller(uint)
        Documentation: >-
          Get entity controller by index (0..3). Used by entities with studio
          models to get bone controller settings.
      - Declaration: bool ClassNameIs(const string& in szClassName)
        Documentation: Returns whether the given class name is this entity's class name
    Properties:
      - Declaration: edict_t@ euser4
        Documentation: User variable 4 (Edict)
      - Declaration: edict_t@ euser3
        Documentation: User variable 3 (Edict)
      - Declaration: edict_t@ euser2
        Documentation: User variable 2 (Edict)
      - Declaration: edict_t@ euser1
        Documentation: User variable 1 (Edict)
      - Declaration: Vector vuser4
        Documentation: User variable 4 (Vector)
      - Declaration: Vector vuser3
        Documentation: User variable 3 (Vector)
      - Declaration: Vector vuser2
        Documentation: User variable 2 (Vector)
      - Declaration: Vector vuser1
        Documentation: User variable 1 (Vector)
      - Declaration: float fuser4
        Documentation: User variable 4 (float)
      - Declaration: float fuser3
        Documentation: User variable 3 (float)
      - Declaration: float fuser2
        Documentation: User variable 2 (float)
      - Declaration: float fuser1
        Documentation: User variable 1 (float)
      - Declaration: int iuser4
        Documentation: User variable 4 (integer)
      - Declaration: int iuser3
        Documentation: User variable 3 (integer)
      - Declaration: int iuser2
        Documentation: User variable 2 (integer)
      - Declaration: int iuser1
        Documentation: User variable 1 (integer)
      - Declaration: int groupinfo
        Documentation: Entity group info. Used for internal operations.
      - Declaration: int oldbuttons
        Documentation: Player old buttons. Previous frame's contents of buttons.
      - Declaration: int gamestate
        Documentation: Entity gamestate. Reserved for future use.
      - Declaration: float flFallVelocity
        Documentation: Player fall velocity.
      - Declaration: int iStepLeft
        Documentation: Entity step left flag. Used for internal operations.
      - Declaration: int flDuckTime
        Documentation: Entity duck time. Used for internal operations.
      - Declaration: int flSwimTime
        Documentation: Entity swim time. Used for internal operations.
      - Declaration: int flTimeStepSound
        Documentation: Entity time of step sound. Used for internal operations.
      - Declaration: int bInDuck
        Documentation: Entity ducking flag. Used for internal operations.
      - Declaration: int pushmsec
        Documentation: Entity push milliseconds. Used for internal operations.
      - Declaration: int weaponanim
        Documentation: Player weapon animation
      - Declaration: float fov
        Documentation: Player field of view
      - Declaration: float maxspeed
        Documentation: Entity maximum speed
      - Declaration: int playerclass
        Documentation: Entity player class. Reserved for future use.
      - Declaration: float radsuit_finished
        Documentation: Entity radiation suit finished. Reserved for future use.
      - Declaration: float pain_finished
        Documentation: >-
          Player pain finished. Time at which the player can take damage again
          while drowning.
      - Declaration: float air_finished
        Documentation: >-
          Player air finished. Time at which the player runs out of air when
          underwater.
      - Declaration: float speed
        Documentation: Entity speed
      - Declaration: string_t noise3
        Documentation: Entity noise 3. Usually used to store a sound name.
      - Declaration: string_t noise2
        Documentation: Entity noise 2. Usually used to store a sound name.
      - Declaration: string_t noise1
        Documentation: Entity noise 1. Usually used to store a sound name.
      - Declaration: string_t noise
        Documentation: Entity noise. Usually used to store a sound name.
      - Declaration: float dmgtime
        Documentation: >-
          Entity damage time. Time at which this entity last took damage.
          Usually used to limit damage effects from being shown too often.
      - Declaration: float dmg
        Documentation: >-
          Entity damage. Usually stores how much damage this entity can do to
          other entities.
      - Declaration: float dmg_save
        Documentation: Entity damage save. Used for internal operations.
      - Declaration: float dmg_take
        Documentation: Entity damage take. Used for internal operations.
      - Declaration: string_t message
        Documentation: The entity message. Used for various things.
      - Declaration: string_t netname
        Documentation: >-
          The entity net name. Used for various things, such as the player's
          name.
      - Declaration: string_t targetname
        Documentation: The entity target name
      - Declaration: string_t target
        Documentation: >-
          The entity target. If set, is the name of one or more targets to
          trigger. Otherwise, is empty.
      - Declaration: int watertype
        Documentation: >-
          Player only. Contains the type of water contents the player is
          currently in. See CONTENTS enum.
      - Declaration: int waterlevel
        Documentation: |-
          Entity water level
          See WATERLEVEL enum.
      - Declaration: float armorvalue
        Documentation: Entity armor value
      - Declaration: float armortype
        Documentation: Entity armor type. Represents maximum armor (similar to max_health).
      - Declaration: float teleport_time
        Documentation: Entity teleport time. Intended for internal operations.
      - Declaration: float max_health
        Documentation: Entity maximum health
      - Declaration: int team
        Documentation: Entity team. Reserved for future use.
      - Declaration: int colormap
        Documentation: Entity color map. Used for player model colors.
      - Declaration: int flags
        Documentation: |-
          Entity flags
          See EdictFlags enum.
      - Declaration: int spawnflags
        Documentation: Entity spawn flags
      - Declaration: edict_t@ groundentity
        Documentation: Entity ground entity
      - Declaration: edict_t@ owner
        Documentation: Entity owner
      - Declaration: edict_t@ aiment
        Documentation: Entity pointer when MOVETYPE_FOLLOW
      - Declaration: edict_t@ enemy
        Documentation: Entity enemy
      - Declaration: edict_t@ dmg_inflictor
        Documentation: Entity damage inflictor
      - Declaration: edict_t@ chain
        Documentation: >-
          Entity pointer when linked into a linked list. Used for temporary
          lists.
      - Declaration: int impulse
        Documentation: Entity impulse bit vector. Used for various internal operations.
      - Declaration: int button
        Documentation: >-
          Entity button bit vector. Usually used to track which buttons the
          player is currently pressing.
      - Declaration: Vector view_ofs
        Documentation: Entity view offset. Used to set an eye offset.
      - Declaration: int deadflag
        Documentation: |-
          Entity dead flag
          See DEAD enum.
      - Declaration: float takedamage
        Documentation: |-
          Entity take damage flag
          See DAMAGE enum.
      - Declaration: int weapons
        Documentation: >-
          Entity weapons bit vector. Largely used by monsters to track which
          weapons they have, and by players for internal purposes.
      - Declaration: float frags
        Documentation: Entity frags. Usually used for the number of kills or score.
      - Declaration: float health
        Documentation: >-
          Entity health. Do not set directly unless you are absolutely sure you
          know what you are doing.
      - Declaration: int renderfx
        Documentation: Entity render fx
      - Declaration: Vector rendercolor
        Documentation: Entity render color (rgb)
      - Declaration: float renderamt
        Documentation: Entity render amount (0..255)
      - Declaration: int rendermode
        Documentation: Entity render mode. See RenderModes enum.
      - Declaration: float scale
        Documentation: Entity rendering scale (0..255). Applies to studio and sprite models.
      - Declaration: float framerate
        Documentation: >-
          Entity framerate. used by entities with studio models to control
          sequence frame rate.
      - Declaration: float animtime
        Documentation: Entity animation time. Used for internal operations.
      - Declaration: float frame
        Documentation: >-
          Entity frame. Used by entities with studio models to set the current
          frame that a sequence is using. Automatically incremented.Used by
          brush models for animated textures: 1 for animated, 0 for off.
      - Declaration: int gaitsequence
        Documentation: >-
          Entity gait sequence. Used by entities with studio models for walking
          sequences.
      - Declaration: int sequence
        Documentation: >-
          Entity sequence. Used by entities with studio models to set which
          sequence to use.
      - Declaration: int light_level
        Documentation: >-
          Player only light level. This is a single value between 0 and 255
          inclusive. Use g_EngineFuncs.GetEntityIllum to retrieve this value.
      - Declaration: float friction
        Documentation: Entity friction. Is a scalar between 0 and 1, inclusive.
      - Declaration: float gravity
        Documentation: Entity gravity. Is a scalar between 0 and 1, inclusive.
      - Declaration: int effects
        Documentation: |-
          Entity effects
          See EFFECTS enum.
      - Declaration: int body
        Documentation: >-
          Entity body index. Used by entities with studio models to set which
          body to use.
      - Declaration: int skin
        Documentation: >-
          Entity skin index. Used by entities with studio models to set which
          skin to use.
      - Declaration: int solid
        Documentation: |-
          Entity solid flag
          See SOLID enum.
      - Declaration: int movetype
        Documentation: |-
          Entity movetype
          See MOVETYPE enum.
      - Declaration: float nextthink
        Documentation: >-
          Entity next think time. The next time this entity will execute its
          think function, as an absolute time value. Otherwise, is 0.
      - Declaration: float ltime
        Documentation: >-
          Entity ltime. The last time this entity has executed its think
          function. Otherwise, is 0.
      - Declaration: Vector size
        Documentation: Entity size. Equivalent to maxs - mins
      - Declaration: Vector maxs
        Documentation: Entity maximum size. Relative to the player's origin.
      - Declaration: Vector mins
        Documentation: Entity minimum size. Relative to the player's origin.
      - Declaration: Vector absmax
        Documentation: >-
          Entity absolute maximum size. Is an absolute position in the world.
          Automatically updated by the engine.
      - Declaration: Vector absmin
        Documentation: >-
          Entity absolute minimum size. Is an absolute position in the world.
          Automatically updated by the engine.
      - Declaration: string_t weaponmodel
        Documentation: >-
          Entity weapon model index. If this player has a visible weapon, is the
          name of that third person (p_) model. Otherwise, is an empty string.
      - Declaration: string_t viewmodel
        Documentation: >-
          Player view model index. If this player has a visible weapon, is the
          name of that view (v_) model. Otherwise, is an empty string.
      - Declaration: string_t model
        Documentation: >-
          The entity model name. If this entity has a model, is the name of that
          model. Otherwise, is an empty string.Use g_EntityFuncs.SetModel to set
          this variable.
      - Declaration: const int modelindex
        Documentation: >-
          Entity model index. If this entity has a model, is the unique index of
          the model. Otherwise, is 0.
      - Declaration: float yaw_speed
        Documentation: Entity yaw speed. See ideal_yaw.
      - Declaration: float ideal_yaw
        Documentation: >-
          Entity ideal yaw. Used in conjunction with yaw_speed to interpolate
          the entity's current yaw angle to this value.
      - Declaration: float pitch_speed
        Documentation: Entity pitch speed. See idealpitch.
      - Declaration: float idealpitch
        Documentation: >-
          Entity ideal pitch. Used in conjunction with pitch_speed to
          interpolate the entity's current pitch angle to this value.
      - Declaration: int fixangle
        Documentation: >-
          Entity fix angle. Engine uses this value to change player view angles,
          and then resets it to FAM_NOTHING. See FixAngleMode enum.
      - Declaration: float starttime
        Documentation: Entity start time. Reserved for future use.
      - Declaration: float impacttime
        Documentation: Entity impact time. Reserved for future use.
      - Declaration: Vector startpos
        Documentation: Entity start position. Reserved for future use.
      - Declaration: Vector endpos
        Documentation: Entity end position. Reserved for future use.
      - Declaration: Vector v_angle
        Documentation: >-
          Player view angle. These are the angles used for the player's view,
          and differ from the regular angles variable.
      - Declaration: Vector punchangle
        Documentation: >-
          Player punch angle. These angles are applied to players when they are
          'punched'.These angles are automatically interpolated back to the null
          vector over time.
      - Declaration: Vector avelocity
        Documentation: >-
          Entity angular velocity, in degrees/sec. Applied to the entity's
          angles.
      - Declaration: Vector angles
        Documentation: Entity angles, in degrees.
      - Declaration: Vector movedir
        Documentation: >-
          Entity move direction. Used by some entities for movement directions,
          but some entities use it for other purposes.
      - Declaration: Vector basevelocity
        Documentation: >-
          Entity base velocity. Used when standing on another entity that
          applies velocity to entities standing on it, for instance conveyors.
      - Declaration: Vector velocity
        Documentation: Entity velocity
      - Declaration: Vector oldorigin
        Documentation: >-
          Old entity origin. Used by some entities to store off their original
          origin before moving to a different location.
      - Declaration: Vector origin
        Documentation: Entity origin. Must be set using g_EntityFuncs.SetOrigin.
      - Declaration: string_t globalname
        Documentation: The entity global name
      - Declaration: const string_t classname
        Documentation: The entity class name
  - ClassName: edict_t
    Namespace: ''
    Documentation: Entity dictionary structure
    Flags: 262145
    Methods:
      - Declaration: int16 get_leafnums(uint)
        Documentation: get leafnums
    Properties:
      - Declaration: entvars_t vars
        Documentation: Entity variables instance
      - Declaration: const float freetime
        Documentation: When this edict was last freed
      - Declaration: const int num_leafs
        Documentation: Number of leafs
      - Declaration: const int headnode
        Documentation: Head node
      - Declaration: const int serialnumber
        Documentation: Serial number
      - Declaration: const int free
        Documentation: Flag telling whether this edict is free
  - ClassName: CMath
    Namespace: ''
    Documentation: Math functions
    Flags: 262145
    Methods:
      - Declaration: bool Compare(double flLhs, double flRhs, double flEpsilon) const
        Documentation: >-
          Compares the given floating point variables and returns whether they
          are equal, considering certain variance (epsilon) between them.
      - Declaration: bool Compare(float flLhs, float flRhs, float flEpsilon) const
        Documentation: >-
          Compares the given floating point variables and returns whether they
          are equal, considering certain variance (epsilon) between them.
      - Declaration: float RadiansToDegrees(float flRadians) const
        Documentation: Returns the given value in radians as degrees
      - Declaration: float DegreesToRadians(float flDegrees) const
        Documentation: Returns the given value in degrees as radians
      - Declaration: float Ceil(float flValue) const
        Documentation: Returns the float value, rounded up to the nearest whole number
      - Declaration: float Floor(float flValue) const
        Documentation: Returns the float value, rounded down to the nearest whole number
      - Declaration: float clamp(float min, float max, float value) const
        Documentation: Clamps a value between a range
      - Declaration: int clamp(int min, int max, int value) const
        Documentation: Clamps a value between a range
      - Declaration: float max(float lhs, float rhs) const
        Documentation: Returns the larger of the two values
      - Declaration: int64 max(int64 lhs, int64 rhs) const
        Documentation: Returns the larger of the two values
      - Declaration: uint64 max(uint64 lhs, uint64 rhs) const
        Documentation: Returns the larger of the two values
      - Declaration: float min(float lhs, float rhs) const
        Documentation: Returns the smaller of the two values
      - Declaration: int64 min(int64 lhs, int64 rhs) const
        Documentation: Returns the smaller of the two values
      - Declaration: uint64 min(uint64 lhs, uint64 rhs) const
        Documentation: Returns the smaller of the two values
      - Declaration: float AngleDistance(float flNext, float flCur)
        Documentation: Returns the distance between 2 angles
      - Declaration: float ApproachAngle(float target, float value, float speed)
        Documentation: >-
          Given a target and current angle value, and a rotation speed, all in
          degrees, returns a new angle that is either between value and target,
          or target, depending on whether the speed is high enough to reach that
          angle.
      - Declaration: float AngleDiff(float flDestAngle, float flSrcAngle)
        Documentation: Returns the difference between 2 angles
      - Declaration: float AngleMod(float flAngle)
        Documentation: Clamps the given angle between 0 and 360
      - Declaration: Vector VecToAngles(const Vector& in vec)
        Documentation: Transforms a vector to an angle
      - Declaration: float VecToYaw(const Vector& in vec)
        Documentation: Transforms a vector to a yaw value
      - Declaration: void MakeInvVectors(const Vector& in vecAngles)
        Documentation: Make inverted vectors
      - Declaration: void MakeAimVectors(const Vector& in vecAngles)
        Documentation: Make aim vectors
      - Declaration: >-
          Vector RotateVector(Vector& in vecToRotate,const Vector& in vecAngles,
          const Vector& in vecOffset)
        Documentation: Rotate vector
      - Declaration: void MakeVectors(const Vector& in vecAngles)
        Documentation: Makes vectors
      - Declaration: float RandomFloat(float low, float high)
        Documentation: Returns a random float between low and high
      - Declaration: int32 RandomLong(int32 low, int32 high)
        Documentation: Returns a random integer between low and high
    Properties:
      - Declaration: const double PI
        Documentation: PI
      - Declaration: const double DOUBLE_MAX
        Documentation: Double maximum positive value
      - Declaration: const float FLOAT_MAX
        Documentation: Float maximum positive value
      - Declaration: const double DOUBLE_MIN
        Documentation: Double minimum positive value
      - Declaration: const float FLOAT_MIN
        Documentation: Float minimum positive value
      - Declaration: const size_t SIZE_MAX
        Documentation: Size_t maximum value
      - Declaration: const uint64 UINT64_MAX
        Documentation: Uint64 maximum value
      - Declaration: const uint32 UINT32_MAX
        Documentation: Uint32 maximum value
      - Declaration: const uint16 UINT16_MAX
        Documentation: Uint16 maximum value
      - Declaration: const uint8 UINT8_MAX
        Documentation: Uint8 maximum value
      - Declaration: const int64 INT64_MAX
        Documentation: Int64 maximum value
      - Declaration: const int32 INT32_MAX
        Documentation: Int32 maximum value
      - Declaration: const int16 INT16_MAX
        Documentation: Int16 maximum value
      - Declaration: const int8 INT8_MAX
        Documentation: Int8 maximum value
      - Declaration: const int64 INT64_MIN
        Documentation: Int64 minimum value
      - Declaration: const int32 INT32_MIN
        Documentation: Int32 minimum value
      - Declaration: const int16 INT16_MIN
        Documentation: Int16 minimum value
      - Declaration: const int8 INT8_MIN
        Documentation: Int8 minimum value
  - ClassName: Vector
    Namespace: ''
    Documentation: 3D Vector
    Flags: 135938
    Methods:
      - Declaration: string ToString() const
        Documentation: Returns a string representation of this vector
      - Declaration: Vector2D Make2D() const
        Documentation: Returns the 2D form of this vector
      - Declaration: Vector Normalize() const
        Documentation: Returns the normalized form of this vector
      - Declaration: float Length2D() const
        Documentation: Gets the length of this vector in 2D
      - Declaration: float Length() const
        Documentation: Gets the length of this vector
      - Declaration: Vector opDiv(const Vector& in other) const
        Documentation: Divide vectors
      - Declaration: Vector opMul(const Vector& in other) const
        Documentation: Multiply vectors
      - Declaration: bool opEquals(const Vector& in other) const
        Documentation: Compare vectors
      - Declaration: float opIndex(size_t uiIndex) const
        Documentation: Index operator
      - Declaration: float& opIndex(size_t uiIndex)
        Documentation: Index operator
      - Declaration: Vector opDiv_r(float fl) const
        Documentation: Divide vector by value
      - Declaration: Vector opDiv(float fl) const
        Documentation: Divide vector by value
      - Declaration: Vector opMul_r(float fl) const
        Documentation: Multiply vector by value
      - Declaration: Vector opMul(float fl) const
        Documentation: Multiply vector by value
      - Declaration: Vector opSub(const Vector& in other) const
        Documentation: Subtract vectors
      - Declaration: Vector opAdd(const Vector& in other) const
        Documentation: Add vectors
      - Declaration: Vector opNeg() const
        Documentation: Negate vector
      - Declaration: Vector& opAssign(const Vector& in other)
        Documentation: Assign vector
      - Declaration: void Vector(float x, float y, float z)
        Documentation: Constructs a 3D vector from 3 floats
      - Declaration: void Vector(const Vector& in vec)
        Documentation: Copy constructs a 3D vector
      - Declaration: void Vector()
        Documentation: Default constructs a 3D vector (0, 0, 0)
    Properties:
      - Declaration: float z
        Documentation: Vector z variable
      - Declaration: float y
        Documentation: Vector y variable
      - Declaration: float x
        Documentation: Vector x variable
  - ClassName: Vector2D
    Namespace: ''
    Documentation: 2D Vector
    Flags: 131842
    Methods:
      - Declaration: string ToString() const
        Documentation: Returns a string representation of this vector
      - Declaration: Vector2D Normalize() const
        Documentation: Returns the normalized form of this vector
      - Declaration: float Length() const
        Documentation: Gets the length of this vector
      - Declaration: bool opEquals(const Vector2D& in other) const
        Documentation: Compare vectors
      - Declaration: Vector2D opDiv_r(float fl) const
        Documentation: Divide vector by a value
      - Declaration: Vector2D opDiv(float fl) const
        Documentation: Divide vector by a value
      - Declaration: Vector2D opMul_r(float fl) const
        Documentation: Multiply vector by a value
      - Declaration: Vector2D opMul(float fl) const
        Documentation: Multiply vector by a value
      - Declaration: Vector2D opSub(const Vector2D& in other) const
        Documentation: Subtract vectors
      - Declaration: Vector2D opAdd(const Vector2D& in other) const
        Documentation: Add vectors
      - Declaration: Vector2D& opAssign(const Vector2D& in other)
        Documentation: Assign vector
      - Declaration: void Vector2D(float x, float y)
        Documentation: Constructs a 2D vector from 2 floats
      - Declaration: void Vector2D(const Vector2D& in other)
        Documentation: Copy constructs a 2D vector
      - Declaration: void Vector2D()
        Documentation: Default constructs a 2D vector (0, 0)
    Properties:
      - Declaration: float y
        Documentation: Vector2D y variable
      - Declaration: float x
        Documentation: Vector2D x variable
  - ClassName: CDebugger
    Namespace: ''
    Documentation: Debugger
    Flags: 262145
    Methods:
      - Declaration: void OutputStatistics()
        Documentation: Output statistics.
      - Declaration: void OutputMembers()
        Documentation: Output member variables.
      - Declaration: void OutputGlobals()
        Documentation: Output global variables.
      - Declaration: void OutputLocals()
        Documentation: Output local variables.
      - Declaration: uint32 GetCurrentStackLevel() const
        Documentation: Gets the current stack level.
    Properties: []
  - ClassName: CScheduler
    Namespace: ''
    Documentation: |-
      Scheduler for calling functions.
      Supports up to 8 parameters for function or method calls.
    Flags: 262145
    Methods:
      - Declaration: void ClearTimerList()
        Documentation: Removes all queued functions from the list of functions to call.
      - Declaration: CScheduledFunction@ GetCurrentFunction() const
        Documentation: Returns the function currently being executed, if any.
      - Declaration: void RemoveTimer(CScheduledFunction@ pFunction)
        Documentation: Removes the given function from the list of functions to call.
      - Declaration: >-
          CScheduledFunction@ SetInterval(?& in thisObject, const string& in
          szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in,
          ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetInterval(?& in thisObject, const string& in
          szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in,
          ?& in, ?& in, ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetInterval(?& in thisObject, const string& in
          szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in,
          ?& in, ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetInterval(?& in thisObject, const string& in
          szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in,
          ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetInterval(?& in thisObject, const string& in
          szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in,
          ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetInterval(?& in thisObject, const string& in
          szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetInterval(?& in thisObject, const string& in
          szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetInterval(?& in thisObject, const string& in
          szFunction, float flRepeatTime, int iRepeatCount, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetInterval(?& in thisObject, const string& in
          szFunction, float flRepeatTime, int iRepeatCount)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetInterval(const string& in szFunction, float
          flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in, ?&
          in, ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
      - Declaration: >-
          CScheduledFunction@ SetInterval(const string& in szFunction, float
          flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in, ?&
          in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
      - Declaration: >-
          CScheduledFunction@ SetInterval(const string& in szFunction, float
          flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in, ?&
          in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
      - Declaration: >-
          CScheduledFunction@ SetInterval(const string& in szFunction, float
          flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
      - Declaration: >-
          CScheduledFunction@ SetInterval(const string& in szFunction, float
          flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
      - Declaration: >-
          CScheduledFunction@ SetInterval(const string& in szFunction, float
          flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
      - Declaration: >-
          CScheduledFunction@ SetInterval(const string& in szFunction, float
          flRepeatTime, int iRepeatCount, ?& in, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
      - Declaration: >-
          CScheduledFunction@ SetInterval(const string& in szFunction, float
          flRepeatTime, int iRepeatCount, ?& in)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
      - Declaration: >-
          CScheduledFunction@ SetInterval(const string& in szFunction, float
          flRepeatTime, int iRepeatCount)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
      - Declaration: >-
          CScheduledFunction@ SetInterval(?& in thisObject, const string& in
          szFunction, float flRepeatTime)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          The given function is called an infinite number of times.
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetInterval(const string& in szFunction, float
          flRepeatTime)
        Documentation: |-
          Adds a timer that calls the given function every flRepeatTime seconds,
          for iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).
          The given function is called an infinite number of times.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(?& in thisObject, const string& in
          szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in,
          ?& in, ?& in)
        Documentation: >-
          Adds a timer that calls the given function after flDelay seconds.
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(?& in thisObject, const string& in
          szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in,
          ?& in)
        Documentation: >-
          Adds a timer that calls the given function after flDelay seconds.
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(?& in thisObject, const string& in
          szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: >-
          Adds a timer that calls the given function after flDelay seconds.
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(?& in thisObject, const string& in
          szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: >-
          Adds a timer that calls the given function after flDelay seconds.
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(?& in thisObject, const string& in
          szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in)
        Documentation: >-
          Adds a timer that calls the given function after flDelay seconds.
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(?& in thisObject, const string& in
          szFunction, float flDelay, ?& in, ?& in, ?& in)
        Documentation: >-
          Adds a timer that calls the given function after flDelay seconds.
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(?& in thisObject, const string& in
          szFunction, float flDelay, ?& in, ?& in)
        Documentation: >-
          Adds a timer that calls the given function after flDelay seconds.
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(?& in thisObject, const string& in
          szFunction, float flDelay, ?& in)
        Documentation: >-
          Adds a timer that calls the given function after flDelay seconds.
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(?& in thisObject, const string& in
          szFunction, float flDelay)
        Documentation: >-
          Adds a timer that calls the given function after flDelay seconds.
          Calls object methods.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(const string& in szFunction, float
          flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Adds a timer that calls the given function after flDelay seconds.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(const string& in szFunction, float
          flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Adds a timer that calls the given function after flDelay seconds.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(const string& in szFunction, float
          flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Adds a timer that calls the given function after flDelay seconds.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(const string& in szFunction, float
          flDelay, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Adds a timer that calls the given function after flDelay seconds.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(const string& in szFunction, float
          flDelay, ?& in, ?& in, ?& in, ?& in)
        Documentation: Adds a timer that calls the given function after flDelay seconds.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(const string& in szFunction, float
          flDelay, ?& in, ?& in, ?& in)
        Documentation: Adds a timer that calls the given function after flDelay seconds.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(const string& in szFunction, float
          flDelay, ?& in, ?& in)
        Documentation: Adds a timer that calls the given function after flDelay seconds.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(const string& in szFunction, float
          flDelay, ?& in)
        Documentation: Adds a timer that calls the given function after flDelay seconds.
      - Declaration: >-
          CScheduledFunction@ SetTimeout(const string& in szFunction, float
          flDelay)
        Documentation: Adds a timer that calls the given function after flDelay seconds.
    Properties:
      - Declaration: const int REPEAT_INFINITE_TIMES
        Documentation: >-
          If passed to AddTimer, causes the given function to be called infinite
          times
  - ClassName: CScheduledFunction
    Namespace: ''
    Documentation: Handle to a scheduled function
    Flags: 1
    Methods:
      - Declaration: bool HasBeenRemoved() const
        Documentation: >-
          Returns whether this function has been removed from the scheduler or
          not
      - Declaration: void MakeInfiniteRepeat()
        Documentation: Makes this an infinite repeat function
      - Declaration: void SetRepeatCount(const int iRepeatCount)
        Documentation: >-
          Sets the repeat count. Must be a positive value (may be zero) or
          REPEAT_INFINITE_TIMES
      - Declaration: bool IsInfiniteRepeat() const
        Documentation: Returns whether this function repeats infinitely
      - Declaration: int GetRepeatCount() const
        Documentation: Gets the repeat count
      - Declaration: void SetRepeatTime(const float flRepeatTime)
        Documentation: >-
          Sets the repeat time, in seconds. Must be a positive value (may be
          zero)
      - Declaration: float GetRepeatTime() const
        Documentation: Gets the repeat time, in seconds
      - Declaration: void SetNextCallTime(const float flNextCallTime)
        Documentation: >-
          Sets the next call time, in seconds. Is an absolute value
          (g_Engine.time + RepeatTime by default).Times in the past will result
          in a call on the next frame.
      - Declaration: float GetNextCallTime() const
        Documentation: Gets the next call time, in seconds
    Properties: []
  - ClassName: CVirtualFileSystem
    Namespace: ''
    Documentation: Virtual File System
    Flags: 262145
    Methods:
      - Declaration: void RemoveFile(const string& in szFilename)
        Documentation: Removes a file.
      - Declaration: >-
          File@ OpenFile(const string& in szFilename, const OpenFileFlags_t
          uiOpenFlags)
        Documentation: Opens a file. Returns nullptr if the file could not be opened.
      - Declaration: const FileQuota@ GetFileQuota() const
        Documentation: >-
          Gets the file system quota object. Do not store a handle to this
          object, as it may be replaced at any time.
    Properties: []
  - ClassName: FileQuota
    Namespace: ''
    Documentation: >-
      Represents a quota that filesystems adhere to when handling write
      operations.
    Flags: 1
    Methods:
      - Declaration: size_t SizeLeftAfterWrite(size_t uiSizeInBytes) const
        Documentation: >-
          Returns the size that is left after the given amount of bytes have
          been written.
      - Declaration: bool CanWriteAmount(size_t uiSizeInBytes) const
        Documentation: Returns whether the given amount of bytes can be written.
      - Declaration: size_t GetSizeLeft() const
        Documentation: Gets the amount of size, in bytes, left that can be written to.
      - Declaration: size_t GetSizeInUse() const
        Documentation: Gets the size, in bytes, that is in use.
      - Declaration: size_t GetTotalSize() const
        Documentation: >-
          Gets the total size, in bytes, that is allowed to be used by
          filesystems using this quota object.
    Properties: []
  - ClassName: File
    Namespace: ''
    Documentation: |-
      File class.
      Is used to read from/write to files in disk.
    Flags: 1
    Methods:
      - Declaration: void Write(const BLOB@ pBlob)
        Documentation: Writes a blob to the file.
      - Declaration: void Write(const string& in szString)
        Documentation: Writes a string to the file.
      - Declaration: BLOB@ ReadBlob()
        Documentation: Reads as much as possible data into a BLOB.
      - Declaration: BLOB@ ReadBlob(size_t uiSizeInBytes, bool fCanResize = true)
        Documentation: Reads a number of bytes into a BLOB.
      - Declaration: bool Read(BLOB@ pBlob)
        Documentation: Reads as much as possible data into the given BLOB.
      - Declaration: bool Read(BLOB@ pBlob, size_t uiSizeInBytes)
        Documentation: Reads a number of bytes into the given BLOB.
      - Declaration: |-
          void ReadLine(string& out szOutLine, const string& in szDelim = '
          ')
        Documentation: Reads a line from the file.
      - Declaration: string ReadCharacter()
        Documentation: Reads a single character.
      - Declaration: bool EOFReached() const
        Documentation: Returns whether end of file was reached.
      - Declaration: size_t Seek(const size_t uiPosition, const SeekFileFlags_t uiSeekMode)
        Documentation: >-
          Sets the read/write pointer to a new position. Returns the new
          position within the file.
      - Declaration: size_t Tell() const
        Documentation: Tells the position of the read/write pointer.
      - Declaration: size_t GetSize() const
        Documentation: Returns the size of the file.
      - Declaration: void Remove()
        Documentation: >-
          Removes the file. The file must be open, and you must have write
          access.
      - Declaration: void Close()
        Documentation: Closes the file if it is open.
      - Declaration: bool IsOpen() const
        Documentation: Returns whether the file was successfully opened.
    Properties: []
  - ClassName: BLOB
    Namespace: ''
    Documentation: >-
      Binary Large OBject class used for storing arbitrary amounts of binary
      data.
    Flags: 1
    Methods:
      - Declaration: void Clear()
        Documentation: >-
          Clears this BLOB of all data and allocated memory. All flags are reset
          to their default values.
      - Declaration: void ShrinkToFit()
        Documentation: Shrinks this BLOB to fit the data that was written to it.
      - Declaration: void Reserve(size_t uiMinimumSize)
        Documentation: Reserves the given amount of space, if needed.
      - Declaration: void Resize(size_t uiNewSize)
        Documentation: Resizes this BLOB. Data may be lost because of this.
      - Declaration: bool Write(const string& in szString)
        Documentation: >-
          Writes a variable length string to this BLOB. Returns true if the
          write succeeded.
      - Declaration: bool Write(const string& in szString, size_t uiSizeInBytes)
        Documentation: >-
          Writes a fixed length string to this BLOB. Returns true if the write
          succeeded.
      - Declaration: bool Write(double data)
        Documentation: Writes a double to this BLOB. Returns true if the write succeeded.
      - Declaration: bool Write(float data)
        Documentation: Writes a float to this BLOB. Returns true if the write succeeded.
      - Declaration: bool Write(uint64 data)
        Documentation: Writes a uint64 to this BLOB. Returns true if the write succeeded.
      - Declaration: bool Write(uint32 data)
        Documentation: Writes a uint32 to this BLOB. Returns true if the write succeeded.
      - Declaration: bool Write(uint16 data)
        Documentation: Writes a uint16 to this BLOB. Returns true if the write succeeded.
      - Declaration: bool Write(uint8 data)
        Documentation: Writes a uint8 to this BLOB. Returns true if the write succeeded.
      - Declaration: bool Write(int64 data)
        Documentation: Writes an int64 to this BLOB. Returns true if the write succeeded.
      - Declaration: bool Write(int32 data)
        Documentation: Writes an int32 to this BLOB. Returns true if the write succeeded.
      - Declaration: bool Write(int16 data)
        Documentation: Writes an int16 to this BLOB. Returns true if the write succeeded.
      - Declaration: bool Write(int8 data)
        Documentation: Writes an int8 to this BLOB. Returns true if the write succeeded.
      - Declaration: bool WriteBytesUntil(size_t uiEndOffset, int iValue = 0)
        Documentation: >-
          Writes a given value until the given end offset to this BLOB. Returns
          true if the write succeeded.
      - Declaration: bool WriteBytes(size_t uiSizeInBytes, int iValue = 0)
        Documentation: >-
          Writes a given value a number of bytes to this BLOB. Returns true if
          the write succeeded.
      - Declaration: string ReadString()
        Documentation: Reads a variable length string from this BLOB.
      - Declaration: string ReadString(bool& out fSuccess)
        Documentation: >-
          Reads a variable length string from this BLOB. fSuccess is true if the
          read succeeded.
      - Declaration: string ReadString(size_t uiSizeInBytes, bool& out fSuccess)
        Documentation: >-
          Reads a fixed length string from this BLOB. fSuccess is true if the
          read succeeded.
      - Declaration: string ReadString(size_t uiSizeInBytes)
        Documentation: Reads a fixed length string from this BLOB.
      - Declaration: double ReadDouble(bool& out fSuccess)
        Documentation: Reads a double from this BLOB. fSuccess is true if the read succeeded.
      - Declaration: float ReadFloat(bool& out fSuccess)
        Documentation: Reads a float from this BLOB. fSuccess is true if the read succeeded.
      - Declaration: int64 ReadUInt64(bool& out fSuccess)
        Documentation: Reads a uint64 from this BLOB. fSuccess is true if the read succeeded.
      - Declaration: int32 ReadUInt32(bool& out fSuccess)
        Documentation: Reads a uint32 from this BLOB. fSuccess is true if the read succeeded.
      - Declaration: int16 ReadUInt16(bool& out fSuccess)
        Documentation: Reads a uint16 from this BLOB. fSuccess is true if the read succeeded.
      - Declaration: uint8 ReadUInt8(bool& out fSuccess)
        Documentation: Reads a uint8 from this BLOB. fSuccess is true if the read succeeded.
      - Declaration: int64 ReadInt64(bool& out fSuccess)
        Documentation: Reads an int64 from this BLOB. fSuccess is true if the read succeeded.
      - Declaration: int32 ReadInt32(bool& out fSuccess)
        Documentation: Reads an int32 from this BLOB. fSuccess is true if the read succeeded.
      - Declaration: int16 ReadInt16(bool& out fSuccess)
        Documentation: Reads an int16 from this BLOB. fSuccess is true if the read succeeded.
      - Declaration: int8 ReadInt8(bool& out fSuccess)
        Documentation: Reads an int8 from this BLOB. fSuccess is true if the read succeeded.
      - Declaration: double ReadDouble()
        Documentation: Reads a double from this BLOB.
      - Declaration: float ReadFloat()
        Documentation: Reads a float from this BLOB.
      - Declaration: int64 ReadUInt64()
        Documentation: Reads a uint64 from this BLOB.
      - Declaration: int32 ReadUInt32()
        Documentation: Reads a uint32 from this BLOB.
      - Declaration: int16 ReadUInt16()
        Documentation: Reads a uint16 from this BLOB.
      - Declaration: uint8 ReadUInt8()
        Documentation: Reads a uint8 from this BLOB.
      - Declaration: int64 ReadInt64()
        Documentation: Reads an int64 from this BLOB.
      - Declaration: int32 ReadInt32()
        Documentation: Reads an int32 from this BLOB.
      - Declaration: int16 ReadInt16()
        Documentation: Reads an int16 from this BLOB.
      - Declaration: int8 ReadInt8()
        Documentation: Reads an int8 from this BLOB.
      - Declaration: void SetCanResize(bool fState)
        Documentation: Sets whether this BLOB is allowed to resize its buffer.
      - Declaration: bool CanResize() const
        Documentation: Returns whether this BLOB is allowed to resize its buffer.
      - Declaration: size_t GetWriteBytesLeft() const
        Documentation: >-
          Gets the number of bytes left that can be written to. This may change
          if a write operation causes the buffer to be resized.
      - Declaration: bool CanWriteSize(size_t uiSizeInBytes) const
        Documentation: Returns whether the given amount of bytes can be written to this BLOB.
      - Declaration: size_t GetWriteOffset() const
        Documentation: >-
          Gets the write offset, in bytes. This is the number of bytes written
          to this buffer.
      - Declaration: bool ReadSizeValid(size_t uiSizeInBytes) const
        Documentation: Returns whether the given amount of bytes can be read from this BLOB.
      - Declaration: bool ReadReachedEnd() const
        Documentation: >-
          Returns whether the last read operation reached the end of data that
          was written to this BLOB.
      - Declaration: size_t GetReadOffset() const
        Documentation: Gets the read offset, in bytes.
      - Declaration: size_t GetSizeInBytes() const
        Documentation: Gets the size of this BLOB, in bytes.
      - Declaration: bool HasAllocatedBuffer() const
        Documentation: Returns whether this instance has allocated a buffer.
    Properties: []
  - ClassName: MatchResults
    Namespace: Regex
    Documentation: Regular expression match results
    Flags: 1
    Methods:
      - Declaration: void Swap(MatchResults@ other)
        Documentation: Swaps these match results with the given results.
      - Declaration: >-
          string Format(const string& in szFormat, MatchFlagType flags =
          Regex::match_default) const
        Documentation: Gets the length of the given submatch
      - Declaration: string GetString(size_t uiIndex = 0) const
        Documentation: Gets the given submatch as a string
      - Declaration: int GetPosition(size_t uiIndex = 0) const
        Documentation: Gets the position of the given submatch
      - Declaration: int GetLength(size_t uiIndex = 0) const
        Documentation: Gets the length of the given submatch
      - Declaration: SubMatch GetSuffix() const
        Documentation: Gets the suffix submatch
      - Declaration: SubMatch GetPrefix() const
        Documentation: Gets the prefix submatch
      - Declaration: SubMatch opIndex(size_t uiIndex) const
        Documentation: Returns the sub match object at the given index
      - Declaration: size_t GetMaxSize() const
        Documentation: Returns the maximum size
      - Declaration: size_t GetSize() const
        Documentation: Returns the number of matches
      - Declaration: bool IsEmpty() const
        Documentation: Returns whether this match results object is empty or not
      - Declaration: MatchResults@ MatchResults(const MatchResults@ pOther)
        Documentation: Copy constructor
      - Declaration: MatchResults@ MatchResults()
        Documentation: Constructor
    Properties: []
  - ClassName: SubMatch
    Namespace: Regex
    Documentation: Regular expression submatch
    Flags: 5378
    Methods:
      - Declaration: int Compare(const string& in szString) const
        Documentation: Compares this submatch to a string
      - Declaration: int Compare(const SubMatch& in other) const
        Documentation: Compares this submatch to another
      - Declaration: string GetString() const
        Documentation: Gets this submatch as a string
      - Declaration: int GetLength() const
        Documentation: Gets the length of the submatch
      - Declaration: void SubMatch(const SubMatch& in other)
        Documentation: Copy constructor
      - Declaration: void SubMatch()
        Documentation: Constructor. Do not use.
    Properties: []
  - ClassName: Regex
    Namespace: Regex
    Documentation: Represents a regular expression
    Flags: 1
    Methods:
      - Declaration: void Swap(Regex@ other)
        Documentation: Swaps this regular expression's contents with the given expression
      - Declaration: FlagType GetFlags() const
        Documentation: Gets this regex's flags
      - Declaration: uint GetMarkCount() const
        Documentation: Gets the mark count
      - Declaration: >-
          Regex& Assign(const string& in szExpression, FlagType flags =
          Regex::ECMAScript)
        Documentation: Assigns the given regular expression to this one.
      - Declaration: Regex& Assign(const Regex@ pOther)
        Documentation: Assigns the given regular expression to this one.
      - Declaration: >-
          Regex@ Regex(const string& in szExpression, FlagType flags =
          Regex::ECMAScript)
        Documentation: Initialization Constructor
      - Declaration: Regex@ Regex(const Regex@ pOther)
        Documentation: Copy Constructor
      - Declaration: Regex@ Regex()
        Documentation: Default Constructor
    Properties: []
  - ClassName: CReflection
    Namespace: Reflection
    Documentation: Reflection global used for generial purpose needs.
    Flags: 262145
    Methods: []
    Properties:
      - Declaration: IReflectionGroup Module
        Documentation: Module group
      - Declaration: IReflectionGroup Engine
        Documentation: Engine group
  - ClassName: IReflectionGroup
    Namespace: Reflection
    Documentation: Reflection group. Represents a group of reflectable objects.
    Flags: 262145
    Methods:
      - Declaration: ObjectType@ GetObjectTypeByIndex(uint uiIndex) const
        Documentation: Gets the object type at the given index.
      - Declaration: uint GetObjectTypeCount() const
        Documentation: Gets the number of object types.
      - Declaration: >-
          ObjectType@ FindObjectType(const string& in szName, bool fSearchByDecl
          = false)
        Documentation: >-
          Finds an object type. Searches by name by default, searches by
          declaration if fSearchByDecl is set to true.
      - Declaration: Function@ GetGlobalFunctionByIndex(uint uiIndex)
        Documentation: Gets the global function at the given index.
      - Declaration: uint GetGlobalFunctionCount() const
        Documentation: Gets the number of global functions.
      - Declaration: >-
          Function@ FindGlobalFunction(const string& in szName, bool
          fSearchByDecl = false)
        Documentation: >-
          Finds a global function. Searches by name by default, searches by
          declaration if fSearchByDecl is set to true.
    Properties: []
  - ClassName: ObjectType
    Namespace: Reflection
    Documentation: Represents an object type
    Flags: 1
    Methods:
      - Declaration: bool DerivesFrom(const ObjectType@ pObjectType) const
        Documentation: Returns whether this object derives from the given type.
      - Declaration: bool DerivesFrom(const string& in szName) const
        Documentation: Returns whether this object derives from the given type.
      - Declaration: bool IsCompatible(const ObjectType@ pObjectType) const
        Documentation: Returns whether the given object type is compatible with this one.
      - Declaration: bool Equals(const ObjectType@ pObjectType) const
        Documentation: Returns whether the given object type is identical to this one.
      - Declaration: bool MethodExists(const string& in szFunctionSignature)
        Documentation: Gets a method by declaration.
      - Declaration: Method@ GetMethod(const string& in szFunctionSignature)
        Documentation: Gets a method by declaration.
      - Declaration: Method@ GetMethodByIndex(uint uiIndex) const
        Documentation: Gets the method at the given index.
      - Declaration: uint GetMethodCount() const
        Documentation: Gets the number of methods this object type has.
    Properties: []
  - ClassName: Method
    Namespace: Reflection
    Documentation: Reflection method class. Can be used to call object methods.
    Flags: 1
    Methods:
      - Declaration: >-
          ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in, ?& in, ?& in,
          ?& in, ?& in, ?& in)
        Documentation: Calls this method.
      - Declaration: >-
          ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in, ?& in, ?& in,
          ?& in, ?& in)
        Documentation: Calls this method.
      - Declaration: >-
          ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in, ?& in, ?& in,
          ?& in)
        Documentation: Calls this method.
      - Declaration: ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Calls this method.
      - Declaration: ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in, ?& in)
        Documentation: Calls this method.
      - Declaration: ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in)
        Documentation: Calls this method.
      - Declaration: ReturnValue@ Call(?& in thisObject, ?& in, ?& in)
        Documentation: Calls this method.
      - Declaration: ReturnValue@ Call(?& in thisObject, ?& in)
        Documentation: Calls this method.
      - Declaration: ReturnValue@ Call(?& in thisObject)
        Documentation: Calls this method.
      - Declaration: ReturnValue@ Call(?& in thisObject, Arguments@ pArguments)
        Documentation: Calls this method. pArguments must be valid.
      - Declaration: bool IsCompatible(const Callable@ pCallable) const
        Documentation: Returns whether the given object type is compatible with this one.
      - Declaration: bool Equals(const Callable@ pCallable) const
        Documentation: Returns whether the given callable type is identical to this one.
      - Declaration: string GetName() const
        Documentation: Gets this instance's name.
      - Declaration: string GetNamespace() const
        Documentation: Gets this instance's namespace.
      - Declaration: Callable@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties: []
  - ClassName: Function
    Namespace: Reflection
    Documentation: Reflection function class. Can be used to call global functions.
    Flags: 1
    Methods:
      - Declaration: >-
          ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?&
          in)
        Documentation: Calls this function.
      - Declaration: ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Calls this function.
      - Declaration: ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Calls this function.
      - Declaration: ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Calls this function.
      - Declaration: ReturnValue@ Call(?& in, ?& in, ?& in, ?& in)
        Documentation: Calls this function.
      - Declaration: ReturnValue@ Call(?& in, ?& in, ?& in)
        Documentation: Calls this function.
      - Declaration: ReturnValue@ Call(?& in, ?& in)
        Documentation: Calls this function.
      - Declaration: ReturnValue@ Call(?& in)
        Documentation: Calls this function.
      - Declaration: ReturnValue@ Call()
        Documentation: Calls this function.
      - Declaration: ReturnValue@ Call(Arguments@ pArguments)
        Documentation: Calls this function. pArguments must be valid.
      - Declaration: bool IsCompatible(const Callable@ pCallable) const
        Documentation: Returns whether the given object type is compatible with this one.
      - Declaration: bool Equals(const Callable@ pCallable) const
        Documentation: Returns whether the given callable type is identical to this one.
      - Declaration: string GetName() const
        Documentation: Gets this instance's name.
      - Declaration: string GetNamespace() const
        Documentation: Gets this instance's namespace.
      - Declaration: Callable@ opImplCast()
        Documentation: Implicitly casts to base type.
    Properties: []
  - ClassName: Callable
    Namespace: Reflection
    Documentation: Reflection base class for callable objects.
    Flags: 1
    Methods:
      - Declaration: Method@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: Function@ opCast()
        Documentation: Explicitly casts to sub type.
      - Declaration: bool IsCompatible(const Callable@ pCallable) const
        Documentation: Returns whether the given object type is compatible with this one.
      - Declaration: bool Equals(const Callable@ pCallable) const
        Documentation: Returns whether the given callable type is identical to this one.
      - Declaration: string GetName() const
        Documentation: Gets this instance's name.
      - Declaration: string GetNamespace() const
        Documentation: Gets this instance's namespace.
    Properties: []
  - ClassName: ReturnValue
    Namespace: Reflection
    Documentation: Reflection return value.
    Flags: 1
    Methods:
      - Declaration: any@ ToAny() const
        Documentation: >-
          Returns the return value as an any instance, if there was a return
          value.
      - Declaration: bool HasReturnValue() const
        Documentation: Returns whether there is a return value or not.
    Properties: []
  - ClassName: Arguments
    Namespace: Reflection
    Documentation: This class can hold arguments for a function or method call.
    Flags: 1
    Methods:
      - Declaration: >-
          bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?&
          in)
        Documentation: Sets the arguments this instance contains.
      - Declaration: bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Sets the arguments this instance contains.
      - Declaration: bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Sets the arguments this instance contains.
      - Declaration: bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Sets the arguments this instance contains.
      - Declaration: bool SetArguments(?& in, ?& in, ?& in, ?& in)
        Documentation: Sets the arguments this instance contains.
      - Declaration: bool SetArguments(?& in, ?& in, ?& in)
        Documentation: Sets the arguments this instance contains.
      - Declaration: bool SetArguments(?& in, ?& in)
        Documentation: Sets the arguments this instance contains.
      - Declaration: bool SetArguments(?& in)
        Documentation: Sets the arguments this instance contains.
      - Declaration: bool SetArguments()
        Documentation: Sets the arguments this instance contains.
      - Declaration: void Clear()
        Documentation: Clears this instance's data.
      - Declaration: bool HasArguments() const
        Documentation: Returns whether this instance holds any arguments.
      - Declaration: size_t GetCount() const
        Documentation: Gets number of arguments.
      - Declaration: Arguments& opAssign(const Arguments& in other)
        Documentation: Assignment operator
      - Declaration: >-
          Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in,
          ?& in)
        Documentation: Constructs a Arguments instance with the given arguments.
      - Declaration: Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Constructs a Arguments instance with the given arguments.
      - Declaration: Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Constructs a Arguments instance with the given arguments.
      - Declaration: Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in)
        Documentation: Constructs a Arguments instance with the given arguments.
      - Declaration: Arguments@ Arguments(?& in, ?& in, ?& in, ?& in)
        Documentation: Constructs a Arguments instance with the given arguments.
      - Declaration: Arguments@ Arguments(?& in, ?& in, ?& in)
        Documentation: Constructs a Arguments instance with the given arguments.
      - Declaration: Arguments@ Arguments(?& in, ?& in)
        Documentation: Constructs a Arguments instance with the given arguments.
      - Declaration: Arguments@ Arguments(?& in)
        Documentation: Constructs a Arguments instance with the given arguments.
      - Declaration: Arguments@ Arguments()
        Documentation: Constructs a Arguments instance with the given arguments.
      - Declaration: Arguments@ Arguments(const Arguments& in other)
        Documentation: Copy constructor
      - Declaration: Arguments@ Arguments()
        Documentation: Default constructor
    Properties: []
  - ClassName: string_t
    Namespace: ''
    Documentation: Opaque handle to a pooled string.
    Flags: 10
    Methods:
      - Declaration: int opImplConv() const
        Documentation: Converts this string_t to an integer.
      - Declaration: string opImplConv() const
        Documentation: Converts this string_t to a string.
      - Declaration: string_t& opAssign(int str)
        Documentation: Assignment operator
      - Declaration: string_t& opAssign(const string& in str)
        Documentation: Assignment operator
      - Declaration: string_t& opAssign(const string_t& in str)
        Documentation: Assignment operator
      - Declaration: void string_t(int str)
        Documentation: Construct a string_t from an integer
      - Declaration: void string_t(const string& in str)
        Documentation: Construct a string_t from a string
      - Declaration: void string_t(const string_t& in str)
        Documentation: Copy Constructor
      - Declaration: void string_t()
        Documentation: Default Constructor
    Properties: []
  - ClassName: char
    Namespace: ''
    Documentation: Char value type
    Flags: 8202
    Methods:
      - Declaration: bool opEquals(const string& in szString) const
        Documentation: Compares this char with the given character.
      - Declaration: char opAssign(const string& in szString)
        Documentation: Assigns the first character of the given string to this character.
      - Declaration: uint32 opImplConv() const
        Documentation: Implicitly converts this character to an unsigned 32 bit integer.
      - Declaration: char opAssign(const char& in character)
        Documentation: Assigns one character to another.
      - Declaration: void char(const string& in szString)
        Documentation: Copy constructor
      - Declaration: void char(const char& in character)
        Documentation: Copy constructor
      - Declaration: void char()
        Documentation: Default constructor
    Properties: []
  - ClassName: string
    Namespace: ''
    Documentation: String type
    Flags: 7938
    Methods:
      - Declaration: array<string>@ Split(const string& in szDelimiter) const
        Documentation: Splits this string by the given delimiter.
      - Declaration: string opAdd(char character) const
        Documentation: Returns a copy of this string with the given character appended.
      - Declaration: string opAdd(bool bValue) const
        Documentation: Returns a copy of this string with the given boolean appended.
      - Declaration: string opAdd(uint64 uiValue) const
        Documentation: >-
          Returns a copy of this string with the given 64 bit unsigned integer
          appended.
      - Declaration: string opAdd(int64 iValue) const
        Documentation: Returns a copy of this string with the given 64 bit integer appended.
      - Declaration: string opAdd(double flValue) const
        Documentation: Returns a copy of this string with the given double appended.
      - Declaration: string opAdd(const string& in szString) const
        Documentation: Returns a copy of this string with the given string appended.
      - Declaration: void Truncate(const size_t uiMaxLength)
        Documentation: Truncates the string to uiMaxLength characters.
      - Declaration: >-
          string& Replace(const string& in szSubstring, const string& in
          szReplacement, const String::CompareType compareType =
          String::DEFAULT_COMPARE)
        Documentation: Replaces the given substring with the given replacement string.
      - Declaration: >-
          string SubString(uint startIndex = 0, uint count =
          String::INVALID_INDEX) const
        Documentation: Returns a substring of this string.
      - Declaration: string& ToUppercase()
        Documentation: Converts this string to upper case.
      - Declaration: string& ToLowercase()
        Documentation: Converts this string to lower case.
      - Declaration: string Tokenize(const string& in delimiter) const
        Documentation: |-
          Get the next token of the given string.
          Returns String::NO_MORE_TOKENS if none remaining.
      - Declaration: >-
          uint FindLastNotOf(const string& in szString, uint startIndex =
          String::INVALID_INDEX, const String::CompareType compareType =
          String::DEFAULT_COMPARE) const
        Documentation: |-
          Find the first instance of the given string, searching in reverse.
          Returns String::INVALID_INDEX if not found.
      - Declaration: >-
          uint FindFirstNotOf(const string& in szString, uint startIndex = 0,
          const String::CompareType compareType = String::DEFAULT_COMPARE) const
        Documentation: |-
          Find the first instance of the given string.
          Returns String::INVALID_INDEX if not found.
      - Declaration: >-
          uint FindLastOf(const string& in szString, const uint startIndex = 0,
          const String::CompareType compareType = String::DEFAULT_COMPARE) const
        Documentation: |-
          Find the last instance of any character in the given string.
          Returns String::INVALID_INDEX if not found.
      - Declaration: >-
          uint FindFirstOf(const string& in szString, const uint startIndex = 0,
          const String::CompareType compareType = String::DEFAULT_COMPARE) const
        Documentation: |-
          Find the first instance of any character in the given string.
          Returns String::INVALID_INDEX if not found.
      - Declaration: >-
          uint RFind(const string& in szString, uint startIndex =
          String::INVALID_INDEX, const String::CompareType compareType =
          String::DEFAULT_COMPARE) const
        Documentation: |-
          Find the first instance of the given string, searching in reverse.
          Returns String::INVALID_INDEX if not found.
      - Declaration: >-
          uint Find(const string& in szString, const uint startIndex = 0, const
          String::CompareType compareType = String::DEFAULT_COMPARE) const
        Documentation: |-
          Find the first instance of the given string.
          Returns String::INVALID_INDEX if not found.
      - Declaration: >-
          bool EndsWith(const string& in szString, const String::CompareType
          compareType = String::DEFAULT_COMPARE) const
        Documentation: Returns true if the string ends with the given string.
      - Declaration: >-
          bool StartsWith(const string& in szString, const String::CompareType
          compareType = String::DEFAULT_COMPARE) const
        Documentation: Returns true if the string starts with the given string.
      - Declaration: void Trim(const string& in szCharacter = ' ')
        Documentation: Trims leading and trailing whitespace, or a given character.
      - Declaration: bool opEquals(const string& in szString) const
        Documentation: Returns whether strings are equal.
      - Declaration: int ICompareN(const string& in szString, const uint amount) const
        Documentation: Compares strings up to amount characters case-insensitively.
      - Declaration: int ICompare(const string& in szString) const
        Documentation: Compares strings case-insensitively.
      - Declaration: int CompareN(const string& in szString, const uint amount) const
        Documentation: Compares strings up to amount characters.
      - Declaration: int Compare(const string& in szString) const
        Documentation: Compares strings.
      - Declaration: int opCmp(const string& in szString) const
        Documentation: Compares strings.
      - Declaration: string& opAddAssign(char character)
        Documentation: Appends the given character to this string.
      - Declaration: string& opAddAssign(bool bValue)
        Documentation: Appends the given boolean to this string.
      - Declaration: string& opAddAssign(uint64 uiValue)
        Documentation: Appends the given 64 bit unsigned integer to this string.
      - Declaration: string& opAddAssign(int64 iValue)
        Documentation: Appends the given 64 bit integer to this string.
      - Declaration: string& opAddAssign(double flValue)
        Documentation: Appends the given double to this string.
      - Declaration: string& opAddAssign(const string& in szString)
        Documentation: Appends the given string to this one.
      - Declaration: void SetCharAt(uint uiIndex, char character)
        Documentation: Sets a character by index.
      - Declaration: char opIndex(uint uiIndex) const
        Documentation: Gets a character by index.
      - Declaration: void Clear()
        Documentation: Clears the contents of this string.
      - Declaration: void Reserve(uint iMinimum, bool bKeepData = true)
        Documentation: >-
          Reserves at least iMinimum characters worth of capacity. If bKeepData
          is true, the original string is kept.
      - Declaration: void Resize(uint uiSize, bool bKeepData = true)
        Documentation: >-
          Shrinks this string to uiSize. If bKeepData is true, the original
          string is kept.
      - Declaration: bool IsEmpty() const
        Documentation: Returns whether this string is empty.
      - Declaration: uint Length() const
        Documentation: Gets the length of this string.
      - Declaration: string& opAssign(char character)
        Documentation: Assigns a character to this string.
      - Declaration: string& opAssign(bool bValue)
        Documentation: Assigns a boolean to this string.
      - Declaration: string& opAssign(uint64 uiValue)
        Documentation: Assigns a 64 bit unsigned int to this string.
      - Declaration: string& opAssign(int64 iValue)
        Documentation: Assigns a 64 bit integer to this string.
      - Declaration: string& opAssign(double flValue)
        Documentation: Assigns a double to this string.
      - Declaration: string& opAssign(const string& in szString)
        Documentation: Assigns a string to this one.
      - Declaration: string& Assign(const string& in szString, uint uiBegin, uint uiCount)
        Documentation: Assigns a string to this, copying up to uiCount characters.
      - Declaration: void string(char character)
        Documentation: Construct a string from a char.
      - Declaration: void string(bool bValue)
        Documentation: Construct a string from a boolean.
      - Declaration: void string(uint64 uiValue)
        Documentation: Construct a string from a 64 bit unsigned integer.
      - Declaration: void string(int64 iValue)
        Documentation: Construct a string from a 64 bit integer.
      - Declaration: void string(double flValue)
        Documentation: Construct a string from a double.
      - Declaration: void string(const string& in szString)
        Documentation: Copy constructor
      - Declaration: void string()
        Documentation: Constructor
    Properties: []
Enums:
  - Name: HookReturnCode
    Namespace: ''
    Documentation: Hook function return codes.
    Values:
      - Name: HOOK_HANDLED
        Value: 1
        Documentation: Returned when a hook function has handled the call
      - Name: HOOK_CONTINUE
        Value: 0
        Documentation: Returned when a hook function has not handled the call
  - Name: ClientSayType
    Namespace: ''
    Documentation: Type of say the client used
    Values:
      - Name: CLIENTSAY_SAYTEAM
        Value: 1
        Documentation: Say team
      - Name: CLIENTSAY_SAY
        Value: 0
        Documentation: Say
  - Name: ConCommandFlag
    Namespace: ConCommandFlag
    Documentation: Console command flags
    Values:
      - Name: Cheat
        Value: 2
        Documentation: If set, the invoking player (if any) must have cheat access.
      - Name: AdminOnly
        Value: 1
        Documentation: If set, the invoking player (if any) must have admin access.
      - Name: None
        Value: 0
        Documentation: No flags to set
  - Name: Type
    Namespace: ConCommandKind
    Documentation: Console command kind.
    Values:
      - Name: CVar
        Value: 3
        Documentation: This console command is a cvar
      - Name: ClientCommand
        Value: 2
        Documentation: This console command is a client command
      - Name: ConCommand
        Value: 1
        Documentation: This console command is a command
  - Name: NetworkMessageType
    Namespace: NetworkMessages
    Documentation: Network message types
    Values:
      - Name: ClServerInfo
        Value: 147
        Documentation: User message
      - Name: ChangeSky
        Value: 146
        Documentation: User message
      - Name: VModelPos
        Value: 145
        Documentation: User message
      - Name: UpdateTime
        Value: 144
        Documentation: User message
      - Name: TimeDisplay
        Value: 143
        Documentation: User message
      - Name: UpdateNum
        Value: 142
        Documentation: User message
      - Name: NumDisplay
        Value: 141
        Documentation: User message
      - Name: CustSpr
        Value: 140
        Documentation: User message
      - Name: ToggleElem
        Value: 139
        Documentation: User message
      - Name: WeaponSpr
        Value: 138
        Documentation: User message
      - Name: ClassicMode
        Value: 137
        Documentation: User message
      - Name: Flamethwr
        Value: 136
        Documentation: User message
      - Name: ViewMode
        Value: 135
        Documentation: User message
      - Name: Concuss
        Value: 134
        Documentation: User message
      - Name: InvRemove
        Value: 133
        Documentation: User message
      - Name: InvAdd
        Value: 132
        Documentation: User message
      - Name: PrintKB
        Value: 131
        Documentation: User message
      - Name: ASScriptName
        Value: 130
        Documentation: User message
      - Name: PrtlUpdt
        Value: 129
        Documentation: User message
      - Name: Fog
        Value: 128
        Documentation: User message
      - Name: CameraMouse
        Value: 127
        Documentation: User message
      - Name: WeatherFX
        Value: 126
        Documentation: User message
      - Name: ServerBuild
        Value: 125
        Documentation: User message
      - Name: ServerVer
        Value: 124
        Documentation: User message
      - Name: TeamNames
        Value: 123
        Documentation: User message
      - Name: ServerName
        Value: 122
        Documentation: User message
      - Name: VGUIMenu
        Value: 121
        Documentation: User message
      - Name: Playlist
        Value: 120
        Documentation: User message
      - Name: ShieldRic
        Value: 119
        Documentation: User message
      - Name: RampSprite
        Value: 118
        Documentation: User message
      - Name: SRPrimedOff
        Value: 117
        Documentation: User message
      - Name: SRPrimed
        Value: 116
        Documentation: User message
      - Name: SRDetonate
        Value: 115
        Documentation: User message
      - Name: TracerDecal
        Value: 114
        Documentation: User message
      - Name: SporeTrail
        Value: 113
        Documentation: User message
      - Name: GargSplash
        Value: 112
        Documentation: User message
      - Name: CreateBlood
        Value: 111
        Documentation: User message
      - Name: ShkFlash
        Value: 110
        Documentation: User message
      - Name: ToxicCloud
        Value: 109
        Documentation: User message
      - Name: SoundList
        Value: 108
        Documentation: User message
      - Name: StartSound
        Value: 107
        Documentation: User message
      - Name: NextMap
        Value: 106
        Documentation: User message
      - Name: VoteMenu
        Value: 105
        Documentation: User message
      - Name: EndVote
        Value: 104
        Documentation: User message
      - Name: CbElec
        Value: 103
        Documentation: User message
      - Name: MapList
        Value: 102
        Documentation: User message
      - Name: TimeEnd
        Value: 101
        Documentation: User message
      - Name: Speaksent
        Value: 100
        Documentation: User message
      - Name: TE_CUSTOM
        Value: 99
        Documentation: User message
      - Name: Spectator
        Value: 98
        Documentation: User message
      - Name: Gib
        Value: 97
        Documentation: User message
      - Name: AmmoX
        Value: 96
        Documentation: User message
      - Name: ScreenFade
        Value: 95
        Documentation: User message
      - Name: ScreenShake
        Value: 94
        Documentation: User message
      - Name: ShowMenu
        Value: 93
        Documentation: User message
      - Name: SetFOV
        Value: 92
        Documentation: User message
      - Name: HideHUD
        Value: 91
        Documentation: User message
      - Name: ItemPickup
        Value: 90
        Documentation: User message
      - Name: WeapPickup
        Value: 89
        Documentation: User message
      - Name: AmmoPickup
        Value: 88
        Documentation: User message
      - Name: MOTD
        Value: 87
        Documentation: User message
      - Name: GameMode
        Value: 86
        Documentation: User message
      - Name: TeamScore
        Value: 85
        Documentation: User message
      - Name: TeamInfo
        Value: 84
        Documentation: User message
      - Name: ScoreInfo
        Value: 83
        Documentation: User message
      - Name: DeathMsg
        Value: 82
        Documentation: User message
      - Name: GameTitle
        Value: 81
        Documentation: User message
      - Name: CdAudio
        Value: 80
        Documentation: User message
      - Name: InitHUD
        Value: 79
        Documentation: User message
      - Name: ResetHUD
        Value: 78
        Documentation: User message
      - Name: CustWeapon
        Value: 77
        Documentation: User message
      - Name: WeaponList
        Value: 76
        Documentation: User message
      - Name: TextMsg
        Value: 75
        Documentation: User message
      - Name: SayText
        Value: 74
        Documentation: User message
      - Name: HudText
        Value: 73
        Documentation: User message
      - Name: Train
        Value: 72
        Documentation: User message
      - Name: Battery
        Value: 71
        Documentation: User message
      - Name: Damage
        Value: 70
        Documentation: User message
      - Name: Health
        Value: 69
        Documentation: User message
      - Name: FlashBat
        Value: 68
        Documentation: User message
      - Name: Flashlight
        Value: 67
        Documentation: User message
      - Name: Geiger
        Value: 66
        Documentation: User message
      - Name: CurWeapon
        Value: 65
        Documentation: User message
      - Name: SelAmmo
        Value: 64
        Documentation: User message
      - Name: SVC_STUFFTEXT
        Value: 9
        Documentation: Executes command on the client side.
      - Name: SVC_INTERMISSION
        Value: 30
        Documentation: Enables intermission for clients.
      - Name: SVC_TEMPENTITY
        Value: 23
        Documentation: Creates temporary entities on the client side.
  - Name: TempEntityType
    Namespace: ''
    Documentation: Temporary entity types. Used in network messages of type SVC_TEMPENTITY.
    Values:
      - Name: TE_USERTRACER
        Value: 127
        Documentation: >-
          Larger message than the standard tracer, but allows some
          customization.
      - Name: TE_MULTIGUNSHOT
        Value: 126
        Documentation: Much more compact shotgun message
      - Name: TE_KILLPLAYERATTACHMENTS
        Value: 125
        Documentation: Will expire all TENTS attached to a player.
      - Name: TE_PLAYERATTACHMENT
        Value: 124
        Documentation: Attaches a TENT to a player (this is a high-priority tent)
      - Name: TE_FIREFIELD
        Value: 123
        Documentation: Makes a field of fire.
      - Name: TE_PARTICLEBURST
        Value: 122
        Documentation: Very similar to lavasplash.
      - Name: TE_PLAYERSPRITES
        Value: 121
        Documentation: Sprites emit from a player's bounding box (ONLY use for players!)
      - Name: TE_SPRAY
        Value: 120
        Documentation: Throws a shower of sprites or models
      - Name: TE_PROJECTILE
        Value: 119
        Documentation: Makes a projectile (like a nail) (this is a high-priority tent)
      - Name: TE_DECALHIGH
        Value: 118
        Documentation: Same as TE_DECAL, but the texture index was greater than 256
      - Name: TE_WORLDDECALHIGH
        Value: 117
        Documentation: Decal (with texture index > 256) applied to world brush
      - Name: TE_WORLDDECAL
        Value: 116
        Documentation: Decal applied to the world brush
      - Name: TE_BLOODSPRITE
        Value: 115
        Documentation: >-
          Spray of opaque sprite1's that fall, single sprite2 for 1..2 secs
          (this is a high-priority tent)
      - Name: TE_BUBBLETRAIL
        Value: 114
        Documentation: Create alpha sprites along a line, float upwards
      - Name: TE_BUBBLES
        Value: 113
        Documentation: Create alpha sprites inside of box, float upwards
      - Name: TE_PLAYERDECAL
        Value: 112
        Documentation: Draw a player decal (spray paint)
      - Name: TE_ARMOR_RICOCHET
        Value: 111
        Documentation: 'Quick spark sprite, client ricochet sound. '
      - Name: TE_SPRITE_SPRAY
        Value: 110
        Documentation: Spray of alpha sprites
      - Name: TE_GUNSHOTDECAL
        Value: 109
        Documentation: Decal and ricochet sound
      - Name: TE_BREAKMODEL
        Value: 108
        Documentation: Box of models or sprites
      - Name: TE_EXPLODEMODEL
        Value: 107
        Documentation: Spherical shower of models, picks from sets
      - Name: TE_MODEL
        Value: 106
        Documentation: Create a moving model that bounces and makes a sound when it hits
      - Name: TE_FIZZ
        Value: 105
        Documentation: Create alpha sprites inside of entity, float upwards
      - Name: TE_DECAL
        Value: 104
        Documentation: Decal applied to a brush entity (not the world)
      - Name: TE_BLOOD
        Value: 103
        Documentation: Particle spray
      - Name: TE_SHOWLINE
        Value: 102
        Documentation: Line of particles every 5 units, dies in 30 seconds
      - Name: TE_BLOODSTREAM
        Value: 101
        Documentation: Particle spray
      - Name: TE_LARGEFUNNEL
        Value: 100
        Documentation: Creates a large funnel
      - Name: TE_KILLBEAM
        Value: 99
        Documentation: Kill all beams attached to entity
      - Name: TE_BOX
        Value: 31
        Documentation: Draws a box
      - Name: TE_LINE
        Value: 30
        Documentation: Draws a line
      - Name: TE_TEXTMESSAGE
        Value: 29
        Documentation: Text message
      - Name: TE_ELIGHT
        Value: 28
        Documentation: Point entity light, no world effect
      - Name: TE_DLIGHT
        Value: 27
        Documentation: Dynamic light effect
      - Name: TE_STREAK_SPLASH
        Value: 25
        Documentation: Oriented shower of tracers
      - Name: TE_BEAMRING
        Value: 24
        Documentation: Connect a beam ring to two entities
      - Name: TE_GLOWSPRITE
        Value: 23
        Documentation: Glowing sprite
      - Name: TE_BEAMFOLLOW
        Value: 22
        Documentation: Create a line of decaying beam segments until entity stops moving
      - Name: TE_BEAMCYLINDER
        Value: 21
        Documentation: Cylinder that expands to max radius over lifetime
      - Name: TE_BEAMDISK
        Value: 20
        Documentation: Disk that expands to max radius over lifetime
      - Name: TE_BEAMTORUS
        Value: 19
        Documentation: Screen aligned beam ring, expands to max radius over lifetime
      - Name: TE_BEAMSPRITE
        Value: 18
        Documentation: A beam with a sprite at the end
      - Name: TE_SPRITE
        Value: 17
        Documentation: Additive sprite, plays 1 cycle
      - Name: TE_SPRITETRAIL
        Value: 15
        Documentation: Line of moving glow sprites with gravity, fadeout, and collisions
      - Name: TE_IMPLOSION
        Value: 14
        Documentation: Tracers moving toward a point
      - Name: TE_BSPDECAL
        Value: 13
        Documentation: 'Decal from the .BSP file '
      - Name: TE_EXPLOSION2
        Value: 12
        Documentation: Explosion effect
      - Name: TE_TELEPORT
        Value: 11
        Documentation: Teleport effect
      - Name: TE_LAVASPLASH
        Value: 10
        Documentation: Lava splash effect
      - Name: TE_SPARKS
        Value: 9
        Documentation: Spark effect
      - Name: TE_BEAMENTS
        Value: 8
        Documentation: Beam effect between two entities
      - Name: TE_LIGHTNING
        Value: 7
        Documentation: TE_BEAMPOINTS with simplified parameters
      - Name: TE_TRACER
        Value: 6
        Documentation: Tracer effect from point to point
      - Name: TE_SMOKE
        Value: 5
        Documentation: Alphablend sprite, move vertically 30 pps
      - Name: TE_TAREXPLOSION
        Value: 4
        Documentation: Quake1 "tarbaby" explosion with sound
      - Name: TE_EXPLOSION
        Value: 3
        Documentation: >-
          Additive sprite, 2 dynamic lights, flickering particles, explosion
          sound, move vertically 8 pps
      - Name: TE_GUNSHOT
        Value: 2
        Documentation: Particle effect plus ricochet sound
      - Name: TE_BEAMENTPOINT
        Value: 1
        Documentation: Beam effect between point and entity
      - Name: TE_BEAMPOINTS
        Value: 0
        Documentation: Beam effect between two points
  - Name: TE_FireFieldFlag
    Namespace: ''
    Documentation: TE_FIREFIELD flags
    Values:
      - Name: TEFIRE_FLAG_ADDITIVE
        Value: 32
        Documentation: If set, sprite is rendered non-opaque with additive
      - Name: TEFIRE_FLAG_PLANAR
        Value: 16
        Documentation: >-
          If set, all fire sprites have same initial Z instead of randomly
          filling a cube. 
      - Name: TEFIRE_FLAG_ALPHA
        Value: 8
        Documentation: If set, sprite is rendered alpha blended at 50% else, opaque
      - Name: TEFIRE_FLAG_LOOP
        Value: 4
        Documentation: >-
          If set, sprite plays at 15 fps, otherwise plays at whatever rate
          stretches the animation over the sprite's duration.
      - Name: TEFIRE_FLAG_SOMEFLOAT
        Value: 2
        Documentation: Some of the sprites will drift upwards. (50% chance)
      - Name: TEFIRE_FLAG_ALLFLOAT
        Value: 1
        Documentation: All sprites will drift upwards as they animate
  - Name: TE_ExplosionFlag
    Namespace: ''
    Documentation: TE_EXPLOSION flags
    Values:
      - Name: TE_EXPLFLAG_NOPARTICLES
        Value: 8
        Documentation: Do not draw particles
      - Name: TE_EXPLFLAG_NOSOUND
        Value: 4
        Documentation: Do not play client explosion sound
      - Name: TE_EXPLFLAG_NODLIGHTS
        Value: 2
        Documentation: Do not render dynamic lights
      - Name: TE_EXPLFLAG_NOADDITIVE
        Value: 1
        Documentation: >-
          Sprite will be drawn opaque (ensure that the sprite you send is a
          non-additive sprite)
      - Name: TE_EXPLFLAG_NONE
        Value: 0
        Documentation: All flags clear makes default Half-Life explosion
  - Name: NetworkMessageDest
    Namespace: ''
    Documentation: Network message destination types.
    Values:
      - Name: MSG_SPEC
        Value: 9
        Documentation: Sends to all spectator proxies
      - Name: MSG_ONE_UNRELIABLE
        Value: 8
        Documentation: >-
          Send to one client, but don't put in reliable stream, put in
          unreliable datagram ( could be dropped )
      - Name: MSG_PAS_R
        Value: 7
        Documentation: Reliable to PAS
      - Name: MSG_PVS_R
        Value: 6
        Documentation: Reliable to PVS
      - Name: MSG_PAS
        Value: 5
        Documentation: Ents in PAS of org
      - Name: MSG_PVS
        Value: 4
        Documentation: Ents in PVS of org
      - Name: MSG_INIT
        Value: 3
        Documentation: write to the init string
      - Name: MSG_ALL
        Value: 2
        Documentation: reliable to all
      - Name: MSG_ONE
        Value: 1
        Documentation: reliable to one (msg_entity)
      - Name: MSG_BROADCAST
        Value: 0
        Documentation: unreliable to all
  - Name: GLOBALESTATE
    Namespace: ''
    Documentation: Global state values
    Values:
      - Name: GLOBAL_DEAD
        Value: 2
        Documentation: Global state when removed
      - Name: GLOBAL_ON
        Value: 1
        Documentation: Global state when on
      - Name: GLOBAL_OFF
        Value: 0
        Documentation: Global state when off
  - Name: HideHUDFlags
    Namespace: ''
    Documentation: Flags used in CBasePlayer m_iHideHUD
    Values:
      - Name: HIDEHUD_AMMO
        Value: 512
        Documentation: Hides only the Ammo element
      - Name: HIDEHUD_CROSSHAIR
        Value: 256
        Documentation: Hides only the Crosshair element
      - Name: HIDEHUD_CUSTOM_PLUGINS
        Value: 128
        Documentation: Hides Custom HUD elements from plugins
      - Name: HIDEHUD_CUSTOM_MAPS
        Value: 64
        Documentation: Hides Custom HUD elements from map scripts
      - Name: HIDEHUD_SUITPOWER
        Value: 32
        Documentation: Hides the Battery(armor) element
      - Name: HIDEHUD_WEAPON_SELECT
        Value: 16
        Documentation: Hides the Weapon Selection Menu element
      - Name: HIDEHUD_HEALTH
        Value: 8
        Documentation: Hides the Health element
      - Name: HIDEHUD_ALL
        Value: 4
        Documentation: Hides all HUD elements
      - Name: HIDEHUD_FLASHLIGHT
        Value: 2
        Documentation: Hides the Flashlight element
      - Name: HIDEHUD_WEAPONS
        Value: 1
        Documentation: Hides Weapon Selection Menu and Crosshair elements
  - Name: HUD_TIME
    Namespace: ''
    Documentation: Flags used by custom time displays.
    Values:
      - Name: HUD_TIME_COUNT_DOWN
        Value: 8388608
        Documentation: Count down.
      - Name: HUD_TIME_FREEZE
        Value: 4194304
        Documentation: Freeze the displayed value.
      - Name: HUD_TIME_ZERO_HOURS
        Value: 2097152
        Documentation: Draw hours even if the value is zero.
      - Name: HUD_TIME_MILLISECONDS
        Value: 1048576
        Documentation: Draw milliseconds.
      - Name: HUD_TIME_SECONDS
        Value: 524288
        Documentation: Draw seconds.
      - Name: HUD_TIME_MINUTES
        Value: 262144
        Documentation: Draw minutes.
      - Name: HUD_TIME_HOURS
        Value: 131072
        Documentation: Draw hours.
      - Name: HUD_TIME_RIGHT_ALIGN
        Value: 65536
        Documentation: Draw right aligned element.
  - Name: HUD_NUM
    Namespace: ''
    Documentation: Flags used by custom numeric displays.
    Values:
      - Name: HUD_NUM_PLUS_SIGN
        Value: 2097152
        Documentation: Draw sign for positive values.
      - Name: HUD_NUM_NEGATIVE_NUMBERS
        Value: 1048576
        Documentation: Allow negative values.
      - Name: HUD_NUM_LEADING_ZEROS
        Value: 524288
        Documentation: Draw leading zeros.
      - Name: HUD_NUM_DONT_DRAW_ZERO
        Value: 262144
        Documentation: Hide the element if the value is zero.
      - Name: HUD_NUM_SEPARATOR
        Value: 131072
        Documentation: Draw separator.
      - Name: HUD_NUM_RIGHT_ALIGN
        Value: 65536
        Documentation: Draw right aligned element.
  - Name: HUD_SPR
    Namespace: ''
    Documentation: Flags used by custom HUD sprites.
    Values:
      - Name: HUD_SPR_HIDE_WHEN_STOPPED
        Value: 524288
        Documentation: Hide the sprite when the animation stops.
      - Name: HUD_SPR_PLAY_ONCE
        Value: 262144
        Documentation: Play the animation only once.
      - Name: HUD_SPR_MASKED
        Value: 131072
        Documentation: Draw masked sprite.
      - Name: HUD_SPR_OPAQUE
        Value: 65536
        Documentation: Draw opaque sprite.
  - Name: HUD_ELEM
    Namespace: ''
    Documentation: Common flags used by all custom HUD elements.
    Values:
      - Name: HUD_ELEM_DYNAMIC_ALPHA
        Value: 256
        Documentation: >-
          Use the default client-side HUD alpha and flash the element when
          updated.
      - Name: HUD_ELEM_DEFAULT_ALPHA
        Value: 128
        Documentation: Use the default client-side HUD alpha (hud_defaultalpha).
      - Name: HUD_ELEM_EFFECT_ONCE
        Value: 64
        Documentation: Play the effect only once.
      - Name: HUD_ELEM_HIDDEN
        Value: 32
        Documentation: Create a hidden element.
      - Name: HUD_ELEM_NO_BORDER
        Value: 16
        Documentation: Ignore the client-side HUD border (hud_bordersize).
      - Name: HUD_ELEM_SCR_CENTER_Y
        Value: 8
        Documentation: Y position relative to the center of the screen.
      - Name: HUD_ELEM_SCR_CENTER_X
        Value: 4
        Documentation: X position relative to the center of the screen.
      - Name: HUD_ELEM_ABSOLUTE_Y
        Value: 2
        Documentation: Y position in pixels.
      - Name: HUD_ELEM_ABSOLUTE_X
        Value: 1
        Documentation: X position in pixels.
  - Name: HUD_EFFECT
    Namespace: ''
    Documentation: HUD element effects.
    Values:
      - Name: HUD_EFFECT_SINE_PULSE
        Value: 8
        Documentation: Sine pulse from color1 through zero to color2.
      - Name: HUD_EFFECT_TOGGLE
        Value: 7
        Documentation: Toggle between color1 and color2.
      - Name: HUD_EFFECT_COSINE
        Value: 6
        Documentation: >-
          Cosine ramp up and ramp down from color1 through color2 back to
          color1.
      - Name: HUD_EFFECT_COSINE_DOWN
        Value: 5
        Documentation: Cosine ramp down from color2 to color1.
      - Name: HUD_EFFECT_COSINE_UP
        Value: 4
        Documentation: Cosine ramp up from color1 to color2.
      - Name: HUD_EFFECT_TRIANGLE
        Value: 3
        Documentation: >-
          Linear ramp up and ramp down from color1 through color2 back to
          color1.
      - Name: HUD_EFFECT_RAMP_DOWN
        Value: 2
        Documentation: Linear ramp down from color2 to color1.
      - Name: HUD_EFFECT_RAMP_UP
        Value: 1
        Documentation: Linear ramp up from color1 to color2.
      - Name: HUD_EFFECT_NONE
        Value: 0
        Documentation: No effect.
  - Name: HUD
    Namespace: ''
    Documentation: Used to dictate where client print commands print the given text.
    Values:
      - Name: HUD_PRINTCENTER
        Value: 4
        Documentation: Print to center of screen
      - Name: HUD_PRINTTALK
        Value: 3
        Documentation: Print to chat
      - Name: HUD_PRINTCONSOLE
        Value: 2
        Documentation: Print to console
      - Name: HUD_PRINTNOTIFY
        Value: 1
        Documentation: Print notify
  - Name: FFADE
    Namespace: ''
    Documentation: Fade flags for CPlayerFuncs::ScreenFade and ScreenFadeAll
    Values:
      - Name: FFADE_STAYOUT
        Value: 4
        Documentation: >-
          ignores the duration, stays faded out until new ScreenFade message
          received
      - Name: FFADE_MODULATE
        Value: 2
        Documentation: Modulate (don't blend)
      - Name: FFADE_OUT
        Value: 1
        Documentation: Fade out (not in)
      - Name: FFADE_IN
        Value: 0
        Documentation: Just here so we don't pass 0 into the function
  - Name: AdminLevel_t
    Namespace: ''
    Documentation: Admin levels
    Values:
      - Name: ADMIN_OWNER
        Value: 2
        Documentation: Server owner (applies to a listenserver host player)
      - Name: ADMIN_YES
        Value: 1
        Documentation: Server administrator
      - Name: ADMIN_NO
        Value: 0
        Documentation: Not an administrator
      - Name: ADMIN_INIT
        Value: -1
        Documentation: Level on connect, tells functions not to use cached level
  - Name: PITCH
    Namespace: ''
    Documentation: >-
      Pitch values. Other values are possible. Range: 0 - 255, where 255 is very
      high.
    Values:
      - Name: PITCH_HIGH
        Value: 120
        Documentation: high pitch
      - Name: PITCH_LOW
        Value: 95
        Documentation: low pitch
      - Name: PITCH_NORM
        Value: 100
        Documentation: non-pitch shifted
  - Name: SOUND_CHANNEL
    Namespace: ''
    Documentation: Audio channels
    Values:
      - Name: CHAN_MUSIC
        Value: 7
        Documentation: ''
      - Name: CHAN_STATIC
        Value: 6
        Documentation: allocate channel from the static area
      - Name: CHAN_STREAM
        Value: 5
        Documentation: allocate stream channel from the static or dynamic area
      - Name: CHAN_BODY
        Value: 4
        Documentation: ''
      - Name: CHAN_ITEM
        Value: 3
        Documentation: ''
      - Name: CHAN_VOICE
        Value: 2
        Documentation: ''
      - Name: CHAN_WEAPON
        Value: 1
        Documentation: ''
      - Name: CHAN_AUTO
        Value: 0
        Documentation: >-
          Automatically selects a channel for use. You cannot stop sounds while
          using this channel with StopSound, or in conjunction with the SND_STOP
          flag.
  - Name: SoundFlag
    Namespace: ''
    Documentation: Sound flags
    Values:
      - Name: SND_SKIP_ORIGIN_USE_ENT
        Value: 8192
        Documentation: Skip Origin and use entity flag
      - Name: SND_LINEAR
        Value: 4096
        Documentation: Linear flag
      - Name: SND_FORCE_LOOP
        Value: 2048
        Documentation: Force loop flag
      - Name: SND_FORCE_SINGLE
        Value: 1024
        Documentation: Force single flag
      - Name: SND_REFRESH
        Value: 512
        Documentation: Refresh flag
      - Name: SND_SENTENCE
        Value: 256
        Documentation: Sentence flag
      - Name: SND_CHANGE_PITCH
        Value: 128
        Documentation: Change pitch flag
      - Name: SND_CHANGE_VOL
        Value: 64
        Documentation: Change volume flag
      - Name: SND_STOP
        Value: 32
        Documentation: Stop flag
      - Name: SND_ENT
        Value: 16
        Documentation: Entity flag
      - Name: SND_ORIGIN
        Value: 8
        Documentation: Origin flag
      - Name: SND_ATTENUATION
        Value: 4
        Documentation: Attenuation flag
      - Name: SND_PITCH
        Value: 2
        Documentation: Pitch flag
      - Name: SND_VOLUME
        Value: 1
        Documentation: Volume flag
  - Name: ALERT_TYPE
    Namespace: ''
    Documentation: Alert type for console messages
    Values:
      - Name: at_logged
        Value: 5
        Documentation: Server print to console (only in multiplayer games)
      - Name: at_error
        Value: 4
        Documentation: 'Prints ''Error: <message>'''
      - Name: at_warning
        Value: 3
        Documentation: 'Prints ''Warning: <message>'''
      - Name: at_aiconsole
        Value: 2
        Documentation: Only shown if developer is 2 or larger
      - Name: at_console
        Value: 1
        Documentation: Outputs text to the console only if developer is larger than 0
      - Name: at_notice
        Value: 0
        Documentation: 'Prints ''NOTICE: <message>'''
  - Name: HULL_NUMBER
    Namespace: ''
    Documentation: |-
      Ignore glass options.
      Flag for certain trace functions.
    Values:
      - Name: head_hull
        Value: 3
        Documentation: Head hull.
      - Name: large_hull
        Value: 2
        Documentation: Large hull.
      - Name: human_hull
        Value: 1
        Documentation: Human sized hull.
      - Name: point_hull
        Value: 0
        Documentation: Point hull. No size.
  - Name: IGNORE_GLASS
    Namespace: ''
    Documentation: |-
      Ignore glass options.
      Flag for certain trace functions.
    Values:
      - Name: dont_ignore_glass
        Value: 0
        Documentation: Don't ignore glass
      - Name: ignore_glass
        Value: 1
        Documentation: Ignore glass
  - Name: IGNORE_MONSTERS
    Namespace: ''
    Documentation: |-
      Ignore monsters options.
      Flag for certain trace functions.
    Values:
      - Name: missile
        Value: 2
        Documentation: Object doing the trace is a missile
      - Name: dont_ignore_monsters
        Value: 0
        Documentation: Don't ignore monsters
      - Name: ignore_monsters
        Value: 1
        Documentation: Ignore monsters
  - Name: TankFlags
    Namespace: ''
    Documentation: func_tank spawn flags
    Values:
      - Name: SF_TANK_PLAYERCANTFIRE
        Value: 1024
        Documentation: If set, controlling player can't fire this tank.
      - Name: SF_TANK_USERELATIONS
        Value: 512
        Documentation: >-
          If set, uses the relationship specified when dealing with player
          targets. Otherwise, defaults to always attacking monsters.
      - Name: SF_TANK_CANCONTROL
        Value: 32
        Documentation: Whether this func_tank is controllable or not
      - Name: SF_TANK_LINEOFSIGHT
        Value: 16
        Documentation: >-
          Whether to only attack if the tank has a direct line of sight of its
          target or continue firing.
      - Name: SF_TANK_ACTIVE
        Value: 1
        Documentation: Whether the tank is active or not
  - Name: TANKBULLET
    Namespace: ''
    Documentation: func_tank bullet types
    Values:
      - Name: TANK_BULLET_12MM
        Value: 3
        Documentation: 12 mm rounds
      - Name: TANK_BULLET_MP5
        Value: 2
        Documentation: MP5 rounds
      - Name: TANK_BULLET_9MM
        Value: 1
        Documentation: 9mm rounds
      - Name: TANK_BULLET_NONE
        Value: 0
        Documentation: No bullet. Nothing is fired when this is set
  - Name: CBeamSpawnflags
    Namespace: ''
    Documentation: CBeam spawn flags
    Values:
      - Name: SF_BEAM_TEMPORARY
        Value: 32768
        Documentation: Whether the beam is a temporary entity
      - Name: SF_BEAM_SHADEOUT
        Value: 256
        Documentation: Whether to fade the beam out at its end point
      - Name: SF_BEAM_SHADEIN
        Value: 128
        Documentation: Whether to fade the beam in at its start point
      - Name: SF_BEAM_DECALS
        Value: 64
        Documentation: Whether to create decals when the beam does damage to BSP models
      - Name: SF_BEAM_SPARKEND
        Value: 32
        Documentation: Whether to allow creation of sparks at the beam's end point
      - Name: SF_BEAM_SPARKSTART
        Value: 16
        Documentation: Whether to allow creation of sparks at the beam's start point
      - Name: SF_BEAM_RING
        Value: 8
        Documentation: Whether this beam is a ring between 2 points
      - Name: SF_BEAM_RANDOM
        Value: 4
        Documentation: >-
          Whether beams are created to a randomly selected entity with the given
          target name
      - Name: SF_BEAM_TOGGLE
        Value: 2
        Documentation: Whether the beam should be togglable by triggering it
      - Name: SF_BEAM_STARTON
        Value: 1
        Documentation: Whether the beam should start on
  - Name: BeamFlags
    Namespace: ''
    Documentation: Beam flags used by CBeam::SetFlags
    Values:
      - Name: BEAM_FSHADEOUT
        Value: 128
        Documentation: Beam fades out at its end point
      - Name: BEAM_FSHADEIN
        Value: 64
        Documentation: Beam fades in at its start point
      - Name: BEAM_FSOLID
        Value: 32
        Documentation: Beam is a solid shape
      - Name: BEAM_FSINE
        Value: 16
        Documentation: Beam shape follows a sinus shape
  - Name: BeamType
    Namespace: ''
    Documentation: Beam types used by CBeam::SetType
    Values:
      - Name: BEAM_HOSE
        Value: 3
        Documentation: I don't even know what this does
      - Name: BEAM_ENTS
        Value: 2
        Documentation: Beam is a beam between entities
      - Name: BEAM_ENTPOINT
        Value: 1
        Documentation: Beam is a beam between point and entity
      - Name: BEAM_POINTS
        Value: 0
        Documentation: Beam is a beam between 2 points
  - Name: PathTrackSpawnFlags
    Namespace: ''
    Documentation: path_track spawnflags
    Values:
      - Name: SF_PATH_ALTERNATE
        Value: 32768
        Documentation: ''
      - Name: SF_PATH_DISABLE_TRAIN
        Value: 8
        Documentation: ''
      - Name: SF_PATH_ALTREVERSE
        Value: 4
        Documentation: ''
      - Name: SF_PATH_FIREONCE
        Value: 2
        Documentation: ''
      - Name: SF_PATH_DISABLED
        Value: 1
        Documentation: ''
  - Name: WeaponIds
    Namespace: ''
    Documentation: Weapon id values
    Values:
      - Name: MAX_WEAPONS
        Value: 256
        Documentation: Maximum number of weapons that the game supports
      - Name: WEAPON_DISPLACER
        Value: 29
        Documentation: ''
      - Name: WEAPON_SHOCKRIFLE
        Value: 28
        Documentation: ''
      - Name: WEAPON_DESERT_EAGLE
        Value: 27
        Documentation: ''
      - Name: WEAPON_SPORELAUNCHER
        Value: 26
        Documentation: ''
      - Name: WEAPON_M16
        Value: 25
        Documentation: ''
      - Name: WEAPON_M249
        Value: 24
        Documentation: ''
      - Name: WEAPON_SNIPERRIFLE
        Value: 23
        Documentation: ''
      - Name: WEAPON_GRAPPLE
        Value: 22
        Documentation: ''
      - Name: WEAPON_MINIGUN
        Value: 21
        Documentation: ''
      - Name: WEAPON_PIPEWRENCH
        Value: 20
        Documentation: ''
      - Name: WEAPON_CROWBAR_ELECTRIC
        Value: 19
        Documentation: ''
      - Name: WEAPON_MEDKIT
        Value: 18
        Documentation: ''
      - Name: WEAPON_UZI
        Value: 17
        Documentation: ''
      - Name: WEAPON_SNARK
        Value: 15
        Documentation: ''
      - Name: WEAPON_SATCHEL
        Value: 14
        Documentation: ''
      - Name: WEAPON_TRIPMINE
        Value: 13
        Documentation: ''
      - Name: WEAPON_HANDGRENADE
        Value: 12
        Documentation: ''
      - Name: WEAPON_HORNETGUN
        Value: 11
        Documentation: ''
      - Name: WEAPON_EGON
        Value: 10
        Documentation: ''
      - Name: WEAPON_GAUSS
        Value: 9
        Documentation: ''
      - Name: WEAPON_RPG
        Value: 8
        Documentation: ''
      - Name: WEAPON_SHOTGUN
        Value: 7
        Documentation: ''
      - Name: WEAPON_CROSSBOW
        Value: 6
        Documentation: ''
      - Name: WEAPON_CHAINGUN
        Value: 5
        Documentation: ''
      - Name: WEAPON_MP5
        Value: 4
        Documentation: ''
      - Name: WEAPON_PYTHON
        Value: 3
        Documentation: ''
      - Name: WEAPON_GLOCK
        Value: 2
        Documentation: ''
      - Name: WEAPON_CROWBAR
        Value: 1
        Documentation: ''
      - Name: WEAPON_NONE
        Value: 0
        Documentation: Weapon id used for invalid weapon ids.
  - Name: ItemFlag
    Namespace: ''
    Documentation: Item flags used by ItemInfo::iFlags
    Values:
      - Name: ITEM_FLAG_ESSENTIAL
        Value: 128
        Documentation: >-
          This weapon should not be dropped straight away when the player dies,
          only if he is gibbed or if he respawned.
      - Name: ITEM_FLAG_IGNOREWEAPONSTAY
        Value: 64
        Documentation: Ignore weaponstay settings when respawning this weapon.
      - Name: ITEM_FLAG_DUALWIELD
        Value: 32
        Documentation: Use a special HUD ammo configuration unique to a dual wielded weapons.
      - Name: ITEM_FLAG_EXHAUSTIBLE
        Value: 16
        Documentation: A player can totally exhaust their ammo supply and lose this weapon.
      - Name: ITEM_FLAG_LIMITINWORLD
        Value: 8
        Documentation: If there are few entity slots left, this item will not respawn.
      - Name: ITEM_FLAG_NOAUTOSWITCHEMPTY
        Value: 4
        Documentation: >-
          Don't automatically switch away from this weapon when it runs out of
          ammo.
      - Name: ITEM_FLAG_NOAUTORELOAD
        Value: 2
        Documentation: Don't automatically reload this weapon.
      - Name: ITEM_FLAG_SELECTONEMPTY
        Value: 1
        Documentation: Allow this weapon to be selected if it has no ammo.
  - Name: bits_SOUND
    Namespace: ''
    Documentation: Sound flags for monster schedules.
    Values:
      - Name: bits_ALL_SOUNDS
        Value: -1
        Documentation: All sound flags
      - Name: bits_SOUND_BULLETHIT
        Value: 128
        Documentation: a bullet just hit at this location
      - Name: bits_SOUND_GARBAGE
        Value: 64
        Documentation: trash cans, banana peels, old fast food bags.
      - Name: bits_SOUND_DANGER
        Value: 32
        Documentation: >-
          pending danger. Grenade that is about to explode, explosive barrel
          that is damaged, falling crate
      - Name: bits_SOUND_MEAT
        Value: 16
        Documentation: gib or pork chop
      - Name: bits_SOUND_CARCASS
        Value: 8
        Documentation: dead body
      - Name: bits_SOUND_PLAYER
        Value: 4
        Documentation: all noises generated by player. walking, shooting, falling, splashing
      - Name: bits_SOUND_WORLD
        Value: 2
        Documentation: door opening/closing, glass breaking
      - Name: bits_SOUND_COMBAT
        Value: 1
        Documentation: gunshots, explosions
      - Name: bits_SOUND_NONE
        Value: 0
        Documentation: ''
  - Name: MOVE_TYPE
    Namespace: ''
    Documentation: MoveToOrigin move type.
    Values:
      - Name: MOVE_STRAFE
        Value: 1
        Documentation: Moves in direction specified, no matter which way monster is facing.
      - Name: MOVE_NORMAL
        Value: 0
        Documentation: Normal move in the direction monster is facing.
  - Name: PRINT_TYPE
    Namespace: ''
    Documentation: Print type
    Values:
      - Name: print_chat
        Value: 2
        Documentation: >-
          Print to chat. Note: does not work. Use CPlayerFuncs::ClientPrint with
          HUD_PRINTTALK instead.
      - Name: print_center
        Value: 1
        Documentation: Print to the center of the screen
      - Name: print_console
        Value: 0
        Documentation: Print to the console
  - Name: FCVAR
    Namespace: ''
    Documentation: Console variable flags.
    Values:
      - Name: FCVAR_UNLOGGED
        Value: 256
        Documentation: >-
          If this is a FCVAR_SERVER, don't log changes to the log file / console
          if we are creating a log
      - Name: FCVAR_PRINTABLEONLY
        Value: 128
        Documentation: >-
          This cvar's string cannot contain unprintable characters (e.g. used
          for player name etc)
      - Name: FCVAR_SPONLY
        Value: 64
        Documentation: >-
          This cvar cannot be changed by clients connected to a multiplayer
          server.
      - Name: FCVAR_PROTECTED
        Value: 32
        Documentation: >-
          It's a server cvar, but we don't send the data since it's a password,
          etc.
      - Name: FCVAR_CLIENTDLL
        Value: 16
        Documentation: Defined by the client dll.
      - Name: FCVAR_EXTDLL
        Value: 8
        Documentation: Defined by external dll.
      - Name: FCVAR_SERVER
        Value: 4
        Documentation: Notifies players when changed.
      - Name: FCVAR_USERINFO
        Value: 2
        Documentation: Changes the client's info string.
      - Name: FCVAR_ARCHIVE
        Value: 1
        Documentation: Save this cvar.
  - Name: CONTENTS
    Namespace: ''
    Documentation: Contents of a spot in the world
    Values:
      - Name: CONTENTS_LADDER
        Value: -16
        Documentation: ''
      - Name: CONTENTS_SKY
        Value: -6
        Documentation: ''
      - Name: CONTENTS_LAVA
        Value: -5
        Documentation: ''
      - Name: CONTENTS_SLIME
        Value: -4
        Documentation: ''
      - Name: CONTENTS_WATER
        Value: -3
        Documentation: ''
      - Name: CONTENTS_SOLID
        Value: -2
        Documentation: ''
      - Name: CONTENTS_EMPTY
        Value: -1
        Documentation: ''
  - Name: WALKMOVE
    Namespace: ''
    Documentation: Walk move types
    Values:
      - Name: WALKMOVE_CHECKONLY
        Value: 2
        Documentation: move, but don't touch triggers
      - Name: WALKMOVE_WORLDONLY
        Value: 1
        Documentation: doesn't hit ANY entities, no matter what the solid type
      - Name: WALKMOVE_NORMAL
        Value: 0
        Documentation: normal walkmove
  - Name: DoorFlag
    Namespace: ''
    Documentation: Door flags.
    Values:
      - Name: SF_DOOR_NO_LINK_CHECKING
        Value: 1024
        Documentation: Don't make sure the doors are in-sync.
      - Name: SF_DOOR_SILENT
        Value: -2147483648
        Documentation: ''
      - Name: SF_DOOR_NOMONSTERS
        Value: 512
        Documentation: Monster can't open
      - Name: SF_DOOR_USE_ONLY
        Value: 256
        Documentation: door must be opened by player's use button.
      - Name: SF_DOOR_ROTATE_X
        Value: 128
        Documentation: ''
      - Name: SF_DOOR_ROTATE_Z
        Value: 64
        Documentation: ''
      - Name: SF_DOOR_NO_AUTO_RETURN
        Value: 32
        Documentation: ''
      - Name: SF_DOOR_ONEWAY
        Value: 16
        Documentation: ''
      - Name: SF_DOOR_PASSABLE
        Value: 8
        Documentation: ''
      - Name: SF_DOOR_ROTATE_BACKWARDS
        Value: 2
        Documentation: ''
      - Name: SF_DOOR_START_OPEN
        Value: 1
        Documentation: ''
      - Name: SF_DOOR_ROTATE_Y
        Value: 0
        Documentation: ''
  - Name: ButtonCode
    Namespace: ''
    Documentation: Button codes used by CBaseButton
    Values:
      - Name: BUTTON_RETURN
        Value: 2
        Documentation: Return the button to its default state
      - Name: BUTTON_ACTIVATE
        Value: 1
        Documentation: Activate the button
      - Name: BUTTON_NOTHING
        Value: 0
        Documentation: Do nothing
  - Name: SATCHELCODE
    Namespace: ''
    Documentation: Satchel codes
    Values:
      - Name: SATCHEL_RELEASE
        Value: 1
        Documentation: Release all satches charges owner by a player from their owner
      - Name: SATCHEL_DETONATE
        Value: 0
        Documentation: Detonates all satchel charges owned by a player
  - Name: PlayerHookFlag
    Namespace: ''
    Documentation: >-
      Player hook flags. Used to skip execution of code when a hook performs an
      action that overrides built-in behavior.
    Values:
      - Name: PlrHook_SkipUse
        Value: 2
        Documentation: Don't run +use checks
      - Name: PlrHook_SkipVehicles
        Value: 1
        Documentation: Don't run vehicle checks
  - Name: PlayerViewMode
    Namespace: ''
    Documentation: Player view mode.
    Values:
      - Name: ViewMode_ThirdPerson
        Value: 1
        Documentation: ''
      - Name: ViewMode_FirstPerson
        Value: 0
        Documentation: ''
  - Name: PLAYER_ANIM
    Namespace: ''
    Documentation: Player animations, set using CBasePlayer::SetAnimation.
    Values:
      - Name: PLAYER_BARNACLE_CHEW
        Value: 11
        Documentation: ''
      - Name: PLAYER_BARNACLE_CHOMP
        Value: 10
        Documentation: ''
      - Name: PLAYER_BARNACLE_PULL
        Value: 9
        Documentation: ''
      - Name: PLAYER_BARNACLE_HIT
        Value: 8
        Documentation: ''
      - Name: PLAYER_DEPLOY
        Value: 7
        Documentation: ''
      - Name: PLAYER_RELOAD
        Value: 6
        Documentation: ''
      - Name: PLAYER_ATTACK1
        Value: 5
        Documentation: ''
      - Name: PLAYER_DIE
        Value: 4
        Documentation: ''
      - Name: PLAYER_SUPERJUMP
        Value: 3
        Documentation: ''
      - Name: PLAYER_JUMP
        Value: 2
        Documentation: ''
      - Name: PLAYER_WALK
        Value: 1
        Documentation: ''
      - Name: PLAYER_IDLE
        Value: 0
        Documentation: ''
  - Name: PFLAG
    Namespace: ''
    Documentation: Player physics flags used in CBasePlayer::m_afPhysicsFlags
    Values:
      - Name: PFLAG_CAMERA
        Value: 128
        Documentation: Looking through a trigger_camera
      - Name: PFLAG_GRAPPLE
        Value: 64
        Documentation: Toggle grapple use
      - Name: PFLAG_OBSERVER
        Value: 32
        Documentation: >-
          player is locked in stationary cam mode. Spectators can move,
          observers can't.
      - Name: PFLAG_USING
        Value: 16
        Documentation: Using a continuous entity
      - Name: PFLAG_DUCKING
        Value: 8
        Documentation: In the process of ducking, but totally squatted yet
      - Name: PFLAG_ONBARNACLE
        Value: 4
        Documentation: ''
      - Name: PFLAG_ONTRAIN
        Value: 2
        Documentation: ''
      - Name: PFLAG_ONSWING
        Value: 1
        Documentation: ''
      - Name: PFLAG_ONLADDER
        Value: 1
        Documentation: ''
  - Name: Train
    Namespace: ''
    Documentation: Train modes used by CBasePlayer::m_iTrain
    Values:
      - Name: TRAIN_BACK
        Value: 5
        Documentation: ''
      - Name: TRAIN_FAST
        Value: 4
        Documentation: ''
      - Name: TRAIN_MEDIUM
        Value: 3
        Documentation: ''
      - Name: TRAIN_SLOW
        Value: 2
        Documentation: ''
      - Name: TRAIN_NEUTRAL
        Value: 1
        Documentation: ''
      - Name: TRAIN_OFF
        Value: 0
        Documentation: ''
      - Name: TRAIN_NEW
        Value: 192
        Documentation: ''
      - Name: TRAIN_ACTIVE
        Value: 128
        Documentation: ''
  - Name: In_Buttons
    Namespace: ''
    Documentation: |-
      Bit field values for entvars_t.buttons.
      Used by players to determine which buttons have been pressed
    Values:
      - Name: IN_SCORE
        Value: 32768
        Documentation: Used by client.dll for when scoreboard is held down
      - Name: IN_ALT1
        Value: 16384
        Documentation: Tertiary attack
      - Name: IN_RELOAD
        Value: 8192
        Documentation: Reload
      - Name: IN_RUN
        Value: 4096
        Documentation: Run/Walk
      - Name: IN_ATTACK2
        Value: 2048
        Documentation: Secondary attack
      - Name: IN_MOVERIGHT
        Value: 1024
        Documentation: Move right
      - Name: IN_MOVELEFT
        Value: 512
        Documentation: Move left
      - Name: IN_RIGHT
        Value: 256
        Documentation: ''
      - Name: IN_LEFT
        Value: 128
        Documentation: ''
      - Name: IN_CANCEL
        Value: 64
        Documentation: ''
      - Name: IN_USE
        Value: 32
        Documentation: Use
      - Name: IN_BACK
        Value: 16
        Documentation: Move backward
      - Name: IN_FORWARD
        Value: 8
        Documentation: Move forward
      - Name: IN_DUCK
        Value: 4
        Documentation: Duck
      - Name: IN_JUMP
        Value: 2
        Documentation: Jump
      - Name: IN_ATTACK
        Value: 1
        Documentation: Primary attack
  - Name: ObserverMode
    Namespace: ''
    Documentation: Observer modes
    Values:
      - Name: OBS_ROAMING
        Value: 2
        Documentation: Roaming
      - Name: OBS_CHASE_FREE
        Value: 1
        Documentation: Free movement
      - Name: OBS_CHASE_LOCKED
        Value: 3
        Documentation: Chase locked
      - Name: OBS_NONE
        Value: 0
        Documentation: Player not in observer mode
      - Name: OBS_ENTERING
        Value: -1
        Documentation: Player in the process of entering observer mode
  - Name: KeyCode
    Namespace: ''
    Documentation: Key Codes
    Values:
      - Name: KEY_LAST
        Value: 103
        Documentation: The last number in the range of key codes.
      - Name: KEY_F12
        Value: 102
        Documentation: F12
      - Name: KEY_F11
        Value: 101
        Documentation: F11
      - Name: KEY_F10
        Value: 100
        Documentation: F10
      - Name: KEY_F9
        Value: 99
        Documentation: F9
      - Name: KEY_F8
        Value: 98
        Documentation: F8
      - Name: KEY_F7
        Value: 97
        Documentation: F7
      - Name: KEY_F6
        Value: 96
        Documentation: F6
      - Name: KEY_F5
        Value: 95
        Documentation: F5
      - Name: KEY_F4
        Value: 94
        Documentation: F4
      - Name: KEY_F3
        Value: 93
        Documentation: F3
      - Name: KEY_F2
        Value: 92
        Documentation: F2
      - Name: KEY_F1
        Value: 91
        Documentation: F1
      - Name: KEY_RIGHT
        Value: 90
        Documentation: RIGHT
      - Name: KEY_DOWN
        Value: 89
        Documentation: DOWN
      - Name: KEY_LEFT
        Value: 88
        Documentation: LEFT
      - Name: KEY_UP
        Value: 87
        Documentation: UP
      - Name: KEY_APP
        Value: 86
        Documentation: APP
      - Name: KEY_RWIN
        Value: 85
        Documentation: RWIN
      - Name: KEY_LWIN
        Value: 84
        Documentation: LWIN
      - Name: KEY_RCONTROL
        Value: 83
        Documentation: RCONTROL
      - Name: KEY_LCONTROL
        Value: 82
        Documentation: LCONTROL
      - Name: KEY_RALT
        Value: 81
        Documentation: RALT
      - Name: KEY_LALT
        Value: 80
        Documentation: LALT
      - Name: KEY_RSHIFT
        Value: 79
        Documentation: RSHIFT
      - Name: KEY_LSHIFT
        Value: 78
        Documentation: LSHIFT
      - Name: KEY_BREAK
        Value: 77
        Documentation: BREAK
      - Name: KEY_PAGEDOWN
        Value: 76
        Documentation: PAGEDOWN
      - Name: KEY_PAGEUP
        Value: 75
        Documentation: PAGEUP
      - Name: KEY_END
        Value: 74
        Documentation: END
      - Name: KEY_HOME
        Value: 73
        Documentation: HOME
      - Name: KEY_DELETE
        Value: 72
        Documentation: DELETE
      - Name: KEY_INSERT
        Value: 71
        Documentation: INSERT
      - Name: KEY_SCROLLLOCK
        Value: 70
        Documentation: SCROLLLOCK
      - Name: KEY_ESCAPE
        Value: 69
        Documentation: ESCAPE
      - Name: KEY_NUMLOCK
        Value: 68
        Documentation: NUMLOCK
      - Name: KEY_CAPSLOCK
        Value: 67
        Documentation: CAPSLOCK
      - Name: KEY_TAB
        Value: 66
        Documentation: TAB
      - Name: KEY_BACKSPACE
        Value: 65
        Documentation: BACKSPACE
      - Name: KEY_SPACE
        Value: 64
        Documentation: SPACE
      - Name: KEY_ENTER
        Value: 63
        Documentation: ENTER
      - Name: KEY_EQUAL
        Value: 62
        Documentation: EQUAL
      - Name: KEY_MINUS
        Value: 61
        Documentation: MINUS
      - Name: KEY_BACKSLASH
        Value: 60
        Documentation: BACKSLASH
      - Name: KEY_SLASH
        Value: 59
        Documentation: SLASH
      - Name: KEY_PERIOD
        Value: 58
        Documentation: PERIOD
      - Name: KEY_COMMA
        Value: 57
        Documentation: COMMA
      - Name: KEY_BACKQUOTE
        Value: 56
        Documentation: BACKQUOTE
      - Name: KEY_APOSTROPHE
        Value: 55
        Documentation: APOSTROPHE
      - Name: KEY_SEMICOLON
        Value: 54
        Documentation: SEMICOLON
      - Name: KEY_RBRACKET
        Value: 53
        Documentation: RBRACKET
      - Name: KEY_LBRACKET
        Value: 52
        Documentation: LBRACKET
      - Name: KEY_PAD_DECIMAL
        Value: 51
        Documentation: Numpad DECIMAL
      - Name: KEY_PAD_ENTER
        Value: 50
        Documentation: Numpad ENTER
      - Name: KEY_PAD_PLUS
        Value: 49
        Documentation: Numpad PLUS
      - Name: KEY_PAD_MINUS
        Value: 48
        Documentation: Numpad MINUS
      - Name: KEY_PAD_MULTIPLY
        Value: 47
        Documentation: Numpad MULTIPLY
      - Name: KEY_PAD_DIVIDE
        Value: 46
        Documentation: Numpad DIVIDE
      - Name: KEY_PAD_9
        Value: 45
        Documentation: Numpad 9
      - Name: KEY_PAD_8
        Value: 44
        Documentation: Numpad 8
      - Name: KEY_PAD_7
        Value: 43
        Documentation: Numpad 7
      - Name: KEY_PAD_6
        Value: 42
        Documentation: Numpad 6
      - Name: KEY_PAD_5
        Value: 41
        Documentation: Numpad 5
      - Name: KEY_PAD_4
        Value: 40
        Documentation: Numpad 4
      - Name: KEY_PAD_3
        Value: 39
        Documentation: Numpad 3
      - Name: KEY_PAD_2
        Value: 38
        Documentation: Numpad 2
      - Name: KEY_PAD_1
        Value: 37
        Documentation: Numpad 1
      - Name: KEY_PAD_0
        Value: 36
        Documentation: Numpad 0
      - Name: KEY_Z
        Value: 35
        Documentation: Z
      - Name: KEY_Y
        Value: 34
        Documentation: 'Y'
      - Name: KEY_X
        Value: 33
        Documentation: X
      - Name: KEY_W
        Value: 32
        Documentation: W
      - Name: KEY_V
        Value: 31
        Documentation: V
      - Name: KEY_U
        Value: 30
        Documentation: U
      - Name: KEY_T
        Value: 29
        Documentation: T
      - Name: KEY_S
        Value: 28
        Documentation: S
      - Name: KEY_R
        Value: 27
        Documentation: R
      - Name: KEY_Q
        Value: 26
        Documentation: Q
      - Name: KEY_P
        Value: 25
        Documentation: P
      - Name: KEY_O
        Value: 24
        Documentation: O
      - Name: KEY_N
        Value: 23
        Documentation: 'N'
      - Name: KEY_M
        Value: 22
        Documentation: M
      - Name: KEY_L
        Value: 21
        Documentation: L
      - Name: KEY_K
        Value: 20
        Documentation: K
      - Name: KEY_J
        Value: 19
        Documentation: J
      - Name: KEY_I
        Value: 18
        Documentation: I
      - Name: KEY_H
        Value: 17
        Documentation: H
      - Name: KEY_G
        Value: 16
        Documentation: G
      - Name: KEY_F
        Value: 15
        Documentation: F
      - Name: KEY_E
        Value: 14
        Documentation: E
      - Name: KEY_D
        Value: 13
        Documentation: D
      - Name: KEY_C
        Value: 12
        Documentation: C
      - Name: KEY_B
        Value: 11
        Documentation: B
      - Name: KEY_A
        Value: 10
        Documentation: A
      - Name: KEY_9
        Value: 9
        Documentation: 9
      - Name: KEY_8
        Value: 8
        Documentation: 8
      - Name: KEY_7
        Value: 7
        Documentation: 7
      - Name: KEY_6
        Value: 6
        Documentation: 6
      - Name: KEY_5
        Value: 5
        Documentation: 5
      - Name: KEY_4
        Value: 4
        Documentation: 4
      - Name: KEY_3
        Value: 3
        Documentation: 3
      - Name: KEY_2
        Value: 2
        Documentation: 2
      - Name: KEY_1
        Value: 1
        Documentation: 1
      - Name: KEY_0
        Value: 0
        Documentation: 0
  - Name: HITGROUP
    Namespace: ''
    Documentation: Hit Group standards
    Values:
      - Name: HITGROUP_RIGHTLEG
        Value: 7
        Documentation: ''
      - Name: HITGROUP_LEFTLEG
        Value: 6
        Documentation: ''
      - Name: HITGROUP_RIGHTARM
        Value: 5
        Documentation: ''
      - Name: HITGROUP_LEFTARM
        Value: 4
        Documentation: ''
      - Name: HITGROUP_STOMACH
        Value: 3
        Documentation: ''
      - Name: HITGROUP_CHEST
        Value: 2
        Documentation: ''
      - Name: HITGROUP_HEAD
        Value: 1
        Documentation: ''
      - Name: HITGROUP_GENERIC
        Value: 0
        Documentation: ''
  - Name: bits_CAPABILITY
    Namespace: ''
    Documentation: |-
      Tells us what a monster can do.
      See MonsterEntity::m_afCapability
    Values:
      - Name: bits_CAP_DOORS_GROUP
        Value: 832
        Documentation: >-
          Combination of bits_CAP_USE, bits_CAP_AUTO_DOORS, and
          bits_CAP_OPEN_DOORS
      - Name: bits_CAP_FALL_DAMAGE
        Value: 131072
        Documentation: can take fall damage
      - Name: bits_CAP_USE_TANK
        Value: 65536
        Documentation: can use func_tanks
      - Name: bits_CAP_FLY
        Value: 32768
        Documentation: can fly, move all around
      - Name: bits_CAP_MELEE_ATTACK2
        Value: 16384
        Documentation: can do a melee attack 2
      - Name: bits_CAP_MELEE_ATTACK1
        Value: 8192
        Documentation: can do a melee attack 1
      - Name: bits_CAP_RANGE_ATTACK2
        Value: 4096
        Documentation: can do a range attack 2
      - Name: bits_CAP_RANGE_ATTACK1
        Value: 2048
        Documentation: can do a range attack 1
      - Name: bits_CAP_TURN_HEAD
        Value: 1024
        Documentation: can turn head, always bone controller 0
      - Name: bits_CAP_OPEN_DOORS
        Value: 512
        Documentation: can open manual doors
      - Name: bits_CAP_AUTO_DOORS
        Value: 256
        Documentation: can trigger auto doors
      - Name: bits_CAP_HEAR
        Value: 128
        Documentation: can hear forced sounds
      - Name: bits_CAP_USE
        Value: 64
        Documentation: open doors/push buttons/pull levers
      - Name: bits_CAP_CLIMB
        Value: 32
        Documentation: climb ladders/ropes
      - Name: bits_CAP_SWIM
        Value: 16
        Documentation: proficiently navigate in water
      - Name: bits_CAP_SQUAD
        Value: 8
        Documentation: can form squads
      - Name: bits_CAP_STRAFE
        Value: 4
        Documentation: strafe ( walk/run sideways)
      - Name: bits_CAP_JUMP
        Value: 2
        Documentation: jump/leap
      - Name: bits_CAP_DUCK
        Value: 1
        Documentation: crouch
  - Name: MonsterEventType
    Namespace: ''
    Documentation: Monster event types
    Values:
      - Name: MONSTER_EVENT_SWISHSOUND
        Value: 2010
        Documentation: ''
      - Name: MONSTER_EVENT_FOOTSTEP
        Value: 2003
        Documentation: ''
      - Name: MONSTER_EVENT_BODYDROP_HEAVY
        Value: 2002
        Documentation: ''
      - Name: MONSTER_EVENT_BODYDROP_LIGHT
        Value: 2001
        Documentation: ''
      - Name: EVENT_CLIENT
        Value: 5000
        Documentation: ''
      - Name: EVENT_SHARED
        Value: 2000
        Documentation: ''
      - Name: EVENT_SCRIPTED
        Value: 1000
        Documentation: ''
      - Name: EVENT_SPECIFIC
        Value: 0
        Documentation: ''
  - Name: TASK_TYPE
    Namespace: ''
    Documentation: Task types for the monster AI
    Values:
      - Name: LAST_COMMON_TASK
        Value: 113
        Documentation: ''
      - Name: TASK_PATH_WAYPOINT_DEPARTURE
        Value: 111
        Documentation: ''
      - Name: TASK_PATH_WAYPOINT_WAIT
        Value: 110
        Documentation: ''
      - Name: TASK_PATH_WAYPOINT_ARRIVAL
        Value: 109
        Documentation: ''
      - Name: TASK_PATH_WAYPOINT_ANGLES
        Value: 108
        Documentation: ''
      - Name: TASK_PATH_WAYPOINT_MOVEMENT
        Value: 107
        Documentation: ''
      - Name: TASK_PATH_WAYPOINT_INITIALIZE
        Value: 106
        Documentation: ''
      - Name: TASK_MOVE_TO_ENEMY
        Value: 105
        Documentation: ''
      - Name: TASK_GET_PATH_TO_BESTCOMBATSOUND
        Value: 104
        Documentation: ''
      - Name: TASK_FIND_COVER_DISTANCE_FROM_ENEMY
        Value: 103
        Documentation: ''
      - Name: TASK_RUN_TO_TANK
        Value: 102
        Documentation: ''
      - Name: TASK_USE_TANK
        Value: 101
        Documentation: ''
      - Name: TASK_PLAY_SEQUENCE_COWER
        Value: 100
        Documentation: ''
      - Name: TASK_MOVE_TO_TARGET_RANGE_FORCE
        Value: 99
        Documentation: ''
      - Name: TASK_WAIT_FOR_MOVEMENT_GRENADE
        Value: 98
        Documentation: ''
      - Name: TASK_FIND_ATTACKPOINT_TO_ENEMY
        Value: 97
        Documentation: ''
      - Name: TASK_WAIT_AT_TANK
        Value: 96
        Documentation: ''
      - Name: TASK_GET_PATH_TO_TANK
        Value: 95
        Documentation: ''
      - Name: TASK_FIND_TANK
        Value: 94
        Documentation: ''
      - Name: TASK_MOVE_AWAY_PLAYERPATH
        Value: 93
        Documentation: ''
      - Name: TASK_WALK_PLAYERPATH_FOR_UNITS
        Value: 92
        Documentation: ''
      - Name: TASK_WAIT_FOR_MOVEMENT_ENEMY_OCCLUDED
        Value: 91
        Documentation: ''
      - Name: TASK_WAIT_FOR_MOVEMENT_AP
        Value: 90
        Documentation: ''
      - Name: TASK_WAIT_FOR_MOVEMENT
        Value: 89
        Documentation: ''
      - Name: TASK_FORGET
        Value: 88
        Documentation: ''
      - Name: TASK_REMEMBER
        Value: 87
        Documentation: ''
      - Name: TASK_TURN_RIGHT
        Value: 86
        Documentation: ''
      - Name: TASK_TURN_LEFT
        Value: 85
        Documentation: ''
      - Name: TASK_STOP_MOVING
        Value: 84
        Documentation: ''
      - Name: TASK_WAIT_INDEFINITE
        Value: 83
        Documentation: ''
      - Name: TASK_WAIT_RANDOM
        Value: 82
        Documentation: ''
      - Name: TASK_FACE_SCRIPT
        Value: 81
        Documentation: ''
      - Name: TASK_PLANT_ON_SCRIPT
        Value: 80
        Documentation: ''
      - Name: TASK_ENABLE_SCRIPT
        Value: 79
        Documentation: ''
      - Name: TASK_PLAY_SCRIPT
        Value: 78
        Documentation: ''
      - Name: TASK_WAIT_FOR_SCRIPT
        Value: 77
        Documentation: ''
      - Name: TASK_DIE
        Value: 76
        Documentation: ''
      - Name: TASK_EAT
        Value: 75
        Documentation: ''
      - Name: TASK_FIND_COVER_FROM_ORIGIN
        Value: 74
        Documentation: ''
      - Name: TASK_FIND_FAR_NODE_COVER_FROM_ENEMY
        Value: 73
        Documentation: ''
      - Name: TASK_FIND_NEAR_NODE_COVER_FROM_ENEMY
        Value: 72
        Documentation: ''
      - Name: TASK_FIND_NODE_COVER_FROM_ENEMY
        Value: 71
        Documentation: ''
      - Name: TASK_FIND_LATERAL_COVER_FROM_ENEMY
        Value: 70
        Documentation: ''
      - Name: TASK_FIND_COVER_FROM_ENEMY
        Value: 69
        Documentation: ''
      - Name: TASK_FIND_COVER_FROM_BEST_SOUND
        Value: 68
        Documentation: ''
      - Name: TASK_SOUND_DIE
        Value: 67
        Documentation: ''
      - Name: TASK_SOUND_PAIN
        Value: 66
        Documentation: ''
      - Name: TASK_SOUND_WAKE
        Value: 65
        Documentation: ''
      - Name: TASK_SOUND_IDLE
        Value: 64
        Documentation: ''
      - Name: TASK_PLAY_SEQUENCE_FACE_TARGET
        Value: 63
        Documentation: ''
      - Name: TASK_PLAY_SEQUENCE_FACE_ENEMY
        Value: 62
        Documentation: ''
      - Name: TASK_PLAY_SEQUENCE
        Value: 61
        Documentation: ''
      - Name: TASK_CLEAR_FAIL_SCHEDULE
        Value: 60
        Documentation: ''
      - Name: TASK_SET_FAIL_SCHEDULE
        Value: 59
        Documentation: ''
      - Name: TASK_SET_SCHEDULE
        Value: 58
        Documentation: ''
      - Name: TASK_SET_ACTIVITY
        Value: 57
        Documentation: ''
      - Name: TASK_SOUND_DEATH
        Value: 56
        Documentation: ''
      - Name: TASK_SOUND_ANGRY
        Value: 55
        Documentation: ''
      - Name: TASK_DODGE_RIGHT
        Value: 54
        Documentation: ''
      - Name: TASK_DODGE_LEFT
        Value: 53
        Documentation: ''
      - Name: TASK_STEP_BACK
        Value: 52
        Documentation: ''
      - Name: TASK_STEP_FORWARD
        Value: 51
        Documentation: ''
      - Name: TASK_STEP_RIGHT
        Value: 50
        Documentation: ''
      - Name: TASK_STEP_LEFT
        Value: 49
        Documentation: ''
      - Name: TASK_GUARD
        Value: 48
        Documentation: ''
      - Name: TASK_STAND
        Value: 47
        Documentation: ''
      - Name: TASK_CROUCH
        Value: 46
        Documentation: ''
      - Name: TASK_SPECIAL_ATTACK2
        Value: 45
        Documentation: ''
      - Name: TASK_SPECIAL_ATTACK1
        Value: 44
        Documentation: ''
      - Name: TASK_RELOAD_NOTURN
        Value: 43
        Documentation: ''
      - Name: TASK_MELEE_ATTACK2_NOTURN
        Value: 42
        Documentation: ''
      - Name: TASK_MELEE_ATTACK1_NOTURN
        Value: 41
        Documentation: ''
      - Name: TASK_RANGE_ATTACK2_NOTURN
        Value: 40
        Documentation: ''
      - Name: TASK_RANGE_ATTACK1_NOTURN
        Value: 39
        Documentation: ''
      - Name: TASK_RELOAD
        Value: 38
        Documentation: ''
      - Name: TASK_MELEE_ATTACK2
        Value: 37
        Documentation: ''
      - Name: TASK_MELEE_ATTACK1
        Value: 36
        Documentation: ''
      - Name: TASK_RANGE_ATTACK2
        Value: 35
        Documentation: ''
      - Name: TASK_RANGE_ATTACK1
        Value: 34
        Documentation: ''
      - Name: TASK_FACE_LASTPOSITION
        Value: 33
        Documentation: ''
      - Name: TASK_FACE_TARGET
        Value: 32
        Documentation: ''
      - Name: TASK_FACE_HINTNODE
        Value: 31
        Documentation: ''
      - Name: TASK_FACE_ENEMY
        Value: 30
        Documentation: ''
      - Name: TASK_FACE_ROUTE
        Value: 29
        Documentation: ''
      - Name: TASK_FACE_IDEAL
        Value: 28
        Documentation: ''
      - Name: TASK_SMALL_FLINCH
        Value: 27
        Documentation: ''
      - Name: TASK_CLEAR_HINTNODE
        Value: 26
        Documentation: ''
      - Name: TASK_FIND_HINTNODE
        Value: 25
        Documentation: ''
      - Name: TASK_PLAY_ACTIVE_IDLE
        Value: 24
        Documentation: ''
      - Name: TASK_CLEAR_LASTPOSITION
        Value: 23
        Documentation: ''
      - Name: TASK_STORE_LASTPOSITION
        Value: 22
        Documentation: ''
      - Name: TASK_CLEAR_MOVE_WAIT
        Value: 21
        Documentation: ''
      - Name: TASK_STRAFE_PATH
        Value: 20
        Documentation: ''
      - Name: TASK_WALK_PATH
        Value: 19
        Documentation: ''
      - Name: TASK_RUN_PATH
        Value: 18
        Documentation: ''
      - Name: TASK_GET_PATH_TO_BESTSCENT
        Value: 17
        Documentation: ''
      - Name: TASK_GET_PATH_TO_BESTSOUND
        Value: 16
        Documentation: ''
      - Name: TASK_GET_PATH_TO_LASTPOSITION
        Value: 15
        Documentation: ''
      - Name: TASK_GET_PATH_TO_HINTNODE
        Value: 14
        Documentation: ''
      - Name: TASK_GET_PATH_TO_TARGET
        Value: 13
        Documentation: ''
      - Name: TASK_GET_PATH_TO_SPOT
        Value: 12
        Documentation: ''
      - Name: TASK_GET_PATH_TO_LEADER
        Value: 11
        Documentation: ''
      - Name: TASK_GET_PATH_TO_ENEMY_CORPSE
        Value: 10
        Documentation: ''
      - Name: TASK_GET_PATH_TO_ENEMY_LKP
        Value: 9
        Documentation: ''
      - Name: TASK_GET_PATH_TO_ENEMY
        Value: 8
        Documentation: ''
      - Name: TASK_MOVE_TO_TARGET_RANGE
        Value: 7
        Documentation: ''
      - Name: TASK_RUN_TO_TARGET
        Value: 6
        Documentation: ''
      - Name: TASK_WALK_TO_TARGET
        Value: 5
        Documentation: ''
      - Name: TASK_SUGGEST_STATE
        Value: 4
        Documentation: ''
      - Name: TASK_WAIT_PVS
        Value: 3
        Documentation: ''
      - Name: TASK_WAIT_FACE_ENEMY
        Value: 2
        Documentation: ''
      - Name: TASK_WAIT
        Value: 1
        Documentation: ''
      - Name: TASK_INVALID
        Value: 0
        Documentation: ''
  - Name: SCHEDULE_TYPE
    Namespace: ''
    Documentation: Schedule types for monster AI
    Values:
      - Name: LAST_COMMON_SCHEDULE
        Value: 57
        Documentation: ''
      - Name: SCHED_PATH_WAYPOINT
        Value: 56
        Documentation: ''
      - Name: SCHED_GUARD_POINT
        Value: 55
        Documentation: ''
      - Name: SCHED_TELEPORT_FALL
        Value: 54
        Documentation: ''
      - Name: SCHED_SMALL_FLINCH_SPECIAL
        Value: 53
        Documentation: ''
      - Name: SCHED_RANGE_ATTACK1_DEFAULT
        Value: 52
        Documentation: ''
      - Name: SCHED_LOSE_ENEMY
        Value: 51
        Documentation: ''
      - Name: SCHED_FIND_ATTACK_POINT
        Value: 50
        Documentation: ''
      - Name: SCHED_WAIT_AT_TANK
        Value: 49
        Documentation: ''
      - Name: SCHED_MOVE_TO_TANK
        Value: 48
        Documentation: ''
      - Name: SCHED_MOVE_AWAY_PLAYERFOLLOW
        Value: 47
        Documentation: ''
      - Name: SCHED_TARGET_PLAYERCHASE_FORCE
        Value: 46
        Documentation: ''
      - Name: SCHED_TARGET_PLAYERCHASE
        Value: 45
        Documentation: ''
      - Name: SCHED_TARGET_PLAYERFACE
        Value: 44
        Documentation: ''
      - Name: SCHED_FAIL
        Value: 43
        Documentation: ''
      - Name: SCHED_AISCRIPT
        Value: 42
        Documentation: ''
      - Name: SCHED_BARNACLE_VICTIM_CHOMP
        Value: 41
        Documentation: ''
      - Name: SCHED_BARNACLE_VICTIM_GRAB
        Value: 40
        Documentation: ''
      - Name: SCHED_WAKE
        Value: 39
        Documentation: ''
      - Name: SCHED_SLEEP
        Value: 38
        Documentation: ''
      - Name: SCHED_FOLLOW
        Value: 37
        Documentation: ''
      - Name: SCHED_WAIT_TILL_SEEN
        Value: 36
        Documentation: ''
      - Name: SCHED_WAIT_TRIGGER
        Value: 35
        Documentation: ''
      - Name: SCHED_DIE
        Value: 34
        Documentation: ''
      - Name: SCHED_AMBUSH
        Value: 33
        Documentation: ''
      - Name: SCHED_GUARD
        Value: 32
        Documentation: ''
      - Name: SCHED_RELOAD
        Value: 31
        Documentation: ''
      - Name: SCHED_ARM_WEAPON
        Value: 30
        Documentation: ''
      - Name: SCHED_STANDOFF
        Value: 29
        Documentation: ''
      - Name: SCHED_SPECIAL_ATTACK2
        Value: 28
        Documentation: ''
      - Name: SCHED_SPECIAL_ATTACK1
        Value: 27
        Documentation: ''
      - Name: SCHED_RANGE_ATTACK2
        Value: 26
        Documentation: ''
      - Name: SCHED_RANGE_ATTACK1
        Value: 25
        Documentation: ''
      - Name: SCHED_MELEE_ATTACK2
        Value: 24
        Documentation: ''
      - Name: SCHED_MELEE_ATTACK1
        Value: 23
        Documentation: ''
      - Name: SCHED_COWER
        Value: 22
        Documentation: ''
      - Name: SCHED_TAKE_COVER_FROM_ORIGIN
        Value: 21
        Documentation: ''
      - Name: SCHED_TAKE_COVER_FROM_BEST_SOUND
        Value: 20
        Documentation: ''
      - Name: SCHED_TAKE_COVER_FROM_ENEMY
        Value: 19
        Documentation: ''
      - Name: SCHED_SMALL_FLINCH
        Value: 18
        Documentation: ''
      - Name: SCHED_TARGET_CHASE
        Value: 17
        Documentation: ''
      - Name: SCHED_TARGET_FACE
        Value: 16
        Documentation: ''
      - Name: SCHED_VICTORY_DANCE
        Value: 15
        Documentation: ''
      - Name: SCHED_CHASE_ENEMY_FAILED
        Value: 14
        Documentation: ''
      - Name: SCHED_CHASE_ENEMY
        Value: 13
        Documentation: ''
      - Name: SCHED_COMBAT_STAND
        Value: 12
        Documentation: ''
      - Name: SCHED_COMBAT_FACE
        Value: 11
        Documentation: ''
      - Name: SCHED_INVESTIGATE_COMBAT
        Value: 10
        Documentation: ''
      - Name: SCHED_INVESTIGATE_SOUND
        Value: 9
        Documentation: ''
      - Name: SCHED_ALERT_STAND
        Value: 8
        Documentation: ''
      - Name: SCHED_ALERT_BIG_FLINCH
        Value: 7
        Documentation: ''
      - Name: SCHED_ALERT_SMALL_FLINCH
        Value: 6
        Documentation: ''
      - Name: SCHED_ALERT_FACE
        Value: 5
        Documentation: ''
      - Name: SCHED_WAKE_CALLED
        Value: 4
        Documentation: ''
      - Name: SCHED_WAKE_ANGRY
        Value: 3
        Documentation: ''
      - Name: SCHED_IDLE_WALK
        Value: 2
        Documentation: ''
      - Name: SCHED_IDLE_STAND
        Value: 1
        Documentation: ''
      - Name: SCHED_NONE
        Value: 0
        Documentation: ''
  - Name: AITRIGGER
    Namespace: ''
    Documentation: trigger conditions for scripted AI
    Values:
      - Name: AITRIGGER_SEEPLAYER_NOT_IN_COMBAT
        Value: 11
        Documentation: See Player, Not In Combat
      - Name: AITRIGGER_SEEPLAYER_UNCONDITIONAL
        Value: 10
        Documentation: See Player Unconditional
      - Name: AITRIGGER_HEARCOMBAT
        Value: 9
        Documentation: Hear Combat
      - Name: AITRIGGER_HEARPLAYER
        Value: 8
        Documentation: Hear Player
      - Name: AITRIGGER_HEARWORLD
        Value: 7
        Documentation: Hear World
      - Name: AITRIGGER_SQUADLEADERDIE
        Value: 6
        Documentation: Squad Leader Dead
      - Name: AITRIGGER_SQUADMEMBERDIE
        Value: 5
        Documentation: Squad Member Dead
      - Name: AITRIGGER_DEATH
        Value: 4
        Documentation: Death
      - Name: AITRIGGER_HALFHEALTH
        Value: 3
        Documentation: 50% Health Remaining
      - Name: AITRIGGER_TAKEDAMAGE
        Value: 2
        Documentation: Take Damage
      - Name: AITRIGGER_SEEPLAYER_ANGRY_AT_PLAYER
        Value: 1
        Documentation: See Player
      - Name: AITRIGGER_NONE
        Value: 0
        Documentation: No Trigger
  - Name: MonsterMemory
    Namespace: ''
    Documentation: these bits represent the monster's memory
    Values:
      - Name: bits_MEMORY_CUSTOM1
        Value: -2147483648
        Documentation: Monster-specific memory
      - Name: bits_MEMORY_CUSTOM2
        Value: 1073741824
        Documentation: Monster-specific memory
      - Name: bits_MEMORY_CUSTOM3
        Value: 536870912
        Documentation: Monster-specific memory
      - Name: bits_MEMORY_CUSTOM4
        Value: 268435456
        Documentation: Monster-specific memory
      - Name: bits_MEMORY_MOVE_RADIUS_ONLY
        Value: 256
        Documentation: Can only get there within radius
      - Name: bits_MEMORY_KILLED
        Value: 128
        Documentation: HACKHACK -- remember that I've already called my Killed()
      - Name: bits_MEMORY_FLINCHED
        Value: 64
        Documentation: Has already flinched
      - Name: bits_MEMORY_MOVE_FAILED
        Value: 32
        Documentation: Movement has already failed
      - Name: bits_MEMORY_ON_PATH
        Value: 16
        Documentation: Moving on a path
      - Name: bits_MEMORY_PATH_FINISHED
        Value: 8
        Documentation: Finished monster path (just used by big momma for now)
      - Name: bits_MEMORY_SUSPICIOUS
        Value: 4
        Documentation: >-
          Ally is suspicious of the player, and will move to provoked more
          easily
      - Name: bits_MEMORY_INCOVER
        Value: 2
        Documentation: monster knows it is in a covered position.
      - Name: bits_MEMORY_PROVOKED
        Value: 1
        Documentation: right now only used for houndeyes.
      - Name: MEMORY_CLEAR
        Value: 0
        Documentation: No memory.
  - Name: CDMG
    Namespace: ''
    Documentation: Damage over time types.
    Values:
      - Name: CDMG_TIMEBASED
        Value: 8
        Documentation: Number of damage over time types
      - Name: itbd_SlowFreeze
        Value: 7
        Documentation: ''
      - Name: itbd_SlowBurn
        Value: 6
        Documentation: ''
      - Name: itbd_Acid
        Value: 5
        Documentation: ''
      - Name: itbd_DrownRecover
        Value: 4
        Documentation: ''
      - Name: itbd_Radiation
        Value: 3
        Documentation: ''
      - Name: itbd_Poison
        Value: 2
        Documentation: ''
      - Name: itbd_NerveGas
        Value: 1
        Documentation: ''
      - Name: itbd_Paralyze
        Value: 0
        Documentation: ''
  - Name: MonsterCondition
    Namespace: ''
    Documentation: >-
      these bits represent conditions that may befall the monster, of which some
      are allowed

      to interrupt certain schedules. 
    Values:
      - Name: bits_COND_CAN_ATTACK
        Value: 15360
        Documentation: ''
      - Name: bits_COND_ALL_SPECIAL
        Value: 805306368
        Documentation: ''
      - Name: bits_COND_CAN_USE_TANK
        Value: 16384
        Documentation: This monster can use a func_tank now
      - Name: bits_COND_SCHEDULE_DONE
        Value: -2147483648
        Documentation: ''
      - Name: bits_COND_TASK_FAILED
        Value: 1073741824
        Documentation: ''
      - Name: bits_COND_SPECIAL2
        Value: 536870912
        Documentation: Defined by individual monster
      - Name: bits_COND_SPECIAL1
        Value: 268435456
        Documentation: Defined by individual monster
      - Name: bits_COND_CAN_MELEE_ATTACK2_MOVING
        Value: 67108864
        Documentation: ''
      - Name: bits_COND_CAN_RANGE_ATTACK2_MOVING
        Value: 33554432
        Documentation: ''
      - Name: bits_COND_CAN_MELEE_ATTACK1_MOVING
        Value: 16777216
        Documentation: ''
      - Name: bits_COND_CAN_RANGE_ATTACK1_MOVING
        Value: 8388608
        Documentation: ''
      - Name: bits_COND_SEE_NEMESIS
        Value: 4194304
        Documentation: see my nemesis
      - Name: bits_COND_SEE_CLIENT
        Value: 2097152
        Documentation: see a client
      - Name: bits_COND_ENEMY_DEAD
        Value: 1048576
        Documentation: >-
          enemy was killed. If you get this in combat, try to find another
          enemy. If you get it in alert, victory dance.
      - Name: bits_COND_ENEMY_FACING_ME
        Value: 524288
        Documentation: enemy is facing me
      - Name: bits_COND_SMELL
        Value: 262144
        Documentation: there is an interesting scent
      - Name: bits_COND_HEAR_SOUND
        Value: 131072
        Documentation: there is an interesting sound
      - Name: bits_COND_NEW_ENEMY
        Value: 65536
        Documentation: ''
      - Name: bits_COND_PROVOKED
        Value: 32768
        Documentation: ''
      - Name: bits_COND_CAN_MELEE_ATTACK2
        Value: 8192
        Documentation: ''
      - Name: bits_COND_CAN_RANGE_ATTACK2
        Value: 4096
        Documentation: ''
      - Name: bits_COND_CAN_MELEE_ATTACK1
        Value: 2048
        Documentation: ''
      - Name: bits_COND_CAN_RANGE_ATTACK1
        Value: 1024
        Documentation: ''
      - Name: bits_COND_HEAVY_DAMAGE
        Value: 512
        Documentation: hurt a lot
      - Name: bits_COND_LIGHT_DAMAGE
        Value: 256
        Documentation: hurt a little
      - Name: bits_COND_ENEMY_TOOFAR
        Value: 128
        Documentation: ''
      - Name: bits_COND_SMELL_FOOD
        Value: 64
        Documentation: ''
      - Name: bits_COND_ENEMY_OCCLUDED
        Value: 32
        Documentation: target entity occluded by the world
      - Name: bits_COND_SEE_ENEMY
        Value: 16
        Documentation: target entity is in full view.
      - Name: bits_COND_SEE_DISLIKE
        Value: 8
        Documentation: see something that you dislike
      - Name: bits_COND_SEE_FEAR
        Value: 4
        Documentation: see something that you are afraid of
      - Name: bits_COND_SEE_HATE
        Value: 2
        Documentation: see something that you hate
      - Name: bits_COND_NO_AMMO_LOADED
        Value: 1
        Documentation: weapon needs to be reloaded!
  - Name: MoveFlag
    Namespace: ''
    Documentation: >-
      these MoveFlag values are assigned to a WayPoint's TYPE in order to
      demonstrate the

      type of movement the monster should use to get there.
    Values:
      - Name: bits_MF_TO_ELEVATOR
        Value: 2048
        Documentation: Elevator
      - Name: bits_MF_TO_LADDER
        Value: 1024
        Documentation: Ladder...
      - Name: bits_MF_TO_JUMP
        Value: 512
        Documentation: Jumping...
      - Name: bits_MF_DONT_SIMPLIFY
        Value: 256
        Documentation: Don't let the route code simplify this waypoint
      - Name: bits_MF_IS_GOAL
        Value: 128
        Documentation: this waypoint is the goal of the whole move.
      - Name: bits_MF_TO_LOCATION
        Value: 64
        Documentation: local move to an arbitrary point
      - Name: bits_MF_TO_NODE
        Value: 32
        Documentation: local move to a node
      - Name: bits_MF_TO_PATHCORNER
        Value: 16
        Documentation: local move to a path corner
      - Name: bits_MF_TO_DETOUR
        Value: 8
        Documentation: local move to detour point.
      - Name: bits_MF_TO_COVER
        Value: 4
        Documentation: local move to a hiding place
      - Name: bits_MF_TO_ENEMY
        Value: 2
        Documentation: local move to enemy
      - Name: bits_MF_TO_TARGETENT
        Value: 1
        Documentation: local move to targetent.
  - Name: TaskData
    Namespace: ''
    Documentation: These go in the flData member of TASK_WALK_TO_TARGET, TASK_RUN_TO_TARGET
    Values:
      - Name: TARGET_MOVE_SCRIPTED
        Value: 1
        Documentation: Move scripted
      - Name: TARGET_MOVE_NORMAL
        Value: 0
        Documentation: Move normally
  - Name: MONSTERSTATE
    Namespace: ''
    Documentation: Current state of a monster
    Values:
      - Name: MONSTERSTATE_DEAD
        Value: 8
        Documentation: ''
      - Name: MONSTERSTATE_PLAYDEAD
        Value: 7
        Documentation: ''
      - Name: MONSTERSTATE_SCRIPT
        Value: 6
        Documentation: ''
      - Name: MONSTERSTATE_PRONE
        Value: 5
        Documentation: ''
      - Name: MONSTERSTATE_HUNT
        Value: 4
        Documentation: ''
      - Name: MONSTERSTATE_ALERT
        Value: 3
        Documentation: ''
      - Name: MONSTERSTATE_COMBAT
        Value: 2
        Documentation: ''
      - Name: MONSTERSTATE_IDLE
        Value: 1
        Documentation: ''
      - Name: MONSTERSTATE_NONE
        Value: 0
        Documentation: ''
  - Name: Activity
    Namespace: ''
    Documentation: Activity currently being played by a monster
    Values:
      - Name: ACT_FLINCH_RIGHTLEG
        Value: 76
        Documentation: ''
      - Name: ACT_FLINCH_LEFTLEG
        Value: 75
        Documentation: ''
      - Name: ACT_FLINCH_RIGHTARM
        Value: 74
        Documentation: ''
      - Name: ACT_FLINCH_LEFTARM
        Value: 73
        Documentation: ''
      - Name: ACT_FLINCH_STOMACH
        Value: 72
        Documentation: ''
      - Name: ACT_FLINCH_CHEST
        Value: 71
        Documentation: ''
      - Name: ACT_FLINCH_HEAD
        Value: 70
        Documentation: ''
      - Name: ACT_DIE_BACKSHOT
        Value: 69
        Documentation: die, hit in back
      - Name: ACT_DIE_GUTSHOT
        Value: 68
        Documentation: die, hit in gut
      - Name: ACT_DIE_CHESTSHOT
        Value: 67
        Documentation: die, hit in chest
      - Name: ACT_DIE_HEADSHOT
        Value: 66
        Documentation: 'die, hit in head. '
      - Name: ACT_VICTORY_DANCE
        Value: 65
        Documentation: killed a player, do a victory dance.
      - Name: ACT_RUN_SCARED
        Value: 64
        Documentation: ''
      - Name: ACT_WALK_SCARED
        Value: 63
        Documentation: ''
      - Name: ACT_COMBAT_IDLE
        Value: 62
        Documentation: agitated idle.
      - Name: ACT_SPECIAL_ATTACK2
        Value: 61
        Documentation: ''
      - Name: ACT_SPECIAL_ATTACK1
        Value: 60
        Documentation: very monster specific special attacks.
      - Name: ACT_EXCITED
        Value: 59
        Documentation: >-
          for some reason, monster is excited. Sees something he really likes to
          eat, or whatever.
      - Name: ACT_FEAR_DISPLAY
        Value: 58
        Documentation: monster just saw something that it is afraid of
      - Name: ACT_THREAT_DISPLAY
        Value: 57
        Documentation: >-
          without attacking, monster demonstrates that it is angry. (Yell, stick
          out chest, etc )
      - Name: ACT_BITE
        Value: 56
        Documentation: >-
          some large monsters can eat small things in one bite. This plays one
          time, EAT loops.
      - Name: ACT_SNIFF
        Value: 55
        Documentation: this is the act of actually sniffing an item in front of the monster
      - Name: ACT_DETECT_SCENT
        Value: 54
        Documentation: this means the monster smells a scent carried by the air
      - Name: ACT_FLY_RIGHT
        Value: 53
        Documentation: Turn right in flight
      - Name: ACT_FLY_LEFT
        Value: 52
        Documentation: Turn left in flight
      - Name: ACT_GLIDE
        Value: 51
        Documentation: Fly (don't flap)
      - Name: ACT_HOVER
        Value: 50
        Documentation: Idle while in flight
      - Name: ACT_RUN_HURT
        Value: 49
        Documentation: limp  (loop)
      - Name: ACT_WALK_HURT
        Value: 48
        Documentation: limp  (loop)
      - Name: ACT_IDLE_ANGRY
        Value: 47
        Documentation: >-
          alternate idle animation in which the monster is clearly agitated.
          (loop)
      - Name: ACT_INSPECT_WALL
        Value: 46
        Documentation: >-
          for active idles, look at something directly ahead of you ( doesn't
          HAVE to be a wall or on a wall )
      - Name: ACT_INSPECT_FLOOR
        Value: 45
        Documentation: for active idles, look at something on or near the floor
      - Name: ACT_SLEEP
        Value: 44
        Documentation: ''
      - Name: ACT_BARNACLE_CHEW
        Value: 43
        Documentation: barnacle is holding the monster in its mouth ( loop )
      - Name: ACT_BARNACLE_CHOMP
        Value: 42
        Documentation: barnacle latches on to the monster
      - Name: ACT_BARNACLE_PULL
        Value: 41
        Documentation: barnacle is lifting the monster ( loop )
      - Name: ACT_BARNACLE_HIT
        Value: 40
        Documentation: barnacle tongue hits a monster
      - Name: ACT_DIEVIOLENT
        Value: 39
        Documentation: ''
      - Name: ACT_DIEFORWARD
        Value: 38
        Documentation: ''
      - Name: ACT_DIEBACKWARD
        Value: 37
        Documentation: ''
      - Name: ACT_DIESIMPLE
        Value: 36
        Documentation: ''
      - Name: ACT_EAT
        Value: 35
        Documentation: monster chowing on a large food item (loop)
      - Name: ACT_DISARM
        Value: 34
        Documentation: reholster gun
      - Name: ACT_ARM
        Value: 33
        Documentation: pull out gun, for instance
      - Name: ACT_RELOAD
        Value: 32
        Documentation: ''
      - Name: ACT_MELEE_ATTACK2
        Value: 31
        Documentation: ''
      - Name: ACT_MELEE_ATTACK1
        Value: 30
        Documentation: ''
      - Name: ACT_RANGE_ATTACK2
        Value: 29
        Documentation: ''
      - Name: ACT_RANGE_ATTACK1
        Value: 28
        Documentation: ''
      - Name: ACT_BIG_FLINCH
        Value: 27
        Documentation: ''
      - Name: ACT_SMALL_FLINCH
        Value: 26
        Documentation: ''
      - Name: ACT_COWER
        Value: 25
        Documentation: ''
      - Name: ACT_TWITCH
        Value: 24
        Documentation: ''
      - Name: ACT_SIGNAL3
        Value: 23
        Documentation: ''
      - Name: ACT_SIGNAL2
        Value: 22
        Documentation: ''
      - Name: ACT_SIGNAL1
        Value: 21
        Documentation: ''
      - Name: ACT_USE
        Value: 20
        Documentation: ''
      - Name: ACT_STAND
        Value: 19
        Documentation: the act of standing from a crouched position
      - Name: ACT_CROUCHIDLE
        Value: 18
        Documentation: holding body in crouched position (loops)
      - Name: ACT_CROUCH
        Value: 17
        Documentation: the act of crouching down from a standing position
      - Name: ACT_TURN_RIGHT
        Value: 16
        Documentation: turn quickly right (stationary)
      - Name: ACT_TURN_LEFT
        Value: 15
        Documentation: turn quickly left (stationary)
      - Name: ACT_ROLL_RIGHT
        Value: 14
        Documentation: tuck and roll, right
      - Name: ACT_ROLL_LEFT
        Value: 13
        Documentation: tuck and roll, left
      - Name: ACT_STRAFE_RIGHT
        Value: 12
        Documentation: ''
      - Name: ACT_STRAFE_LEFT
        Value: 11
        Documentation: ''
      - Name: ACT_LAND
        Value: 10
        Documentation: ''
      - Name: ACT_FALL
        Value: 9
        Documentation: ''
      - Name: ACT_LEAP
        Value: 8
        Documentation: long forward jump
      - Name: ACT_HOP
        Value: 7
        Documentation: vertical jump
      - Name: ACT_SWIM
        Value: 6
        Documentation: ''
      - Name: ACT_FLY
        Value: 5
        Documentation: Fly (and flap if appropriate)
      - Name: ACT_RUN
        Value: 4
        Documentation: ''
      - Name: ACT_WALK
        Value: 3
        Documentation: ''
      - Name: ACT_GUARD
        Value: 2
        Documentation: ''
      - Name: ACT_IDLE
        Value: 1
        Documentation: ''
      - Name: ACT_RESET
        Value: 0
        Documentation: >-
          Set m_Activity to this invalid value to force a reset to
          m_IdealActivity
  - Name: SCRIPTSTATE
    Namespace: ''
    Documentation: The state of a monster's script.
    Values:
      - Name: SCRIPT_RUN_TO_MARK
        Value: 4
        Documentation: Run to mark
      - Name: SCRIPT_WALK_TO_MARK
        Value: 3
        Documentation: Walk to mark
      - Name: SCRIPT_CLEANUP
        Value: 2
        Documentation: Cancelling the script / cleaning up
      - Name: SCRIPT_WAIT
        Value: 1
        Documentation: Waiting on everyone in the script to be ready
      - Name: SCRIPT_PLAYING
        Value: 0
        Documentation: Playing the sequence
  - Name: EFLAG
    Namespace: ''
    Documentation: Entity mask constants
    Values:
      - Name: EFLAG_IGNOREGRAVITY
        Value: 4
        Documentation: Entity ignores trigger_gravity
      - Name: EFLAG_PROJECTILE
        Value: 2
        Documentation: Entity don't collide with friendly monsters/players
  - Name: CollectTypes
    Namespace: ''
    Documentation: How an item was collected.
    Values:
      - Name: COLLECT_USE_INDIRECT
        Value: 2
        Documentation: Used indirectly (trigger/etc)
      - Name: COLLECT_USE_DIRECT
        Value: 1
        Documentation: Used directly (+use)
      - Name: COLLECT_TOUCH
        Value: 0
        Documentation: Touched
  - Name: DropTypes
    Namespace: ''
    Documentation: How an item was dropped.
    Values:
      - Name: DROP_NPC_DEATH
        Value: 3
        Documentation: By an NPC killed.
      - Name: DROP_PLAYER_DEATH
        Value: 2
        Documentation: By a player killed.
      - Name: DROP_PLAYER_CMD
        Value: 1
        Documentation: By a player via drop/dropammo/dropsecammo command.
      - Name: DROP_DEFAULT
        Value: 0
        Documentation: Default/unspecified.
  - Name: Materials
    Namespace: ''
    Documentation: Material types supported by breakables
    Values:
      - Name: matLastMaterial
        Value: 10
        Documentation: ''
      - Name: matNone
        Value: 9
        Documentation: ''
      - Name: matRocks
        Value: 8
        Documentation: ''
      - Name: matUnbreakableGlass
        Value: 7
        Documentation: ''
      - Name: matComputer
        Value: 6
        Documentation: ''
      - Name: matCeilingTile
        Value: 5
        Documentation: ''
      - Name: matCinderBlock
        Value: 4
        Documentation: ''
      - Name: matFlesh
        Value: 3
        Documentation: ''
      - Name: matMetal
        Value: 2
        Documentation: ''
      - Name: matWood
        Value: 1
        Documentation: ''
      - Name: matGlass
        Value: 0
        Documentation: ''
  - Name: AddPlayerItemResult
    Namespace: ''
    Documentation: Return values for CBaseEntity::AddPlayerItem
    Values:
      - Name: APIR_Added
        Value: 3
        Documentation: Player picked up this item
      - Name: APIR_DuplicateAdd
        Value: 2
        Documentation: Player was able to add it as duplicate
      - Name: APIR_NotAdded
        Value: 0
        Documentation: Player could not pick up this item
  - Name: Bullet
    Namespace: ''
    Documentation: bullet types
    Values:
      - Name: DECAL_SCORCH_MARK
        Value: 17
        Documentation: ''
      - Name: BULLET_MONSTER_BUCKSHOT
        Value: 16
        Documentation: Monster shotgun
      - Name: BULLET_MONSTER_SNIPER
        Value: 15
        Documentation: ''
      - Name: BULLET_MONSTER_EAGLE
        Value: 14
        Documentation: ''
      - Name: BULLET_MONSTER_12MM
        Value: 13
        Documentation: ''
      - Name: BULLET_MONSTER_SAW
        Value: 12
        Documentation: ''
      - Name: BULLET_MONSTER_MP5
        Value: 11
        Documentation: ''
      - Name: BULLET_MONSTER_9MM
        Value: 10
        Documentation: ''
      - Name: BULLET_PLAYER_CUSTOMDAMAGE
        Value: 9
        Documentation: normal bullet with custom damage
      - Name: BULLET_PLAYER_CROWBAR
        Value: 8
        Documentation: ''
      - Name: BULLET_PLAYER_BUCKSHOT
        Value: 7
        Documentation: Shotgun
      - Name: BULLET_PLAYER_EAGLE
        Value: 6
        Documentation: Desert eagle
      - Name: BULLET_PLAYER_357
        Value: 5
        Documentation: Python
      - Name: BULLET_PLAYER_SNIPER
        Value: 4
        Documentation: ''
      - Name: BULLET_PLAYER_SAW
        Value: 3
        Documentation: ''
      - Name: BULLET_PLAYER_MP5
        Value: 2
        Documentation: mp5
      - Name: BULLET_PLAYER_9MM
        Value: 1
        Documentation: Glock
      - Name: BULLET_NONE
        Value: 0
        Documentation: ''
  - Name: CommonEntityFlags
    Namespace: ''
    Documentation: Common entity flags used by various entities.
    Values:
      - Name: SF_NODEFAULTAMMO
        Value: 32768
        Documentation: >-
          Don't allow default ammo to be set. Prevents players from getting too
          much ammo from cross map inventory
      - Name: SF_GIVENITEM
        Value: 16384
        Documentation: This item is being given to the player -- can't fall out of map
      - Name: SF_DODAMAGE
        Value: 8192
        Documentation: >-
          This flag indicates that a player thrown weapon should deal damage to
          things it hits
      - Name: SF_CREATEDWEAPON
        Value: 4096
        Documentation: |-
          This flag indicates that this entity is a weapon created for players,
          as opposed to being created by being placed by a mapper
      - Name: SF_DELAYREMOVE
        Value: 2048
        Documentation: A weapon will be removed from the map after 60sec
      - Name: SF_NORESPAWN
        Value: 1024
        Documentation: Set this bit on guns and stuff that should never respawn.
  - Name: FireBulletsDrawMode
    Namespace: ''
    Documentation: FireBullets draw mode options
    Values:
      - Name: FBDM_DRAW
        Value: 2
        Documentation: Draw impact decal
      - Name: FBDM_DONTDRAW
        Value: 0
        Documentation: Don't draw impact decal
  - Name: RenderFX
    Namespace: ''
    Documentation: Render FX modes (entvars_t::renderfx)
    Values:
      - Name: kRenderFxClampMinScale
        Value: 20
        Documentation: Keep this sprite from getting very small (SPRITES only!)
      - Name: kRenderFxGlowShell
        Value: 19
        Documentation: Glowing Shell
      - Name: kRenderFxExplode
        Value: 18
        Documentation: Scale up really big!
      - Name: kRenderFxDeadPlayer
        Value: 17
        Documentation: kRenderAmt is the player index
      - Name: kRenderFxHologram
        Value: 16
        Documentation: kRenderFxDistort + distance fade
      - Name: kRenderFxDistort
        Value: 15
        Documentation: Distort/scale/translate flicker
      - Name: kRenderFxNoDissipation
        Value: 14
        Documentation: ''
      - Name: kRenderFxFlickerFast
        Value: 13
        Documentation: ''
      - Name: kRenderFxFlickerSlow
        Value: 12
        Documentation: ''
      - Name: kRenderFxStrobeFaster
        Value: 11
        Documentation: ''
      - Name: kRenderFxStrobeFast
        Value: 10
        Documentation: ''
      - Name: kRenderFxStrobeSlow
        Value: 9
        Documentation: ''
      - Name: kRenderFxSolidFast
        Value: 8
        Documentation: ''
      - Name: kRenderFxSolidSlow
        Value: 7
        Documentation: ''
      - Name: kRenderFxFadeFast
        Value: 6
        Documentation: ''
      - Name: kRenderFxFadeSlow
        Value: 5
        Documentation: ''
      - Name: kRenderFxPulseFastWide
        Value: 4
        Documentation: ''
      - Name: kRenderFxPulseSlowWide
        Value: 3
        Documentation: ''
      - Name: kRenderFxPulseFast
        Value: 2
        Documentation: ''
      - Name: kRenderFxPulseSlow
        Value: 1
        Documentation: ''
      - Name: kRenderFxNone
        Value: 0
        Documentation: ''
  - Name: RenderModes
    Namespace: ''
    Documentation: Render modes used by entities (entvars_t::rendermode)
    Values:
      - Name: kRenderTransAdd
        Value: 5
        Documentation: src*a+dest
      - Name: kRenderTransAlpha
        Value: 4
        Documentation: src*srca+dest*(1-srca)
      - Name: kRenderGlow
        Value: 3
        Documentation: src*a+dest -- No Z buffer checks
      - Name: kRenderTransTexture
        Value: 2
        Documentation: src*a+dest*(1-a)
      - Name: kRenderTransColor
        Value: 1
        Documentation: c*a+dest*(1-a)
      - Name: kRenderNormal
        Value: 0
        Documentation: src
  - Name: TE_BOUNCE
    Namespace: ''
    Documentation: Temp entity bounce sound types
    Values:
      - Name: TE_BOUNCE_SHOTSHELL
        Value: 2
        Documentation: ''
      - Name: TE_BOUNCE_SHELL
        Value: 1
        Documentation: ''
      - Name: TE_BOUNCE_NULL
        Value: 0
        Documentation: ''
  - Name: BREAK
    Namespace: ''
    Documentation: Break model defines for message SVC_TEMPENTITY::TE_BREAKMODEL
    Values:
      - Name: BREAK_2
        Value: 128
        Documentation: Not used
      - Name: BREAK_CONCRETE
        Value: 64
        Documentation: ''
      - Name: BREAK_TRANS
        Value: 32
        Documentation: Model is transparent
      - Name: BREAK_SMOKE
        Value: 16
        Documentation: Adds a smoke trail
      - Name: BREAK_WOOD
        Value: 8
        Documentation: ''
      - Name: BREAK_FLESH
        Value: 4
        Documentation: ''
      - Name: BREAK_METAL
        Value: 2
        Documentation: ''
      - Name: BREAK_GLASS
        Value: 1
        Documentation: ''
      - Name: BREAK_TYPEMASK
        Value: 79
        Documentation: Bit mask for all BREAK types.
  - Name: TextureType
    Namespace: ''
    Documentation: Texture types used by the game.
    Values:
      - Name: CHAR_TEX_SNOW
        Value: '''O'''
        Documentation: Snow
      - Name: CHAR_TEX_FLESH
        Value: '''F'''
        Documentation: Flesh
      - Name: CHAR_TEX_GLASS
        Value: '''Y'''
        Documentation: Glass
      - Name: CHAR_TEX_COMPUTER
        Value: '''P'''
        Documentation: Computer
      - Name: CHAR_TEX_WOOD
        Value: '''W'''
        Documentation: Wood
      - Name: CHAR_TEX_SLOSH
        Value: '''S'''
        Documentation: Slosh
      - Name: CHAR_TEX_TILE
        Value: '''T'''
        Documentation: Tile
      - Name: CHAR_TEX_GRATE
        Value: '''G'''
        Documentation: Grate
      - Name: CHAR_TEX_VENT
        Value: '''V'''
        Documentation: Vent
      - Name: CHAR_TEX_DIRT
        Value: '''D'''
        Documentation: Dirt
      - Name: CHAR_TEX_METAL
        Value: '''M'''
        Documentation: Metal
      - Name: CHAR_TEX_CONCRETE
        Value: '''C'''
        Documentation: Concrete (Default)
  - Name: GIB
    Namespace: ''
    Documentation: >-
      when calling Killed(), a value that governs gib behavior is expected to be
      one of these three values
    Values:
      - Name: GIB_NOPENALTY
        Value: 3
        Documentation: No penalty applied to players that died
      - Name: GIB_ALWAYS
        Value: 2
        Documentation: always gib ( Houndeye Shock, Barnacle Bite )
      - Name: GIB_NEVER
        Value: 1
        Documentation: never gib, no matter how much death damage is done ( freezing, etc )
      - Name: GIB_NORMAL
        Value: 0
        Documentation: gib if entity was overkilled
  - Name: decal_e
    Namespace: ''
    Documentation: Dynamic decals used by code to place decals like scorch marks in the world
    Values:
      - Name: DECAL_SPORESPLAT3
        Value: 47
        Documentation: Spore splat 3
      - Name: DECAL_SPORESPLAT2
        Value: 46
        Documentation: Spore splat 2
      - Name: DECAL_SPORESPLAT1
        Value: 45
        Documentation: Spore splat 1
      - Name: DECAL_OFSCORCH3
        Value: 44
        Documentation: Opposing force scorch 3
      - Name: DECAL_OFSCORCH2
        Value: 43
        Documentation: Opposing force scorch 2
      - Name: DECAL_OFSCORCH1
        Value: 42
        Documentation: Opposing force scorch 1
      - Name: DECAL_MOMMASPLAT
        Value: 41
        Documentation: Big momma splat
      - Name: DECAL_MOMMABIRTH
        Value: 40
        Documentation: Big momma birth splatter
      - Name: DECAL_SMALLSCORCH3
        Value: 39
        Documentation: Small scorch 3
      - Name: DECAL_SMALLSCORCH2
        Value: 38
        Documentation: Small scorch 2
      - Name: DECAL_SMALLSCORCH1
        Value: 37
        Documentation: Small scorch 1
      - Name: DECAL_GARGSTOMP1
        Value: 36
        Documentation: gargantua stomp crack
      - Name: DECAL_BPROOF1
        Value: 35
        Documentation: Bulletproof glass decal
      - Name: DECAL_SPIT2
        Value: 34
        Documentation: Spit 2
      - Name: DECAL_SPIT1
        Value: 33
        Documentation: Spit 1
      - Name: DECAL_BIGSHOT5
        Value: 32
        Documentation: Big shot 5
      - Name: DECAL_BIGSHOT4
        Value: 31
        Documentation: Big shot 4
      - Name: DECAL_BIGSHOT3
        Value: 30
        Documentation: Big shot 3
      - Name: DECAL_BIGSHOT2
        Value: 29
        Documentation: Big shot 2
      - Name: DECAL_BIGSHOT1
        Value: 28
        Documentation: Big shot 1
      - Name: DECAL_GLASSBREAK3
        Value: 27
        Documentation: Glass break 3
      - Name: DECAL_GLASSBREAK2
        Value: 26
        Documentation: Glass break 2
      - Name: DECAL_GLASSBREAK1
        Value: 25
        Documentation: Glass break 1
      - Name: DECAL_YBLOOD6
        Value: 24
        Documentation: Yellow blood 6
      - Name: DECAL_YBLOOD5
        Value: 23
        Documentation: Yellow blood 5
      - Name: DECAL_YBLOOD4
        Value: 22
        Documentation: Yellow blood 4
      - Name: DECAL_YBLOOD3
        Value: 21
        Documentation: Yellow blood 3
      - Name: DECAL_YBLOOD2
        Value: 20
        Documentation: Yellow blood 2
      - Name: DECAL_YBLOOD1
        Value: 19
        Documentation: Yellow blood 1
      - Name: DECAL_BLOOD6
        Value: 18
        Documentation: (Red) Blood 6
      - Name: DECAL_BLOOD5
        Value: 17
        Documentation: (Red) Blood 5
      - Name: DECAL_BLOOD4
        Value: 16
        Documentation: (Red) Blood 4
      - Name: DECAL_BLOOD3
        Value: 15
        Documentation: (Red) Blood 3
      - Name: DECAL_BLOOD2
        Value: 14
        Documentation: (Red) Blood 2
      - Name: DECAL_BLOOD1
        Value: 13
        Documentation: (Red) Blood 1
      - Name: DECAL_SCORCH2
        Value: 12
        Documentation: Scorch 1
      - Name: DECAL_SCORCH1
        Value: 11
        Documentation: Scorch 1
      - Name: DECAL_LAMBDA6
        Value: 10
        Documentation: Lambda 6
      - Name: DECAL_LAMBDA5
        Value: 9
        Documentation: Lambda 5
      - Name: DECAL_LAMBDA4
        Value: 8
        Documentation: Lambda 4
      - Name: DECAL_LAMBDA3
        Value: 7
        Documentation: Lambda 3
      - Name: DECAL_LAMBDA2
        Value: 6
        Documentation: Lambda 2
      - Name: DECAL_LAMBDA1
        Value: 5
        Documentation: Lambda 1
      - Name: DECAL_GUNSHOT5
        Value: 4
        Documentation: Gunshot 5
      - Name: DECAL_GUNSHOT4
        Value: 3
        Documentation: Gunshot 4
      - Name: DECAL_GUNSHOT3
        Value: 2
        Documentation: Gunshot 3
      - Name: DECAL_GUNSHOT2
        Value: 1
        Documentation: Gunshot 2
      - Name: DECAL_GUNSHOT1
        Value: 0
        Documentation: Gunshot 1
  - Name: BLOOD_COLOR
    Namespace: ''
    Documentation: Blood color
    Values:
      - Name: BLOOD_COLOR_GREEN
        Value: 195
        Documentation: Green blood
      - Name: BLOOD_COLOR_YELLOW
        Value: 195
        Documentation: Yellow blood
      - Name: BLOOD_COLOR_RED
        Value: 247
        Documentation: Red blood
      - Name: DONT_BLEED
        Value: -1
        Documentation: Don't bleed
  - Name: TOGGLE_STATE
    Namespace: ''
    Documentation: Toggle state for entities that can be toggled.
    Values:
      - Name: TS_GOING_DOWN
        Value: 3
        Documentation: Entity is going down
      - Name: TS_GOING_UP
        Value: 2
        Documentation: Entity is going up
      - Name: TS_AT_BOTTOM
        Value: 1
        Documentation: Entity is at bottom
      - Name: TS_AT_TOP
        Value: 0
        Documentation: Entity is at top
  - Name: DMG
    Namespace: ''
    Documentation: Damage types.
    Values:
      - Name: DMG_SHOWNHUD
        Value: 7815448
        Documentation: Shown on HUD. These are the damage types that have clien hud art.
      - Name: DMG_GIB_CORPSE
        Value: 993
        Documentation: >-
          Gib corpse. These are the damage types that are allowed to gib
          corpses.
      - Name: DMG_SHOCK_GLOW
        Value: 134217728
        Documentation: Shock glow. Flag for shock glow effect.
      - Name: DMG_MEDKITHEAL
        Value: 33554432
        Documentation: Medkit heal. Medkit healing.
      - Name: DMG_SNIPER
        Value: 16777216
        Documentation: Sniper. Hit by a Sniper.
      - Name: DMG_MORTAR
        Value: 8388608
        Documentation: Mortar. Hit by air raid (done to distinguish grenade from mortar)
      - Name: DMG_SLOWFREEZE
        Value: 4194304
        Documentation: Slow freeze. In a subzero freezer.
      - Name: DMG_SLOWBURN
        Value: 2097152
        Documentation: Slow burn. In an oven.
      - Name: DMG_ACID
        Value: 1048576
        Documentation: Acid. Toxic chemicals or acid burns.
      - Name: DMG_DROWNRECOVER
        Value: 524288
        Documentation: Drown recover. Drowning recovery.
      - Name: DMG_RADIATION
        Value: 262144
        Documentation: Radiation. Radiation exposure.
      - Name: DMG_POISON
        Value: 131072
        Documentation: Poison. Blood poisoning.
      - Name: DMG_NERVEGAS
        Value: 65536
        Documentation: Nerve gas. Nerve toxins, very bad.
      - Name: DMG_PARALYZE
        Value: 32768
        Documentation: Paralyze. Slows affected creature down.
      - Name: DMG_TIMEBASED
        Value: 16760832
        Documentation: Mash for time-based damage.
      - Name: DMG_DROWN
        Value: 16384
        Documentation: Drown. Drowning.
      - Name: DMG_LAUNCH
        Value: 67108864
        Documentation: Launch. Launch into air.
      - Name: DMG_ALWAYSGIB
        Value: 8192
        Documentation: >-
          Always gib. With this bit OR'd in, any damage type can be made to gib
          victims upon death.
      - Name: DMG_NEVERGIB
        Value: 4096
        Documentation: >-
          Never gib. With this bit OR'd in, no damage type will be able to gib
          victims upon death.
      - Name: DMG_ENERGYBEAM
        Value: 1024
        Documentation: Energy beam. Laser or other high energy beam.
      - Name: DMG_SONIC
        Value: 512
        Documentation: Sonic. Sound pulse shockwave.
      - Name: DMG_SHOCK
        Value: 256
        Documentation: Shock. Electric shock.
      - Name: DMG_CLUB
        Value: 128
        Documentation: Club. Crowbar, punch, headbutt.
      - Name: DMG_BLAST
        Value: 64
        Documentation: Blast. Explosive blast damage.
      - Name: DMG_FALL
        Value: 32
        Documentation: Fall. Fell too far.
      - Name: DMG_FREEZE
        Value: 16
        Documentation: Freeze. Frozen.
      - Name: DMG_BURN
        Value: 8
        Documentation: Burn. Heat burned.
      - Name: DMG_SLASH
        Value: 4
        Documentation: Slash. Cut, clawed, stabbed.
      - Name: DMG_BULLET
        Value: 2
        Documentation: Bullet. Shot.
      - Name: DMG_CRUSH
        Value: 1
        Documentation: Crush damage. By falling or moving object.
      - Name: DMG_GENERIC
        Value: 0
        Documentation: Generic damage.
  - Name: RELATIONSHIP
    Namespace: ''
    Documentation: Relationship between (monster) entities
    Values:
      - Name: R_FR
        Value: 4
        Documentation: Fear. Will attack.
      - Name: R_NM
        Value: 3
        Documentation: Nemesis. A monster will ALWAYS attack its nemesis, no matter what.
      - Name: R_HT
        Value: 2
        Documentation: Hate. Will attack this character instead of any DISLIKE'd characters.
      - Name: R_DL
        Value: 1
        Documentation: Dislike. Will attack.
      - Name: R_NO
        Value: 0
        Documentation: No relationship. Disregard.
      - Name: R_AL
        Value: -2
        Documentation: Ally. Good alternative to R_NO when applicable.
  - Name: CLASS
    Namespace: ''
    Documentation: |-
      Entity classification
      Can be set on entities with KeyValue using key 'classify'.
    Values:
      - Name: CLASS_BARNACLE
        Value: 99
        Documentation: Is Barnacle
      - Name: CLASS_TEAM4
        Value: 19
        Documentation: Is on Team 4
      - Name: CLASS_TEAM3
        Value: 18
        Documentation: Is on Team 3
      - Name: CLASS_TEAM2
        Value: 17
        Documentation: Is on Team 2
      - Name: CLASS_TEAM1
        Value: 16
        Documentation: Is on Team 1
      - Name: CLASS_XRACE_SHOCK
        Value: 15
        Documentation: Is X-Race shock trooper (also Voltigores)
      - Name: CLASS_XRACE_PITDRONE
        Value: 14
        Documentation: Is X-Race pitdrone
      - Name: CLASS_ALIEN_BIOWEAPON
        Value: 13
        Documentation: Is alien bioweapon
      - Name: CLASS_PLAYER_BIOWEAPON
        Value: 12
        Documentation: Is player bioweapon
      - Name: CLASS_PLAYER_ALLY
        Value: 11
        Documentation: is player ally
      - Name: CLASS_INSECT
        Value: 10
        Documentation: Is insect
      - Name: CLASS_ALIEN_PREDATOR
        Value: 9
        Documentation: Is predator alien
      - Name: CLASS_ALIEN_PREY
        Value: 8
        Documentation: Is prey alien
      - Name: CLASS_ALIEN_MONSTER
        Value: 7
        Documentation: Is monster alien
      - Name: CLASS_ALIEN_PASSIVE
        Value: 6
        Documentation: Is passive alien
      - Name: CLASS_ALIEN_MILITARY
        Value: 5
        Documentation: Is military alien
      - Name: CLASS_HUMAN_MILITARY
        Value: 4
        Documentation: Is military human
      - Name: CLASS_HUMAN_PASSIVE
        Value: 3
        Documentation: Is passive human
      - Name: CLASS_PLAYER
        Value: 2
        Documentation: Is player
      - Name: CLASS_MACHINE
        Value: 1
        Documentation: Is machine
      - Name: CLASS_NONE
        Value: 0
        Documentation: No classification
      - Name: CLASS_FORCE_NONE
        Value: -1
        Documentation: Forces class override to none
  - Name: FCAP
    Namespace: ''
    Documentation: CBaseEntity caps (CBaseEntity::ObjectCaps())
    Values:
      - Name: FCAP_FORCE_TRANSITION
        Value: 128
        Documentation: Force transition
      - Name: FCAP_MASTER
        Value: 128
        Documentation: Is a master
      - Name: FCAP_DIRECTIONAL_USE
        Value: 64
        Documentation: Directional use
      - Name: FCAP_ONOFF_USE
        Value: 32
        Documentation: On/off use
      - Name: FCAP_CONTINUOUS_USE
        Value: 16
        Documentation: Continuous use
      - Name: FCAP_IMPULSE_USE
        Value: 8
        Documentation: Impulse use
      - Name: FCAP_DONT_SAVE
        Value: -2147483648
        Documentation: Don't save
      - Name: FCAP_MUST_SPAWN
        Value: 4
        Documentation: Must spawn
      - Name: FCAP_ACROSS_TRANSITION
        Value: 2
        Documentation: Across transition
      - Name: FCAP_CUSTOMSAVE
        Value: 1
        Documentation: Custom save method
  - Name: Entvartype
    Namespace: ''
    Documentation: Entity variable type
    Values:
      - Name: VAR_CUSTOM
        Value: 8
        Documentation: Custom type
      - Name: VAR_BYTE2
        Value: 7
        Documentation: 2 byte array type
      - Name: VAR_BYTE4
        Value: 6
        Documentation: 4 byte array type
      - Name: VAR_EDICT
        Value: 5
        Documentation: Edict type
      - Name: VAR_INTEGER
        Value: 4
        Documentation: Integer type
      - Name: VAR_FLOAT
        Value: 3
        Documentation: Float type
      - Name: VAR_VECTOR
        Value: 2
        Documentation: Vector type
      - Name: VAR_STRING
        Value: 1
        Documentation: String type
      - Name: VAR_INVALID
        Value: 0
        Documentation: Invalid type
  - Name: USE_TYPE
    Namespace: ''
    Documentation: |-
      Use type for entities. Not all entities support all use types.
      Passed to the Use method on entities.
    Values:
      - Name: USE_KILL
        Value: 4
        Documentation: Kills an entity
      - Name: USE_TOGGLE
        Value: 3
        Documentation: Toggles the state of an entity
      - Name: USE_SET
        Value: 2
        Documentation: Sets the state of an entity (use float parameter in Use)
      - Name: USE_ON
        Value: 1
        Documentation: Turns on an entity
      - Name: USE_OFF
        Value: 0
        Documentation: Turns off an entity
  - Name: FixAngleMode
    Namespace: ''
    Documentation: entvars_t::fixangle modes
    Values:
      - Name: FAM_ADDAVELOCITY
        Value: 2
        Documentation: Add avelocity to player view angles
      - Name: FAM_FORCEVIEWANGLES
        Value: 1
        Documentation: Force player view angles to entvars_t::angles
      - Name: FAM_NOTHING
        Value: 0
        Documentation: Do nothing
  - Name: WATERLEVEL
    Namespace: ''
    Documentation: entvars_t waterlevel values
    Values:
      - Name: WATERLEVEL_HEAD
        Value: 3
        Documentation: Head underwater (completely submerged)
      - Name: WATERLEVEL_WAIST
        Value: 2
        Documentation: Waist underwater
      - Name: WATERLEVEL_FEET
        Value: 1
        Documentation: Feet underwater
      - Name: WATERLEVEL_DRY
        Value: 0
        Documentation: Not in water
  - Name: MAP_VP_TYPE
    Namespace: ''
    Documentation: Map sprite viewport types.
    Values:
      - Name: MAP_VP_ORIENTATED
        Value: 4
        Documentation: 'Orientated: Angled according to the world instead of player viewport.'
      - Name: MAP_VP_FACING_UPRIGHT
        Value: 2
        Documentation: 'Facing upright: ???'
      - Name: MAP_VP_PARALLEL_ORITENTATED
        Value: 5
        Documentation: >-
          Parallel orientated: Always face the player, but use angles to rotate
          the sprite.
      - Name: MAP_VP_PARALLEL_UPRIGHT
        Value: 1
        Documentation: >-
          Parallel upright: Always face the player on horizontal axis only,
          fixed vertically.
      - Name: MAP_VP_PARALLEL
        Value: 3
        Documentation: 'Parallel: Always face the player.'
      - Name: MAP_VP_DEFAULT
        Value: 0
        Documentation: Default. (Do not override the sprite's QC choice.)
  - Name: VP_TYPE
    Namespace: ''
    Documentation: >-
      Sprite viewport types. When overriden stored in entvars_t::sequence with
      EF_SPRITE_CUSTOM_VP set in entvars_t::effects for engine use.
    Values:
      - Name: VP_ORIENTATED
        Value: 3
        Documentation: 'Orientated: Angled according to the world instead of player viewport.'
      - Name: VP_FACING_UPRIGHT
        Value: 1
        Documentation: 'Facing upright: ???'
      - Name: VP_PARALLEL_ORITENTATED
        Value: 4
        Documentation: >-
          Parallel orientated: Always face the player, but use angles to rotate
          the sprite.
      - Name: VP_PARALLEL_UPRIGHT
        Value: 0
        Documentation: >-
          Parallel upright: Always face the player on horizontal axis only,
          fixed vertically.
      - Name: VP_PARALLEL
        Value: 2
        Documentation: 'Parallel: Always face the player.'
  - Name: EFFECTS
    Namespace: ''
    Documentation: entvars_t::effects constants
    Values:
      - Name: EF_NOSHADOW
        Value: 8192
        Documentation: Don't render a studio shadow for this entity
      - Name: EF_FULLBRIGHT
        Value: 4096
        Documentation: DonRender the entity at full brightness
      - Name: EF_NODECALS
        Value: 2048
        Documentation: Don't draw decals on this entity
      - Name: EF_SPRITE_CUSTOM_VP
        Value: 1024
        Documentation: >-
          Allow a map to override a sprite viewport type (from
          entvars_t::sequence)
      - Name: EF_FRAMEANIMTEXTURES
        Value: 512
        Documentation: Use the value in entvars_t::frame to set the texture on a brush entity
      - Name: EF_NOANIMTEXTURES
        Value: 256
        Documentation: Don't animate brush entities
      - Name: EF_NODRAW
        Value: 128
        Documentation: Don't draw entity
      - Name: EF_LIGHT
        Value: 64
        Documentation: Rocket flare glow sprite
      - Name: EF_NOINTERP
        Value: 32
        Documentation: Don't interpolate the next frame
      - Name: EF_INVLIGHT
        Value: 16
        Documentation: Get lighting from ceiling
      - Name: EF_DIMLIGHT
        Value: 8
        Documentation: Player flashlight
      - Name: EF_BRIGHTLIGHT
        Value: 4
        Documentation: DLIGHT centered at entity origin
      - Name: EF_MUZZLEFLASH
        Value: 2
        Documentation: Single frame ELIGHT on entity attachment 0
      - Name: EF_BRIGHTFIELD
        Value: 1
        Documentation: Swirling cloud of particles
  - Name: DAMAGE
    Namespace: ''
    Documentation: entvars_t::takedamage values
    Values:
      - Name: DAMAGE_AIM
        Value: 2
        Documentation: Allow auto-aim
      - Name: DAMAGE_YES
        Value: 1
        Documentation: Allow damage
      - Name: DAMAGE_NO
        Value: 0
        Documentation: Don't allow damage
  - Name: DEAD
    Namespace: ''
    Documentation: Entity entvars_t::deadflag values
    Values:
      - Name: DEAD_DISCARDBODY
        Value: 4
        Documentation: No direct use of this
      - Name: DEAD_RESPAWNABLE
        Value: 3
        Documentation: The player is in a state where they can be respawned.
      - Name: DEAD_DEAD
        Value: 2
        Documentation: Dead, lying still.
      - Name: DEAD_DYING
        Value: 1
        Documentation: >-
          Playing death animation or still falling off of a ledge waiting to hit
          ground
      - Name: DEAD_NO
        Value: 0
        Documentation: Alive
  - Name: SOLID
    Namespace: ''
    Documentation: >-
      entvars_t::solid constants.

      NOTE: Some movetypes will cause collisions independent of
      SOLID_NOT/SOLID_TRIGGER when the entity moves

      SOLID only effects OTHER entities colliding with this one when they move -
      UGH!
    Values:
      - Name: SOLID_BSP
        Value: 4
        Documentation: bsp clip, touch on edge, block
      - Name: SOLID_SLIDEBOX
        Value: 3
        Documentation: touch on edge, but not an onground
      - Name: SOLID_BBOX
        Value: 2
        Documentation: touch on edge, block
      - Name: SOLID_TRIGGER
        Value: 1
        Documentation: touch on edge, but not blocking
      - Name: SOLID_NOT
        Value: 0
        Documentation: no interaction with other objects
      - Name: SOLID_NOT_EXPLICIT
        Value: -1
        Documentation: no interaction with other objects (forced by map)
  - Name: MOVETYPE
    Namespace: ''
    Documentation: entvars_t::movetype constants
    Values:
      - Name: MOVETYPE_PUSHSTEP
        Value: 13
        Documentation: >-
          BSP model that needs physics/world collisions (uses nearest hull for
          world collision)
      - Name: MOVETYPE_FOLLOW
        Value: 12
        Documentation: track movement of aiment
      - Name: MOVETYPE_BOUNCEMISSILE
        Value: 11
        Documentation: bounce w/o gravity
      - Name: MOVETYPE_BOUNCE
        Value: 10
        Documentation: Just like Toss, but reflect velocity when contacting surfaces
      - Name: MOVETYPE_FLYMISSILE
        Value: 9
        Documentation: extra size to monsters
      - Name: MOVETYPE_NOCLIP
        Value: 8
        Documentation: No gravity, no collisions, still do velocity/avelocity
      - Name: MOVETYPE_PUSH
        Value: 7
        Documentation: no clip to world, push and crush
      - Name: MOVETYPE_TOSS
        Value: 6
        Documentation: gravity/collisions
      - Name: MOVETYPE_FLY
        Value: 5
        Documentation: No gravity, but still collides with stuff
      - Name: MOVETYPE_STEP
        Value: 4
        Documentation: gravity, special edge handling -- monsters use this
      - Name: MOVETYPE_WALK
        Value: 3
        Documentation: Player only - moving on the ground
      - Name: MOVETYPE_NONE
        Value: 0
        Documentation: never moves
      - Name: MOVETYPE_NONE_EXPLICIT
        Value: -1
        Documentation: never moves (forced by map)
  - Name: EdictFlags
    Namespace: ''
    Documentation: entvars_t::flags constants
    Values:
      - Name: FL_DORMANT
        Value: 2147483648
        Documentation: Entity is dormant, no updates to client
      - Name: FL_KILLME
        Value: 1073741824
        Documentation: >-
          This entity is marked for death -- This allows the engine to kill ents
          at the appropriate time
      - Name: FL_CUSTOMENTITY
        Value: 536870912
        Documentation: This is a custom entity
      - Name: FL_NOWEAPONS
        Value: 134217728
        Documentation: This client is being denied weapon usage
      - Name: FL_SPECTATOR
        Value: 67108864
        Documentation: This client is a spectator, don't run touch functions, etc.
      - Name: FL_WORLDBRUSH
        Value: 33554432
        Documentation: >-
          Not moveable/removeable brush entity (really part of the world, but
          represented as an entity for transparency or something)
      - Name: FL_ONTRAIN
        Value: 16777216
        Documentation: >-
          Player is _controlling_ a train, so movement commands should be
          ignored on client during prediction.
      - Name: FL_MONSTERCLIP
        Value: 8388608
        Documentation: Only collide in with monsters who have FL_MONSTERCLIP set
      - Name: FL_BASEVELOCITY
        Value: 4194304
        Documentation: >-
          Base velocity has been applied this frame (used to convert base
          velocity into momentum)
      - Name: FL_ALWAYSTHINK
        Value: 2097152
        Documentation: >-
          Brush model flag -- call think every frame regardless of nextthink -
          ltime (for constantly changing velocity/path)
      - Name: FL_PROXY
        Value: 1048576
        Documentation: This is a spectator proxy
      - Name: FL_IMMUNE_LAVA
        Value: 524288
        Documentation: If set, players don't take damage from lava
      - Name: FL_IMMUNE_SLIME
        Value: 262144
        Documentation: If set, players don't take damage from slime
      - Name: FL_IMMUNE_WATER
        Value: 131072
        Documentation: If set, players don't take drown damage
      - Name: FL_GRAPHED
        Value: 65536
        Documentation: worldgraph has this ent listed as something that blocks a connection
      - Name: FL_FLOAT
        Value: 32768
        Documentation: Apply floating force to this entity when in water
      - Name: FL_DUCKING
        Value: 16384
        Documentation: Player flag -- Player is fully crouched
      - Name: FL_FAKECLIENT
        Value: 8192
        Documentation: >-
          JAC: fake client, simulated server side; don't send network messages
          to them
      - Name: FL_FROZEN
        Value: 4096
        Documentation: Player is frozen for 3rd person camera
      - Name: FL_WATERJUMP
        Value: 2048
        Documentation: player jumping out of water
      - Name: FL_PARTIALGROUND
        Value: 1024
        Documentation: not all corners are valid
      - Name: FL_ONGROUND
        Value: 512
        Documentation: At rest / on the ground
      - Name: FL_SKIPLOCALHOST
        Value: 256
        Documentation: Don't send entity to local host, it's predicting this entity itself
      - Name: FL_NOTARGET
        Value: 128
        Documentation: If set, this entity will not be targeted by monster AI
      - Name: FL_GODMODE
        Value: 64
        Documentation: If set, this entity is invincible. Only applies to players
      - Name: FL_MONSTER
        Value: 32
        Documentation: If set, this is a monster
      - Name: FL_INWATER
        Value: 16
        Documentation: If set, this entity is in water. Only applies to players
      - Name: FL_CLIENT
        Value: 8
        Documentation: If set, this is a player
      - Name: FL_CONVEYOR
        Value: 4
        Documentation: >-
          If set, entities standing on this entity are moved as if this were a
          conveyor
      - Name: FL_SWIM
        Value: 2
        Documentation: >-
          Changes the SV_Movestep() behavior to not need to be on ground (but
          stay in water)
      - Name: FL_FLY
        Value: 1
        Documentation: Changes the SV_Movestep() behavior to not need to be on ground
  - Name: SeekFile
    Namespace: SeekFile
    Documentation: Mode flags passed to File::Seek.
    Values:
      - Name: END
        Value: 2
        Documentation: Seek from the end of the file.
      - Name: CUR
        Value: 1
        Documentation: Seek from the current offset in the file.
      - Name: SET
        Value: 0
        Documentation: Seek from the start of the file.
  - Name: OpenFile
    Namespace: OpenFile
    Documentation: Flags passed to FileSystem::OpenFile.
    Values:
      - Name: BINARY
        Value: 8
        Documentation: Open in binary mode.
      - Name: APPEND
        Value: 4
        Documentation: Open file for appending.
      - Name: WRITE
        Value: 2
        Documentation: Open file for writing.
      - Name: READ
        Value: 1
        Documentation: Open file for reading.
  - Name: MatchFlagType
    Namespace: Regex
    Documentation: Match format flags. These can be bitwise OR'd together to combine options.
    Values:
      - Name: format_first_only
        Value: 4096
        Documentation: ''
      - Name: format_no_copy
        Value: 2048
        Documentation: ''
      - Name: format_sed
        Value: 1024
        Documentation: ''
      - Name: format_default
        Value: 0
        Documentation: ''
      - Name: match_prev_avail
        Value: 256
        Documentation: ''
      - Name: match_continuous
        Value: 64
        Documentation: ''
      - Name: match_not_null
        Value: 32
        Documentation: ''
      - Name: match_any
        Value: 16
        Documentation: ''
      - Name: match_not_eow
        Value: 8
        Documentation: ''
      - Name: match_not_bow
        Value: 4
        Documentation: ''
      - Name: match_not_eol
        Value: 2
        Documentation: ''
      - Name: match_not_bol
        Value: 1
        Documentation: ''
      - Name: match_default
        Value: 0
        Documentation: ''
  - Name: FlagType
    Namespace: Regex
    Documentation: >-
      Regular expression flags. These can be bitwise OR'd together to combine
      options.
    Values:
      - Name: egrep
        Value: 32
        Documentation: ''
      - Name: grep
        Value: 16
        Documentation: ''
      - Name: awk
        Value: 8
        Documentation: ''
      - Name: extended
        Value: 4
        Documentation: ''
      - Name: basic
        Value: 2
        Documentation: ''
      - Name: ECMAScript
        Value: 1
        Documentation: ''
      - Name: collate
        Value: 2048
        Documentation: ''
      - Name: optimize
        Value: 1024
        Documentation: ''
      - Name: nosubs
        Value: 512
        Documentation: ''
      - Name: icase
        Value: 256
        Documentation: ''
  - Name: ArgumentType
    Namespace: Reflection
    Documentation: Which type a reflection argument is
    Values:
      - Name: AT_ENUM
        Value: 32
        Documentation: Argument is an enum type.
      - Name: AT_OBJECT
        Value: 24
        Documentation: Argument is an object type.
      - Name: AT_PRIMITIVE
        Value: 4
        Documentation: Argument is a primitive type.
      - Name: AT_VOID
        Value: 2
        Documentation: Argument is void.
      - Name: AT_NONE
        Value: 1
        Documentation: >-
          Argument has no type. If an argument has this type it means something
          went wrong during parsing.
  - Name: CompareType
    Namespace: String
    Documentation: Compare type.
    Values:
      - Name: CaseInsensitive
        Value: 1
        Documentation: ''
      - Name: CaseSensitive
        Value: 0
        Documentation: ''
Functions:
  - Declaration: CModule@ get_g_Module()
    Documentation: Gets the current script's module.
    Namespace: ''
  - Declaration: CModuleHookManager@ get_g_Hooks()
    Documentation: Gets the current script's hook manager.
    Namespace: ''
  - Declaration: time_t UnixTimestamp()
    Documentation: Gets the current time as a unix timestamp.
    Namespace: ''
  - Declaration: CPersistence@ get_g_Persistence()
    Documentation: Gets the map script's persistence manager.
    Namespace: ''
  - Declaration: CPathTrack@ PathTrackEntity_Instance(edict_t@ pEdict)
    Documentation: ''
    Namespace: ''
  - Declaration: CSoundEnt@ GetSoundEntInstance()
    Documentation: Gets the current global sound manager entity
    Namespace: ''
  - Declaration: bool FNullEnt(entvars_t@ pev)
    Documentation: Checks entvars for nullity
    Namespace: ''
  - Declaration: bool FNullEnt(const edict_t@ pEnt)
    Documentation: Checks edict for nullity
    Namespace: ''
  - Declaration: int TrainSpeed(int iSpeed, int iMax)
    Documentation: ''
    Namespace: ''
  - Declaration: Vector CrossProduct(const Vector& in, const Vector& in)
    Documentation: Returns the cross product of the given vectors
    Namespace: ''
  - Declaration: float DotProduct(const Vector& in lhs, const Vector& in rhs)
    Documentation: Returns the dot product of the given vectors
    Namespace: ''
  - Declaration: float DotProduct(const Vector2D& in lhs, const Vector2D& in rhs)
    Documentation: Returns a dot product of the given vectors
    Namespace: ''
  - Declaration: CScheduler@ get_g_Scheduler()
    Documentation: Gets the current script's scheduler.
    Namespace: ''
  - Declaration: bool FormatOpenFlags(OpenFileFlags_t uiOpenFlags, string& out szOutFlags)
    Documentation: Formats the open flags into a string that represents the flags.
    Namespace: FileSystem
  - Declaration: OpenFileFlags_t FilterFlags(OpenFileFlags_t uiOpenFlags)
    Documentation: Filters the given flags, removing unnecessary flags.
    Namespace: FileSystem
  - Declaration: bool FlagsValid(const OpenFileFlags_t uiOpenFlags)
    Documentation: Returns whether the given open flags are valid.
    Namespace: FileSystem
  - Declaration: >-
      string Replace(const string& in szString, const Regex@ pRegex, const
      string& in szFormat, MatchFlagType flags = match_default)
    Documentation: >-
      Makes a copy of the target sequence (the subject) with all matches of the
      regular expression pRegex (the pattern) replaced by szFormat (the
      replacement).
    Namespace: Regex
  - Declaration: >-
      bool Search(const string& in szString, MatchResults@ pResults, const
      Regex@ pRegex, MatchFlagType flags = match_default)
    Documentation: >-
      Returns whether some sub-sequence in the target sequence (the subject)
      matches the regular expression pRegex.

      pResults will contain the results of the operation, if any.
    Namespace: Regex
  - Declaration: >-
      bool Search(const string& in szString, const Regex@ pRegex, MatchFlagType
      flags = match_default)
    Documentation: >-
      Returns whether some sub-sequence in the target sequence (the subject)
      matches the regular expression pRegex.
    Namespace: Regex
  - Declaration: >-
      bool Match(const string& in szString, MatchResults@ pResults, const Regex@
      pRegex, MatchFlagType flags = match_default)
    Documentation: |-
      Performs are regular expression matching operation.
      Returns true if the match succeeded, false otherwise.
      pResults will contain the results of the operation, if any.
    Namespace: Regex
  - Declaration: >-
      bool Match(const string& in szString, const Regex@ pRegex, MatchFlagType
      flags = match_default)
    Documentation: |-
      Performs are regular expression matching operation.
      Returns true if the match succeeded, false otherwise
    Namespace: Regex
  - Declaration: >-
      bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in,
      ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
    Documentation: >-
      Prints the format string to the destination buffer. Uses SC printf
      formatting style.
    Namespace: ''
  - Declaration: >-
      bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in,
      ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)
    Documentation: >-
      Prints the format string to the destination buffer. Uses SC printf
      formatting style.
    Namespace: ''
  - Declaration: >-
      bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in,
      ?& in, ?& in, ?& in, ?& in, ?& in)
    Documentation: >-
      Prints the format string to the destination buffer. Uses SC printf
      formatting style.
    Namespace: ''
  - Declaration: >-
      bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in,
      ?& in, ?& in, ?& in, ?& in)
    Documentation: >-
      Prints the format string to the destination buffer. Uses SC printf
      formatting style.
    Namespace: ''
  - Declaration: >-
      bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in,
      ?& in, ?& in, ?& in)
    Documentation: >-
      Prints the format string to the destination buffer. Uses SC printf
      formatting style.
    Namespace: ''
  - Declaration: >-
      bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in,
      ?& in, ?& in)
    Documentation: >-
      Prints the format string to the destination buffer. Uses SC printf
      formatting style.
    Namespace: ''
  - Declaration: >-
      bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in,
      ?& in)
    Documentation: >-
      Prints the format string to the destination buffer. Uses SC printf
      formatting style.
    Namespace: ''
  - Declaration: bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in)
    Documentation: >-
      Prints the format string to the destination buffer. Uses SC printf
      formatting style.
    Namespace: ''
  - Declaration: bool snprintf(string& out szOutBuffer, const string& in szFormat)
    Documentation: >-
      Prints the format string to the destination buffer. Uses SC printf
      formatting style.
    Namespace: ''
  - Declaration: >-
      string formatFloat(double value, const string &in options = "", uint width
      = 0, uint precision = 0)
    Documentation: |
      Formats a double into a string.
      The options string is a combination of the following characters:
      'l' = left justify
      '0' = pad with zeroes
      '+' = always include the sign, even if positive
      ' ' = add a space in case of positive number
      'e' = exponent character with small e
      'E' = exponent character with capital E
    Namespace: ''
  - Declaration: >-
      string formatUInt(uint64 value, const string &in options = "", uint width
      = 0)
    Documentation: |
      Formats a unsigned integer into a string.
      The options string is a combination of the following characters:
      'l' = left justify
      '0' = pad with zeroes
      '+' = always include the sign, even if positive
      ' ' = add a space in case of positive number
      'h' = hexadecimal integer small letters
      'H' = hexadecimal integer capital letters
    Namespace: ''
  - Declaration: >-
      string formatInt(int64 value, const string &in options = "", uint width =
      0)
    Documentation: |
      Formats a signed integer into a string.
      The options string is a combination of the following characters:
      'l' = left justify
      '0' = pad with zeroes
      '+' = always include the sign, even if positive
      ' ' = add a space in case of positive number
      'h' = hexadecimal integer small letters
      'H' = hexadecimal integer capital letters
    Namespace: ''
  - Declaration: string toupper(const string& in)
    Documentation: Converts the given character to upper case.
    Namespace: ''
  - Declaration: string tolower(const string& in)
    Documentation: Converts the given character to lower case.
    Namespace: ''
  - Declaration: bool isxdigit(const string& in)
    Documentation: Returns whether character is xdigit.
    Namespace: ''
  - Declaration: bool isupper(const string& in)
    Documentation: Returns whether character is upper.
    Namespace: ''
  - Declaration: bool isspace(const string& in)
    Documentation: Returns whether character is space.
    Namespace: ''
  - Declaration: bool ispunct(const string& in)
    Documentation: Returns whether character is punctuality.
    Namespace: ''
  - Declaration: bool isprint(const string& in)
    Documentation: Returns whether character is print.
    Namespace: ''
  - Declaration: bool islower(const string& in)
    Documentation: Returns whether character is lower.
    Namespace: ''
  - Declaration: bool isgraph(const string& in)
    Documentation: Returns whether character is graph.
    Namespace: ''
  - Declaration: bool isdigit(const string& in)
    Documentation: Returns whether character is digit.
    Namespace: ''
  - Declaration: bool iscntrl(const string& in)
    Documentation: Returns whether character is control.
    Namespace: ''
  - Declaration: bool isalpha(const string& in)
    Documentation: Returns whether character is alphabetic.
    Namespace: ''
  - Declaration: bool isalnum(const string& in)
    Documentation: Returns whether character is alphanumeric.
    Namespace: ''
  - Declaration: bool atobool(const string& in, bool& out fIsValid)
    Documentation: >-
      Converts the given string to a boolean. fIsValid is true if the given
      string was a valid boolean value.
    Namespace: ''
  - Declaration: bool atobool(const string& in)
    Documentation: Converts the given string to a boolean.
    Namespace: ''
  - Declaration: uint64 atoui64(const string& in, int radix = 10)
    Documentation: Converts the given string to a 64 bit unsigned integer.
    Namespace: ''
  - Declaration: uint atoui(const string& in, int radix = 10)
    Documentation: Converts the given string to an unsigned integer.
    Namespace: ''
  - Declaration: int64 atoi64(const string& in, int radix = 10)
    Documentation: Converts the given string to a 64 bit integer.
    Namespace: ''
  - Declaration: int atoi(const string& in, int radix = 10)
    Documentation: Converts the given string to an integer.
    Namespace: ''
  - Declaration: double atod(const string& in)
    Documentation: Converts the given string to a double.
    Namespace: ''
  - Declaration: float atof(const string& in)
    Documentation: Converts the given string to a float.
    Namespace: ''
  - Declaration: char toupper(char character)
    Documentation: Converts the given character to upper case.
    Namespace: ''
  - Declaration: char tolower(char character)
    Documentation: Converts the given character to lower case.
    Namespace: ''
  - Declaration: bool isxdigit(char character)
    Documentation: Returns whether character is a hexadecimal numeric character.
    Namespace: ''
  - Declaration: bool isupper(char character)
    Documentation: Returns whether character is upper.
    Namespace: ''
  - Declaration: bool isspace(char character)
    Documentation: Returns whether character is space.
    Namespace: ''
  - Declaration: bool ispunct(char character)
    Documentation: Returns whether character is punctuality.
    Namespace: ''
  - Declaration: bool isprint(char character)
    Documentation: Returns whether character is print.
    Namespace: ''
  - Declaration: bool islower(char character)
    Documentation: Returns whether character is lower.
    Namespace: ''
  - Declaration: bool isgraph(char character)
    Documentation: Returns whether character is graph.
    Namespace: ''
  - Declaration: bool isdigit(char character)
    Documentation: Returns whether character is a decimal digit character.
    Namespace: ''
  - Declaration: bool iscntrl(char character)
    Documentation: Returns whether character is control.
    Namespace: ''
  - Declaration: bool isalpha(char character)
    Documentation: Returns whether character is alphabetic.
    Namespace: ''
  - Declaration: bool isalnum(char character)
    Documentation: Returns whether character is alphanumeric.
    Namespace: ''
Properties:
  - Declaration: const uint32 MapChange
    Documentation: >-
      Called when the map changes. This happens when the world is destroyed.
      There may still be entities that exist at this point. String will show the
      next map will be, or empty if the server is shutting down.
    Namespace: Hooks::Game
  - Declaration: const uint32 EntityCreated
    Documentation: >-
      Called when a new entity is created. At this point the entity is not
      spawned yet and may not be fully initialized.
    Namespace: Hooks::Game
  - Declaration: const uint32 ClientDisconnect
    Documentation: >-
      Called when a player disconnects. Note that this is only called if the
      player was fully connected, meaning the player went through
      ClientPutInServer. This is never called for the local host.
    Namespace: Hooks::Player
  - Declaration: const uint32 ClientPutInServer
    Documentation: >-
      Called when a player has finished connecting and is put into the world. It
      is safe to send network messages to the player at this point.
    Namespace: Hooks::Player
  - Declaration: const uint32 ClientSay
    Documentation: >-
      Called when a player says something in game chat. The SayParameters class
      can be used to manipulate input and veto the message.
    Namespace: Hooks::Player
  - Declaration: const uint32 MonsterKilled
    Documentation: >-
      Called when a monster is killed.This may still be called even when the
      monster is taking damage while in a event (eg.: death animation). Players
      also appear there as they're technically monsters too.
    Namespace: Hooks::Monster
  - Declaration: const uint32 MonsterTakeDamage
    Documentation: >-
      Called when a monster takes damage.Note that the victim entity can't be
      changed at this point. Players also appear there as they're technically
      monsters too.
    Namespace: Hooks::Monster
  - Declaration: const uint32 CanPlayerUseReservedSlot
    Documentation: >-
      Called when a player connects to the server, and the number of slots left
      on the server is <= the number of reserved slots. Set bAllowJoin to true
      to allow the player to join (default false).
    Namespace: Hooks::Player
  - Declaration: const uint32 ClientConnected
    Documentation: >-
      Called when a player connects to the server. if bDisallowJoin is set to
      false, the player is disconnected. szRejectReason is shown to the player
      if disconnected. The maximum length of the reject reason string is 127
      characters.
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerSpawn
    Documentation: Called when a player (re)spawns.
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerCanRespawn
    Documentation: >-
      Called when the game wants to know if the player should be able to respawn
      or not.Set bCanRespawn to false to disallow, default true.
    Namespace: Hooks::Player
  - Declaration: const uint32 CanCollect
    Documentation: >-
      Called when a pickup object is about to be collected by a player. Note
      that basic checks are done before this hook is called.
    Namespace: Hooks::PickupObject
  - Declaration: const uint32 Materialize
    Documentation: Called when a pickup object materializes.
    Namespace: Hooks::PickupObject
  - Declaration: const uint32 Collected
    Documentation: 'Called when a pickup object is collected by a player. '
    Namespace: Hooks::PickupObject
  - Declaration: const uint32 PlayerTakeDamage
    Documentation: >-
      Called when a player takes damage. Note that the victim entity can't be
      changed at this point.
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerKilled
    Documentation: Called when a player is killed.
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerEnteredObserver
    Documentation: Called when a player enters observer mode.
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerLeftObserver
    Documentation: Called when a player leaves observer mode.
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerUse
    Documentation: >-
      Called when the game is processing player use input. Note that this occurs
      even if the player has not pressed their use key.
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerPreThink
    Documentation: Called when the player is processing pre think events.
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerPostThink
    Documentation: Called when the player is processing post think events.
    Namespace: Hooks::Player
  - Declaration: const uint32 GetPlayerSpawnSpot
    Documentation: Called when a player is about to get a spawn point before (re)spawning.
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerRevived
    Documentation: >-
      Called when a player is revived. At this point all the revival process is
      finished.
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerDecal
    Documentation: >-
      Called when a player is spraypainting a decal onto a surface. The given
      trace result contains the surface information. 
    Namespace: Hooks::Player
  - Declaration: const uint32 PlayerPreDecal
    Documentation: >-
      Called when a player attempts to spraypaint a decal onto a surface. The
      given trace result contains the surface information. Set bResult to false
      if the player shouldn't be able to spray. 
    Namespace: Hooks::Player
  - Declaration: const uint32 WeaponPrimaryAttack
    Documentation: Called when a player fires a weapon's primary attack.
    Namespace: Hooks::Weapon
  - Declaration: const uint32 WeaponSecondaryAttack
    Documentation: Called when a player fires a weapon's secondary attack.
    Namespace: Hooks::Weapon
  - Declaration: const uint32 WeaponTertiaryAttack
    Documentation: Called when a player fires a weapon's tertiary attack.
    Namespace: Hooks::Weapon
  - Declaration: const uint32 WeaponReload
    Documentation: Called when a player reloads a weapon.
    Namespace: Hooks::Weapon
  - Declaration: CSurvivalMode g_SurvivalMode
    Documentation: Survival Mode global instance.
    Namespace: ''
  - Declaration: CClassicMode g_ClassicMode
    Documentation: Classic Mode global instance.
    Namespace: ''
  - Declaration: CConCommandSystem g_ConCommandSystem
    Documentation: CConCommandSystem global instance
    Namespace: ''
  - Declaration: CLog g_Log
    Documentation: Log global instance
    Namespace: ''
  - Declaration: CAdminControl g_AdminControl
    Documentation: CAdminControl instance for plugins
    Namespace: ''
  - Declaration: CTextMenus g_TextMenus
    Documentation: Text menu manager global instance
    Namespace: ''
  - Declaration: CStartInventory g_StartInventory
    Documentation: Player start inventory manager instance
    Namespace: ''
  - Declaration: CPluginManager g_PluginManager
    Documentation: Plugin manager global instance.
    Namespace: ''
  - Declaration: CMap g_Map
    Documentation: Map state variables instance
    Namespace: ''
  - Declaration: CMapCycle g_MapCycle
    Documentation: Map cycle manager instance
    Namespace: ''
  - Declaration: CAngelscript g_Angelscript
    Documentation: Angelscript debugging functions instance
    Namespace: ''
  - Declaration: CGlobalState g_GlobalState
    Documentation: Global state manager instance
    Namespace: ''
  - Declaration: CWeaponFuncs g_WeaponFuncs
    Documentation: Weapon functions global instance.
    Namespace: ''
  - Declaration: CPlayerFuncs g_PlayerFuncs
    Documentation: Global player functions instance
    Namespace: ''
  - Declaration: CEntityFuncs g_EntityFuncs
    Documentation: Global entity functions instance
    Namespace: ''
  - Declaration: const uint FTRACE_SIMPLEBOX
    Documentation: |-
      Goes into g_Engine.trace_flags
      Traceline with a simple box
    Namespace: ''
  - Declaration: CEngine g_Engine
    Documentation: Engine global variables instance
    Namespace: ''
  - Declaration: CSoundEngine g_SoundSystem
    Documentation: Sound engine instance
    Namespace: ''
  - Declaration: const float VOL_NORM
    Documentation: Volume value normal
    Namespace: ''
  - Declaration: const float ATTN_STATIC
    Documentation: ''
    Namespace: ''
  - Declaration: const float ATTN_IDLE
    Documentation: ''
    Namespace: ''
  - Declaration: const float ATTN_NORM
    Documentation: ''
    Namespace: ''
  - Declaration: const float ATTN_NONE
    Documentation: ''
    Namespace: ''
  - Declaration: CGame g_Game
    Documentation: Game functions instance
    Namespace: ''
  - Declaration: CUtility g_Utility
    Documentation: Utility methods instance
    Namespace: ''
  - Declaration: CCustomEntityFuncs g_CustomEntityFuncs
    Documentation: Custom entity functions global instance.
    Namespace: ''
  - Declaration: CEntityLoader g_EntityLoader
    Documentation: Entity loader global instance
    Namespace: ''
  - Declaration: CItemRegistry g_ItemRegistry
    Documentation: Item registry global instance.
    Namespace: ''
  - Declaration: const int WEAPON_NOCLIP
    Documentation: Used for clips that don't use ammo.
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_20DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_15DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_10DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_9DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_8DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_7DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_6DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_5DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_4DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_3DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_2DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const Vector VECTOR_CONE_1DEGREES
    Documentation: ''
    Namespace: ''
  - Declaration: const int WEAPON_ACTIVITY_VOLUME
    Documentation: Parameter for CSoundEnt::InsertSound iVolume
    Namespace: ''
  - Declaration: const int SMALL_EXPLOSION_VOLUME
    Documentation: Parameter for CSoundEnt::InsertSound iVolume
    Namespace: ''
  - Declaration: const int NORMAL_EXPLOSION_VOLUME
    Documentation: Parameter for CSoundEnt::InsertSound iVolume
    Namespace: ''
  - Declaration: const int BIG_EXPLOSION_VOLUME
    Documentation: Parameter for CSoundEnt::InsertSound iVolume
    Namespace: ''
  - Declaration: const int DIM_GUN_FLASH
    Documentation: Value used in CBasePlayer::m_iWeaponFlash
    Namespace: ''
  - Declaration: const int NORMAL_GUN_FLASH
    Documentation: Value used in CBasePlayer::m_iWeaponFlash
    Namespace: ''
  - Declaration: const int BRIGHT_GUN_FLASH
    Documentation: Value used in CBasePlayer::m_iWeaponFlash
    Namespace: ''
  - Declaration: const int QUIET_GUN_VOLUME
    Documentation: Parameter for CSoundEnt::InsertSound iVolume
    Namespace: ''
  - Declaration: const int NORMAL_GUN_VOLUME
    Documentation: Parameter for CSoundEnt::InsertSound iVolume
    Namespace: ''
  - Declaration: const int LOUD_GUN_VOLUME
    Documentation: Parameter for CSoundEnt::InsertSound iVolume
    Namespace: ''
  - Declaration: CInventoryMisc g_InventoryMisc
    Documentation: Inventory misc functions instance
    Namespace: ''
  - Declaration: const int SOUND_NEVER_EXPIRE
    Documentation: |-
      With this set as a sound's ExpireTime, the sound will never expire.
      See CSoundEnt.
    Namespace: ''
  - Declaration: const int SOUNDLISTTYPE_ACTIVE
    Documentation: >-
      Identifiers passed to functions that can operate on either list, to
      indicate which list to operate on.

      See CSoundEnt.
    Namespace: ''
  - Declaration: const int SOUNDLISTTYPE_FREE
    Documentation: >-
      Identifiers passed to functions that can operate on either list, to
      indicate which list to operate on.

      See CSoundEnt.
    Namespace: ''
  - Declaration: const int SOUNDLIST_EMPTY
    Documentation: |-
      Indicates that the sound list is empty.
      See CSoundEnt.
    Namespace: ''
  - Declaration: const size_t MAX_WORLD_SOUNDS
    Documentation: |-
      maximum number of sounds handled by the world at one time.
      See CSoundEnt.
    Namespace: ''
  - Declaration: CModelFuncs g_ModelFuncs
    Documentation: Model functions instance
    Namespace: ''
  - Declaration: CEngineFuncs g_EngineFuncs
    Documentation: Engine functions instance
    Namespace: ''
  - Declaration: const float PLAYERCOMMAND_WAIT
    Documentation: Time between player vocal client commands
    Namespace: ''
  - Declaration: const float AUTOAIM_10DEGREES
    Documentation: Autoaim
    Namespace: ''
  - Declaration: const float AUTOAIM_8DEGREES
    Documentation: Autoaim
    Namespace: ''
  - Declaration: const float AUTOAIM_5DEGREES
    Documentation: Autoaim
    Namespace: ''
  - Declaration: const float AUTOAIM_2DEGREES
    Documentation: Autoaim
    Namespace: ''
  - Declaration: const size_t MAX_ITEM_TYPES
    Documentation: HUD item selection slots
    Namespace: ''
  - Declaration: const size_t MAX_AMMO_TYPES
    Documentation: Maximum number of ammo types
    Namespace: ''
  - Declaration: const Vector VEC_DUCK_VIEW
    Documentation: Hull view offset while ducking.
    Namespace: ''
  - Declaration: const Vector VEC_DUCK_HULL_MAX
    Documentation: Hull maximum while ducking. Used with CEntityFuncs::SetSize
    Namespace: ''
  - Declaration: const Vector VEC_DUCK_HULL_MIN
    Documentation: Hull minimum while ducking. Used with CEntityFuncs::SetSize
    Namespace: ''
  - Declaration: const Vector VEC_VIEW
    Documentation: View offset.
    Namespace: ''
  - Declaration: const Vector VEC_HUMAN_HULL_DUCK
    Documentation: Default human hull maximum while ducking. Used with CEntityFuncs::SetSize
    Namespace: ''
  - Declaration: const Vector VEC_HUMAN_HULL_MAX
    Documentation: Default human hull maximum while standing. Used with CEntityFuncs::SetSize
    Namespace: ''
  - Declaration: const Vector VEC_HUMAN_HULL_MIN
    Documentation: Default human hull maximum. Used with CEntityFuncs::SetSize
    Namespace: ''
  - Declaration: const Vector VEC_HULL_MAX
    Documentation: Default hull maximum. Used with CEntityFuncs::SetSize
    Namespace: ''
  - Declaration: const Vector VEC_HULL_MIN
    Documentation: Default hull minimum. Used with CEntityFuncs::SetSize
    Namespace: ''
  - Declaration: const size_t ROUTE_SIZE
    Documentation: How many waypoints a monster can store at one time
    Namespace: ''
  - Declaration: const size_t MAX_OLD_ENEMIES
    Documentation: How many old enemies to remember
    Namespace: ''
  - Declaration: Schedule slFail
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slTakeCoverFromBestSound
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slWaitScript
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slRunToScript
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slWalkToScript
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slError
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slDie
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slSmallFlinch
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slChaseEnemy
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slRangeAttack2
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slRangeAttack1
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slReload
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slCombatFace
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slCombatStand
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slAlertStand
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slAlertFace
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slWakeAngry
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slIdleWalk
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slIdleTrigger
    Documentation: ''
    Namespace: Schedules
  - Declaration: Schedule slIdleStand
    Documentation: ''
    Namespace: Schedules
  - Declaration: CActivityMap g_ActivityMap
    Documentation: Activity map instance
    Namespace: ''
  - Declaration: const RGBA RGBA_SVENCOOP_HUD
    Documentation: Sven Co-op HUD color
    Namespace: ''
  - Declaration: const RGBA RGBA_SVENCOOP
    Documentation: Sven Co-op brand color
    Namespace: ''
  - Declaration: const RGBA RGBA_MS_MEDIUM_GRAY
    Documentation: Medium gray (MS)
    Namespace: ''
  - Declaration: const RGBA RGBA_MS_CREAN
    Documentation: Cream (MS)
    Namespace: ''
  - Declaration: const RGBA RGBA_MS_SKY_BLUE
    Documentation: Sky blue (MS)
    Namespace: ''
  - Declaration: const RGBA RGBA_MS_MONEY_GREEN
    Documentation: Money green (MS)
    Namespace: ''
  - Declaration: const RGBA RGBA_GAINSBORO
    Documentation: Gainsboro
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_GRAY
    Documentation: Light gray
    Namespace: ''
  - Declaration: const RGBA RGBA_SILVER
    Documentation: Silver
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_GRAY
    Documentation: Dark gray
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_SLATE_GRAY
    Documentation: Light slate gray
    Namespace: ''
  - Declaration: const RGBA RGBA_GRAY
    Documentation: Gray
    Namespace: ''
  - Declaration: const RGBA RGBA_SLATE_GRAY
    Documentation: Slate gray
    Namespace: ''
  - Declaration: const RGBA RGBA_DIM_GRAY
    Documentation: Dim gray
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_SLATE_GRAY
    Documentation: Dark slate gray
    Namespace: ''
  - Declaration: const RGBA RGBA_BLACK
    Documentation: Black
    Namespace: ''
  - Declaration: const RGBA RGBA_WHITE
    Documentation: White
    Namespace: ''
  - Declaration: const RGBA RGBA_IVORY
    Documentation: Ivory
    Namespace: ''
  - Declaration: const RGBA RGBA_SNOW
    Documentation: Snow
    Namespace: ''
  - Declaration: const RGBA RGBA_MINT_CREAM
    Documentation: Mint cream
    Namespace: ''
  - Declaration: const RGBA RGBA_AZURE
    Documentation: Azure
    Namespace: ''
  - Declaration: const RGBA RGBA_FLORAL_WHITE
    Documentation: Floral white
    Namespace: ''
  - Declaration: const RGBA RGBA_HONEYDEW
    Documentation: Honeydew
    Namespace: ''
  - Declaration: const RGBA RGBA_GHOST_WHITE
    Documentation: Ghost white
    Namespace: ''
  - Declaration: const RGBA RGBA_SEASHELL
    Documentation: Seashell
    Namespace: ''
  - Declaration: const RGBA RGBA_ALICE_BLUE
    Documentation: Alice blue
    Namespace: ''
  - Declaration: const RGBA RGBA_OLD_LACE
    Documentation: Old lace
    Namespace: ''
  - Declaration: const RGBA RGBA_LAVENDER_BLUSH
    Documentation: Lavender blush
    Namespace: ''
  - Declaration: const RGBA RGBA_WHITE_SMOKE
    Documentation: White smoke
    Namespace: ''
  - Declaration: const RGBA RGBA_BEIGE
    Documentation: Beige
    Namespace: ''
  - Declaration: const RGBA RGBA_LINEN
    Documentation: Linen
    Namespace: ''
  - Declaration: const RGBA RGBA_ANTIQUE_WHITE
    Documentation: Antique white
    Namespace: ''
  - Declaration: const RGBA RGBA_MISTY_ROSE
    Documentation: Misty rose
    Namespace: ''
  - Declaration: const RGBA RGBA_PALE_GREEN
    Documentation: Pale green
    Namespace: ''
  - Declaration: const RGBA RGBA_GREEN_YELLOW
    Documentation: Green yellow
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_GREEN
    Documentation: Light green
    Namespace: ''
  - Declaration: const RGBA RGBA_CHARTREUSE
    Documentation: Chartreuse
    Namespace: ''
  - Declaration: const RGBA RGBA_LAWN_GREEN
    Documentation: Lawn green
    Namespace: ''
  - Declaration: const RGBA RGBA_YELLOW_GREEN
    Documentation: Yellow green
    Namespace: ''
  - Declaration: const RGBA RGBA_MEDIUM_AQUAMARINE
    Documentation: Medium aquamarine
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_SEA_GREEN
    Documentation: Dark sea green
    Namespace: ''
  - Declaration: const RGBA RGBA_MEDIUM_SPRING_GREEN
    Documentation: Medium spring green
    Namespace: ''
  - Declaration: const RGBA RGBA_SPRING_GREEN
    Documentation: Spring green
    Namespace: ''
  - Declaration: const RGBA RGBA_LIME
    Documentation: Lime
    Namespace: ''
  - Declaration: const RGBA RGBA_LIME_GREEN
    Documentation: Lime green
    Namespace: ''
  - Declaration: const RGBA RGBA_MEDIUM_SEA_GREEN
    Documentation: Medium sea green
    Namespace: ''
  - Declaration: const RGBA RGBA_OLIVE_DRAB
    Documentation: Olive drab
    Namespace: ''
  - Declaration: const RGBA RGBA_OLIVE
    Documentation: Olive
    Namespace: ''
  - Declaration: const RGBA RGBA_SEA_GREEN
    Documentation: Sea green
    Namespace: ''
  - Declaration: const RGBA RGBA_FOREST_GREEN
    Documentation: Forest green
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_OLIVE_GREEN
    Documentation: Dark olive green
    Namespace: ''
  - Declaration: const RGBA RGBA_GREEN
    Documentation: Green
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_GREEN
    Documentation: Dark green
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_CYAN
    Documentation: Light cyan
    Namespace: ''
  - Declaration: const RGBA RGBA_PALE_TURQUOISE
    Documentation: Pale turquoise
    Namespace: ''
  - Declaration: const RGBA RGBA_AQUAMARINE
    Documentation: Aquamarine
    Namespace: ''
  - Declaration: const RGBA RGBA_CYAN
    Documentation: Cyan
    Namespace: ''
  - Declaration: const RGBA RGBA_AQUA
    Documentation: Aqua
    Namespace: ''
  - Declaration: const RGBA RGBA_TURQUOISE
    Documentation: Turquoise
    Namespace: ''
  - Declaration: const RGBA RGBA_MEDIUM_TURQUOISE
    Documentation: Medium turquoise
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_TURQUOISE
    Documentation: Dark turquoise
    Namespace: ''
  - Declaration: const RGBA RGBA_CADET_BLUE
    Documentation: Cadet blue
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_SEA_GREEN
    Documentation: Light sea green
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_CYAN
    Documentation: Dark cyan
    Namespace: ''
  - Declaration: const RGBA RGBA_TEAL
    Documentation: Teal
    Namespace: ''
  - Declaration: const RGBA RGBA_POWDER_BLUE
    Documentation: Powder blue
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_BLUE
    Documentation: Light blue
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_STEEL_BLUE
    Documentation: Light steel blue
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_SKY_BLUE
    Documentation: Light sky blue
    Namespace: ''
  - Declaration: const RGBA RGBA_SKY_BLUE
    Documentation: Sky blue
    Namespace: ''
  - Declaration: const RGBA RGBA_CORNFLOWER_BLUE
    Documentation: Cornflower blue
    Namespace: ''
  - Declaration: const RGBA RGBA_DEEP_SKY_BLUE
    Documentation: Deep sky blue
    Namespace: ''
  - Declaration: const RGBA RGBA_DODGER_BLUE
    Documentation: Dodger blue
    Namespace: ''
  - Declaration: const RGBA RGBA_STEEL_BLUE
    Documentation: Steel blue
    Namespace: ''
  - Declaration: const RGBA RGBA_ROYAL_BLUE
    Documentation: Royal blue
    Namespace: ''
  - Declaration: const RGBA RGBA_BLUE
    Documentation: Blue
    Namespace: ''
  - Declaration: const RGBA RGBA_MEDIUM_BLUE
    Documentation: Medium blue
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_BLUE
    Documentation: Dark blue
    Namespace: ''
  - Declaration: const RGBA RGBA_NAVY
    Documentation: Navy
    Namespace: ''
  - Declaration: const RGBA RGBA_MIDNIGHT_BLUE
    Documentation: Midnight blue
    Namespace: ''
  - Declaration: const RGBA RGBA_LAVENDER
    Documentation: Lavender
    Namespace: ''
  - Declaration: const RGBA RGBA_THISTLE
    Documentation: Thistle
    Namespace: ''
  - Declaration: const RGBA RGBA_PLUM
    Documentation: Plum
    Namespace: ''
  - Declaration: const RGBA RGBA_VIOLET
    Documentation: Violet
    Namespace: ''
  - Declaration: const RGBA RGBA_ORCHID
    Documentation: Orchid
    Namespace: ''
  - Declaration: const RGBA RGBA_MEDIUM_PURPLE
    Documentation: Medium purple
    Namespace: ''
  - Declaration: const RGBA RGBA_MEDIUM_ORCHID
    Documentation: Medium orchid
    Namespace: ''
  - Declaration: const RGBA RGBA_MEDIUM_SLATE_BLUE
    Documentation: Medium slate blue
    Namespace: ''
  - Declaration: const RGBA RGBA_SLATE_BLUE
    Documentation: Slate blue
    Namespace: ''
  - Declaration: const RGBA RGBA_MAGENTA
    Documentation: Magenta
    Namespace: ''
  - Declaration: const RGBA RGBA_FUCHSIA
    Documentation: Fuchsia
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_ORCHID
    Documentation: Dark orchid
    Namespace: ''
  - Declaration: const RGBA RGBA_BLUE_VIOLET
    Documentation: Blue violet
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_SLATE_BLUE
    Documentation: Dark slate blue
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_VIOLET
    Documentation: Dark violet
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_MAGENTA
    Documentation: Dark magenta
    Namespace: ''
  - Declaration: const RGBA RGBA_PURPLE
    Documentation: Purple
    Namespace: ''
  - Declaration: const RGBA RGBA_INDIGO
    Documentation: Indigo
    Namespace: ''
  - Declaration: const RGBA RGBA_CORNSILK
    Documentation: Cornsilk
    Namespace: ''
  - Declaration: const RGBA RGBA_BLANCHED_ALMOND
    Documentation: Blanched almond
    Namespace: ''
  - Declaration: const RGBA RGBA_BISQUE
    Documentation: Bisque
    Namespace: ''
  - Declaration: const RGBA RGBA_NAVAJO_WHITE
    Documentation: Navajo white
    Namespace: ''
  - Declaration: const RGBA RGBA_WHEAT
    Documentation: Wheat
    Namespace: ''
  - Declaration: const RGBA RGBA_BURLYWOOD
    Documentation: Burlywood
    Namespace: ''
  - Declaration: const RGBA RGBA_TAN
    Documentation: Tan
    Namespace: ''
  - Declaration: const RGBA RGBA_SANDY_BROWN
    Documentation: Sandy brown
    Namespace: ''
  - Declaration: const RGBA RGBA_GOLDENROD
    Documentation: Goldenrod
    Namespace: ''
  - Declaration: const RGBA RGBA_ROSY_BROWN
    Documentation: Rosy brown
    Namespace: ''
  - Declaration: const RGBA RGBA_PERU
    Documentation: Peru
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_GOLDENROD
    Documentation: Dark goldenrod
    Namespace: ''
  - Declaration: const RGBA RGBA_CHOCOLATE
    Documentation: Chocolate
    Namespace: ''
  - Declaration: const RGBA RGBA_SIENNA
    Documentation: Sienna
    Namespace: ''
  - Declaration: const RGBA RGBA_SADDLE_BROWN
    Documentation: Saddle brown
    Namespace: ''
  - Declaration: const RGBA RGBA_BROWN
    Documentation: Brown
    Namespace: ''
  - Declaration: const RGBA RGBA_MAROON
    Documentation: Maroon
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_YELLOW
    Documentation: Light yellow
    Namespace: ''
  - Declaration: const RGBA RGBA_LEMON_CHIFFON
    Documentation: Lemon chiffon
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_GOLDENROD_YELLOW
    Documentation: Light goldenrod yellow
    Namespace: ''
  - Declaration: const RGBA RGBA_PAPAYA_WHIP
    Documentation: Papaya whip
    Namespace: ''
  - Declaration: const RGBA RGBA_MOCCASIN
    Documentation: Moccasin
    Namespace: ''
  - Declaration: const RGBA RGBA_PALE_GOLDENROD
    Documentation: Pale goldenrod
    Namespace: ''
  - Declaration: const RGBA RGBA_YELLOW
    Documentation: Yellow
    Namespace: ''
  - Declaration: const RGBA RGBA_PEACH_PUFF
    Documentation: Peach puff
    Namespace: ''
  - Declaration: const RGBA RGBA_KHAKI
    Documentation: Khaki
    Namespace: ''
  - Declaration: const RGBA RGBA_GOLD
    Documentation: Gold
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_KHAKI
    Documentation: Dark khaki
    Namespace: ''
  - Declaration: const RGBA RGBA_ORANGE
    Documentation: Orange
    Namespace: ''
  - Declaration: const RGBA RGBA_CORAL
    Documentation: Coral
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_ORANGE
    Documentation: Dark orange
    Namespace: ''
  - Declaration: const RGBA RGBA_TOMATO
    Documentation: Tomato
    Namespace: ''
  - Declaration: const RGBA RGBA_ORANGE_RED
    Documentation: Orange red
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_SALMON
    Documentation: Light salmon
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_SALMON
    Documentation: Dark salmon
    Namespace: ''
  - Declaration: const RGBA RGBA_SALMON
    Documentation: Salmon
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_CORAL
    Documentation: Light coral
    Namespace: ''
  - Declaration: const RGBA RGBA_INDIAN_RED
    Documentation: Indian red
    Namespace: ''
  - Declaration: const RGBA RGBA_CRIMSON
    Documentation: Crimson
    Namespace: ''
  - Declaration: const RGBA RGBA_FIREBRICK
    Documentation: Firebrick
    Namespace: ''
  - Declaration: const RGBA RGBA_RED
    Documentation: Red
    Namespace: ''
  - Declaration: const RGBA RGBA_DARK_RED
    Documentation: Dark red
    Namespace: ''
  - Declaration: const RGBA RGBA_PINK
    Documentation: Pink
    Namespace: ''
  - Declaration: const RGBA RGBA_LIGHT_PINK
    Documentation: Light pink
    Namespace: ''
  - Declaration: const RGBA RGBA_HOT_PINK
    Documentation: Hot pink
    Namespace: ''
  - Declaration: const RGBA RGBA_PALE_VIOLET_RED
    Documentation: Pale violet red
    Namespace: ''
  - Declaration: const RGBA RGBA_DEEP_PINK
    Documentation: Deep pink
    Namespace: ''
  - Declaration: const RGBA RGBA_MEDIUM_VIOLET_RED
    Documentation: Medium violet red
    Namespace: ''
  - Declaration: CDecals g_Decals
    Documentation: Dynamic decal manager instance
    Namespace: ''
  - Declaration: const float VIEW_FIELD_ULTRA_NARROW
    Documentation: Ultra narrow view field
    Namespace: ''
  - Declaration: const float VIEW_FIELD_NARROW
    Documentation: Narrow view field
    Namespace: ''
  - Declaration: const float VIEW_FIELD_WIDE
    Documentation: Wide view field
    Namespace: ''
  - Declaration: const float VIEW_FIELD_FULL
    Documentation: Full view field
    Namespace: ''
  - Declaration: CMath Math
    Documentation: Math functions instance
    Namespace: ''
  - Declaration: const Vector g_vecZero
    Documentation: Zero vector (0, 0, 0)
    Namespace: ''
  - Declaration: ' CDebugger g_Debugger'
    Documentation: Debugger instance.
    Namespace: ''
  - Declaration: CVirtualFileSystem g_FileSystem
    Documentation: Global file system instance
    Namespace: ''
  - Declaration: CReflection g_Reflection
    Documentation: Reflection global class instance.
    Namespace: Reflection
  - Declaration: const size_t NO_MORE_TOKENS
    Documentation: >-
      Sentinel value used by string tokenization when there are no tokens
      remaining.
    Namespace: String
  - Declaration: const size_t INVALID_INDEX
    Documentation: Sentinel value used by string methods.
    Namespace: String
  - Declaration: const string WHITESPACE_CHARACTERS
    Documentation: A string that contains one instance of every whitespace character.
    Namespace: String
  - Declaration: const string EMPTY_STRING
    Documentation: Empty string. Useful when a reference to a string is needed.
    Namespace: String
  - Declaration: const CompareType DEFAULT_COMPARE
    Documentation: Default comparison type.
    Namespace: String
  - Declaration: const float WORLD_BOUNDARY
    Documentation: Distance from the world origin to the world boundary in a single axis
    Namespace: ''
Typedefs:
  - Name: ConCommandFlags_t
    Documentation: Type to store console command flags in
    Namespace: ''
    Type: uint32
  - Name: time_t
    Documentation: Unix timestamp type.
    Namespace: ''
    Type: uint64
  - Name: TextMenuId_t
    Documentation: Menu id.
    Namespace: ''
    Type: int32
  - Name: PersistID_t
    Documentation: Persistence object id type.
    Namespace: ''
    Type: uint
  - Name: SeekFileFlags_t
    Documentation: Seek File Flags
    Namespace: ''
    Type: uint8
  - Name: OpenFileFlags_t
    Documentation: Open File Flags
    Namespace: ''
    Type: uint8
  - Name: size_t
    Documentation: Size type used for denoting sizes
    Namespace: ''
    Type: uint32
FuncDefs:
  - Name: HookReturnCode MapChangeHook(const string& in)
    Documentation: >-
      Called when the map changes. This happens when the world is destroyed.
      There may still be entities that exist at this point. String will show the
      next map will be, or empty if the server is shutting down.
    Namespace: ''
  - Name: HookReturnCode EntityCreatedHook(CBaseEntity@)
    Documentation: >-
      Called when a new entity is created. At this point the entity is not
      spawned yet and may not be fully initialized.
    Namespace: ''
  - Name: HookReturnCode ClientDisconnectHook(CBasePlayer@)
    Documentation: >-
      Called when a player disconnects. Note that this is only called if the
      player was fully connected, meaning the player went through
      ClientPutInServer. This is never called for the local host.
    Namespace: ''
  - Name: HookReturnCode ClientPutInServerHook(CBasePlayer@)
    Documentation: >-
      Called when a player has finished connecting and is put into the world. It
      is safe to send network messages to the player at this point.
    Namespace: ''
  - Name: HookReturnCode ClientSayHook(SayParameters@)
    Documentation: >-
      Called when a player says something in game chat. The SayParameters class
      can be used to manipulate input and veto the message.
    Namespace: ''
  - Name: HookReturnCode MonsterKilledHook(CBaseMonster@, CBaseEntity@, int)
    Documentation: >-
      Called when a monster is killed.This may still be called even when the
      monster is taking damage while in a event (eg.: death animation). Players
      also appear there as they're technically monsters too.
    Namespace: ''
  - Name: HookReturnCode MonsterTakeDamageHook(DamageInfo@)
    Documentation: >-
      Called when a monster takes damage.Note that the victim entity can't be
      changed at this point. Players also appear there as they're technically
      monsters too.
    Namespace: ''
  - Name: >-
      HookReturnCode CanPlayerUseReservedSlotHook(edict_t@, const string& in,
      const string& in, bool& out)
    Documentation: >-
      Called when a player connects to the server, and the number of slots left
      on the server is <= the number of reserved slots. Set bAllowJoin to true
      to allow the player to join (default false).
    Namespace: ''
  - Name: >-
      HookReturnCode ClientConnectedHook(edict_t@, const string& in, const
      string& in, bool& out, string& out)
    Documentation: >-
      Called when a player connects to the server. if bDisallowJoin is set to
      false, the player is disconnected. szRejectReason is shown to the player
      if disconnected. The maximum length of the reject reason string is 127
      characters.
    Namespace: ''
  - Name: HookReturnCode PlayerSpawnHook(CBasePlayer@)
    Documentation: Called when a player (re)spawns.
    Namespace: ''
  - Name: HookReturnCode PlayerCanRespawnHook(CBasePlayer@, bool& out)
    Documentation: >-
      Called when the game wants to know if the player should be able to respawn
      or not.Set bCanRespawn to false to disallow, default true.
    Namespace: ''
  - Name: HookReturnCode CanCollectHook(CBaseEntity@, CBaseEntity@, bool& out)
    Documentation: >-
      Called when a pickup object is about to be collected by a player. Note
      that basic checks are done before this hook is called.
    Namespace: ''
  - Name: HookReturnCode MaterializeHook(CBaseEntity@)
    Documentation: Called when a pickup object materializes.
    Namespace: ''
  - Name: HookReturnCode CollectedHook(CBaseEntity@, CBaseEntity@)
    Documentation: 'Called when a pickup object is collected by a player. '
    Namespace: ''
  - Name: HookReturnCode PlayerTakeDamageHook(DamageInfo@)
    Documentation: >-
      Called when a player takes damage. Note that the victim entity can't be
      changed at this point.
    Namespace: ''
  - Name: HookReturnCode PlayerKilledHook(CBasePlayer@, CBaseEntity@, int)
    Documentation: Called when a player is killed.
    Namespace: ''
  - Name: HookReturnCode PlayerEnteredObserverHook(CBasePlayer@)
    Documentation: Called when a player enters observer mode.
    Namespace: ''
  - Name: HookReturnCode PlayerLeftObserverHook(CBasePlayer@)
    Documentation: Called when a player leaves observer mode.
    Namespace: ''
  - Name: HookReturnCode PlayerUseHook(CBasePlayer@, uint& out)
    Documentation: >-
      Called when the game is processing player use input. Note that this occurs
      even if the player has not pressed their use key.
    Namespace: ''
  - Name: HookReturnCode PlayerPreThinkHook(CBasePlayer@, uint& out)
    Documentation: Called when the player is processing pre think events.
    Namespace: ''
  - Name: HookReturnCode PlayerPostThinkHook(CBasePlayer@)
    Documentation: Called when the player is processing post think events.
    Namespace: ''
  - Name: >-
      HookReturnCode GetPlayerSpawnSpotHook(CBasePlayer@ pPlayer, CBaseEntity@&
      out ppEntSpawnSpot)
    Documentation: Called when a player is about to get a spawn point before (re)spawning.
    Namespace: ''
  - Name: HookReturnCode PlayerRevivedHook(CBasePlayer@ pPlayer)
    Documentation: >-
      Called when a player is revived. At this point all the revival process is
      finished.
    Namespace: ''
  - Name: HookReturnCode PlayerDecalHook(CBasePlayer@, const TraceResult& in)
    Documentation: >-
      Called when a player is spraypainting a decal onto a surface. The given
      trace result contains the surface information. 
    Namespace: ''
  - Name: >-
      HookReturnCode PlayerPreDecalHook(CBasePlayer@, const TraceResult& in,
      bool& out bResult)
    Documentation: >-
      Called when a player attempts to spraypaint a decal onto a surface. The
      given trace result contains the surface information. Set bResult to false
      if the player shouldn't be able to spray. 
    Namespace: ''
  - Name: HookReturnCode WeaponPrimaryAttackHook(CBasePlayer@, CBasePlayerWeapon@)
    Documentation: Called when a player fires a weapon's primary attack.
    Namespace: ''
  - Name: HookReturnCode WeaponSecondaryAttackHook(CBasePlayer@, CBasePlayerWeapon@)
    Documentation: Called when a player fires a weapon's secondary attack.
    Namespace: ''
  - Name: HookReturnCode WeaponTertiaryAttackHook(CBasePlayer@, CBasePlayerWeapon@)
    Documentation: Called when a player fires a weapon's tertiary attack.
    Namespace: ''
  - Name: HookReturnCode WeaponReloadHook(CBasePlayer@, CBasePlayerWeapon@)
    Documentation: Called when a player reloads a weapon.
    Namespace: ''
  - Name: >-
      void CVarCallback(CCVar@ cvar, const string& in szOldValue, float
      flOldValue)
    Documentation: Callback for cvars.
    Namespace: ''
  - Name: void ClientCommandCallback(const CCommand@ args)
    Documentation: Callback for client console commands.
    Namespace: ''
  - Name: void ConCommandCallback(const CCommand@ args)
    Documentation: Callback for server console commands.
    Namespace: ''
  - Name: void VoteEnd(Vote@ pVote, bool fResult, int iVoters)
    Documentation: >-
      Funcdef for vote ended callbacks. If fResult is true, users voted for yes.
      Otherwise, voted for no.
    Namespace: ''
  - Name: void VoteBlocked(Vote@ pVote, float flTime)
    Documentation: >-
      Funcdef for vote blocked callbacks. The given time is when the active vote
      has ended.
    Namespace: ''
  - Name: >-
      void TextMenuPlayerSlotCallback(CTextMenu@ menu, CBasePlayer@ pPlayer, int
      iSlot, const CTextMenuItem@ pItem)
    Documentation: Player slot callback for text menus.
    Namespace: ''
  - Name: void BlockedFunction(CBaseEntity@ pOther)
    Documentation: Function definition for custom entity Blocked functions
    Namespace: ''
  - Name: void TouchFunction(CBaseEntity@ pOther)
    Documentation: Function definition for custom entity Touch functions
    Namespace: ''
  - Name: >-
      void UseFunction(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE
      useType, float flValue)
    Documentation: Function definition for custom entity Use functions
    Namespace: ''
  - Name: void ThinkFunction()
    Documentation: Function definition for custom entity Think functions
    Namespace: ''
