"Angelscript Documentation"
{
	DocVersion 2
	GameVersion 5.25
	APIVersion 1.25
	Interfaces
	{
		Interface
		{
			Namespace ""
			InterfaceName PlayerInVolumeListener
			Documentation "Listener for CountPlayersInBrushVolume."
			Methods
			{
				Method
				{
					Declaration "void PlayerDetected(const bool fInVolume, CBasePlayer@ pPlayer)"
					Documentation "Called whenever a player is detected."
				}
			}
		}
		Interface
		{
			Namespace ""
			InterfaceName ScriptClassInterface
			Documentation "Script class interface"
			Methods
			{
			}
		}
	}
	Classes
	{
		Class
		{
			Namespace ""
			ClassName CModule
			Documentation "Module class.\nRepresents this module."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "CScriptInfo@+ get_ScriptInfo()"
					Documentation "Gets this module\'s script info object."
				}
				Method
				{
					Declaration "string GetModuleName() const"
					Documentation "Gets the name of this module."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CScriptInfo
			Documentation "Script info object.\nContains script information."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "void SetMinimumAdminLevel(const AdminLevel_t minimumAdminLevel)"
					Documentation "Sets the minimum admin level required for commands. You cannot lower the minimum level."
				}
				Method
				{
					Declaration "AdminLevel_t GetMinimumAdminLevel() const"
					Documentation "Gets the minimum admin level required for commands."
				}
				Method
				{
					Declaration "void SetContactInfo(const string& in szContactInfo)"
					Documentation "Sets the author\'s contact info."
				}
				Method
				{
					Declaration "const string& GetContactInfo() const"
					Documentation "Gets the author\'s contact info."
				}
				Method
				{
					Declaration "void SetAuthor(const string& in szAuthor)"
					Documentation "Sets the author name."
				}
				Method
				{
					Declaration "const string& GetAuthor() const"
					Documentation "Gets the author name."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CModuleHookManager
			Documentation "Module hook manager"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void RemoveHook(uint uiHookCode, ?& in pHookFunction)"
					Documentation "Removes a hook. Pass in the hook function or delegate to remove."
				}
				Method
				{
					Declaration "void RemoveHook(uint uiHookCode)"
					Documentation "Removes all functions hooked into the given hook."
				}
				Method
				{
					Declaration "bool RegisterHook(uint uiHookCode, ?& in pHookFunction)"
					Documentation "Registers a hook. Pass in a hook function or delegate."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CSurvivalMode
			Documentation "Survival Mode handler"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void SetDelayBeforeStart( float value )"
					Documentation "Sets delay before survival mode starts."
				}
				Method
				{
					Declaration "float GetDelayBeforeStart() const"
					Documentation "Returns delay before survival mode starts."
				}
				Method
				{
					Declaration "void EndRound()"
					Documentation "Can be used to end a round and force a retry to be used."
				}
				Method
				{
					Declaration "void SetNextMap(const string& in szMapName)"
					Documentation "Sets name of the next survival map."
				}
				Method
				{
					Declaration "const string& GetNextMap(void) const"
					Documentation "Returns name of the next survival map."
				}
				Method
				{
					Declaration "bool GetStartOn()"
					Documentation "Returns whether Survival Mode should start when the map is loaded."
				}
				Method
				{
					Declaration "void SetStartOn( bool value )"
					Documentation "Sets whether Survival Mode should start when the map is loaded."
				}
				Method
				{
					Declaration "bool MapSupportEnabled()"
					Documentation "Returns whether the current map supports Survival Mode or not."
				}
				Method
				{
					Declaration "void EnableMapSupport()"
					Documentation "Tells the game that the current map wants to use Survival Mode. Should be called in MapInit. Cannot be disabled once set."
				}
				Method
				{
					Declaration "void ResetVoteState()"
					Documentation "Resets the Survival Mode vote state to undefined."
				}
				Method
				{
					Declaration "void VoteToggle()"
					Documentation "Toggles Survival Mode vote state."
				}
				Method
				{
					Declaration "int GetVoteState()"
					Documentation "Returns Survival Mode vote state."
				}
				Method
				{
					Declaration "void Activate( bool fActivateNow = false )"
					Documentation "Activate Survival Mode"
				}
				Method
				{
					Declaration "bool IsActive() const"
					Documentation "Returns whether Survival Mode is active or not."
				}
				Method
				{
					Declaration "void Toggle()"
					Documentation "Toggles Survival Mode."
				}
				Method
				{
					Declaration "void Disable()"
					Documentation "Disable Survival Mode"
				}
				Method
				{
					Declaration "void Enable( bool fActivateNow = false )"
					Documentation "Enable Survival Mode"
				}
				Method
				{
					Declaration "bool IsEnabled() const"
					Documentation "Returns whether Survival Mode is enabled or not."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CClassicMode
			Documentation "Classic Mode handler"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "const string& FindItemMapping(const string& in szItemName) const"
					Documentation "Gets the item mapped to the given item name, or an empty string if no mapping exists."
				}
				Method
				{
					Declaration "void SetItemMappings(array<ItemMapping@>@ pItemMappings)"
					Documentation "Sets the item mappings to use from now on.\nDoes not affect previous mappings.\nPass null to disable all mappings."
				}
				Method
				{
					Declaration "void SetShouldRestartOnChange(const bool bShouldRestart)"
					Documentation "Sets whether the map should restart if Classic Mode is changed."
				}
				Method
				{
					Declaration "bool ShouldRestartOnChange() const"
					Documentation "Returns whether the map should restart if Classic Mode is changed or not. Defaults to true if not changed by a script. Reset on map change."
				}
				Method
				{
					Declaration "void EnableMapSupport()"
					Documentation "Tells the game that the current map wants to use Classic Mode. Must be called in MapInit. Cannot be disabled once set.This will ask players whether they want to enable Classic Mode. Reset on map change."
				}
				Method
				{
					Declaration "void Toggle()"
					Documentation "Toggles Classic Mode."
				}
				Method
				{
					Declaration "void ForceItemRemap(const bool fEnabled)"
					Documentation "Forces item remapping even if classic mode is disabled."
				}
				Method
				{
					Declaration "void SetEnabled(const bool fEnabled)"
					Documentation "Enable or disable Classic Mode."
				}
				Method
				{
					Declaration "bool IsEnabled() const"
					Documentation "Returns whether Classic Mode is enabled or not."
				}
				Method
				{
					Declaration "void ResetState()"
					Documentation "Resets the Classic Mode state setting to undefined."
				}
				Method
				{
					Declaration "bool IsStateDefined() const"
					Documentation "Returns whether the Classic Mode state setting is defined. If not defined, no voting has taken place to choose whether or not to enable Classic Mode."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName ItemMapping
			Documentation "Item mapping for classic mode."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "const string& get_To() const"
					Documentation "Gets the To item name"
				}
				Method
				{
					Declaration "const string& get_From() const"
					Documentation "Gets the From item name"
				}
				Method
				{
					Declaration "ItemMapping@ ItemMapping(const string& in szFrom, const string& in szTo)"
					Documentation Constructor
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName SayParameters
			Documentation "ClientSay parameters"
			Flags 1
			Methods
			{
				Method
				{
					Declaration "void set_ShouldHide(bool fShouldHide)"
					Documentation "Sets whether this text will be hidden or not"
				}
				Method
				{
					Declaration "bool get_ShouldHide() const"
					Documentation "Gets whether this text will be hidden or not"
				}
				Method
				{
					Declaration "const CCommand@ GetArguments() const"
					Documentation "Gets the arguments in this command."
				}
				Method
				{
					Declaration "const string& GetCommand() const"
					Documentation "Gets the entire command string"
				}
				Method
				{
					Declaration "ClientSayType GetSayType() const"
					Documentation "Gets the say type of this text"
				}
				Method
				{
					Declaration "CBasePlayer@ GetPlayer() const"
					Documentation "Gets the player that is saying something"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CConCommandSystem
			Documentation "Script console command manager."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void ServerCommand(const string& in szCommand)"
					Documentation "Executes an Angelscript server command."
				}
				Method
				{
					Declaration "CBasePlayer@ GetCurrentPlayer() const"
					Documentation "If the current command was executed by a player, this returns that player."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CCVar
			Documentation "CVar class"
			Flags 5
			Methods
			{
				Method
				{
					Declaration "void SetBool(const bool bValue)"
					Documentation "Sets the given boolean as the value."
				}
				Method
				{
					Declaration "void SetInt(const int iValue)"
					Documentation "Sets the given integer as the value."
				}
				Method
				{
					Declaration "void SetFloat(const float flValue)"
					Documentation "Sets the given float as the value."
				}
				Method
				{
					Declaration "void SetString(const string& in szValue)"
					Documentation "Sets the given string as the value."
				}
				Method
				{
					Declaration "bool GetBool() const"
					Documentation "Converts the value to a boolean."
				}
				Method
				{
					Declaration "int GetInt() const"
					Documentation "Converts the value to an integer."
				}
				Method
				{
					Declaration "float GetFloat() const"
					Documentation "Converts the value to a float."
				}
				Method
				{
					Declaration "const string& GetString() const"
					Documentation "Converts the value to a string."
				}
				Method
				{
					Declaration "const string& GetDefaultValue() const"
					Documentation "Gets the default value for this cvar."
				}
				Method
				{
					Declaration "CCVar@ CCVar(const string& in szName, const string& in szValue, const string& in szHelpInfo = \"\", const ConCommandFlags_t flags = ConCommandFlag::None, CVarCallback@ pCallback = null)"
					Documentation Constructor
				}
				Method
				{
					Declaration "CCVar@ CCVar(const string& in szName, float flValue = 0, const string& in szHelpInfo = \"\", const ConCommandFlags_t flags = ConCommandFlag::None, CVarCallback@ pCallback = null)"
					Documentation Constructor
				}
				Method
				{
					Declaration "bool HasBeenAdded() const"
					Documentation "Whether this command was added to the list of commands.\nMust be added to be usable from the console."
				}
				Method
				{
					Declaration "const string& GetOwningModuleName() const"
					Documentation "Gets the name of the module that owns (created) this command."
				}
				Method
				{
					Declaration "ConCommandKind::Type GetKind() const"
					Documentation "Gets the type of this console command."
				}
				Method
				{
					Declaration "const string& GetHelpInfo() const"
					Documentation "Gets the help info describing this command."
				}
				Method
				{
					Declaration "const string& GetFullyQualifiedName() const"
					Documentation "Gets the fully qualified name of this command. This is the name that the command is referred by when called."
				}
				Method
				{
					Declaration "const string& GetName() const"
					Documentation "Gets the name of this command."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CClientCommand
			Documentation "Client console command class"
			Flags 5
			Methods
			{
				Method
				{
					Declaration "CClientCommand@ CClientCommand(const string& in szName, const string& in szHelpInfo, ClientCommandCallback@ pCallback, const ConCommandFlags_t flags = ConCommandFlag::None)"
					Documentation Constructor
				}
				Method
				{
					Declaration "bool HasBeenAdded() const"
					Documentation "Whether this command was added to the list of commands.\nMust be added to be usable from the console."
				}
				Method
				{
					Declaration "const string& GetOwningModuleName() const"
					Documentation "Gets the name of the module that owns (created) this command."
				}
				Method
				{
					Declaration "ConCommandKind::Type GetKind() const"
					Documentation "Gets the type of this console command."
				}
				Method
				{
					Declaration "const string& GetHelpInfo() const"
					Documentation "Gets the help info describing this command."
				}
				Method
				{
					Declaration "const string& GetFullyQualifiedName() const"
					Documentation "Gets the fully qualified name of this command. This is the name that the command is referred by when called."
				}
				Method
				{
					Declaration "const string& GetName() const"
					Documentation "Gets the name of this command."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CConCommand
			Documentation "Console command class"
			Flags 5
			Methods
			{
				Method
				{
					Declaration "CConCommand@ CConCommand(const string& in szName, const string& in szHelpInfo, ConCommandCallback@ pCallback, const ConCommandFlags_t flags = ConCommandFlag::None)"
					Documentation Constructor
				}
				Method
				{
					Declaration "bool HasBeenAdded() const"
					Documentation "Whether this command was added to the list of commands.\nMust be added to be usable from the console."
				}
				Method
				{
					Declaration "const string& GetOwningModuleName() const"
					Documentation "Gets the name of the module that owns (created) this command."
				}
				Method
				{
					Declaration "ConCommandKind::Type GetKind() const"
					Documentation "Gets the type of this console command."
				}
				Method
				{
					Declaration "const string& GetHelpInfo() const"
					Documentation "Gets the help info describing this command."
				}
				Method
				{
					Declaration "const string& GetFullyQualifiedName() const"
					Documentation "Gets the fully qualified name of this command. This is the name that the command is referred by when called."
				}
				Method
				{
					Declaration "const string& GetName() const"
					Documentation "Gets the name of this command."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CCommand
			Documentation "Command arguments."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "int FindIntArg(const string& in szArgument, const int iDefault = 0) const"
					Documentation "Find an int value for a given argument. Returns iDefault if no such argument exists, or no value exists for it. Otherwise, returns the value, converted to an int"
				}
				Method
				{
					Declaration "string FindArg(const string& in szArgument) const"
					Documentation "Find a value for a given argument. If the argument does not exist or has no value, an empty string is returned. Otherwise, returns the value."
				}
				Method
				{
					Declaration "string opIndex(const int iIndex) const"
					Documentation "Gets the argument by index."
				}
				Method
				{
					Declaration "string Arg(const int iIndex) const"
					Documentation "Gets the argument by index."
				}
				Method
				{
					Declaration "string GetArgumentsString() const"
					Documentation "Gets all arguments as a single string."
				}
				Method
				{
					Declaration "string GetCommandString() const"
					Documentation "Gets the entire command as a string."
				}
				Method
				{
					Declaration "int ArgC() const"
					Documentation "Gets the number of arguments."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CLog
			Documentation "This class can log data to the Angelscript log file."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Prints formatted data to the file. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Prints formatted data to the file. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Prints formatted data to the file. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Prints formatted data to the file. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Prints formatted data to the file. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool PrintF(const string& in szFormat, ?& in, ?& in, ?& in)"
					Documentation "Prints formatted data to the file. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool PrintF(const string& in szFormat, ?& in, ?& in)"
					Documentation "Prints formatted data to the file. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool PrintF(const string& in szFormat, ?& in)"
					Documentation "Prints formatted data to the file. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool PrintF(const string& in szFormat)"
					Documentation "Prints formatted data to the file. Uses SC printf formatting style."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName NetworkMessage
			Documentation "Network message class. Used to send messages to clients."
			Flags 33
			Methods
			{
				Method
				{
					Declaration "void WriteFloat(float flValue)"
					Documentation "Writes a float to the buffer."
				}
				Method
				{
					Declaration "void WriteEntity(CBaseEntity@ pEntity)"
					Documentation "Writes an entity index to the buffer."
				}
				Method
				{
					Declaration "void WriteEntity(int iEntity)"
					Documentation "Writes an entity index to the buffer."
				}
				Method
				{
					Declaration "void WriteString(const string& in szString)"
					Documentation "Writes a string to the buffer."
				}
				Method
				{
					Declaration "void WriteVector(const Vector& in vecVector)"
					Documentation "Writes a vector to the buffer."
				}
				Method
				{
					Declaration "void WriteCoord(float flValue)"
					Documentation "Writes a coordinate to the buffer."
				}
				Method
				{
					Declaration "void WriteAngle(float flValue)"
					Documentation "Writes an angle to the buffer."
				}
				Method
				{
					Declaration "void WriteLong(int32 long)"
					Documentation "Writes a long to the buffer."
				}
				Method
				{
					Declaration "void WriteShort(int16 short)"
					Documentation "Writes a short to the buffer."
				}
				Method
				{
					Declaration "void WriteChar(const string& in szChar)"
					Documentation "Writes a character to the buffer."
				}
				Method
				{
					Declaration "void WriteByte(uint8 byte)"
					Documentation "Writes a byte to the buffer."
				}
				Method
				{
					Declaration "void End()"
					Documentation "Ends the message. Must be called to send the message."
				}
				Method
				{
					Declaration "NetworkMessage@ NetworkMessage(NetworkMessageDest dest, NetworkMessages::NetworkMessageType type, const Vector& in vecOrigin, edict_t@ pEdict = null)"
					Documentation Constructor
				}
				Method
				{
					Declaration "NetworkMessage@ NetworkMessage(NetworkMessageDest dest, NetworkMessages::NetworkMessageType type, edict_t@ pEdict = null)"
					Documentation Constructor
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CAdminControl
			Documentation "Admin control panel."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "bool SlapPlayer(CBasePlayer@ pSlappee, float flDamage, int iDamageType = 0)"
					Documentation "Slaps the given player. Slap direction is randomized."
				}
				Method
				{
					Declaration "bool SlapPlayer(CBasePlayer@ pSlapper, CBasePlayer@ pSlappee, float flDamage, int iDamageType = 0)"
					Documentation "Slaps the given player. Slapping player must have admin rights. Target player cannot be an admin. Slap direction is randomized."
				}
				Method
				{
					Declaration "bool SlapPlayer(CBasePlayer@ pSlappee, float flDamage, const Vector& in vecDirection, int iDamageType = 0)"
					Documentation "Slaps the given player."
				}
				Method
				{
					Declaration "bool SlapPlayer(CBasePlayer@ pSlapper, CBasePlayer@ pSlappee, float flDamage, const Vector& in vecDirection, int iDamageType = 0)"
					Documentation "Slaps the given player. Slapping player must have admin rights. Target player cannot be an admin."
				}
				Method
				{
					Declaration "bool BanPlayer(CBasePlayer@ pBannee, const float flCustomBanTime = -1)"
					Documentation "Bans the given player."
				}
				Method
				{
					Declaration "bool BanPlayer(CBasePlayer@ pBanner, CBasePlayer@ pBannee, const float flCustomBanTime = -1)"
					Documentation "Bans the given player. Banning player must have admin rights Target player cannot be an admin."
				}
				Method
				{
					Declaration "bool KickPlayer(CBasePlayer@ pKickee, const float flCustomBanTime = -1)"
					Documentation "Kicks the given player."
				}
				Method
				{
					Declaration "bool KickPlayer(CBasePlayer@ pKicker, CBasePlayer@ pKickee, const float flCustomBanTime = -1)"
					Documentation "Kicks the given player. Kicking player must have admin rights. Target player cannot be an admin."
				}
				Method
				{
					Declaration "bool KillPlayer(CBasePlayer@ pKillee, float flRespawntime = -1.0f)"
					Documentation "Kills the given player."
				}
				Method
				{
					Declaration "bool KillPlayer(CBasePlayer@ pKiller, CBasePlayer@ pKillee, float flRespawntime = -1.0f)"
					Documentation "Kills the given player. Killing player must have admin rights. Target player cannot be an admin."
				}
				Method
				{
					Declaration "uint GetReservedSlots() const"
					Documentation "Gets the number of reserved slots."
				}
				Method
				{
					Declaration "void SetReservedSlots(uint uiReservedSlots)"
					Documentation "Sets the number of reserved slots."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName TimeDifference
			Documentation "Represents the difference between 2 times."
			Flags 7938
			Methods
			{
				Method
				{
					Declaration "void SetTime(const DateTime& in time)"
					Documentation "Sets the time difference to the range between 0 and time."
				}
				Method
				{
					Declaration "void SetDifferenceBetween(const DateTime& in end, const DateTime& in begin)"
					Documentation "Sets the time difference to the range between beginning and end. If begin is later than end, is negative."
				}
				Method
				{
					Declaration "void MakeAbsolute()"
					Documentation "Makes the time difference absolute."
				}
				Method
				{
					Declaration "int GetYears() const"
					Documentation "Gets the time difference in years."
				}
				Method
				{
					Declaration "int GetDays() const"
					Documentation "Gets the time difference in days."
				}
				Method
				{
					Declaration "int GetHours() const"
					Documentation "Gets the time difference in hours."
				}
				Method
				{
					Declaration "int GetMinutes() const"
					Documentation "Gets the time difference in minutes."
				}
				Method
				{
					Declaration "int GetSeconds() const"
					Documentation "Gets the time difference in seconds."
				}
				Method
				{
					Declaration "bool IsPositive() const"
					Documentation "Returns whether the time difference is positive."
				}
				Method
				{
					Declaration "double GetTimeDifference() const"
					Documentation "Gets the time difference"
				}
				Method
				{
					Declaration "TimeDifference& opAssign( const DateTime& in time)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "TimeDifference& opAssign(double timeDiff)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "TimeDifference& opAssign(const TimeDifference& in other)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "void TimeDifference(const DateTime& in time)"
					Documentation "Sets the time difference to the range between 0 and time."
				}
				Method
				{
					Declaration "void TimeDifference(const DateTime& in end, const DateTime& in begin)"
					Documentation "Sets the time difference to the range between beginning and end. If begin is later than end, is negative."
				}
				Method
				{
					Declaration "void TimeDifference(double flValue)"
					Documentation "Sets the time difference to the given value, in seconds"
				}
				Method
				{
					Declaration "void TimeDifference(const TimeDifference& in other)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "void TimeDifference()"
					Documentation "Default constructor"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName DateTime
			Documentation "DateTime class.\nNote: milliseconds default to 0 due to limited accuracy."
			Flags 7938
			Methods
			{
				Method
				{
					Declaration "DateTime opAdd(const TimeDifference& in diffTime) const"
					Documentation "Adds this DateTime and the given TimeDifferene together, returning a copy containing the new time."
				}
				Method
				{
					Declaration "DateTime& opAddAssign(const TimeDifference& in diffTime)"
					Documentation "Adds the given TimeDifference to this one."
				}
				Method
				{
					Declaration "TimeDifference opSub(const DateTime& in other) const"
					Documentation "Subtracts the given DateTime from this one, resulting in a TimeDifference object."
				}
				Method
				{
					Declaration "int opCmp(const DateTime& in other) const"
					Documentation "Comparison operator."
				}
				Method
				{
					Declaration "bool opEquals(const DateTime& in other) const"
					Documentation "Returns whether these two DateTimes represent the same time."
				}
				Method
				{
					Declaration "void ToString(string& out szResult) const"
					Documentation "Returns a string representation of this datetime."
				}
				Method
				{
					Declaration "int Format(string& out szResult, const string& in szFormat) const"
					Documentation "Formats this datetime as a string.\nReturns the length of the destination string, or 0 if the buffer was not large enough."
				}
				Method
				{
					Declaration "void SetYear(int iYear)"
					Documentation "Set year."
				}
				Method
				{
					Declaration "void SetMonth(int iMonth)"
					Documentation "Set month (0-11)."
				}
				Method
				{
					Declaration "void SetDayOfMonth(int iDay)"
					Documentation "Set day of month (0-30)."
				}
				Method
				{
					Declaration "void SetHour(int iHours)"
					Documentation "Set hours (0-23)."
				}
				Method
				{
					Declaration "void SetMinutes(int iMinutes)"
					Documentation "Set minutes (0-59)."
				}
				Method
				{
					Declaration "void SetSeconds(int iSeconds)"
					Documentation "Set seconds (0-59)."
				}
				Method
				{
					Declaration "void SetMilliseconds(uint uiMilliseconds)"
					Documentation "Set milliseconds."
				}
				Method
				{
					Declaration "int GetYear() const"
					Documentation "Get year."
				}
				Method
				{
					Declaration "int GetMonth() const"
					Documentation "Get month (0-11)."
				}
				Method
				{
					Declaration "int GetDayOfMonth() const"
					Documentation "Get day of month (0-30)."
				}
				Method
				{
					Declaration "int GetHour() const"
					Documentation "Get hours (0-23)."
				}
				Method
				{
					Declaration "int GetMinutes() const"
					Documentation "Get minutes (0-59)."
				}
				Method
				{
					Declaration "int GetSeconds() const"
					Documentation "Get seconds (0-59)."
				}
				Method
				{
					Declaration "uint GetMilliseconds() const"
					Documentation "Get milliseconds."
				}
				Method
				{
					Declaration "void SetUnixTimestamp(time_t time)"
					Documentation "Sets time as a unix timestamp."
				}
				Method
				{
					Declaration "time_t ToUnixTimestamp() const"
					Documentation "Get time as a unix timestamp."
				}
				Method
				{
					Declaration "DateTime& opAssign(time_t time)"
					Documentation "Assignment operator."
				}
				Method
				{
					Declaration "DateTime& opAssign(const DateTime& in ref)"
					Documentation "Assignment operator."
				}
				Method
				{
					Declaration "void DateTime(const DateTime& in ref)"
					Documentation "Copy constructor."
				}
				Method
				{
					Declaration "void DateTime(time_t time)"
					Documentation "Unix timestamp constructor."
				}
				Method
				{
					Declaration "void DateTime(uint uiMilliseconds, int iSeconds, int iMinutes, int iHour, int iDayOfMonth, int iMonth, int iYear)"
					Documentation "Init constructor."
				}
				Method
				{
					Declaration "void DateTime()"
					Documentation "Default constructor."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName Vote
			Documentation "Vote class. Can be used to start custom votes."
			Flags 5
			Methods
			{
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data set on this vote."
				}
				Method
				{
					Declaration "void SetUserData(any@ pUserData)"
					Documentation "Sets the user data on this vote."
				}
				Method
				{
					Declaration "any@ GetUserData()"
					Documentation "Gets the user data set on this vote."
				}
				Method
				{
					Declaration "void Start()"
					Documentation "Starts this vote."
				}
				Method
				{
					Declaration "void SetVoteEndCallback(VoteEnd@ pCallback)"
					Documentation "Sets the vote end callback."
				}
				Method
				{
					Declaration "void SetVoteBlockedCallback(VoteBlocked@ pCallback)"
					Documentation "Sets the vote blocked callback."
				}
				Method
				{
					Declaration "void SetNoText(const string& in szNoText)"
					Documentation "Sets the no button text."
				}
				Method
				{
					Declaration "const string& GetNoText() const"
					Documentation "Gets the no button text."
				}
				Method
				{
					Declaration "void SetYesText(const string& in szYesText)"
					Documentation "Sets the yes button text."
				}
				Method
				{
					Declaration "const string& GetYesText() const"
					Documentation "Gets the yes button text."
				}
				Method
				{
					Declaration "void SetVoteText(const string& in szVoteText)"
					Documentation "Sets the vote text."
				}
				Method
				{
					Declaration "const string& GetVoteText() const"
					Documentation "Gets the vote text."
				}
				Method
				{
					Declaration "const string& GetName() const"
					Documentation "Gets name of this vote."
				}
				Method
				{
					Declaration "Vote@ Vote(const string& in szName, const string& in szVoteText, float flVoteLength, float flPercentageNeeded)"
					Documentation Constructor
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CTextMenus
			Documentation "Text menu manager."
			Flags 262145
			Methods
			{
			}
			Properties
			{
				Property
				{
					Declaration "const TextMenuId_t INVALID_TEXT_MENU_ID"
					Documentation "Invalid text menu id."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CTextMenu
			Documentation "Text menu."
			Flags 5
			Methods
			{
				Method
				{
					Declaration "void AddItem( const string& in szName, any@ pUserData = null)"
					Documentation "Adds an item to the menu."
				}
				Method
				{
					Declaration "void SetTitle(const string& in szTitle)"
					Documentation "Sets the title."
				}
				Method
				{
					Declaration "const string& GetTitle() const"
					Documentation "Gets the title."
				}
				Method
				{
					Declaration "const CTextMenuItem@ GetItem(const size_t uiIndex) const"
					Documentation "Gets the item at the given index."
				}
				Method
				{
					Declaration "uint GetPageCount() const"
					Documentation "Gets the number of pages in this menu."
				}
				Method
				{
					Declaration "size_t GetItemCount() const"
					Documentation "Gets the number of items in this menu."
				}
				Method
				{
					Declaration "void Open(const int iDisplayTime, const uint page, CBasePlayer@ pPlayer)"
					Documentation "Opens the menu and keeps it open for the given amount of time.\nTime must be a positive value. Maximum 255 seconds. Pass 0 for infinite.\nYou must pass the player that receives this menu."
				}
				Method
				{
					Declaration "void Open(const int iDisplayTime, const uint page, array<edict_t@>@ pPlayers = null)"
					Documentation "Opens the menu and keeps it open for the given amount of time.\nTime must be a positive value. Maximum 255 seconds. Pass 0 for infinite.\nYou can optionally pass a list of players that receive this menu."
				}
				Method
				{
					Declaration "void Unregister()"
					Documentation "Unregisters this text menu."
				}
				Method
				{
					Declaration "bool Register()"
					Documentation "Registers this text menu."
				}
				Method
				{
					Declaration "bool IsRegistered() const"
					Documentation "Returns whether this menu is registered or not."
				}
				Method
				{
					Declaration "TextMenuId_t get_Id() const"
					Documentation "Gets this text menu\'s id. If CTextMenus::INVALID_TEXT_MENU_ID, this is an unregistered menu."
				}
				Method
				{
					Declaration "CTextMenu@ CTextMenu(TextMenuPlayerSlotCallback@ inputCB)"
					Documentation "Constructor. You must pass a player slot callback and handle the input yourself."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CTextMenuItem
			Documentation "Text menu item. Do not store handles to this object."
			Flags 262145
			Methods
			{
			}
			Properties
			{
				Property
				{
					Declaration "any@ m_pUserData"
					Documentation "User data. For internal use."
				}
				Property
				{
					Declaration "const string m_szName"
					Documentation "Item name. Used for display."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CStartInventory
			Documentation "Player start inventory manager\nCan be used to modify the player\'s start inventory during a map\nAlways check if inventory modification is available before trying to make any changes"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "uint GetAmount(const string& in szEntry) const"
					Documentation "Gets the amount of a given entry.\nReturns 0 if the entry doesn\'t exist."
				}
				Method
				{
					Declaration "bool Limit(const string& in szItem, uint uiAmount)"
					Documentation "Limits the inventory content of the given item to at most uiAmount.\nDoes nothing if there is less than uiAmount in the inventory."
				}
				Method
				{
					Declaration "bool Restock(const string& in szItem, uint uiAmount)"
					Documentation "Restocks the inventory with up to uiAmount of the given item.\nDoes nothing if the current amount already exceeds the given amount."
				}
				Method
				{
					Declaration "bool Remove(const string& in szEntry)"
					Documentation "Removes an entry from the inventory."
				}
				Method
				{
					Declaration "bool Add(const string& in szEntry, uint uiAmount, bool fAdd = true)"
					Documentation "Add or subtract from an existing value.\nInserts if the value is not already in the inventory."
				}
				Method
				{
					Declaration "void Set(const string& in szEntry)"
					Documentation "Set an entry to the inventory."
				}
				Method
				{
					Declaration "void Set(const string& in szItem, uint uiAmount)"
					Documentation "Set an item in the inventory.\nSets the amount if the item is already in the inventory."
				}
				Method
				{
					Declaration "bool Exists(const string& in szEntry) const"
					Documentation "Returns whether the given entry is present in the inventory."
				}
				Method
				{
					Declaration "bool IsAvailable() const"
					Documentation "Returns whether inventory modification is available."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CPluginManager
			Documentation "Plugin manager for handling basic plugin operations"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "array<string>@ GetPluginList() const"
					Documentation "Gets the list of plugins as strings."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CPersistence
			Documentation "Persistence manager"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void Clear(const PersistID_t ID)"
					Documentation "Clears all values."
				}
				Method
				{
					Declaration "void Clear(const PersistID_t ID, const string& in szKey)"
					Documentation "Clears the given value."
				}
				Method
				{
					Declaration "void Set(const PersistID_t ID, const string& in szKey, float flValue)"
					Documentation "Sets the given value as a string."
				}
				Method
				{
					Declaration "void Set(const PersistID_t ID, const string& in szKey, uint32 uiValue)"
					Documentation "Sets the given value as a string."
				}
				Method
				{
					Declaration "void Set(const PersistID_t ID, const string& in szKey, int32 iValue)"
					Documentation "Sets the given value as a string."
				}
				Method
				{
					Declaration "void Set(const PersistID_t ID, const string& in szKey, bool fValue)"
					Documentation "Sets the given value as a boolean."
				}
				Method
				{
					Declaration "void Set(const PersistID_t ID, const string& in szKey, const string& in szValue)"
					Documentation "Sets the given value as a string."
				}
				Method
				{
					Declaration "float GetFloat(const PersistID_t ID, const string& in szKey)"
					Documentation "Returns the given value as a float, or 0.0 if it does not exist."
				}
				Method
				{
					Declaration "uint32 GetUlong(const PersistID_t ID, const string& in szKey, int iRadix = 10)"
					Documentation "Returns the given value as a unsigned long, or 0 if it does not exist."
				}
				Method
				{
					Declaration "int32 GetLong(const PersistID_t ID, const string& in szKey, int iRadix = 10)"
					Documentation "Returns the given value as a long, or 0 if it does not exist."
				}
				Method
				{
					Declaration "bool GetBoolean(const PersistID_t ID, const string& in szKey)"
					Documentation "Returns the given value as a boolean, or false if it does not exist."
				}
				Method
				{
					Declaration "const string& GetString(const PersistID_t ID, const string& in szKey)"
					Documentation "Returns the given value as a string, or  if it does not exist."
				}
				Method
				{
					Declaration "bool Exists(const PersistID_t ID, const string& in szKey)"
					Documentation "Returns whether the given key exists in this instance."
				}
				Method
				{
					Declaration "size_t Size(int iId) const"
					Documentation "Returns the number of persisted items in this instance."
				}
				Method
				{
					Declaration "const string& GetName(const PersistID_t ID) const"
					Documentation "Returns the name of this instance."
				}
				Method
				{
					Declaration "void Clear()"
					Documentation "Clears all persistence instances.\nMake sure to avoid calling handles referencing the cleared instances."
				}
				Method
				{
					Declaration "void ClearInstance(const PersistID_t ID)"
					Documentation "Clears the specified persistence instance."
				}
				Method
				{
					Declaration "void ClearInstance(const string& in szName)"
					Documentation "Clears the specified persistence instance."
				}
				Method
				{
					Declaration "const string& GetCurrentMapName() const"
					Documentation "Returns the name of the current map."
				}
				Method
				{
					Declaration "const string& GetPreviousMapName() const"
					Documentation "Returns the name of the previous map. Can be empty if the server has just started."
				}
				Method
				{
					Declaration "PersistID_t RegisterInstance(const string& in szName)"
					Documentation "Returns a persistence instance tied to the given name. Will be created if it does not already exist."
				}
				Method
				{
					Declaration "bool KeepIfPrevious(const string& in szMapName)"
					Documentation "Will make the persistence manager keep the previous map\'s persistence instancesif the previous map\'s name matches the given map name."
				}
				Method
				{
					Declaration "bool KeepIfPrevious(const array<string>@ pArray)"
					Documentation "Will make the persistence manager keep the previous map\'s persistence instancesif the previous map\'s name matches any of the elements in the array."
				}
				Method
				{
					Declaration "void SetKeep(bool fValue)"
					Documentation "Sets whether the previous map\'s persistence instances will be kept."
				}
				Method
				{
					Declaration "bool ShouldKeep() const"
					Documentation "Returns whether the previous map\'s persistence instances will be kept."
				}
				Method
				{
					Declaration "bool IsValidHandle(const PersistID_t ID) const"
					Documentation "Returns whether the given persistence instance handle is valid."
				}
				Method
				{
					Declaration "bool Exists(const string& in szName) const"
					Documentation "Returns whether the given persistence instance exists."
				}
			}
			Properties
			{
				Property
				{
					Declaration "const PersistID_t INVALID_ID"
					Documentation "Id used by invalid persistence objects."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CMap
			Documentation "Map state variables"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "bool LoadSkillFile(const string& in szFileName)"
					Documentation "Load a custom skill file."
				}
				Method
				{
					Declaration "bool LoadGlobalSkillFile()"
					Documentation "Reload the global skill file."
				}
				Method
				{
					Declaration "bool LoadMapSkillFile()"
					Documentation "Reload the standard map skill file (_skl.cfg)."
				}
				Method
				{
					Declaration "bool HasForcedPlayerModels() const"
					Documentation "Get if player models are forced"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CMapCycle
			Documentation "Map cycle read only manager"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "string GetNextMap(const string& in szMapName) const"
					Documentation "Gets the next map in the cycle after the given one."
				}
				Method
				{
					Declaration "string GetNextMap() const"
					Documentation "Gets the next map in the cycle."
				}
				Method
				{
					Declaration "size_t Count() const"
					Documentation "Returns the number of maps in the map cycle."
				}
				Method
				{
					Declaration "array<string>@ GetMapCycle() const"
					Documentation "Gets the map cycle as an array of strings."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CAngelscript
			Documentation "Angelscript debugging functions"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "uint GetMinorVersion() const"
					Documentation "Gets the minor version of the Angelscript Sven Co-op implementation"
				}
				Method
				{
					Declaration "uint GetMajorVersion() const"
					Documentation "Gets the major version of the Angelscript Sven Co-op implementation"
				}
				Method
				{
					Declaration "uint GetAngelscriptVersion() const"
					Documentation "Gets the current version of Angelscript"
				}
				Method
				{
					Declaration "string GetAngelscriptVersionString() const"
					Documentation "Gets the current version of Angelscript as a string"
				}
				Method
				{
					Declaration "string GetAngelscriptDescription() const"
					Documentation "Returns a brief description of Angelscript"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CGlobalState
			Documentation "Global state manager"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void DumpGlobals() const"
					Documentation "Dumps all global state objects to the console"
				}
				Method
				{
					Declaration "bool EntityInTable(const string& in globalName) const"
					Documentation "Returns whether the global state object is in the table of objects"
				}
				Method
				{
					Declaration "const GLOBALESTATE EntityGetState(const string& in globalName) const"
					Documentation "Gets the state of the specified global state object"
				}
				Method
				{
					Declaration "const GlobalEntity@ EntityFromTable(const string& in globalName) const"
					Documentation "Finds a global state object by name"
				}
				Method
				{
					Declaration "void EntityUpdate(const string& in globalName, const string& in mapName)"
					Documentation "Updates the level name of the specified global state object"
				}
				Method
				{
					Declaration "void EntitySetState(const string& in globalName, GLOBALESTATE state)"
					Documentation "Sets the state of an existing global state object"
				}
				Method
				{
					Declaration "void EntityAdd(const string& in globalName, const string& in mapName , GLOBALESTATE state)"
					Documentation "Adds a new global state object"
				}
				Method
				{
					Declaration "void ClearStates()"
					Documentation "Clears all global states"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName GlobalEntity
			Documentation "Global state entity"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "string levelName() const"
					Documentation "Name of the level where this global state was last updated"
				}
				Method
				{
					Declaration "string name() const"
					Documentation "Gets the name of this global state"
				}
			}
			Properties
			{
				Property
				{
					Declaration "GlobalEntity@ next"
					Documentation "Next global state entity in the list"
				}
				Property
				{
					Declaration "GLOBALESTATE state"
					Documentation "Global state of this entity"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CWeaponFuncs
			Documentation "Weapon functions class."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void RadiusDamage(const Vector& in vecSrc, entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, float flRadius, int iClassIgnore, int bitsDamageType)"
					Documentation "Deals radius damage."
				}
				Method
				{
					Declaration "int DamageDecal(CBaseEntity@ pEntity, int bitsDamageType)"
					Documentation "Creates a damage decal on the given entity."
				}
				Method
				{
					Declaration "void SpawnBlood(const Vector& in vecSpot, int bloodColor, float flDamage)"
					Documentation "Spawns blood at the given location."
				}
				Method
				{
					Declaration "void DecalGunshot(TraceResult& in trace, int iBulletType)"
					Documentation "Creates a gunshot decal at the trace hit point."
				}
				Method
				{
					Declaration "float WeaponTimeBase()"
					Documentation "Gets the weapon time base."
				}
				Method
				{
					Declaration "void AddMultiDamage(entvars_t@ pevInflictor, CBaseEntity@ pEntity, float flDamage, int bitsDamageType)"
					Documentation "Add multi damage."
				}
				Method
				{
					Declaration "void ApplyMultiDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker)"
					Documentation "Applies multi damage."
				}
				Method
				{
					Declaration "void ClearMultiDamage()"
					Documentation "Clears the multi damage data."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CPlayerFuncs
			Documentation "Global player functions"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration " void BotDisconnect(CBasePlayer@ pBot)"
					Documentation "Disconnects the bot. This will call ClientDisconnect and removes the entity. Do not use the entity after this call."
				}
				Method
				{
					Declaration "CBasePlayer@ CreateBot(const string& in szName)"
					Documentation "Creates a bot with the given name."
				}
				Method
				{
					Declaration "int GetAmmoIndex(const string& in szAmmoName)"
					Documentation "Gets the index of the given ammo, or -1 if it is invalid"
				}
				Method
				{
					Declaration "float SharedRandomFloat(uint iRandomSeed, float iLow, float iHigh)"
					Documentation "Gets a random float whose value is the same on both the client and server."
				}
				Method
				{
					Declaration "int SharedRandomLong(uint iRandomSeed, int iLow, int iHigh)"
					Documentation "Gets a random long whose value is the same on both the client and server."
				}
				Method
				{
					Declaration "bool IsSpawnPointOccupied(CBaseEntity@ pSpawnEnt)"
					Documentation "Returns whether the given spawn point entity is occupied"
				}
				Method
				{
					Declaration "bool IsSpawnPointValid(CBaseEntity@ pSpawnEnt, CBaseEntity@ pPlayer)"
					Documentation "Returns whether the given spawn point is valid for the given player"
				}
				Method
				{
					Declaration "bool SpawnPointFilterPasses(CBaseEntity@ pSpawnEnt, CBaseEntity@ pPlayer)"
					Documentation "Returns whether the given player passes the given spawn point\'s filter"
				}
				Method
				{
					Declaration "void RespawnAllPlayers(bool fMoveLivingPlayers = true, bool fRespawnDeadPlayers = false)"
					Documentation "Relocates all players to active spawn points. If a player is dead and fRespawnDeadPlayers is true, the player is respawned."
				}
				Method
				{
					Declaration "void RespawnPlayer(CBasePlayer@ pPlayer, bool fMoveLivingPlayers = true, bool fRespawnDeadPlayers = false)"
					Documentation "Relocates the given player to an active spawn point. If the player is dead and fRespawnDeadPlayers is true, the player is respawned."
				}
				Method
				{
					Declaration "void ApplyMapCfgToPlayer(CBasePlayer@ pPlayer, bool fReEquip = false)"
					Documentation "Applies the map configuration on the given player.\nWill stack if called multiple times, unless fReEquip is true, in which case the player is stripped of all weapons and ammo first."
				}
				Method
				{
					Declaration "AdminLevel_t StringToAdminLevel(const string& in szString) const"
					Documentation "Converts a string containing one of AdminLevelToString\'s return values to an admin level.Returns ADMIN_NO if the string cannot be converted to a suitable constant"
				}
				Method
				{
					Declaration "string AdminLevelToString(const AdminLevel_t adminLevel) const"
					Documentation "Converts the admin level to a string. If the level is an invalid value, an empty string is returned"
				}
				Method
				{
					Declaration "AdminLevel_t AdminLevel(CBasePlayer@ pPlayer) const"
					Documentation "Returns the admin level for a given player."
				}
				Method
				{
					Declaration "bool CheatsAllowed(CBasePlayer@ pPlayer, const string& in szCheatName, bool fMustBeAlive = true, bool fNoMessage = false) const"
					Documentation "Returns whether cheats are enabled for the given player."
				}
				Method
				{
					Declaration "bool GetNextBestWeapon(CBasePlayer@ pPlayer, CBasePlayerItem@ pCurrentWeapon)"
					Documentation "Makes the given player select the next best weapon available, based on the current weapon."
				}
				Method
				{
					Declaration "void ConcussionEffect(CBaseEntity@ pEntity, float amplitude, float frequency, float fadeTime)"
					Documentation "Applies concussion effect to a given player."
				}
				Method
				{
					Declaration "void ScreenFadeAll(const Vector& in color, float fadeTime, float fadeHold, int alpha, int flags)"
					Documentation "Shows a message to all players."
				}
				Method
				{
					Declaration "void ScreenFade(CBaseEntity@ pEntity, const Vector& in color, float fadeTime, float fadeHold, int alpha, int flags)"
					Documentation "Shows a message to a given player."
				}
				Method
				{
					Declaration "void ScreenShakeAll(const Vector& in center, float amplitude, float frequency, float duration)"
					Documentation "Shakes the screen for all players"
				}
				Method
				{
					Declaration "void ScreenShake(const Vector& in center, float amplitude, float frequency, float duration, float radius)"
					Documentation "Shakes the screen for players near a certain location"
				}
				Method
				{
					Declaration "int GetNumPlayers() const"
					Documentation "Gets the number of players that are currently connected to the server."
				}
				Method
				{
					Declaration "CBasePlayer@ FindPlayerByName(const string& in szName, bool bCaseSensitive = true)"
					Documentation "Finds a player by name"
				}
				Method
				{
					Declaration "CBasePlayer@ FindPlayerByIndex(int index)"
					Documentation "Finds a player by index"
				}
				Method
				{
					Declaration "void HudUpdateTime(CBasePlayer@ pTargetPlayer, uint8 iChannel, float flTime)"
					Documentation "Updates value of a custom time display."
				}
				Method
				{
					Declaration "void HudTimeDisplay(CBasePlayer@ pTargetPlayer, const HUDNumDisplayParams& in params)"
					Documentation "Shows a custom time display to a given player or to all players if pTargetPlayer is not specified."
				}
				Method
				{
					Declaration "void HudUpdateNum(CBasePlayer@ pTargetPlayer, uint8 iChannel, float flValue)"
					Documentation "Updates value of a custom numberic display."
				}
				Method
				{
					Declaration "void HudNumDisplay(CBasePlayer@ pTargetPlayer, const HUDNumDisplayParams& in params)"
					Documentation "Shows a custom numeric display to a given player or to all players if pTargetPlayer is not specified."
				}
				Method
				{
					Declaration "void HudCustomSprite(CBasePlayer@ pTargetPlayer, const HUDSpriteParams& in params)"
					Documentation "Shows a custom HUD sprite to a given player or to all players if pTargetPlayer is not specified."
				}
				Method
				{
					Declaration "void HudToggleElement(CBasePlayer@ pTargetPlayer, uint8 iChannel, bool fVisible)"
					Documentation "Shows or hides HUD element occupying a given channel."
				}
				Method
				{
					Declaration "void PrintKeyBindingStringAll(const string& in szString)"
					Documentation "Prints a string containing key bindings to the screen of all players."
				}
				Method
				{
					Declaration "void PrintKeyBindingString(CBasePlayer@ pPlayer, const string& in szString)"
					Documentation "Prints a string containing key bindings to the screen of the given player."
				}
				Method
				{
					Declaration "void HudMessageAll(const HUDTextParams& in textParams, const string& in szMessage)"
					Documentation "Shows a HUD message to all players."
				}
				Method
				{
					Declaration "void HudMessage(CBasePlayer@ pTargetPlayer, const HUDTextParams& in textParams, const string& in szMessage)"
					Documentation "Shows a HUD message to a given player."
				}
				Method
				{
					Declaration "void ShowMessageAll(const string& in szString)"
					Documentation "Shows a message to all players."
				}
				Method
				{
					Declaration "void ShowMessage(CBasePlayer@ pTargetPlayer, const string& in szString)"
					Documentation "Shows a message to the given player."
				}
				Method
				{
					Declaration "void CenterPrintAll(const string& in szMessage, const string& in szLine2 = \"\", const string& in szLine3 = \"\", const string& in szLine4 = \"\", const string& in szLine5 = \"\")"
					Documentation "Prints one or more messages centered on the HUD of all players."
				}
				Method
				{
					Declaration "void ClientPrintAll(HUD iMsgDest, const string& in szMessage, const string& in szLine2 = \"\", const string& in szLine3 = \"\", const string& in szLine4 = \"\", const string& in szLine5 = \"\")"
					Documentation "Prints one or more messages on the HUD of all players.\nSee HUD enum."
				}
				Method
				{
					Declaration "void ClientPrint(CBasePlayer@ pTargetPlayer, HUD iMsgDest, const string& in szMessage, const string& in szLine2 = \"\", const string& in szLine3 = \"\", const string& in szLine4 = \"\", const string& in szLine5 = \"\")"
					Documentation "Prints one or more messages on the HUD of the given player.\nSee HUD enum."
				}
				Method
				{
					Declaration "void SayTextAll(CBasePlayer@ pOriginatingPlayer, const string& in szText)"
					Documentation "Says text to all players"
				}
				Method
				{
					Declaration "void SayText(CBasePlayer@ pTargetPlayer, const string& in szText)"
					Documentation "Says text to a specific player"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName HUDNumDisplayParams
			Documentation "Holds parameters for custom numeric/time display."
			Flags 2
			Methods
			{
				Method
				{
					Declaration "HUDNumDisplayParams& opAssign(const HUDNumDisplayParams& in other)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "void HUDNumDisplayParams(const HUDNumDisplayParams& in other)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "void HUDNumDisplayParams()"
					Documentation Constructor
				}
			}
			Properties
			{
				Property
				{
					Declaration "int16 height"
					Documentation "Sprite height\nRange: 0-512 (0: auto; use total height of the sprite)"
				}
				Property
				{
					Declaration "int16 width"
					Documentation "Sprite width\nRange: 0-512 (0: auto; use total width of the sprite)"
				}
				Property
				{
					Declaration "uint8 top"
					Documentation "Sprite top offset\nRange: 0-255"
				}
				Property
				{
					Declaration "uint8 left"
					Documentation "Sprite left offset\nRange: 0-255"
				}
				Property
				{
					Declaration "string_t spritename"
					Documentation "Sprite name"
				}
				Property
				{
					Declaration "uint8 effect"
					Documentation "Effect\nSee HUD_EFFECT enum."
				}
				Property
				{
					Declaration "float fxTime"
					Documentation "Effect time"
				}
				Property
				{
					Declaration "float holdTime"
					Documentation "Hold time"
				}
				Property
				{
					Declaration "float fadeoutTime"
					Documentation "Fade out time"
				}
				Property
				{
					Declaration "float fadeinTime"
					Documentation "Fade in time"
				}
				Property
				{
					Declaration "RGBA color2"
					Documentation "Color 2"
				}
				Property
				{
					Declaration "RGBA color1"
					Documentation "Color 1"
				}
				Property
				{
					Declaration "float y"
					Documentation "Vertical position on the screen.\n<0, 1.0> = top to bottom\n(-1.0, 0) = bottom to top\n-1.0 = centered"
				}
				Property
				{
					Declaration "float x"
					Documentation "Horizontal position on the screen.\n<0, 1.0> = left to right\n(-1.0, 0) = right to left\n-1.0 = centered"
				}
				Property
				{
					Declaration "uint8 maxdigits"
					Documentation "Maximum number of digits (numeric display only)"
				}
				Property
				{
					Declaration "uint8 defdigits"
					Documentation "Default number of digits (numeric display only)"
				}
				Property
				{
					Declaration "float value"
					Documentation Value
				}
				Property
				{
					Declaration "int flags"
					Documentation "Flags\nSee HUD_ELEM, HUD_NUM (numeric display only) and HUD_TIME (time display only) enums."
				}
				Property
				{
					Declaration "uint8 channel"
					Documentation "Channel.\nRange: 0-15 (each module type has its own channel group)."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName HUDSpriteParams
			Documentation "Holds parameters for custom sprite."
			Flags 2
			Methods
			{
				Method
				{
					Declaration "HUDSpriteParams& opAssign(const HUDSpriteParams& in other)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "void HUDSpriteParams(const HUDSpriteParams& in other)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "void HUDSpriteParams()"
					Documentation Constructor
				}
			}
			Properties
			{
				Property
				{
					Declaration "uint8 effect"
					Documentation "Effect\nSee HUD_EFFECT enum."
				}
				Property
				{
					Declaration "float fxTime"
					Documentation "Effect time"
				}
				Property
				{
					Declaration "float holdTime"
					Documentation "Hold time"
				}
				Property
				{
					Declaration "float fadeoutTime"
					Documentation "Fade out time"
				}
				Property
				{
					Declaration "float fadeinTime"
					Documentation "Fade in time"
				}
				Property
				{
					Declaration "float framerate"
					Documentation Framerate
				}
				Property
				{
					Declaration "uint8 numframes"
					Documentation "Number of frames"
				}
				Property
				{
					Declaration "uint8 frame"
					Documentation Frame
				}
				Property
				{
					Declaration "RGBA color2"
					Documentation "Color 2"
				}
				Property
				{
					Declaration "RGBA color1"
					Documentation "Color 1"
				}
				Property
				{
					Declaration "float y"
					Documentation "Vertical position on the screen.\n<0, 1.0> = top to bottom\n(-1.0, 0) = bottom to top\n-1.0 = centered"
				}
				Property
				{
					Declaration "float x"
					Documentation "Horizontal position on the screen.\n<0, 1.0> = left to right\n(-1.0, 0) = right to left\n-1.0 = centered"
				}
				Property
				{
					Declaration "int16 height"
					Documentation "Sprite height\nRange: 0-512 (0: auto; use total height of the sprite)"
				}
				Property
				{
					Declaration "int16 width"
					Documentation "Sprite width\nRange: 0-512 (0: auto; use total width of the sprite)"
				}
				Property
				{
					Declaration "uint8 top"
					Documentation "Sprite top offset\nRange: 0-255"
				}
				Property
				{
					Declaration "uint8 left"
					Documentation "Sprite left offset\nRange: 0-255"
				}
				Property
				{
					Declaration "string_t spritename"
					Documentation "Sprite name"
				}
				Property
				{
					Declaration "int flags"
					Documentation "Flags\nSee HUD_ELEM and HUD_SPR enums."
				}
				Property
				{
					Declaration "uint8 channel"
					Documentation "Channel.\nRange: 0-15 (each module type has its own channel group)."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName HUDTextParams
			Documentation "Parameters for text output to the HUD."
			Flags 2
			Methods
			{
				Method
				{
					Declaration "HUDTextParams& opAssign(const HUDTextParams& in other)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "void HUDTextParams(const HUDTextParams& in other)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "void HUDTextParams()"
					Documentation Constructor
				}
			}
			Properties
			{
				Property
				{
					Declaration "int channel"
					Documentation "Channel. 1-4."
				}
				Property
				{
					Declaration "float fxTime"
					Documentation "Effect time (scan effect only)"
				}
				Property
				{
					Declaration "float holdTime"
					Documentation "Hold time"
				}
				Property
				{
					Declaration "float fadeoutTime"
					Documentation "Fade out time"
				}
				Property
				{
					Declaration "float fadeinTime"
					Documentation "Fade in time"
				}
				Property
				{
					Declaration "uint8 a2"
					Documentation "Alpha 2"
				}
				Property
				{
					Declaration "uint8 b2"
					Documentation "Blue 2"
				}
				Property
				{
					Declaration "uint8 g2"
					Documentation "Green 2"
				}
				Property
				{
					Declaration "uint8 r2"
					Documentation "Red 2"
				}
				Property
				{
					Declaration "uint8 a1"
					Documentation "Alpha 1"
				}
				Property
				{
					Declaration "uint8 b1"
					Documentation "Blue 1"
				}
				Property
				{
					Declaration "uint8 g1"
					Documentation "Green 1"
				}
				Property
				{
					Declaration "uint8 r1"
					Documentation "Red 1"
				}
				Property
				{
					Declaration "int effect"
					Documentation "Effects.\n0 : Fade In/Out\n1 : Credits\n2 : Scan Out"
				}
				Property
				{
					Declaration "float y"
					Documentation "Vertical position on the screen.\n<0, 1.0> = top to bottom\n(-1.0, 0) = bottom to top\n-1.0 = centered"
				}
				Property
				{
					Declaration "float x"
					Documentation "Horizontal position on the screen.\n<0, 1.0> = left to right\n(-1.0, 0) = right to left\n-1.0 = centered"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName RGBA
			Documentation "Color stored as four uint8 components"
			Flags 2
			Methods
			{
				Method
				{
					Declaration "RGBA& opAssign(const RGBA& in other)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "void RGBA(const RGBA& in other)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "void RGBA(uint8 r, uint8 g, uint8 b, uint8 a = 255)"
					Documentation Constructor
				}
				Method
				{
					Declaration "void RGBA()"
					Documentation Constructor
				}
			}
			Properties
			{
				Property
				{
					Declaration "uint8 a"
					Documentation "Alpha component"
				}
				Property
				{
					Declaration "uint8 b"
					Documentation "Blue component"
				}
				Property
				{
					Declaration "uint8 g"
					Documentation "Green component"
				}
				Property
				{
					Declaration "uint8 r"
					Documentation "Red component"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CEntityFuncs
			Documentation "Global entity functions"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void PrecacheMaterialSounds(const Materials material)"
					Documentation "Precaches the sounds used by a particular material"
				}
				Method
				{
					Declaration "CBaseEntity@ RandomTargetname(const string& in szTargetname)"
					Documentation "Returns a randomly selected entity that has the given target name."
				}
				Method
				{
					Declaration "ScriptClassInterface@ CastToScriptClass(CBaseEntity@ pEntity)"
					Documentation "Casts an CBaseEntity@ representing a custom entity to the ScriptClassBaseClass type"
				}
				Method
				{
					Declaration "void EjectBrass(const Vector& in vecOrigin, const Vector& in vecVelocity, float flRotation, int iModel, TE_BOUNCE soundtype)"
					Documentation "tosses a brass shell from passed origin at passed velocity."
				}
				Method
				{
					Declaration "edict_t@ IndexEnt(int iEdictNum)"
					Documentation "Gets the edict for the given index."
				}
				Method
				{
					Declaration "int EntIndex(edict_t@ pEdict)"
					Documentation "Gets the index for the given edict."
				}
				Method
				{
					Declaration "bool IsValidEntity(edict_t@ pEntity)"
					Documentation "Returns whether this is a valid entity."
				}
				Method
				{
					Declaration "void Remove(CBaseEntity@ pEntity)"
					Documentation "Removes the given entity before the next frame starts."
				}
				Method
				{
					Declaration "bool IsMasterTriggered(const string& in szMaster, CBaseEntity@ pActivator)"
					Documentation "Returns whether the master with the given name would be triggered if activated by the given entity."
				}
				Method
				{
					Declaration "void FireTargets(const string& in szTargetName, CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f, float flDelay = 0.0f)"
					Documentation "Triggers targets. If flDelay is nonzero, causes a temporary entity to be spawned to trigger the target at the given time.\nThe temporary entity becomes the caller, not the entity passed in."
				}
				Method
				{
					Declaration "CBaseEntity@ Instance(int iEdictNum)"
					Documentation "Gets the entity instance based on an edict number"
				}
				Method
				{
					Declaration "CBaseEntity@ Instance(entvars_t@ vars)"
					Documentation "Gets the entity instance of an entvars instance"
				}
				Method
				{
					Declaration "CBaseEntity@ Instance(edict_t@ edict)"
					Documentation "Gets the entity instance of an edict instance"
				}
				Method
				{
					Declaration "void DispatchObjectCollisionBox(edict_t@ entity)"
					Documentation "Dispatches the initialization of the collision box of an entity"
				}
				Method
				{
					Declaration "bool EntvarsKeyvalue(edict_t@ entity, const string& in szKeyName, const string& in szValue)"
					Documentation "Handles the initialization of keyvalues located in the entity\'s entvars_t object."
				}
				Method
				{
					Declaration "bool DispatchKeyValue(edict_t@ entity, const string& in szKeyName, const string& in szValue)"
					Documentation "Dispatches the passing of a key value pair to an entity"
				}
				Method
				{
					Declaration "int DispatchSpawn(edict_t@ entity)"
					Documentation "Dispatches the spawning of an entity"
				}
				Method
				{
					Declaration "int BrushEntsInBox(array<CBaseEntity@>@ pArray, const Vector& in mins, const Vector& in maxs )"
					Documentation "Finds brush entities in a box"
				}
				Method
				{
					Declaration "int TargetsInBox(array<CBaseEntity@>@ pArray, const Vector& in mins, const Vector& in maxs)"
					Documentation "Finds targets in a box"
				}
				Method
				{
					Declaration "int EntitiesInBox(array<CBaseEntity@>@ pArray, const Vector& in mins, const Vector& in maxs, int flagMask)"
					Documentation "Finds entities in a box"
				}
				Method
				{
					Declaration "int MonstersInSphere(array<CBaseEntity@>@ pArray, const Vector& in vecCenter, float flRadius)"
					Documentation "Finds monsters in a sphere"
				}
				Method
				{
					Declaration "CBaseEntity@ FindEntityGeneric(const string& in szName, const Vector& in vecSrc, float flRadius)"
					Documentation "Finds an entity by target name in a sphere"
				}
				Method
				{
					Declaration "CBaseEntity@ FindEntityByTargetname(CBaseEntity@ startEntity, const string& in name)"
					Documentation "Finds an entity by target name"
				}
				Method
				{
					Declaration "CBaseEntity@ FindEntityByClassname(CBaseEntity@ startEntity, const string& in name)"
					Documentation "Finds an entity by class name"
				}
				Method
				{
					Declaration "CBaseEntity@ FindEntityByString(CBaseEntity@ pStartEntity,const string& in szKeyword, const string& in szValue)"
					Documentation "Finds an entity based on a key value pair"
				}
				Method
				{
					Declaration "CBaseEntity@ FindEntityInSphere(CBaseEntity@ pStartEntity, const Vector& in vecCenter, float flRadius,const string& in szValue = \"\", const string& in szKeyword = \"targetname\")"
					Documentation "Finds an entity in a sphere"
				}
				Method
				{
					Declaration "void SetSize(entvars_t@ pev, const Vector& in vecMin, const Vector& in vecMax)"
					Documentation "Set the size of an entity"
				}
				Method
				{
					Declaration "void SetModel(CBaseEntity@ entity, const string& in szFileName)"
					Documentation "Set the model of an entity"
				}
				Method
				{
					Declaration "void SetOrigin(CBaseEntity@ entity, const Vector& in vecOrigin)"
					Documentation "Set the origin of an entity"
				}
				Method
				{
					Declaration "void SpawnStickyGibs(entvars_t@ pevVictim, const Vector& in vecOrigin, int cGibs)"
					Documentation "Spawns sticky gibs for the target victim.\ncGibs specifies how many gibs there are."
				}
				Method
				{
					Declaration "void SpawnRandomGibs(entvars_t@ pevVictim, int cGibs, int iHuman)"
					Documentation "Spawns random gibs for the target victim.\niHuman specifies whether the gibs are human or alien."
				}
				Method
				{
					Declaration "void SpawnHeadGib(entvars_t@ pevVictim)"
					Documentation "Spawns a head gib for the target victim."
				}
				Method
				{
					Declaration "void UseSatchelCharges(entvars_t@ pevOwner, SATCHELCODE code)"
					Documentation "Triggers all satchel charges owned by pevOwner to either be released from ownership, or detonated."
				}
				Method
				{
					Declaration "CGrenade@ ShootBananaCluster(entvars_t@ pevOwner, const Vector& in vecStart, const Vector& in vecVelocity)"
					Documentation "Spawn a banana bomb."
				}
				Method
				{
					Declaration "CGrenade@ ShootMortar(entvars_t@ pevOwner, const Vector& in vecStart, const Vector& in vecVelocity)"
					Documentation "Spawns a mortar grenade."
				}
				Method
				{
					Declaration "CGrenade@ ShootContact(entvars_t@ pevOwner, const Vector& in vecStart, const Vector& in vecVelocity)"
					Documentation "Spawns a contact grenade."
				}
				Method
				{
					Declaration "CGrenade@ ShootTimed(entvars_t@ pevOwner, const Vector& in vecStart, const Vector& in vecVelocity, float flTime)"
					Documentation "Spawns a timed grenade."
				}
				Method
				{
					Declaration "CGib@ CreateGib( const Vector& in vecOrigin, const Vector& in vecAngles)"
					Documentation "Creates a server side gib."
				}
				Method
				{
					Declaration "CBaseEntity@ CreateRPGRocket(const Vector& in vecOrigin, const Vector& in vecAngles, const Vector& in vecVelocity, edict_t@ pOwner)"
					Documentation "Creates an rpg rocket with custom velocity."
				}
				Method
				{
					Declaration "CBaseEntity@ CreateRPGRocket(const Vector& in vecOrigin, const Vector& in vecAngles, edict_t@ pOwner)"
					Documentation "Creates an rpg rocket."
				}
				Method
				{
					Declaration "CBaseEntity@ CreateDisplacerPortal(const Vector& in vecOrigin, const Vector& in vecVelocity, edict_t@ pOwner, float flDamage, float flRadius)"
					Documentation "Creates a displacer portal."
				}
				Method
				{
					Declaration "void CreateExplosion(const Vector& in vecCenter, const Vector& in vecAngles, edict_t@ pOwner, int iMagnitude, bool fDoDamage)"
					Documentation "Creates an explosion.\nIf fDoDamage is true, also deals damage to entities within its effect radius, which is determined by the magnitude."
				}
				Method
				{
					Declaration "CBeam@ CreateBeam(const string& in szSpriteName, int width)"
					Documentation "Creates a beam entity with the given sprite and width set."
				}
				Method
				{
					Declaration "CSprite@ CreateSprite(const string& in szSpriteName, const Vector& in vecOrigin, bool fAnimated, float flFrameRate = 10.0f)"
					Documentation "Creates a sprite. flFrameRate must be set to a valid value to animate the sprite."
				}
				Method
				{
					Declaration "void CreateDecal(const string& in szDecalName, const Vector& in vecOrigin, const string& in szTargetName = \"\")"
					Documentation "Creates a decal with the specified name.\nIf given a name, has to be triggered to be placed, otherwise, is placed immediately."
				}
				Method
				{
					Declaration "CBaseEntity@ Create(const string& in szClassname, const Vector& in vecOrigin, const Vector& in vecAngles, bool fCreateAndDontSpawn, edict_t@ entOwner = null)"
					Documentation "Creates an entity by class name."
				}
				Method
				{
					Declaration "CBaseEntity@ CreateEntity(const string& in szClassName, dictionary@ pDictionary = null, bool fSpawn = true)"
					Documentation "Create an entity by class name. Pass keyvalues in using the dictionary, if any. Keyvalues must be strings.\nThe class name can be either one of the entities included with the game or a custom entity."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CEngine
			Documentation "Engine global variables"
			Flags 262145
			Methods
			{
			}
			Properties
			{
				Property
				{
					Declaration "const int maxEntities"
					Documentation "Maximum entities"
				}
				Property
				{
					Declaration "const int maxClients"
					Documentation "Maximum connected clients"
				}
				Property
				{
					Declaration "int cdAudioTrack"
					Documentation "CD audio track"
				}
				Property
				{
					Declaration "const int msg_entity"
					Documentation "Message entity"
				}
				Property
				{
					Declaration "const int trace_flags"
					Documentation "Trace flags"
				}
				Property
				{
					Declaration "const int trace_hitgroup"
					Documentation "Trace hit group"
				}
				Property
				{
					Declaration "const float trace_inwater"
					Documentation "Trace is in water flag"
				}
				Property
				{
					Declaration "const float trace_inopen"
					Documentation "Trace is in open flag"
				}
				Property
				{
					Declaration "const edict_t@ trace_ent"
					Documentation "Trace entity"
				}
				Property
				{
					Declaration "const float trace_plane_dist"
					Documentation "Trace plane distance"
				}
				Property
				{
					Declaration "const Vector trace_plane_normal"
					Documentation "Trace plane normal"
				}
				Property
				{
					Declaration "const Vector trace_endpos"
					Documentation "Trace end position"
				}
				Property
				{
					Declaration "const float trace_fraction"
					Documentation "Trace fraction"
				}
				Property
				{
					Declaration "const float trace_startsolid"
					Documentation "Trace start is solid flag"
				}
				Property
				{
					Declaration "const float trace_allsolid"
					Documentation "Trace all is solid flag"
				}
				Property
				{
					Declaration "const Vector v_right"
					Documentation "Right vector"
				}
				Property
				{
					Declaration "const Vector v_up"
					Documentation "Up vector"
				}
				Property
				{
					Declaration "const Vector v_forward"
					Documentation "Forward vector"
				}
				Property
				{
					Declaration "float found_secrets"
					Documentation "Found secrets"
				}
				Property
				{
					Declaration "const float serverflags"
					Documentation "Server flags"
				}
				Property
				{
					Declaration "float teamplay"
					Documentation "Flag telling whether this is teamplay"
				}
				Property
				{
					Declaration "float coop"
					Documentation "Flag telling whether this is coop"
				}
				Property
				{
					Declaration "float deathmatch"
					Documentation "Flag telling whether this is deathmatch"
				}
				Property
				{
					Declaration "const string_t startspot"
					Documentation "Start location in the map"
				}
				Property
				{
					Declaration "const string_t mapname"
					Documentation "Name of the current map"
				}
				Property
				{
					Declaration "float force_retouch"
					Documentation "How many times to force all entities to retouch entities they are currently touching/intersecting. Should always be >= 0."
				}
				Property
				{
					Declaration "const float frametime"
					Documentation "Time between frames"
				}
				Property
				{
					Declaration "const float time"
					Documentation "Current time"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CSoundEngine
			Documentation "Sound engine.\nCan either play sounds given to it directly, or use sound replacement to look up a replacement sample."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "char FindMaterialType(const string& in szMaterial) const"
					Documentation "Maps the texture name to a material type. See the TextureType enum."
				}
				Method
				{
					Declaration "float PlayHitSound( TraceResult& in tr, const Vector& in vecSrc, const Vector& in vecEnd, int iBulletType )"
					Documentation "Plays a hit sound based on the trace result\'s hit target. Returns the volume at which the hit is being played."
				}
				Method
				{
					Declaration "void EmitAmbientSound(edict_t@ entity, const Vector& in vecOrigin, const string& in szSample,float flVolume, float flAttenuation, int fFlags, int iPitch)"
					Documentation "Plays a sentence group sequentially"
				}
				Method
				{
					Declaration "int PlaySentenceGroupSequential(edict_t@ entity, const string& in szGroupName,float volume, float attenuation, int flags, int pitch, int ipick, const bool bReset)"
					Documentation "Plays a sentence group sequentially"
				}
				Method
				{
					Declaration "int PlaySentenceGroup(edict_t@ entity, int iGroupIndex, float volume, float attenuation, int flags, int pitch)"
					Documentation "Plays a sentence group"
				}
				Method
				{
					Declaration "int PlaySentenceGroup(edict_t@ entity, const string& in szGroupName, float volume, float attenuation, int flags, int pitch)"
					Documentation "Plays a sentence group"
				}
				Method
				{
					Declaration "int LookupSentenceGroupIndex(const string& in szGroup)"
					Documentation "Looks up the sentence group index of the given sentence"
				}
				Method
				{
					Declaration "int LookupSentenceIndex(const string& in sentenceName)"
					Documentation "Looks up the sentence index of the given sentence"
				}
				Method
				{
					Declaration "void EmitGroupNameSuit(edict_t@ entity, const string& in szSample)"
					Documentation "Play a sentence, randomly selected from the passed in groupname."
				}
				Method
				{
					Declaration "void EmitGroupIdSuit(edict_t@ entity, int isentencereg)"
					Documentation "Play a sentence, randomly selected from the passed in group id, over the HEV suit speaker."
				}
				Method
				{
					Declaration "void EmitSoundSuit(edict_t@ entity, const string& in szSample)"
					Documentation "Play a specific sentence over the HEV suit speaker - just pass player entity, and !sentencename."
				}
				Method
				{
					Declaration "void EmitSound(edict_t@ entity, SOUND_CHANNEL channel, const string& in szSample, float flVolume, float flAttenuation)"
					Documentation "Plays the given sound with the given parameters. Sound replacement will affect this."
				}
				Method
				{
					Declaration "void EmitSoundDyn(edict_t@ entity, SOUND_CHANNEL channel, const string& in szSample,float flVolume, float flAttenuation, int iFlags = 0, int iPitch = PITCH_NORM, int target_ent_unreliable = 0)"
					Documentation "Plays the given sound with the given parameters. Sound replacement will affect this."
				}
				Method
				{
					Declaration "void StopSound(edict_t@ entity, SOUND_CHANNEL channel, const string& in szSample, const bool fUseSoundReplacement = true)"
					Documentation "Stops the given sound on the given entity on the given channel. If the sound was started using PlaySound, set fUseSoundReplacement to false."
				}
				Method
				{
					Declaration "void PlaySound(edict_t@ entity, SOUND_CHANNEL channel, const string& in sample,float volume, float attenuation, int flags = 0, int pitch = PITCH_NORM,int target_ent_unreliable = 0, bool setOrigin = false, const Vector& in vecOrigin = g_vecZero)"
					Documentation "Plays the given sound with the given parameters. Sound replacement is not used here."
				}
				Method
				{
					Declaration "string FindSoundReplacementSample(CBaseEntity@ pEntity, const string& in szSample) const"
					Documentation "Finds the sound replacement sample for the given entity and sample.If the sample is replaced, it will return the sample used instead. Otherwise, szSample is returned."
				}
				Method
				{
					Declaration "void PrecacheSound(CBaseEntity@ pEntity, const string& in szFilename)"
					Documentation "Precaches the given sound for the given entity. Supports entity sound replacement.\nMust be called in MapInit"
				}
				Method
				{
					Declaration "void PrecacheSound(const string& in szFilename)"
					Documentation "Precaches the given sound.\nMust be called in MapInit"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CGame
			Documentation "Game functions"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "uint32 GetGameVersion() const"
					Documentation "Returns the game version as a number, e.g. 500:\nmajor version, minor version (3.0 becomes 300, 4.0b1 becomes 401, 4.06 becomes 406, 4.5 becomes 450, etc...)"
				}
				Method
				{
					Declaration "string GetGameVersionString() const"
					Documentation "Returns the game version as a string, e.g. \"5.0\"."
				}
				Method
				{
					Declaration "string GetGameName() const"
					Documentation "Returns the game name."
				}
				Method
				{
					Declaration "void PrecacheGeneric(const string& in szFileName)"
					Documentation "Precaches a file for download to clients."
				}
				Method
				{
					Declaration "void PrecacheMonster(const string& in szClassName, bool fAlly)"
					Documentation "Precaches a monster entity.\nThis effectively instances a monster entity with the given class name, calls precache on it, and removes the entity."
				}
				Method
				{
					Declaration "void PrecacheOther(const string& in szClassName)"
					Documentation "Precaches an entity.\nThis effectively instances an entity with the given class name, calls precache on it, and removes the entity."
				}
				Method
				{
					Declaration "int PrecacheModel(CBaseEntity@ pEntity, const string& in szFileName)"
					Documentation "Precaches a model.\nShuts down the game if not found.\nCan only be called from entity Precache methods."
				}
				Method
				{
					Declaration "int PrecacheModel(const string& in szFileName)"
					Documentation "Precaches a model.\nShuts down the game if not found.\nCan only be called from MapInit."
				}
				Method
				{
					Declaration "bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Outputs a message to the console. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Outputs a message to the console. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Outputs a message to the console. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Outputs a message to the console. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Outputs a message to the console. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in, ?& in, ?& in)"
					Documentation "Outputs a message to the console. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in, ?& in)"
					Documentation "Outputs a message to the console. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool AlertMessage(ALERT_TYPE aType, const string& in szFormat, ?& in)"
					Documentation "Outputs a message to the console. Uses SC printf formatting style."
				}
				Method
				{
					Declaration "bool AlertMessage(ALERT_TYPE aType, const string& in szFormat)"
					Documentation "Outputs a message to the console. Uses SC printf formatting style."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CUtility
			Documentation "Utility methods"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "string GetPlayerLog(edict_t@ pPlayerEdict) const"
					Documentation "Get a player log string."
				}
				Method
				{
					Declaration "string BuildPlayerLogString(const string& in szName, const string& in szUserID = NULL, const string& in szAuthID = NULL) const"
					Documentation "Builds a generic player log string."
				}
				Method
				{
					Declaration "string BuildEntityLogString(const string& in szName, const string& in szUserID = NULL, const string& in szAuthID = NULL, const string& in szTeam = NULL) const"
					Documentation "Builds a generic entity log string."
				}
				Method
				{
					Declaration "void FindHullIntersection(const Vector& in vecSrc, TraceResult& in inTr, TraceResult& out outTr,const Vector& in vecMins, const Vector& in vecMaxs, edict_t@ pEntity, float flDistance = 1e6f)"
					Documentation "Finds the hull intersection from a traceline in a given set of bounds. The bounds are relative to the input traceline\'s endpoint.\nThe given entity is the entity performing the traceline."
				}
				Method
				{
					Declaration "int CountPlayersInBrushVolume(const bool fIgnoreDeadPlayers, CBaseEntity@ pBrushVolume,int& out iOutPlayersInsideVolume, int& out iOutPlayersOutsideVolume, PlayerInVolumeListener@ pListener)"
					Documentation "Counts the number of players inside and outside a brush volume."
				}
				Method
				{
					Declaration "void GetCircularGaussianSpread(float& out x, float& out y) const"
					Documentation "Gets circular gaussian spread."
				}
				Method
				{
					Declaration "bool VoteActive() const"
					Documentation "Returns whether a vote is active. This only covers the votes started using the in-game vote menu, trigger_vote and the Vote class."
				}
				Method
				{
					Declaration "bool IsPlayerInVolume(CBasePlayer@ pPlayer, CBaseEntity@ pEntityVolume)"
					Documentation "Returns whether the given player is in the given volume."
				}
				Method
				{
					Declaration "TraceResult GetGlobalTrace()"
					Documentation "Gets the global trace data stored in g_Engine as a TraceResult object."
				}
				Method
				{
					Declaration "CBaseEntity@ FindEntityForward(CBaseEntity@ pLooker)"
					Documentation "Convience function that finds the entity that the given entity is currently looking at. Uses a maximum distance of 12048 units."
				}
				Method
				{
					Declaration "CBaseEntity@ FindEntityForward(CBaseEntity@ pLooker, float flMaxDistance)"
					Documentation "Convience function that finds the entity that the given entity is currently looking at."
				}
				Method
				{
					Declaration "string TraceTexture(edict_t@ pEntity, const Vector& in vecStart, const Vector& in vecEnd)"
					Documentation "Trace texture"
				}
				Method
				{
					Declaration "void TraceModel(const Vector& in vecStart, const Vector& in vecEnd, int iHullNumber, edict_t@ pEntityToIgnore, TraceResult& out ptr)"
					Documentation TraceModel
				}
				Method
				{
					Declaration "bool TraceMonsterHull(edict_t@ pEntity, const Vector& in vecStart, const Vector& in vecEnd, IGNORE_MONSTERS igmon, edict_t@ pEntityToIgnore, TraceResult& out ptr)"
					Documentation "Trace monster hull. Returns true if the trace was entirely in a solid object, or hit something."
				}
				Method
				{
					Declaration "void TraceToss(edict_t@ pEntity, edict_t@ pEntityToIgnore, TraceResult& out traceResult)"
					Documentation "Trace toss"
				}
				Method
				{
					Declaration "void TraceHull(const Vector& in vecStart, const Vector& in vecEnd, IGNORE_MONSTERS igmon,HULL_NUMBER hullNumber, edict_t@ pEntIgnore, TraceResult& out ptr)"
					Documentation "Calculates a trace along the given line, storing the results in ptr, using the specified hull type."
				}
				Method
				{
					Declaration "void TraceLine(const Vector& in vecStart, const Vector& in vecEnd, IGNORE_MONSTERS igmon,IGNORE_GLASS ignoreGlass, edict_t@ pEntIgnore, TraceResult& out ptr)"
					Documentation "Calculates a trace along the given line, storing the results in ptr."
				}
				Method
				{
					Declaration "void TraceLine(const Vector& in vecStart, const Vector& in vecEnd, IGNORE_MONSTERS igmon,edict_t@ pEntIgnore, TraceResult& out ptr)"
					Documentation "Calculates a trace along the given line, storing the results in ptr."
				}
				Method
				{
					Declaration "bool IsString3DVec(const string& in szString)"
					Documentation "Returns whether the given string is a 3D vector"
				}
				Method
				{
					Declaration "bool IsWholeNumber(const float flNum, int& out iRounded)"
					Documentation "Returns whether the given float is a whole number, and returns the rounded number"
				}
				Method
				{
					Declaration "bool IsStringFloat(const string& in szString)"
					Documentation "Returns whether the given string is a float"
				}
				Method
				{
					Declaration "bool IsStringInt(const string& in szString)"
					Documentation "Returns whether the given string is an integer"
				}
				Method
				{
					Declaration "void StringToVector(Vector& out vecVector, const string& in szString, const char delimiter = char(\' \'))"
					Documentation "Converts the given string to a vector"
				}
				Method
				{
					Declaration "void BubbleTrail(const Vector& in vecFrom, const Vector& in vecTo, int iCount)"
					Documentation "Creates a trail of bubbles"
				}
				Method
				{
					Declaration "void Bubbles(const Vector& in vecMins, const Vector& in vecMaxs, int iCount)"
					Documentation "Creates a box filled with bubbles"
				}
				Method
				{
					Declaration "float WaterLevel(const Vector& in vecPosition, float minz, float maxz)"
					Documentation "Determines the Z level at which a water surface level is, given a position to start searching from and a range to search."
				}
				Method
				{
					Declaration "void Ricochet(const Vector& in vecPosition, float flScale)"
					Documentation "Creates a ricochet at the given location"
				}
				Method
				{
					Declaration "void Sparks(const Vector& in vecPosition)"
					Documentation "Creates sparks at the given location"
				}
				Method
				{
					Declaration "void GunshotDecalTrace(TraceResult& in trace, int iDecalNumber)"
					Documentation "Applies gunshot decal to the trace hit location"
				}
				Method
				{
					Declaration "void PlayerDecalTrace(TraceResult& in trace, int iPlayerNum, int iDecalNumber, const bool bIsCustom)"
					Documentation "Applies player decal to the trace hit location"
				}
				Method
				{
					Declaration "void DecalTrace(TraceResult& in trace, int iDecalNumber)"
					Documentation "Applies decal to the trace hit location"
				}
				Method
				{
					Declaration "void BloodDecalTrace(TraceResult& in trace, int iBloodColor)"
					Documentation "Applies blood decal to the trace hit location"
				}
				Method
				{
					Declaration "bool ShouldShowBlood(int iBloodColor)"
					Documentation "Returns whether blood of the given type should be shown."
				}
				Method
				{
					Declaration "Vector RandomBloodVector()"
					Documentation "Returns a random blood direction vector"
				}
				Method
				{
					Declaration "void BloodDrips(const Vector& in vecOrigin, const Vector& in vecDirection, int iColor, int iAmount)"
					Documentation "Creates blood drips. Use BLOOD_COLOR enum for the color."
				}
				Method
				{
					Declaration "void BloodStream(const Vector& in vecOrigin, const Vector& in vecDirection, int iColor, int iAmount)"
					Documentation "Creates a blood stream. Use BLOOD_COLOR enum for the color."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName BaseItem
			Documentation "Baseclass for CItem.\nAllows calling of the base implementation of certain methods."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of EndRevive"
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of BeginRevive"
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Calls the base class implementation of IsRevivable"
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Calls the base class implementation of GetPointsForDamage"
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceBleed"
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Calls the base class implementation of BloodColor"
				}
				Method
				{
					Declaration "void Killed(entvars_t@ pevAttacker, int iGib)"
					Documentation "Calls the base class implementation of Killed"
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)"
					Documentation "Calls the base class implementation of TakeArmor"
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, float health_cap = 0)"
					Documentation "Calls the base class implementation of TakeHealth"
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Calls the base class implementation of TakeDamage"
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in ptr, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceAttack"
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Calls the base class implementation of ObjectCaps"
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Calls the base class implementation of UpdateOnRemove"
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Blocked"
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Calls the base class implementation of Use"
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Touch"
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Calls the base class implementation of Think"
				}
				Method
				{
					Declaration "void PostSpawn()"
					Documentation "Calls the base class implementation of PostSpawn"
				}
				Method
				{
					Declaration "void Spawn()"
					Documentation "Calls the base class implementation of Spawn"
				}
				Method
				{
					Declaration "void PreSpawn()"
					Documentation "Calls the base class implementation of PreSpawn"
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Calls the base class implementation of Precache"
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Calls the base class implementation of KeyValue"
				}
				Method
				{
					Declaration "BaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName BasePlayerAmmo
			Documentation "Baseclass for CBasePlayerAmmo.\nAllows calling of the base implementation of certain methods."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of EndRevive"
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of BeginRevive"
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Calls the base class implementation of IsRevivable"
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Calls the base class implementation of GetPointsForDamage"
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceBleed"
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Calls the base class implementation of BloodColor"
				}
				Method
				{
					Declaration "void Killed(entvars_t@ pevAttacker, int iGib)"
					Documentation "Calls the base class implementation of Killed"
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)"
					Documentation "Calls the base class implementation of TakeArmor"
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, float health_cap = 0)"
					Documentation "Calls the base class implementation of TakeHealth"
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Calls the base class implementation of TakeDamage"
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in ptr, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceAttack"
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Calls the base class implementation of ObjectCaps"
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Calls the base class implementation of UpdateOnRemove"
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Blocked"
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Calls the base class implementation of Use"
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Touch"
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Calls the base class implementation of Think"
				}
				Method
				{
					Declaration "void PostSpawn()"
					Documentation "Calls the base class implementation of PostSpawn"
				}
				Method
				{
					Declaration "void Spawn()"
					Documentation "Calls the base class implementation of Spawn"
				}
				Method
				{
					Declaration "void PreSpawn()"
					Documentation "Calls the base class implementation of PreSpawn"
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Calls the base class implementation of Precache"
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Calls the base class implementation of KeyValue"
				}
				Method
				{
					Declaration "BaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName BasePlayerWeapon
			Documentation "Baseclass for CBasePlayerWeapon.\nAllows calling of the base implementation of certain methods."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void BurstSupplement()"
					Documentation "Calls the base class implementation of BurstSupplement"
				}
				Method
				{
					Declaration "bool UseDecrement()"
					Documentation "Calls the base class implementation of UseDecrement"
				}
				Method
				{
					Declaration "bool ShouldWeaponIdle()"
					Documentation "Calls the base class implementation of ShouldWeaponIdle"
				}
				Method
				{
					Declaration "void RetireWeapon()"
					Documentation "Calls the base class implementation of RetireWeapon"
				}
				Method
				{
					Declaration "void WeaponIdle()"
					Documentation "Calls the base class implementation of WeaponIdle"
				}
				Method
				{
					Declaration "bool ShouldReload()"
					Documentation "Calls the base class implementation of ShouldReload"
				}
				Method
				{
					Declaration "void FinishReload()"
					Documentation "Calls the base class implementation of FinishReload"
				}
				Method
				{
					Declaration "void Reload()"
					Documentation "Calls the base class implementation of Reload"
				}
				Method
				{
					Declaration "void TertiaryAttack()"
					Documentation "Calls the base class implementation of TertiaryAttack"
				}
				Method
				{
					Declaration "void SecondaryAttack()"
					Documentation "Calls the base class implementation of SecondaryAttack"
				}
				Method
				{
					Declaration "void PrimaryAttack()"
					Documentation "Calls the base class implementation of PrimaryAttack"
				}
				Method
				{
					Declaration "bool IsUseable()"
					Documentation "Calls the base class implementation of IsUseable"
				}
				Method
				{
					Declaration "Vector BulletAccuracy(const Vector& in vecMoving, const Vector& in vecStanding, const Vector& in vecCrouched)"
					Documentation "Calls the base class implementation of BulletAccuracy"
				}
				Method
				{
					Declaration "void SendWeaponAnim(int iAnim, int skiplocal = 0, int body = 0)"
					Documentation "Calls the base class implementation of SendWeaponAnim"
				}
				Method
				{
					Declaration "void ResetEmptySound()"
					Documentation "Calls the base class implementation of ResetEmptySound"
				}
				Method
				{
					Declaration "bool PlayEmptySound()"
					Documentation "Calls the base class implementation of PlayEmptySound"
				}
				Method
				{
					Declaration "bool AddWeapon()"
					Documentation "Calls the base class implementation of AddWeapon"
				}
				Method
				{
					Declaration "bool ExtractAmmo(CBasePlayerWeapon@ pWeapon)"
					Documentation "Calls the base class implementation of ExtractAmmo"
				}
				Method
				{
					Declaration "bool CanHaveDuplicates()"
					Documentation "Calls the base class implementation of CanHaveDuplicates"
				}
				Method
				{
					Declaration "CBasePlayerItem@ DropItem()"
					Documentation "Calls the base class implementation of DropItem"
				}
				Method
				{
					Declaration "float GetRespawnTime() const"
					Documentation "Calls the base class implementation of GetRespawnTime"
				}
				Method
				{
					Declaration "bool UpdateClientData(CBasePlayer@ pPlayer)"
					Documentation "Calls the base class implementation of UpdateClientData"
				}
				Method
				{
					Declaration "int SecondaryAmmoIndex()"
					Documentation "Calls the base class implementation of SecondaryAmmoIndex"
				}
				Method
				{
					Declaration "int PrimaryAmmoIndex()"
					Documentation "Calls the base class implementation of PrimaryAmmoIndex"
				}
				Method
				{
					Declaration "void AttachToPlayer(CBasePlayer@ pPlayer)"
					Documentation "Calls the base class implementation of AttachToPlayer"
				}
				Method
				{
					Declaration "void Kill()"
					Documentation "Calls the base class implementation of Kill"
				}
				Method
				{
					Declaration "void InactiveItemPostFrame()"
					Documentation "Calls the base class implementation of InactiveItemPostFrame"
				}
				Method
				{
					Declaration "void InactiveItemPreFrame()"
					Documentation "Calls the base class implementation of InactiveItemPreFrame"
				}
				Method
				{
					Declaration "void ItemPostFrame()"
					Documentation "Calls the base class implementation of ItemPostFrame"
				}
				Method
				{
					Declaration "void ItemPreFrame()"
					Documentation "Calls the base class implementation of ItemPreFrame"
				}
				Method
				{
					Declaration "void UpdateItemInfo()"
					Documentation "Calls the base class implementation of UpdateItemInfo"
				}
				Method
				{
					Declaration "void Holster(int skiplocal = 0)"
					Documentation "Calls the base class implementation of Holster"
				}
				Method
				{
					Declaration "bool CanHolster()"
					Documentation "Calls the base class implementation of CanHolster"
				}
				Method
				{
					Declaration "bool Deploy()"
					Documentation "Calls the base class implementation of Deploy"
				}
				Method
				{
					Declaration "bool CanDeploy()"
					Documentation "Calls the base class implementation of CanDeploy"
				}
				Method
				{
					Declaration "void GetItemInfo(ItemInfo& out info)"
					Documentation "Calls the base class implementation of GetItemInfo"
				}
				Method
				{
					Declaration "void Materialize()"
					Documentation "Calls the base class implementation of Materialize"
				}
				Method
				{
					Declaration "bool AddDuplicate(CBasePlayerItem@ pItem)"
					Documentation "Calls the base class implementation of AddDuplicate"
				}
				Method
				{
					Declaration "bool AddToPlayer(CBasePlayer@ pPlayer)"
					Documentation "Calls the base class implementation of AddToPlayer"
				}
				Method
				{
					Declaration "BasePlayerItem@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of EndRevive"
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of BeginRevive"
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Calls the base class implementation of IsRevivable"
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Calls the base class implementation of GetPointsForDamage"
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceBleed"
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Calls the base class implementation of BloodColor"
				}
				Method
				{
					Declaration "void Killed(entvars_t@ pevAttacker, int iGib)"
					Documentation "Calls the base class implementation of Killed"
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)"
					Documentation "Calls the base class implementation of TakeArmor"
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, float health_cap = 0)"
					Documentation "Calls the base class implementation of TakeHealth"
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Calls the base class implementation of TakeDamage"
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in ptr, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceAttack"
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Calls the base class implementation of ObjectCaps"
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Calls the base class implementation of UpdateOnRemove"
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Blocked"
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Calls the base class implementation of Use"
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Touch"
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Calls the base class implementation of Think"
				}
				Method
				{
					Declaration "void PostSpawn()"
					Documentation "Calls the base class implementation of PostSpawn"
				}
				Method
				{
					Declaration "void Spawn()"
					Documentation "Calls the base class implementation of Spawn"
				}
				Method
				{
					Declaration "void PreSpawn()"
					Documentation "Calls the base class implementation of PreSpawn"
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Calls the base class implementation of Precache"
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Calls the base class implementation of KeyValue"
				}
				Method
				{
					Declaration "BaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName BasePlayerItem
			Documentation "Baseclass for CBasePlayerItem.\nAllows calling of the base implementation of certain methods."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "BasePlayerWeapon@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "bool CanHaveDuplicates()"
					Documentation "Calls the base class implementation of CanHaveDuplicates"
				}
				Method
				{
					Declaration "CBasePlayerItem@ DropItem()"
					Documentation "Calls the base class implementation of DropItem"
				}
				Method
				{
					Declaration "float GetRespawnTime() const"
					Documentation "Calls the base class implementation of GetRespawnTime"
				}
				Method
				{
					Declaration "bool UpdateClientData(CBasePlayer@ pPlayer)"
					Documentation "Calls the base class implementation of UpdateClientData"
				}
				Method
				{
					Declaration "int SecondaryAmmoIndex()"
					Documentation "Calls the base class implementation of SecondaryAmmoIndex"
				}
				Method
				{
					Declaration "int PrimaryAmmoIndex()"
					Documentation "Calls the base class implementation of PrimaryAmmoIndex"
				}
				Method
				{
					Declaration "void AttachToPlayer(CBasePlayer@ pPlayer)"
					Documentation "Calls the base class implementation of AttachToPlayer"
				}
				Method
				{
					Declaration "void Kill()"
					Documentation "Calls the base class implementation of Kill"
				}
				Method
				{
					Declaration "void InactiveItemPostFrame()"
					Documentation "Calls the base class implementation of InactiveItemPostFrame"
				}
				Method
				{
					Declaration "void InactiveItemPreFrame()"
					Documentation "Calls the base class implementation of InactiveItemPreFrame"
				}
				Method
				{
					Declaration "void ItemPostFrame()"
					Documentation "Calls the base class implementation of ItemPostFrame"
				}
				Method
				{
					Declaration "void ItemPreFrame()"
					Documentation "Calls the base class implementation of ItemPreFrame"
				}
				Method
				{
					Declaration "void UpdateItemInfo()"
					Documentation "Calls the base class implementation of UpdateItemInfo"
				}
				Method
				{
					Declaration "void Holster(int skiplocal = 0)"
					Documentation "Calls the base class implementation of Holster"
				}
				Method
				{
					Declaration "bool CanHolster()"
					Documentation "Calls the base class implementation of CanHolster"
				}
				Method
				{
					Declaration "bool Deploy()"
					Documentation "Calls the base class implementation of Deploy"
				}
				Method
				{
					Declaration "bool CanDeploy()"
					Documentation "Calls the base class implementation of CanDeploy"
				}
				Method
				{
					Declaration "void GetItemInfo(ItemInfo& out info)"
					Documentation "Calls the base class implementation of GetItemInfo"
				}
				Method
				{
					Declaration "void Materialize()"
					Documentation "Calls the base class implementation of Materialize"
				}
				Method
				{
					Declaration "bool AddDuplicate(CBasePlayerItem@ pItem)"
					Documentation "Calls the base class implementation of AddDuplicate"
				}
				Method
				{
					Declaration "bool AddToPlayer(CBasePlayer@ pPlayer)"
					Documentation "Calls the base class implementation of AddToPlayer"
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of EndRevive"
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of BeginRevive"
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Calls the base class implementation of IsRevivable"
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Calls the base class implementation of GetPointsForDamage"
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceBleed"
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Calls the base class implementation of BloodColor"
				}
				Method
				{
					Declaration "void Killed(entvars_t@ pevAttacker, int iGib)"
					Documentation "Calls the base class implementation of Killed"
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)"
					Documentation "Calls the base class implementation of TakeArmor"
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, float health_cap = 0)"
					Documentation "Calls the base class implementation of TakeHealth"
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Calls the base class implementation of TakeDamage"
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in ptr, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceAttack"
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Calls the base class implementation of ObjectCaps"
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Calls the base class implementation of UpdateOnRemove"
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Blocked"
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Calls the base class implementation of Use"
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Touch"
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Calls the base class implementation of Think"
				}
				Method
				{
					Declaration "void PostSpawn()"
					Documentation "Calls the base class implementation of PostSpawn"
				}
				Method
				{
					Declaration "void Spawn()"
					Documentation "Calls the base class implementation of Spawn"
				}
				Method
				{
					Declaration "void PreSpawn()"
					Documentation "Calls the base class implementation of PreSpawn"
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Calls the base class implementation of Precache"
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Calls the base class implementation of KeyValue"
				}
				Method
				{
					Declaration "BaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName BaseTank
			Documentation "Baseclass for CBaseTank.\nAllows calling of the base implementation of certain methods."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "int BulletCount()"
					Documentation "Calls the base class implementation of BulletCount"
				}
				Method
				{
					Declaration "Vector UpdateTargetPosition(CBaseEntity@ pTargetEntity)"
					Documentation "Calls the base class implementation of UpdateTargetPosition"
				}
				Method
				{
					Declaration "void Fire(const Vector& in vecBarrelEnd, const Vector& in vecForward, entvars_t@ pevAttacker)"
					Documentation "Calls the base class implementation of Fire"
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of EndRevive"
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of BeginRevive"
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Calls the base class implementation of IsRevivable"
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Calls the base class implementation of GetPointsForDamage"
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceBleed"
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Calls the base class implementation of BloodColor"
				}
				Method
				{
					Declaration "void Killed(entvars_t@ pevAttacker, int iGib)"
					Documentation "Calls the base class implementation of Killed"
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)"
					Documentation "Calls the base class implementation of TakeArmor"
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, float health_cap = 0)"
					Documentation "Calls the base class implementation of TakeHealth"
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Calls the base class implementation of TakeDamage"
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in ptr, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceAttack"
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Calls the base class implementation of ObjectCaps"
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Calls the base class implementation of UpdateOnRemove"
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Blocked"
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Calls the base class implementation of Use"
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Touch"
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Calls the base class implementation of Think"
				}
				Method
				{
					Declaration "void PostSpawn()"
					Documentation "Calls the base class implementation of PostSpawn"
				}
				Method
				{
					Declaration "void Spawn()"
					Documentation "Calls the base class implementation of Spawn"
				}
				Method
				{
					Declaration "void PreSpawn()"
					Documentation "Calls the base class implementation of PreSpawn"
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Calls the base class implementation of Precache"
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Calls the base class implementation of KeyValue"
				}
				Method
				{
					Declaration "BaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName BaseMonster
			Documentation "Baseclass for CBaseMonster.\nAllows calling of the base implementation of certain methods."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void GibMonster()"
					Documentation "Calls the base class implementation of GibMonster"
				}
				Method
				{
					Declaration "void CallGibMonster()"
					Documentation "Calls the base class implementation of CallGibMonster"
				}
				Method
				{
					Declaration "void RunAI()"
					Documentation "Calls the base class implementation of RunAI"
				}
				Method
				{
					Declaration "Schedule@ ScheduleFromName(const string& in szName)"
					Documentation "Calls the base class implementation of ScheduleFromName"
				}
				Method
				{
					Declaration "Schedule@ GetSchedule()"
					Documentation "Calls the base class implementation of GetSchedule"
				}
				Method
				{
					Declaration "Schedule@ GetScheduleOfType(int iType)"
					Documentation "Calls the base class implementation of GetScheduleOfType"
				}
				Method
				{
					Declaration "void HandleAnimEvent(MonsterEvent@ pEvent)"
					Documentation "Calls the base class implementation of HandleAnimEvent"
				}
				Method
				{
					Declaration "void RunTask(Task@ pTask)"
					Documentation "Calls the base class implementation of RunTask"
				}
				Method
				{
					Declaration "void StartTask(Task@ pTask)"
					Documentation "Calls the base class implementation of StartTask"
				}
				Method
				{
					Declaration "void SetYawSpeed()"
					Documentation "Calls the base class implementation of SetYawSpeed"
				}
				Method
				{
					Declaration "void CheckAmmo()"
					Documentation "Calls the base class implementation of CheckAmmo"
				}
				Method
				{
					Declaration "bool CheckMeleeAttack2_Move(float flDot, float flDist)"
					Documentation "Calls the base class implementation of CheckMeleeAttack2_Move"
				}
				Method
				{
					Declaration "bool CheckMeleeAttack2(float flDot, float flDist)"
					Documentation "Calls the base class implementation of CheckMeleeAttack2"
				}
				Method
				{
					Declaration "bool CheckMeleeAttack1_Move(float flDot, float flDist)"
					Documentation "Calls the base class implementation of CheckMeleeAttack1_Move"
				}
				Method
				{
					Declaration "bool CheckMeleeAttack1(float flDot, float flDist)"
					Documentation "Calls the base class implementation of CheckMeleeAttack1"
				}
				Method
				{
					Declaration "bool CheckRangeAttack2_Move(float flDot, float flDist)"
					Documentation "Calls the base class implementation of CheckRangeAttack2_Move"
				}
				Method
				{
					Declaration "bool CheckRangeAttack2(float flDot, float flDist)"
					Documentation "Calls the base class implementation of CheckRangeAttack2"
				}
				Method
				{
					Declaration "bool CheckRangeAttack1_Move(float flDot, float flDist)"
					Documentation "Calls the base class implementation of CheckRangeAttack1_Move"
				}
				Method
				{
					Declaration "bool CheckRangeAttack1(float flDot, float flDist)"
					Documentation "Calls the base class implementation of CheckRangeAttack1"
				}
				Method
				{
					Declaration "int ISoundMask()"
					Documentation "Calls the base class implementation of ISoundMask"
				}
				Method
				{
					Declaration "void DeathSound()"
					Documentation "Calls the base class implementation of DeathSound"
				}
				Method
				{
					Declaration "void PainSound()"
					Documentation "Calls the base class implementation of PainSound"
				}
				Method
				{
					Declaration "void AlertSound()"
					Documentation "Calls the base class implementation of AlertSound"
				}
				Method
				{
					Declaration "int IgnoreConditions()"
					Documentation "Calls the base class implementation of IgnoreConditions"
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Calls the base class implementation of Classify"
				}
				Method
				{
					Declaration "void SetupFriendly()"
					Documentation "Calls the base class implementation of SetupFriendly"
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of EndRevive"
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of BeginRevive"
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Calls the base class implementation of IsRevivable"
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Calls the base class implementation of GetPointsForDamage"
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceBleed"
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Calls the base class implementation of BloodColor"
				}
				Method
				{
					Declaration "void Killed(entvars_t@ pevAttacker, int iGib)"
					Documentation "Calls the base class implementation of Killed"
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)"
					Documentation "Calls the base class implementation of TakeArmor"
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, float health_cap = 0)"
					Documentation "Calls the base class implementation of TakeHealth"
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Calls the base class implementation of TakeDamage"
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in ptr, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceAttack"
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Calls the base class implementation of ObjectCaps"
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Calls the base class implementation of UpdateOnRemove"
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Blocked"
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Calls the base class implementation of Use"
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Touch"
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Calls the base class implementation of Think"
				}
				Method
				{
					Declaration "void PostSpawn()"
					Documentation "Calls the base class implementation of PostSpawn"
				}
				Method
				{
					Declaration "void Spawn()"
					Documentation "Calls the base class implementation of Spawn"
				}
				Method
				{
					Declaration "void PreSpawn()"
					Documentation "Calls the base class implementation of PreSpawn"
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Calls the base class implementation of Precache"
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Calls the base class implementation of KeyValue"
				}
				Method
				{
					Declaration "BaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName BaseEntity
			Documentation "Baseclass for CBaseEntity.\nAllows calling of the base implementation of certain methods."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "BaseItem@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "BasePlayerAmmo@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "BasePlayerWeapon@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "BasePlayerItem@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "BaseTank@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "BaseMonster@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of EndRevive"
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Calls the base class implementation of BeginRevive"
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Calls the base class implementation of IsRevivable"
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Calls the base class implementation of GetPointsForDamage"
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceBleed"
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Calls the base class implementation of BloodColor"
				}
				Method
				{
					Declaration "void Killed(entvars_t@ pevAttacker, int iGib)"
					Documentation "Calls the base class implementation of Killed"
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, float armor_cap = 0)"
					Documentation "Calls the base class implementation of TakeArmor"
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, float health_cap = 0)"
					Documentation "Calls the base class implementation of TakeHealth"
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Calls the base class implementation of TakeDamage"
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in ptr, int bitsDamageType)"
					Documentation "Calls the base class implementation of TraceAttack"
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Calls the base class implementation of ObjectCaps"
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Calls the base class implementation of UpdateOnRemove"
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Blocked"
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Calls the base class implementation of Use"
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Calls the base class implementation of Touch"
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Calls the base class implementation of Think"
				}
				Method
				{
					Declaration "void PostSpawn()"
					Documentation "Calls the base class implementation of PostSpawn"
				}
				Method
				{
					Declaration "void Spawn()"
					Documentation "Calls the base class implementation of Spawn"
				}
				Method
				{
					Declaration "void PreSpawn()"
					Documentation "Calls the base class implementation of PreSpawn"
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Calls the base class implementation of Precache"
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Calls the base class implementation of KeyValue"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CCustomEntityFuncs
			Documentation "Custom entity functions."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void UnRegisterCustomEntity(const string& in szEntityname)"
					Documentation "Unregisters a custom entity by the given name"
				}
				Method
				{
					Declaration "void RegisterCustomEntity(const string& in szClassname, const string& in szEntityname)"
					Documentation "Registers a class called szClassname as a custom entity named szEntityname. The class must inherit from a script entity base class."
				}
				Method
				{
					Declaration "bool IsCustomEntity(const string& in szEntityname) const"
					Documentation "Returns whether the given entity name is a registered custom entity"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CustomEntityCallbackHandler
			Documentation "Custom entity callback handler. Is used to set callbacks to methods"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void SetUseFunction(UseFunction@ pFunction)"
					Documentation "Sets the use function for this handler\'s owning instance."
				}
				Method
				{
					Declaration "void SetBlockedFunction(BlockedFunction@ pFunction)"
					Documentation "Sets the blocked function for this handler\'s owning instance."
				}
				Method
				{
					Declaration "void SetTouchFunction(TouchFunction@ pFunction)"
					Documentation "Sets the touch function for this handler\'s owning instance."
				}
				Method
				{
					Declaration "void SetThinkFunction(ThinkFunction@ pFunction)"
					Documentation "Sets the think function for this handler\'s owning instance."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CEntityLoader
			Documentation "Entity loader.\nLoads entity keyvalue data and instances the entities.\nFile format:\n\"Entity\"{\t\"classname\" \"info_player_deathmatch\"\t<additional keyvalues>}..."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "bool LoadFromFile(const string& in szFileName, const Vector& in vecOffset = g_vecZero)"
					Documentation "Loads entities from a file."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CItemRegistry
			Documentation "Item registry."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "int RegisterWeapon(const string& in szName, const string& in szSpriteDir, const string& in szPrimaryAmmoName = \"\", const string& in szSecondaryAmmoName = \"\", const string& in szPrimaryAmmoClass = \"\", const string& in szSecondaryAmmoClass = \"\")"
					Documentation "Registers the given entity name as a weapon and returns the id associated with it.\nReturns WEAPON_NONE if no id could be assigned to it."
				}
				Method
				{
					Declaration "int RegisterItem(const string& in szName, const string& in szSpriteDir, const string& in szPrimaryAmmoName = \"\", const string& in szSecondaryAmmoName = \"\", const string& in szPrimaryAmmoClass = \"\", const string& in szSecondaryAmmoClass = \"\")"
					Documentation "Registers the given entity name as an item and returns the id associated with it.\nReturns WEAPON_NONE if no id could be assigned to it."
				}
				Method
				{
					Declaration "int GetIdForName(const string& in szName) const"
					Documentation "Gets the id associated with the given weapon name. Returns WEAPON_NONE if no id is associated with the given name."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName ItemInfo
			Documentation "Item info object."
			Flags 5890
			Methods
			{
				Method
				{
					Declaration "string szAmmo2() const"
					Documentation "Gets the secondary ammo name of this weapon."
				}
				Method
				{
					Declaration "string szAmmo1() const"
					Documentation "Gets the primary ammo name of this weapon."
				}
				Method
				{
					Declaration "string szName() const"
					Documentation "Gets the name of this weapon."
				}
				Method
				{
					Declaration "ItemInfo& opAssign(const ItemInfo& in other)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "void ItemInfo(const ItemInfo& in other)"
					Documentation Constructor
				}
				Method
				{
					Declaration "void ItemInfo()"
					Documentation Constructor
				}
			}
			Properties
			{
				Property
				{
					Declaration "int iMaxClip"
					Documentation "Item primary ammo max clip contents."
				}
				Property
				{
					Declaration "int iAmmo2Drop"
					Documentation "Amount of dropped secondary ammo."
				}
				Property
				{
					Declaration "int iMaxAmmo2"
					Documentation "Item secondary max ammo. -1 if this weapon does not use secondary ammo."
				}
				Property
				{
					Declaration "int iAmmo1Drop"
					Documentation "Amount of dropped primary ammo."
				}
				Property
				{
					Declaration "int iMaxAmmo1"
					Documentation "Item primary max ammo. -1 if this weapon does not use primary ammo."
				}
				Property
				{
					Declaration "int iWeight"
					Documentation "Item weight.\nThis value used to determine this weapon\'s importance in autoselection."
				}
				Property
				{
					Declaration "int iFlags"
					Documentation "Item flags."
				}
				Property
				{
					Declaration "int iPosition"
					Documentation "Item HUD slot position."
				}
				Property
				{
					Declaration "int iSlot"
					Documentation "Item HUD slot."
				}
				Property
				{
					Declaration "int iId"
					Documentation "Item id."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CInventoryMisc
			Documentation "Misc functions for handling inventories across classes"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void RemoveAllFromHolder(CBaseMonster@ pHolder, const bool fDrop = false, const bool fBlockingWeaponsOnly = false, const bool fKeepOnRespawn = false)"
					Documentation "Clears all held inventory"
				}
				Method
				{
					Declaration "bool HasAllInGroup(CBaseMonster@ pHolder, const string& in szGroup)"
					Documentation "Returns true if is holding all items of a group"
				}
				Method
				{
					Declaration "int HaveNumFromGroup(CBaseMonster@ pHolder, const string& in szGroup)"
					Documentation "Returns count of how many items someone holds of a group"
				}
				Method
				{
					Declaration "int ExistsInGroup(const string& in szGroup)"
					Documentation "Counts all the existing items in a group"
				}
				Method
				{
					Declaration "float GetWeight(CBaseMonster@ pHolder)"
					Documentation "Gets the total weight of all inventory items held by the given holder"
				}
				Method
				{
					Declaration "int Count(CBaseMonster@ pHolder)"
					Documentation "Counts the number of inventory items held by the given holder"
				}
				Method
				{
					Declaration "bool CheckTokenStringRule(const string& in szRule, const string& in szValue)"
					Documentation "Returns whether the given value is in the given rule"
				}
				Method
				{
					Declaration "bool IsValidInventoryHolder(CBaseEntity@ pOther)"
					Documentation "Returns whether the given entity is a valid inventory holder"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName InventoryList
			Documentation "Structure for a list of item_inventory\'s stored within CBaseMonster"
			Flags 262145
			Methods
			{
			}
			Properties
			{
				Property
				{
					Declaration "InventoryList@ pNext"
					Documentation "Next item in the list"
				}
				Property
				{
					Declaration "EHandle hItem"
					Documentation Item
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName InventoryRules
			Documentation "Inventory rules: Contained by CBaseToggle to hold and\nmanage inventory rules attached to a triggerable entity"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "bool CanUseTrigger(CBaseEntity@ pActivator, bool fContinueByDefault = false)"
					Documentation "Returns whether the owning trigger can be triggered by the given activator."
				}
			}
			Properties
			{
				Property
				{
					Declaration "string_t m_szTargetOnFail"
					Documentation "Target: Inventory rules failed"
				}
				Property
				{
					Declaration "bool m_fIgnoreDestroyTriggers"
					Documentation "On pass: Ignore item\'s on destroy triggers?"
				}
				Property
				{
					Declaration "string_t m_szDestroyItemGroupOnUse"
					Documentation "On pass: Destroy item(s) in these group(s)"
				}
				Property
				{
					Declaration "string_t m_szDestroyItemNameOnUse"
					Documentation "On pass: Destroy item(s)"
				}
				Property
				{
					Declaration "bool m_fIgnoreReturnTriggers"
					Documentation "On pass: Ignore item\'s on return triggers?"
				}
				Property
				{
					Declaration "string_t m_szReturnItemGroupOnUse"
					Documentation "On pass: Return item(s) in these group(s)"
				}
				Property
				{
					Declaration "string_t m_szReturnItemNameOnUse"
					Documentation "On pass: Return item(s)"
				}
				Property
				{
					Declaration "bool m_fIgnoreDropTriggers"
					Documentation "On pass: Ignore item\'s on drop triggers?"
				}
				Property
				{
					Declaration "string_t m_szDropItemGroupOnUse"
					Documentation "On pass: Drop item(s) in these group(s)"
				}
				Property
				{
					Declaration "string_t m_szDropItemNameOnUse"
					Documentation "On pass: Drop item(s)"
				}
				Property
				{
					Declaration "bool m_fIgnoreUseTriggers"
					Documentation "On pass: Ignore item\'s on use triggers?"
				}
				Property
				{
					Declaration "int m_iCantHaveItemGroupNum"
					Documentation "Inventory: Number of item(s) from the can\'t have group(s) (0 = all)"
				}
				Property
				{
					Declaration "string_t m_szCantHaveItemGroup"
					Documentation "Inventory: Must not have an item in these group(s)"
				}
				Property
				{
					Declaration "string_t m_szCantHaveItemName"
					Documentation "Inventory: Must not have these item(s)"
				}
				Property
				{
					Declaration "int m_iRequiresItemGroupNum"
					Documentation "Inventory: Number of item(s) from the required group(s) required (0 = all)"
				}
				Property
				{
					Declaration "string_t m_szRequiresItemGroup"
					Documentation "Inventory: Require an item from these group(s)"
				}
				Property
				{
					Declaration "string_t m_szRequiresItemName"
					Documentation "Inventory: Require these item(s)"
				}
				Property
				{
					Declaration "EHandle m_hEntity"
					Documentation "Owning entity"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CSoundEnt
			Documentation "Sound manager entity. Manages sound events made in the world, like gunfire.\nDoes not handle the playing of sounds, see CSoundEngine for actual sound playing."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "int ISoundsInList(int iListType)"
					Documentation "Returns the number of sounds in the given list. Must be either SOUNDLISTTYPE_FREE or SOUNDLISTTYPE_ACTIVE."
				}
				Method
				{
					Declaration "bool IsEmpty()"
					Documentation "Returns whether the sound list is empty."
				}
				Method
				{
					Declaration "int ClientSoundIndex(edict_t@ pClient)"
					Documentation "Gets the index for the given client."
				}
				Method
				{
					Declaration "CSound@ SoundPointerForIndex(int iIndex)"
					Documentation "Return a pointer for this index in the sound list.\nIndex must be between 0 and MAX_WORLD_SOUNDS."
				}
				Method
				{
					Declaration "int FreeList()"
					Documentation "Returns the head of the free list."
				}
				Method
				{
					Declaration "int ActiveList()"
					Documentation "Returns the head of the active list."
				}
				Method
				{
					Declaration "void InsertSound(int iType, const Vector& in vecOrigin, int iVolume, float flDuration, CBaseEntity@ pOwner)"
					Documentation "Inserts a sound. iType is one of the bits_SOUND enum."
				}
			}
			Properties
			{
				Property
				{
					Declaration "const int m_cLastActiveSounds"
					Documentation "keeps track of the number of active sounds at the last update. (for diagnostic work)"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CSound
			Documentation "Sound class used by CSoundEnt"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "bool FIsScent()"
					Documentation "Returns whether this is a scent"
				}
				Method
				{
					Declaration "bool FIsSound()"
					Documentation "Returns whether this is a sound"
				}
				Method
				{
					Declaration "void Reset()"
					Documentation "Resets the sound"
				}
				Method
				{
					Declaration "void Clear()"
					Documentation "Clears the sound"
				}
			}
			Properties
			{
				Property
				{
					Declaration "EHandle hOwner"
					Documentation "Sounds now have OWNERS... (For various AI checks)"
				}
				Property
				{
					Declaration "int m_iNextAudible"
					Documentation "Temporary link that monsters use to build a list of audible sounds"
				}
				Property
				{
					Declaration "int m_iNext"
					Documentation "Index of next sound in this list ( Active or Free )"
				}
				Property
				{
					Declaration "float m_flExpireTime"
					Documentation "When the sound should be purged from the list"
				}
				Property
				{
					Declaration "int m_iVolume"
					Documentation "How loud the sound is"
				}
				Property
				{
					Declaration "int m_iType"
					Documentation "What type of sound this is"
				}
				Property
				{
					Declaration "Vector m_vecOrigin"
					Documentation "Sound\'s location in space"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CModelFuncs
			Documentation "Model functions"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "int GetAttachmentCount(int iModelIndex)"
					Documentation "Gets the number of attachments in a model."
				}
				Method
				{
					Declaration "int GetBodygroupSubmodelCount(int iModelIndex, int iGroup)"
					Documentation "Gets the number of submodels."
				}
				Method
				{
					Declaration "int GetBodygroup(int iModelIndex, int iBody, int iGroup)"
					Documentation "Gets bodygroup configuration."
				}
				Method
				{
					Declaration "int SetBodygroup(int iModelIndex, int iBody, int iGroup, int iValue)"
					Documentation "Builds bodygroup configuration."
				}
				Method
				{
					Declaration "int ModelIndex(const string& in szModelName)"
					Documentation "Gets model index."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CEngineFuncs
			Documentation "Engine functions"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "string GetPlayerAuthId(edict_t@ pEdict)"
					Documentation "Get the player\'s Auth ID. (WON/Steam ID)"
				}
				Method
				{
					Declaration "bool Voice_SetClientListening(int iReceiver, int iSender, bool fListen)"
					Documentation "Voice system - Set client listening."
				}
				Method
				{
					Declaration "bool Voice_GetClientListening(int iReceiver, int iSender)"
					Documentation "Voice system - Get client listening."
				}
				Method
				{
					Declaration "void GetPlayerStats(const edict_t@ pEdict, int& out iPing, int& out iPacketLoss)"
					Documentation "Get player stats."
				}
				Method
				{
					Declaration "const Cvar@ CVarGetPointer(const string& in szCvar) const"
					Documentation "Gets a pointer to a cvar."
				}
				Method
				{
					Declaration "bool IsDedicatedServer() const"
					Documentation "Returns whether this is a dedicated server."
				}
				Method
				{
					Declaration "int GetPlayerUserId(edict_t@ pEdict)"
					Documentation "Get player user ID. This is a unique id generated when a player connects. It remains valid as long as the player stays connected to the server."
				}
				Method
				{
					Declaration "void StaticDecal(const Vector& in vecOrigin, int iDecalIndex, int iEntityIndex, int iModelIndex)"
					Documentation "Project a static decal."
				}
				Method
				{
					Declaration "bool IsMapValid(const string& in szMapName) const"
					Documentation "Returns whether the given map is valid."
				}
				Method
				{
					Declaration "KeyValueBuffer@ GetPhysicsKeyBuffer(edict_t@ pEdict)"
					Documentation "Get physics key buffer."
				}
				Method
				{
					Declaration "KeyValueBuffer@ GetInfoKeyBuffer(edict_t@ pEdict)"
					Documentation "Get info key buffer."
				}
				Method
				{
					Declaration "int NumberOfEntities()"
					Documentation "Get number of entities."
				}
				Method
				{
					Declaration "void RunPlayerMove(edict_t@ pEdict, const Vector& in vecViewAngles, float flFowardMove, float flSideMove, float flUpMove, uint16 iButtons, uint8 iImpulse, uint8 iMsec)"
					Documentation "Run player move."
				}
				Method
				{
					Declaration "string GetGameDir()"
					Documentation "Get game directory."
				}
				Method
				{
					Declaration "void CrosshairAngle(const edict_t@ pEdict, float flPitch, float flYaw)"
					Documentation "Sets the angles of the given player\'s crosshairs to the given settings. Set both to 0 to disable. May not have any effect in SC."
				}
				Method
				{
					Declaration "float Time()"
					Documentation "Get current time."
				}
				Method
				{
					Declaration "void SetView(const edict_t@ pEdict, const edict_t@ pViewEntity)"
					Documentation "Set view."
				}
				Method
				{
					Declaration "void GetAttachment(const edict_t@ pEdict, int iAttachment, Vector& out vecOrigin, Vector& out vecAngles)"
					Documentation "Get attachment position."
				}
				Method
				{
					Declaration "int Cmd_Argc()"
					Documentation "Get number of command arguments."
				}
				Method
				{
					Declaration "string Cmd_Argv(int iIndex)"
					Documentation "Get command argument by index."
				}
				Method
				{
					Declaration "string Cmd_Args()"
					Documentation "Get command arguments."
				}
				Method
				{
					Declaration "void ServerPrint(const string& in szMessage)"
					Documentation "Server print"
				}
				Method
				{
					Declaration "void ClientPrintf(CBasePlayer@ pPlayer, PRINT_TYPE printType, const string& in szMessage)"
					Documentation "Client print"
				}
				Method
				{
					Declaration "void GetBonePosition(const edict_t@ pEdict, int iBone, Vector& out vecOrigin, Vector& out vecAngles)"
					Documentation "Get bone position."
				}
				Method
				{
					Declaration "edict_t@ FindEntityByVars(entvars_t@ pVars)"
					Documentation "Find entity by variables."
				}
				Method
				{
					Declaration "edict_t@ PEntityOfEntIndex(int iIndex)"
					Documentation "Get entity by entity index."
				}
				Method
				{
					Declaration "int IndexOfEdict(const edict_t@ pEdict)"
					Documentation "Get index of edict."
				}
				Method
				{
					Declaration "entvars_t@ GetVarsOfEnt(edict_t@ pEdict)"
					Documentation "Gets entity variables of entity."
				}
				Method
				{
					Declaration "void CVarSetString(const string& in szCvar, const string& in szValue)"
					Documentation "Set cvar string value."
				}
				Method
				{
					Declaration "void CVarSetFloat(const string& in szCvar, float flValue)"
					Documentation "Set cvar float value."
				}
				Method
				{
					Declaration "string CVarGetString(const string& in szCvar)"
					Documentation "Get cvar string value."
				}
				Method
				{
					Declaration "float CVarGetFloat(const string& in szCvar)"
					Documentation "Get cvar float value."
				}
				Method
				{
					Declaration "CONTENTS PointContents(const Vector& in vecPoint)"
					Documentation "Check if point is in contents."
				}
				Method
				{
					Declaration "int DecalIndex(const string& in szName)"
					Documentation "Get decal index."
				}
				Method
				{
					Declaration "void LightStyle(int iStyle, const string& in szVal)"
					Documentation "Set a light style."
				}
				Method
				{
					Declaration "void ParticleEffect(const Vector& in vecOrigin, const Vector& in vecDir, float flColor, float flCount)"
					Documentation "Emit a particle effect."
				}
				Method
				{
					Declaration "void ServerExecute()"
					Documentation "Executes all pending server commands. Plugins only."
				}
				Method
				{
					Declaration "void ServerCommand(const string& in szCommand)"
					Documentation "Issues a command to the server. Plugins only."
				}
				Method
				{
					Declaration "void GetAimVector(edict_t@ pEntity, float flSpeed, Vector& out vecReturn)"
					Documentation "Get aim vector for entity."
				}
				Method
				{
					Declaration "int WalkMove(edict_t@ pEntity, float flYaw, float flDist, int iMove)"
					Documentation "Make entity walk.\nSee WALKMOVE enum"
				}
				Method
				{
					Declaration "int DropToFloor(edict_t@ pEntity)"
					Documentation "Drop entity to floor."
				}
				Method
				{
					Declaration "int EntIsOnFloor(edict_t@ pEntity)"
					Documentation "Returns whether entity is on the floor."
				}
				Method
				{
					Declaration "void MakeStatic(edict_t@ pEntity)"
					Documentation "Make entity static. This moves the entity to the client.Its current visual state is copied over, and the entity is removed on the server side.Only valid while the level is loading."
				}
				Method
				{
					Declaration "void AngleVectors(const Vector& in vecIn, Vector& out vecForward, Vector& out vecRight, Vector& out vecUp)"
					Documentation "Angle vectors"
				}
				Method
				{
					Declaration "void MakeVectors(const Vector& in vec)"
					Documentation "Make vectors. The results are stored in g_Engine::v_forward, v_right, and v_up."
				}
				Method
				{
					Declaration "edict_t@ EntitiesInPVS(edict_t@ pStartEntity)"
					Documentation "Find entities in Potentially Visible Set. Edict::vars::chain is used for this list, and is temporary."
				}
				Method
				{
					Declaration "edict_t@ FindClientInPVS(edict_t@ pStartEntity)"
					Documentation "Find client in Potentially Visible Set."
				}
				Method
				{
					Declaration "int GetEntityIllum(edict_t@ pEntity)"
					Documentation "Get entity illumination. This is a weighted value between 0 and 255, inclusive."
				}
				Method
				{
					Declaration "void ChangePitch(edict_t@ pEntity)"
					Documentation "Change pitch. This updates entvars_t::angles[ 0 ] to approach entvars_t::idealpitch, at entvars_t::pitch_speed degrees speed."
				}
				Method
				{
					Declaration "void ChangeYaw(edict_t@ pEntity)"
					Documentation "Change yaw. This updates entvars_t::angles[ 1 ] to approach entvars_t::ideal_yaw, at entvars_t::yaw_speed degrees speed."
				}
				Method
				{
					Declaration "void MoveToOrigin(edict_t@ pEntity, const Vector& in vecGoal, float flDist, int iMoveType)"
					Documentation "Move entity to origin."
				}
				Method
				{
					Declaration "void VecToAngles(const Vector& in vec, Vector& out angles)"
					Documentation "Vector to angles"
				}
				Method
				{
					Declaration "float VecToYaw(const Vector& in vec)"
					Documentation "Vector to yaw"
				}
				Method
				{
					Declaration "void ChangeLevel(const string& in szLevelName)"
					Documentation "Changes the current level to the one specified."
				}
				Method
				{
					Declaration "int ModelFrames(int iModelIndex)"
					Documentation "Gets the number of frames in a model."
				}
				Method
				{
					Declaration "int ModelIndex(const string& in szModelName)"
					Documentation "Gets the model index of a model."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName KeyValueBuffer
			Documentation "Buffer containing keyvalue pairs"
			Flags 1
			Methods
			{
				Method
				{
					Declaration "void RemoveValue(const string& in szKey)"
					Documentation "Removes a key value. If this is a physics key buffer, this will set the key to an empty string instead."
				}
				Method
				{
					Declaration "void SetValue(const string& in szKey, const string& in szValue) const"
					Documentation "Sets a key value."
				}
				Method
				{
					Declaration "string GetValue(const string& in szKey) const"
					Documentation "Gets a key value"
				}
				Method
				{
					Declaration "edict_t@ GetClient() const"
					Documentation "Gets the client that this buffer belongs to."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName Cvar
			Documentation "Cvar structure"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "string GetString()"
					Documentation "Gets the value of the cvar as a string."
				}
				Method
				{
					Declaration "string GetName()"
					Documentation "Gets the name of the cvar."
				}
			}
			Properties
			{
				Property
				{
					Declaration "const float value"
					Documentation "The value of this cvar as a float."
				}
				Property
				{
					Declaration "const int flags"
					Documentation "The flags of this cvar."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName DamageInfo
			Documentation "Damage info structure"
			Flags 262145
			Methods
			{
			}
			Properties
			{
				Property
				{
					Declaration "int bitsDamageType"
					Documentation "Damage type."
				}
				Property
				{
					Declaration "float flDamage"
					Documentation "Damage amount."
				}
				Property
				{
					Declaration "CBaseEntity@ pAttacker"
					Documentation "Attacker entity."
				}
				Property
				{
					Declaration "CBaseEntity@ pInflictor"
					Documentation "Inflictor entity."
				}
				Property
				{
					Declaration "CBaseEntity@ pVictim"
					Documentation "Victim entity."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName TraceResult
			Documentation "Trace result structure"
			Flags 5890
			Methods
			{
				Method
				{
					Declaration "TraceResult& opAssign(const TraceResult& in tr)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "void TraceResult(const TraceResult& in tr)"
					Documentation Constructor.
				}
				Method
				{
					Declaration "void TraceResult()"
					Documentation Constructor.
				}
			}
			Properties
			{
				Property
				{
					Declaration "int iHitgroup"
					Documentation "Hit group."
				}
				Property
				{
					Declaration "edict_t@ pHit"
					Documentation "Hit entity"
				}
				Property
				{
					Declaration "Vector vecPlaneNormal"
					Documentation "Plane normal"
				}
				Property
				{
					Declaration "float flPlaneDist"
					Documentation "Plane distance."
				}
				Property
				{
					Declaration "Vector vecEndPos"
					Documentation "End position."
				}
				Property
				{
					Declaration "float flFraction"
					Documentation Fraction.
				}
				Property
				{
					Declaration "int fInWater"
					Documentation "Flag telling whether the trace ended in water"
				}
				Property
				{
					Declaration "int fInOpen"
					Documentation "Flag telling whether the trace ended in an open area."
				}
				Property
				{
					Declaration "int fStartSolid"
					Documentation "Flag telling whether the trace started in a solid area."
				}
				Property
				{
					Declaration "int fAllSolid"
					Documentation "Flag telling whether the trace occured in an all solid area."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName Observer
			Documentation "Observer mode management class."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void RemoveDeadBody()"
					Documentation "Removes the player\'s dead body, if it exists."
				}
				Method
				{
					Declaration "void SetObserverModeControlEnabled(bool fEnabled)"
					Documentation "Sets whether this player can control the observer mode."
				}
				Method
				{
					Declaration "bool CanControlObserverMode() const"
					Documentation "Returns whether this player can control the observer mode."
				}
				Method
				{
					Declaration "bool HasCorpse()"
					Documentation "Returns whether this player has a corpse."
				}
				Method
				{
					Declaration "CBaseEntity@ FindObserverStartPoint()"
					Documentation "Find a point to start a player at for observer."
				}
				Method
				{
					Declaration "void SetMode(ObserverMode iMode)"
					Documentation "Sets the observer mode."
				}
				Method
				{
					Declaration "void HandleButtons()"
					Documentation "Handles button input."
				}
				Method
				{
					Declaration "void FindNextPlayer(bool fReverse)"
					Documentation "Find the next player to observe."
				}
				Method
				{
					Declaration "void StopObserver(bool fRespawn)"
					Documentation "Stops observer mode."
				}
				Method
				{
					Declaration "void StartObserver(const Vector& in vecPosition, const Vector& in vecViewAngle, bool fCreateBody = true)"
					Documentation "Starts observer mode."
				}
				Method
				{
					Declaration "bool IsObserver() const"
					Documentation "Returns whether this player is an observer."
				}
				Method
				{
					Declaration "bool CanUseObserver()"
					Documentation "Returns whether this player can use observer mode."
				}
				Method
				{
					Declaration "void SetObserverTarget(CBasePlayer@ pPlayer)"
					Documentation "Sets the observer target."
				}
				Method
				{
					Declaration "void ResetObserverTarget()"
					Documentation "Resets the observer target and finds the next suitable candidate."
				}
				Method
				{
					Declaration "CBaseEntity@ GetObserverTarget()"
					Documentation "Gets the current observer target, if any."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName MonsterEvent
			Documentation "Monster event type"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "string options() const"
					Documentation "Options. Usually a sound name."
				}
			}
			Properties
			{
				Property
				{
					Declaration "int event"
					Documentation "Event type.\nSee MonsterEventType enum"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName Waypoint
			Documentation "Waypoint for monsters to follow."
			Flags 262145
			Methods
			{
			}
			Properties
			{
				Property
				{
					Declaration "int iType"
					Documentation "Type(s) of this waypoint."
				}
				Property
				{
					Declaration "float flSavedMoveWait"
					Documentation "How long to wait on this waypoint."
				}
				Property
				{
					Declaration "EHandle hDoor"
					Documentation "Handle to a door to use."
				}
				Property
				{
					Declaration "Vector vecLadderVelocity"
					Documentation "Saved ladder velocity."
				}
				Property
				{
					Declaration "Vector vecJumpVelocity"
					Documentation "Saved jump velocity."
				}
				Property
				{
					Declaration "Vector vecLocation"
					Documentation "Location of this waypoint."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName ScriptSchedule
			Documentation "Script schedule class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void AddTask(const ScriptTask& in task)"
					Documentation "Adds a task to the list"
				}
				Method
				{
					Declaration "Schedule@ opImplCast()"
					Documentation "Cast to Schedule"
				}
				Method
				{
					Declaration "ScriptSchedule@ ScriptSchedule(int iInterruptMask, int iSoundMask, const string& in szName)"
					Documentation Constructor
				}
				Method
				{
					Declaration "string szName() const"
					Documentation "Gets the name of this schedule."
				}
				Method
				{
					Declaration "Task@ GetTask(int iIndex) const"
					Documentation "Gets a task in this schedule.\nMust be between 0 and cTasks."
				}
			}
			Properties
			{
				Property
				{
					Declaration "int iSoundMask"
					Documentation "A more specific mask that indicates which TYPES of sounds will interrupt the schedule in the event that the schedule is broken by COND_HEAR_SOUND."
				}
				Property
				{
					Declaration "int iInterruptMask"
					Documentation "A bit mask of conditions that can interrupt this schedule."
				}
				Property
				{
					Declaration "int cTasks"
					Documentation "Number of tasks in this schedule."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName ScriptTask
			Documentation "Script task class"
			Flags 1794
			Methods
			{
				Method
				{
					Declaration "void ScriptTask(int iTask, float flData = 0.0f)"
					Documentation Constructor
				}
				Method
				{
					Declaration "void ScriptTask()"
					Documentation Constructor
				}
			}
			Properties
			{
				Property
				{
					Declaration "float flData"
					Documentation "Task data"
				}
				Property
				{
					Declaration "int iTask"
					Documentation "Task to execute.\nCan be monster-specific."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName Schedule
			Documentation "Schedule for monsters to follow."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "string szName() const"
					Documentation "Gets the name of this schedule."
				}
				Method
				{
					Declaration "Task@ GetTask(int iIndex) const"
					Documentation "Gets a task in this schedule.\nMust be between 0 and cTasks."
				}
			}
			Properties
			{
				Property
				{
					Declaration "int iSoundMask"
					Documentation "A more specific mask that indicates which TYPES of sounds will interrupt the schedule in the event that the schedule is broken by COND_HEAR_SOUND."
				}
				Property
				{
					Declaration "int iInterruptMask"
					Documentation "A bit mask of conditions that can interrupt this schedule."
				}
				Property
				{
					Declaration "int cTasks"
					Documentation "Number of tasks in this schedule."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName Task
			Documentation "Task for monsters to execute."
			Flags 262145
			Methods
			{
			}
			Properties
			{
				Property
				{
					Declaration "float flData"
					Documentation "Task data"
				}
				Property
				{
					Declaration "int iTask"
					Documentation "Task to execute.\nCan be monster-specific."
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CActivityMap
			Documentation "Activity map"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "string GetName(Activity activity) const"
					Documentation "Gets the name of the given activity"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CustomKeyvalues
			Documentation "Custom keyvalues. Do not keep handles to instances of these objects."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "CustomKeyvalue GetKeyvalue(const string& in szKey) const"
					Documentation "Gets the keyvalue with the given name. Check if it exists by calling Exists."
				}
				Method
				{
					Declaration "bool HasKeyvalue(const string& in szKey) const"
					Documentation "Returns whether the keyvalue with the given name exists."
				}
				Method
				{
					Declaration "void InitializeKeyvalueWithDefault(const string& in szKey)"
					Documentation "Initializes a keyvalue with the default value for its type."
				}
				Method
				{
					Declaration "bool SetKeyvalue(const string& in szKey, int iValue)"
					Documentation "Sets a custom keyvalue to the given integer value.\nReturns true if the key existed and was overwritten."
				}
				Method
				{
					Declaration "bool SetKeyvalue(const string& in szKey, float flValue)"
					Documentation "Sets a custom keyvalue to the given float value.\nReturns true if the key existed and was overwritten."
				}
				Method
				{
					Declaration "bool SetKeyvalue(const string& in szKey, const Vector& in vecValue)"
					Documentation "Sets a custom keyvalue to the given vector value.\nReturns true if the key existed and was overwritten."
				}
				Method
				{
					Declaration "bool SetKeyvalue(const string& in szKey, const string& in szValue)"
					Documentation "Sets a custom keyvalue to the given string value.\nReturns true if the key existed and was overwritten."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CustomKeyvalue
			Documentation "Custom keyvalue. Only use this as a local variable, do not store them!"
			Flags 5890
			Methods
			{
				Method
				{
					Declaration "int GetInteger() const"
					Documentation "Gets the value as an integer."
				}
				Method
				{
					Declaration "float GetFloat() const"
					Documentation "Gets the value as a float."
				}
				Method
				{
					Declaration "Vector GetVector() const"
					Documentation "Gets the value as a vector."
				}
				Method
				{
					Declaration "string GetString() const"
					Documentation "Gets the value as a string."
				}
				Method
				{
					Declaration "Entvartype GetType() const"
					Documentation "Gets the type of the keyvalue.\nReturns VAR_INVALID if this value does not exist."
				}
				Method
				{
					Declaration "bool Exists() const"
					Documentation "Returns whether the value exists."
				}
				Method
				{
					Declaration "void CustomKeyvalue(const CustomKeyvalue& in other)"
					Documentation Constructor
				}
				Method
				{
					Declaration "void CustomKeyvalue()"
					Documentation Constructor
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName EHandle
			Documentation "Safe way to point to CBaseEntities who may die between frames."
			Flags 2
			Methods
			{
				Method
				{
					Declaration "int GetSerialNumber() const"
					Documentation "CBaseEntity serial number. Used to determine if the entity is still valid."
				}
				Method
				{
					Declaration "EHandle& opAssign(const EHandle& in other)"
					Documentation "Makes this handle refer to the same entity as the given handle."
				}
				Method
				{
					Declaration "CBaseEntity@ opAssign(CBaseEntity@ pEntity)"
					Documentation "Assigns the given entity to this handle."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast() const"
					Documentation "Gets the Entity this handle refers to.\nReturns null if invalid."
				}
				Method
				{
					Declaration "CBaseEntity@ GetEntity() const"
					Documentation "Gets the Entity this handle refers to.\nReturns null if invalid."
				}
				Method
				{
					Declaration "bool opImplConv() const"
					Documentation "Returns whether this handle is valid."
				}
				Method
				{
					Declaration "bool IsValid() const"
					Documentation "Returns whether this handle is valid."
				}
				Method
				{
					Declaration "void EHandle(CBaseEntity@ pEntity)"
					Documentation "Constructs this handle with a reference to the given entity."
				}
				Method
				{
					Declaration "void EHandle(const EHandle& in other)"
					Documentation "Copy constructs this handle."
				}
				Method
				{
					Declaration "void EHandle()"
					Documentation "Default constructs this handle."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CGib
			Documentation "Gib class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void LimitVelocity()"
					Documentation "Limits the velocity of the gib"
				}
				Method
				{
					Declaration "void Spawn(const string& in szModelName)"
					Documentation "Spawns the gib with the given model. Note: this sets several of CGib\'s variables. Set variables after calling this."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Calls use on targets."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "float m_lifeTime"
					Documentation "Lifetime of this gib, in seconds"
				}
				Property
				{
					Declaration "int m_material"
					Documentation "Gib material type. One of the Materials enum values should be used here."
				}
				Property
				{
					Declaration "int m_cBloodDecals"
					Documentation "Maximum number of blood decals this gib can spray."
				}
				Property
				{
					Declaration "int m_bloodColor"
					Documentation "The color of the blood that is sprayed onto walls when the gib touches it."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBaseDoor
			Documentation "Door entity base class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "bool DoorChangeDirection()"
					Documentation "If the door is moving, changes the movement direction. Returns true if the door was moving."
				}
				Method
				{
					Declaration "void DoorGoDown()"
					Documentation "Makes the door go down."
				}
				Method
				{
					Declaration "void DoorGoUp()"
					Documentation "Makes the door go up."
				}
				Method
				{
					Declaration "void DoorTouch(CBaseEntity@ pOther)"
					Documentation "Door touch function."
				}
				Method
				{
					Declaration "InventoryRules@ get_m_pInventoryRules() const"
					Documentation "The inventory rules."
				}
				Method
				{
					Declaration "bool IsToggleLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations."
				}
				Method
				{
					Declaration "void AngularMove(Vector vecDestAngle, float flSpeed)"
					Documentation "Performs angular movement."
				}
				Method
				{
					Declaration "void LinearMove(Vector vecDest, float flSpeed)"
					Documentation "Performs linear movement."
				}
				Method
				{
					Declaration "int GetSequenceActivityName(int iSequence)"
					Documentation "Gets activity for the given sequence."
				}
				Method
				{
					Declaration "void SetSequenceBox()"
					Documentation "Sets the sequence box."
				}
				Method
				{
					Declaration "int GetAttachmentCount()"
					Documentation "Gets the number of attachments that the current model has."
				}
				Method
				{
					Declaration "bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)"
					Documentation "Extracts the bounding box of the current model."
				}
				Method
				{
					Declaration "int GetBodygroup(int iGroup)"
					Documentation "Gets the value of the given body group."
				}
				Method
				{
					Declaration "void SetBodygroup(int iGroup, int iValue)"
					Documentation "Sets the given body group to the given value."
				}
				Method
				{
					Declaration "void GetAttachment(int iAttachment, Vector& out origin, Vector& out angles)"
					Documentation "Gets the attachment position."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence, int& out iDir)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "void GetAutomovement(Vector& out origin, Vector& out angles, float flInterval = 0.1f)"
					Documentation "Gets automatic movement."
				}
				Method
				{
					Declaration "void GetBonePosition(int iBone, Vector& out origin, Vector& out angles)"
					Documentation "Gets the position of the given bone."
				}
				Method
				{
					Declaration "float SetBlending(int iBlender, float flValue)"
					Documentation "Sets the given blending controller to the given value."
				}
				Method
				{
					Declaration "void InitBoneControllers()"
					Documentation "Initializes bone controllers."
				}
				Method
				{
					Declaration "float SetBoneController(int iController, float flValue)"
					Documentation "Sets the specified bone controller to the given value."
				}
				Method
				{
					Declaration "void DispatchAnimEvents(float flFutureInterval = 0.1f)"
					Documentation "Handle events that have happend since last time called up until X seconds into the future."
				}
				Method
				{
					Declaration "void ResetGaitSequenceInfo()"
					Documentation "Resets gait sequence info."
				}
				Method
				{
					Declaration "void ResetSequenceInfo()"
					Documentation "Resets sequence info."
				}
				Method
				{
					Declaration "int LookupSequence(const string& in szLabel)"
					Documentation "Returns the index of the given sequence, or -1 if no such sequence exists."
				}
				Method
				{
					Declaration "int LookupActivityHeaviest(int iActivity)"
					Documentation "Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int LookupActivity(int iActivity)"
					Documentation "Returns the index of the given activity, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int GetSequenceFlags()"
					Documentation "Get sequence flags."
				}
				Method
				{
					Declaration "float StudioFrameAdvance(float flInterval = 0.0f)"
					Documentation "Accumulate animation frame time from last time called until now."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseDelay@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseToggle@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "string_t m_sMaster"
					Documentation "This entity\'s master, if any."
				}
				Property
				{
					Declaration "int m_bitsDamageInflict"
					Documentation "DMG_ damage type that the door or trigger does."
				}
				Property
				{
					Declaration "Vector m_vecFinalAngle"
					Documentation "Final angle."
				}
				Property
				{
					Declaration "Vector m_vecFinalDest"
					Documentation "Final destination."
				}
				Property
				{
					Declaration "Vector m_vecAngle2"
					Documentation "Open angle."
				}
				Property
				{
					Declaration "Vector m_vecAngle1"
					Documentation "Closed angle."
				}
				Property
				{
					Declaration "Vector m_vecPosition2"
					Documentation "Open position."
				}
				Property
				{
					Declaration "Vector m_vecPosition1"
					Documentation "Closed position."
				}
				Property
				{
					Declaration "EHandle m_hActivator"
					Documentation "Handle to the activator."
				}
				Property
				{
					Declaration "float m_flHeight"
					Documentation Height.
				}
				Property
				{
					Declaration "int m_cTriggersLeft"
					Documentation "Trigger_counter only: # of activations remaining."
				}
				Property
				{
					Declaration "float m_flTLength"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flTWidth"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flLip"
					Documentation "How much to stick out of a wall. Will recede further into walls if negative."
				}
				Property
				{
					Declaration "float m_flWait"
					Documentation "How long to wait before resetting."
				}
				Property
				{
					Declaration "float m_flMoveDistance"
					Documentation "How far a door should slide or rotate."
				}
				Property
				{
					Declaration "TOGGLE_STATE m_toggle_state"
					Documentation "Current toggle state."
				}
				Property
				{
					Declaration "bool m_fSequenceLoops"
					Documentation "True if the sequence loops."
				}
				Property
				{
					Declaration "bool m_fSequenceFinished"
					Documentation "Flag set when StudioAdvanceFrame moves across a frame boundry."
				}
				Property
				{
					Declaration "float m_flLastGaitEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flLastEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flGroundSpeed"
					Documentation "Computed linear movement rate for current sequence."
				}
				Property
				{
					Declaration "float m_flFrameRate"
					Documentation "Computed FPS for current sequence."
				}
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBaseButton
			Documentation "Button entity base class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "ButtonCode ButtonResponseToTouch()"
					Documentation "Gets the button response to a touch event."
				}
				Method
				{
					Declaration "void ButtonUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue)"
					Documentation "Button Use function."
				}
				Method
				{
					Declaration "void ButtonBackHome()"
					Documentation "Button has returned to start state.  Quiesce it."
				}
				Method
				{
					Declaration "void ButtonReturn()"
					Documentation "Starts the button moving \"out/down\""
				}
				Method
				{
					Declaration "void TriggerAndWait()"
					Documentation "Button has reached the \"in/up\" position.  Activate its \"targets\", and pause before \"popping out\"."
				}
				Method
				{
					Declaration "void ButtonSpark()"
					Documentation "Makes the button start sparking. The button will spark randomly after this."
				}
				Method
				{
					Declaration "void ButtonTouch(CBaseEntity@ pOther)"
					Documentation "Button Touch function."
				}
				Method
				{
					Declaration "void ButtonActivate()"
					Documentation "Activates the button."
				}
				Method
				{
					Declaration "InventoryRules@ get_m_pInventoryRules() const"
					Documentation "The inventory rules."
				}
				Method
				{
					Declaration "bool IsToggleLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations."
				}
				Method
				{
					Declaration "void AngularMove(Vector vecDestAngle, float flSpeed)"
					Documentation "Performs angular movement."
				}
				Method
				{
					Declaration "void LinearMove(Vector vecDest, float flSpeed)"
					Documentation "Performs linear movement."
				}
				Method
				{
					Declaration "int GetSequenceActivityName(int iSequence)"
					Documentation "Gets activity for the given sequence."
				}
				Method
				{
					Declaration "void SetSequenceBox()"
					Documentation "Sets the sequence box."
				}
				Method
				{
					Declaration "int GetAttachmentCount()"
					Documentation "Gets the number of attachments that the current model has."
				}
				Method
				{
					Declaration "bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)"
					Documentation "Extracts the bounding box of the current model."
				}
				Method
				{
					Declaration "int GetBodygroup(int iGroup)"
					Documentation "Gets the value of the given body group."
				}
				Method
				{
					Declaration "void SetBodygroup(int iGroup, int iValue)"
					Documentation "Sets the given body group to the given value."
				}
				Method
				{
					Declaration "void GetAttachment(int iAttachment, Vector& out origin, Vector& out angles)"
					Documentation "Gets the attachment position."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence, int& out iDir)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "void GetAutomovement(Vector& out origin, Vector& out angles, float flInterval = 0.1f)"
					Documentation "Gets automatic movement."
				}
				Method
				{
					Declaration "void GetBonePosition(int iBone, Vector& out origin, Vector& out angles)"
					Documentation "Gets the position of the given bone."
				}
				Method
				{
					Declaration "float SetBlending(int iBlender, float flValue)"
					Documentation "Sets the given blending controller to the given value."
				}
				Method
				{
					Declaration "void InitBoneControllers()"
					Documentation "Initializes bone controllers."
				}
				Method
				{
					Declaration "float SetBoneController(int iController, float flValue)"
					Documentation "Sets the specified bone controller to the given value."
				}
				Method
				{
					Declaration "void DispatchAnimEvents(float flFutureInterval = 0.1f)"
					Documentation "Handle events that have happend since last time called up until X seconds into the future."
				}
				Method
				{
					Declaration "void ResetGaitSequenceInfo()"
					Documentation "Resets gait sequence info."
				}
				Method
				{
					Declaration "void ResetSequenceInfo()"
					Documentation "Resets sequence info."
				}
				Method
				{
					Declaration "int LookupSequence(const string& in szLabel)"
					Documentation "Returns the index of the given sequence, or -1 if no such sequence exists."
				}
				Method
				{
					Declaration "int LookupActivityHeaviest(int iActivity)"
					Documentation "Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int LookupActivity(int iActivity)"
					Documentation "Returns the index of the given activity, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int GetSequenceFlags()"
					Documentation "Get sequence flags."
				}
				Method
				{
					Declaration "float StudioFrameAdvance(float flInterval = 0.0f)"
					Documentation "Accumulate animation frame time from last time called until now."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseDelay@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseToggle@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "bool m_fRotating"
					Documentation "a rotating button?  default is a sliding button."
				}
				Property
				{
					Declaration "bool m_fStayPushed"
					Documentation "button stays pushed in until touched again?"
				}
				Property
				{
					Declaration "string_t m_sMaster"
					Documentation "This entity\'s master, if any."
				}
				Property
				{
					Declaration "int m_bitsDamageInflict"
					Documentation "DMG_ damage type that the door or trigger does."
				}
				Property
				{
					Declaration "Vector m_vecFinalAngle"
					Documentation "Final angle."
				}
				Property
				{
					Declaration "Vector m_vecFinalDest"
					Documentation "Final destination."
				}
				Property
				{
					Declaration "Vector m_vecAngle2"
					Documentation "Open angle."
				}
				Property
				{
					Declaration "Vector m_vecAngle1"
					Documentation "Closed angle."
				}
				Property
				{
					Declaration "Vector m_vecPosition2"
					Documentation "Open position."
				}
				Property
				{
					Declaration "Vector m_vecPosition1"
					Documentation "Closed position."
				}
				Property
				{
					Declaration "EHandle m_hActivator"
					Documentation "Handle to the activator."
				}
				Property
				{
					Declaration "float m_flHeight"
					Documentation Height.
				}
				Property
				{
					Declaration "int m_cTriggersLeft"
					Documentation "Trigger_counter only: # of activations remaining."
				}
				Property
				{
					Declaration "float m_flTLength"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flTWidth"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flLip"
					Documentation "How much to stick out of a wall. Will recede further into walls if negative."
				}
				Property
				{
					Declaration "float m_flWait"
					Documentation "How long to wait before resetting."
				}
				Property
				{
					Declaration "float m_flMoveDistance"
					Documentation "How far a door should slide or rotate."
				}
				Property
				{
					Declaration "TOGGLE_STATE m_toggle_state"
					Documentation "Current toggle state."
				}
				Property
				{
					Declaration "bool m_fSequenceLoops"
					Documentation "True if the sequence loops."
				}
				Property
				{
					Declaration "bool m_fSequenceFinished"
					Documentation "Flag set when StudioAdvanceFrame moves across a frame boundry."
				}
				Property
				{
					Declaration "float m_flLastGaitEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flLastEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flGroundSpeed"
					Documentation "Computed linear movement rate for current sequence."
				}
				Property
				{
					Declaration "float m_flFrameRate"
					Documentation "Computed FPS for current sequence."
				}
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CPathCondition
			Documentation "Path condition entity"
			Flags 262145
			Methods
			{
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CBaseTank
			Documentation "Tank base class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "const CBasePlayer@ GetController()"
					Documentation "Gets the current player controlling this tank, if any."
				}
				Method
				{
					Declaration "void Look(int iDistance)"
					Documentation "Looks around itself in a box that is iDistance * 2 in width and height for possible targets and stores the list in m_pLink.\nThe target stores the next target in the list in its m_pLink, and so on."
				}
				Method
				{
					Declaration "void MonsterStopControl()"
					Documentation "If a monster is controlling this tank, makes the monster stop controlling the tank."
				}
				Method
				{
					Declaration "void StopControl()"
					Documentation "If a player is controlling this tank, makes the player stop controlling the tank."
				}
				Method
				{
					Declaration "bool StartControl(CBasePlayer@ pController)"
					Documentation "Makes the given player start controlling this tank."
				}
				Method
				{
					Declaration "Vector AdjustAnglesForBarrel(const Vector& in vecInAngles, float flDistance)"
					Documentation "Adjusts the given angles to point at the target."
				}
				Method
				{
					Declaration "int BulletCount()"
					Documentation "Gets the bullet count at this time."
				}
				Method
				{
					Declaration "Vector BarrelPosition()"
					Documentation "Returns the barrel position."
				}
				Method
				{
					Declaration "void TankTrace(const Vector& in vecStart, const Vector& in vecForward, const Vector& in vecSpread, TraceResult& out tr)"
					Documentation "Performs a traceline using a random spread based on the given spread amount."
				}
				Method
				{
					Declaration "void MonsterStartup(CBaseMonster@ pMonster)"
					Documentation "Makes the given monster begin controlling this tank, if no other monster had control before."
				}
				Method
				{
					Declaration "CBaseEntity@ FindTarget()"
					Documentation "Finds a target to attack, if any."
				}
				Method
				{
					Declaration "bool InRange(float flRange)"
					Documentation "Returns whether the given range is within the minimum and maximum range of this tank."
				}
				Method
				{
					Declaration "bool CanFire() const"
					Documentation "Returns whether this tank is able to fire."
				}
				Method
				{
					Declaration "void TankDeactivate()"
					Documentation "Deactivates the tank. Active tanks are AI controlled."
				}
				Method
				{
					Declaration "void TankActivate()"
					Documentation "Activates the tank. Active tanks are AI controlled."
				}
				Method
				{
					Declaration "bool IsActive() const"
					Documentation "Returns whether the tank is active. Active tanks are AI controlled."
				}
				Method
				{
					Declaration "void StopRotSound()"
					Documentation "Stop playing the rotating sound."
				}
				Method
				{
					Declaration "void StartRotSound()"
					Documentation "Start playing the rotating sound, if defined."
				}
				Method
				{
					Declaration "Vector UpdateTargetPosition(CBaseEntity@ pTargetEntity)"
					Documentation "Gets the updated position of the given target. Target must be valid."
				}
				Method
				{
					Declaration "void Fire()"
					Documentation "Fires the tank. Uses this tank\'s settings to fire, does not determine if it is targeting anything."
				}
				Method
				{
					Declaration "void Fire(const Vector& in vecBarrelEnd, const Vector& in vecForward, entvars_t@ pevAttacker)"
					Documentation "Fires the tank. Barrel end position, aiming direction and attacker entvars_t must be given."
				}
				Method
				{
					Declaration "bool PointAt(const Vector& in vecDestination)"
					Documentation "Points the tank at the target location."
				}
				Method
				{
					Declaration "void TrackTarget()"
					Documentation "Updates the tank\'s angles to match either its controlling player, or its current target.Accounts for rotation speed. Will fire at the target if it\'s automated."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Calls use on targets."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "string_t m_iszMaster"
					Documentation "Master entity (game_team_master or multisource)"
				}
				Property
				{
					Declaration "int m_spread"
					Documentation "firing spread"
				}
				Property
				{
					Declaration "Vector m_sightOrigin"
					Documentation "Last sight of target"
				}
				Property
				{
					Declaration "int m_iBulletDamage"
					Documentation "0 means use Bullet type\'s default damage"
				}
				Property
				{
					Declaration "TANKBULLET m_bulletType"
					Documentation "Bullet type"
				}
				Property
				{
					Declaration "float m_spriteScale"
					Documentation "Scale of any sprites we shoot"
				}
				Property
				{
					Declaration "Vector m_barrelPos"
					Documentation "Length of the freakin barrel"
				}
				Property
				{
					Declaration "float m_maxRange"
					Documentation "Max range to aim/track"
				}
				Property
				{
					Declaration "float m_minRange"
					Documentation "Minimum range to aim/track"
				}
				Property
				{
					Declaration "float m_persist"
					Documentation "Persistence of firing (how long do I shoot when I can\'t see)"
				}
				Property
				{
					Declaration "float m_lastSightTime"
					Documentation "Last time I saw target"
				}
				Property
				{
					Declaration "float m_fireRate"
					Documentation "How many rounds/second"
				}
				Property
				{
					Declaration "float m_fireLast"
					Documentation "Last time I fired"
				}
				Property
				{
					Declaration "float m_pitchTolerance"
					Documentation "Tolerance angle"
				}
				Property
				{
					Declaration "float m_pitchRange"
					Documentation "Range of pitch motion as above"
				}
				Property
				{
					Declaration "float m_pitchRate"
					Documentation "Max turn rate on pitch"
				}
				Property
				{
					Declaration "float m_pitchCenter"
					Documentation "\"Center\" pitch"
				}
				Property
				{
					Declaration "float m_yawTolerance"
					Documentation "Tolerance angle"
				}
				Property
				{
					Declaration "float m_yawRange"
					Documentation "Range of turning motion (one-sided: 30 is +/- 30 degress from center)\nZero is full rotation"
				}
				Property
				{
					Declaration "float m_yawRate"
					Documentation "Max turn rate to track targets"
				}
				Property
				{
					Declaration "float m_yawCenter"
					Documentation "\"Center\" yaw"
				}
				Property
				{
					Declaration "float m_flNextAttack"
					Documentation "Next attack time"
				}
				Property
				{
					Declaration "Vector m_vecControllerUsePos"
					Documentation "Start origin of the player that is currently controlling this tank.\nUsed to determine when a player has moved too far to continue controlling this tank."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CLaser
			Documentation "Laser class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void FireAtPoint(TraceResult& in tr)"
					Documentation "Fires the laser at a point defined by where the TraceResult hit.\nAlso causes beam damage as if CBeam::BeamDamage were used, and sparks at both ends, if the approprite spawn flags have been set."
				}
				Method
				{
					Declaration "bool IsOn()"
					Documentation "Returns whether the laser is on"
				}
				Method
				{
					Declaration "void TurnOff()"
					Documentation "Turns the laser off"
				}
				Method
				{
					Declaration "void TurnOn()"
					Documentation "Turns the laser on"
				}
				Method
				{
					Declaration "void XenTeleport(const Vector& in vecSrc, int iRadius = 256)"
					Documentation "Creates a Xen teleport effect at the given location, with zaps occuring within the given radius."
				}
				Method
				{
					Declaration "void XenTeleportZap(const Vector& in vecSrc, const Vector& in vecDest)"
					Documentation "Creates a Xen teleport zap effect between the given points."
				}
				Method
				{
					Declaration "void BeamDamageInstant(TraceResult& in tr, float flDamage)"
					Documentation "Causes the given amount of damage to be done to the entity hit by the given traceresult, as if the damage occured one second ago."
				}
				Method
				{
					Declaration "void LiveForTime(float flTime)"
					Documentation "Sets this beam to live for the given amount of time, after which it is removed."
				}
				Method
				{
					Declaration "void HoseInit(const Vector& in vecStart, const Vector& in vecDirection)"
					Documentation "Initializes this beam to be a beam going from a point in a given direction (BEAM_HOSE)."
				}
				Method
				{
					Declaration "void EntsInit(CBaseEntity@ pEntStart, CBaseEntity@ pEntEnd)"
					Documentation "Initializes this beam to be a beam between 2 given entities (BEAM_ENTS)."
				}
				Method
				{
					Declaration "void EntsInit(int startIndex, int endIndex)"
					Documentation "Initializes this beam to be a beam between 2 given entities (BEAM_ENTS)."
				}
				Method
				{
					Declaration "void PointEntInit(const Vector& in vecStart, CBaseEntity@ pEntEnd)"
					Documentation "Initializes this beam to be a beam between a point and an entity (BEAM_ENTPOINT)."
				}
				Method
				{
					Declaration "void PointEntInit(const Vector& in vecStart, int endIndex)"
					Documentation "Initializes this beam to be a beam between a point and an entity (BEAM_ENTPOINT)."
				}
				Method
				{
					Declaration "void PointsInit(const Vector& in vecStart, const Vector& in vecEnd)"
					Documentation "Initializes this beam to be a beam between 2 given points (BEAM_POINTS)."
				}
				Method
				{
					Declaration "void BeamInit(const string& in szSpriteName, int iWidth)"
					Documentation "Initializes this beam with default values and sets the given sprite as the sprite used, with the given width."
				}
				Method
				{
					Declaration "void BeamDamage(TraceResult& in tr)"
					Documentation "Damages the entity hit by the given trace line with the amount set in this entity\'s pev->dmg variable.\nAlso applies decals to BSP models if the appropriate spawnflag is set."
				}
				Method
				{
					Declaration "void DoSparks(const Vector& in vecStart, const Vector& in vecEnd)"
					Documentation "Creates sparks at the given start and end points, if appropriate spawn flags are set."
				}
				Method
				{
					Declaration "void RelinkBeam()"
					Documentation "Call after you change start/end positions."
				}
				Method
				{
					Declaration "int GetScrollRate()"
					Documentation "Gets the beam\'s scroll rate."
				}
				Method
				{
					Declaration "int GetFrame()"
					Documentation "Gets the beam\'s frame number."
				}
				Method
				{
					Declaration "int GetBrightness()"
					Documentation "Gets the beam\'s brightness."
				}
				Method
				{
					Declaration "void GetColor(int& out r, int& out g, int& out b)"
					Documentation "Gets the beam\'s color."
				}
				Method
				{
					Declaration "int GetNoise()"
					Documentation "Gets the beam\'s noise."
				}
				Method
				{
					Declaration "int GetWidth()"
					Documentation "Gets the beam\'s width."
				}
				Method
				{
					Declaration "int GetTexture()"
					Documentation "Gets the beam\'s texture (sprite) index."
				}
				Method
				{
					Declaration "const Vector& GetEndPos()"
					Documentation "Gets the beam\'s ending position."
				}
				Method
				{
					Declaration "const Vector& GetStartPos()"
					Documentation "Gets the beam\'s starting position."
				}
				Method
				{
					Declaration "void SetScrollRate(int speed)"
					Documentation "Sets the scroll rate of the beam."
				}
				Method
				{
					Declaration "void SetFrame(float frame)"
					Documentation "Sets the frame number of the beam."
				}
				Method
				{
					Declaration "void SetBrightness(int brightness)"
					Documentation "Sets the brightness of the beam. Value is between 0-255."
				}
				Method
				{
					Declaration "void SetColor(int r, int g, int b)"
					Documentation "Sets the color of the beam."
				}
				Method
				{
					Declaration "void SetNoise(int iAmplitude)"
					Documentation "Sets the noise (amplitude) of the beam."
				}
				Method
				{
					Declaration "void SetWidth(int iWidth)"
					Documentation "Sets the width of the beam."
				}
				Method
				{
					Declaration "void SetTexture(int spriteIndex)"
					Documentation "Sets the sprite to use. The index is the one returned from CGame::PrecacheModel."
				}
				Method
				{
					Declaration "void SetEndAttachment(int attachment)"
					Documentation "Sets the end attachment of the beam. Attachment is a point on the entity\'s model. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT. Set to 0 to disable."
				}
				Method
				{
					Declaration "void SetStartAttachment(int attachment)"
					Documentation "Sets the start attachment of the beam. Attachment is a point on the entity\'s model. Must be a beam of type BEAM_ENTS. Set to 0 to disable."
				}
				Method
				{
					Declaration "void SetEndEntity(CBaseEntity@ pEntity)"
					Documentation "Sets the ending entity of the beam. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT."
				}
				Method
				{
					Declaration "void SetEndEntity(int entityIndex)"
					Documentation "Sets the ending entity of the beam. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT."
				}
				Method
				{
					Declaration "void SetStartEntity(CBaseEntity@ pEntity)"
					Documentation "Sets the starting entity of the beam. Must be a beam of type BEAM_ENTS."
				}
				Method
				{
					Declaration "void SetStartEntity(int entityIndex)"
					Documentation "Sets the starting entity of the beam. Must be a beam of type BEAM_ENTS."
				}
				Method
				{
					Declaration "void SetEndPos(const Vector& in vecPos)"
					Documentation "Sets the ending position of the beam. Must be a beam of type BEAM_POINTS or BEAM_HOSE."
				}
				Method
				{
					Declaration "void SetStartPos(const Vector& in vecPos)"
					Documentation "Sets the starting position of the beam. Must be a beam of type BEAM_POINTS, BEAM_ENTPOINT or BEAM_HOSE."
				}
				Method
				{
					Declaration "void SetFlags(int flags)"
					Documentation "Sets the flags of the beam. Must be a combination of BeamFlags values, or 0."
				}
				Method
				{
					Declaration "void SetType(BeamType type)"
					Documentation "Sets the type of the beam."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Calls use on targets."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBeam@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBeam
			Documentation "Beam class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "CLaser@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "void XenTeleport(const Vector& in vecSrc, int iRadius = 256)"
					Documentation "Creates a Xen teleport effect at the given location, with zaps occuring within the given radius."
				}
				Method
				{
					Declaration "void XenTeleportZap(const Vector& in vecSrc, const Vector& in vecDest)"
					Documentation "Creates a Xen teleport zap effect between the given points."
				}
				Method
				{
					Declaration "void BeamDamageInstant(TraceResult& in tr, float flDamage)"
					Documentation "Causes the given amount of damage to be done to the entity hit by the given traceresult, as if the damage occured one second ago."
				}
				Method
				{
					Declaration "void LiveForTime(float flTime)"
					Documentation "Sets this beam to live for the given amount of time, after which it is removed."
				}
				Method
				{
					Declaration "void HoseInit(const Vector& in vecStart, const Vector& in vecDirection)"
					Documentation "Initializes this beam to be a beam going from a point in a given direction (BEAM_HOSE)."
				}
				Method
				{
					Declaration "void EntsInit(CBaseEntity@ pEntStart, CBaseEntity@ pEntEnd)"
					Documentation "Initializes this beam to be a beam between 2 given entities (BEAM_ENTS)."
				}
				Method
				{
					Declaration "void EntsInit(int startIndex, int endIndex)"
					Documentation "Initializes this beam to be a beam between 2 given entities (BEAM_ENTS)."
				}
				Method
				{
					Declaration "void PointEntInit(const Vector& in vecStart, CBaseEntity@ pEntEnd)"
					Documentation "Initializes this beam to be a beam between a point and an entity (BEAM_ENTPOINT)."
				}
				Method
				{
					Declaration "void PointEntInit(const Vector& in vecStart, int endIndex)"
					Documentation "Initializes this beam to be a beam between a point and an entity (BEAM_ENTPOINT)."
				}
				Method
				{
					Declaration "void PointsInit(const Vector& in vecStart, const Vector& in vecEnd)"
					Documentation "Initializes this beam to be a beam between 2 given points (BEAM_POINTS)."
				}
				Method
				{
					Declaration "void BeamInit(const string& in szSpriteName, int iWidth)"
					Documentation "Initializes this beam with default values and sets the given sprite as the sprite used, with the given width."
				}
				Method
				{
					Declaration "void BeamDamage(TraceResult& in tr)"
					Documentation "Damages the entity hit by the given trace line with the amount set in this entity\'s pev->dmg variable.\nAlso applies decals to BSP models if the appropriate spawnflag is set."
				}
				Method
				{
					Declaration "void DoSparks(const Vector& in vecStart, const Vector& in vecEnd)"
					Documentation "Creates sparks at the given start and end points, if appropriate spawn flags are set."
				}
				Method
				{
					Declaration "void RelinkBeam()"
					Documentation "Call after you change start/end positions."
				}
				Method
				{
					Declaration "int GetScrollRate()"
					Documentation "Gets the beam\'s scroll rate."
				}
				Method
				{
					Declaration "int GetFrame()"
					Documentation "Gets the beam\'s frame number."
				}
				Method
				{
					Declaration "int GetBrightness()"
					Documentation "Gets the beam\'s brightness."
				}
				Method
				{
					Declaration "void GetColor(int& out r, int& out g, int& out b)"
					Documentation "Gets the beam\'s color."
				}
				Method
				{
					Declaration "int GetNoise()"
					Documentation "Gets the beam\'s noise."
				}
				Method
				{
					Declaration "int GetWidth()"
					Documentation "Gets the beam\'s width."
				}
				Method
				{
					Declaration "int GetTexture()"
					Documentation "Gets the beam\'s texture (sprite) index."
				}
				Method
				{
					Declaration "const Vector& GetEndPos()"
					Documentation "Gets the beam\'s ending position."
				}
				Method
				{
					Declaration "const Vector& GetStartPos()"
					Documentation "Gets the beam\'s starting position."
				}
				Method
				{
					Declaration "void SetScrollRate(int speed)"
					Documentation "Sets the scroll rate of the beam."
				}
				Method
				{
					Declaration "void SetFrame(float frame)"
					Documentation "Sets the frame number of the beam."
				}
				Method
				{
					Declaration "void SetBrightness(int brightness)"
					Documentation "Sets the brightness of the beam. Value is between 0-255."
				}
				Method
				{
					Declaration "void SetColor(int r, int g, int b)"
					Documentation "Sets the color of the beam."
				}
				Method
				{
					Declaration "void SetNoise(int iAmplitude)"
					Documentation "Sets the noise (amplitude) of the beam."
				}
				Method
				{
					Declaration "void SetWidth(int iWidth)"
					Documentation "Sets the width of the beam."
				}
				Method
				{
					Declaration "void SetTexture(int spriteIndex)"
					Documentation "Sets the sprite to use. The index is the one returned from CGame::PrecacheModel."
				}
				Method
				{
					Declaration "void SetEndAttachment(int attachment)"
					Documentation "Sets the end attachment of the beam. Attachment is a point on the entity\'s model. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT. Set to 0 to disable."
				}
				Method
				{
					Declaration "void SetStartAttachment(int attachment)"
					Documentation "Sets the start attachment of the beam. Attachment is a point on the entity\'s model. Must be a beam of type BEAM_ENTS. Set to 0 to disable."
				}
				Method
				{
					Declaration "void SetEndEntity(CBaseEntity@ pEntity)"
					Documentation "Sets the ending entity of the beam. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT."
				}
				Method
				{
					Declaration "void SetEndEntity(int entityIndex)"
					Documentation "Sets the ending entity of the beam. Must be a beam of type BEAM_ENTS or BEAM_ENTPOINT."
				}
				Method
				{
					Declaration "void SetStartEntity(CBaseEntity@ pEntity)"
					Documentation "Sets the starting entity of the beam. Must be a beam of type BEAM_ENTS."
				}
				Method
				{
					Declaration "void SetStartEntity(int entityIndex)"
					Documentation "Sets the starting entity of the beam. Must be a beam of type BEAM_ENTS."
				}
				Method
				{
					Declaration "void SetEndPos(const Vector& in vecPos)"
					Documentation "Sets the ending position of the beam. Must be a beam of type BEAM_POINTS or BEAM_HOSE."
				}
				Method
				{
					Declaration "void SetStartPos(const Vector& in vecPos)"
					Documentation "Sets the starting position of the beam. Must be a beam of type BEAM_POINTS, BEAM_ENTPOINT or BEAM_HOSE."
				}
				Method
				{
					Declaration "void SetFlags(int flags)"
					Documentation "Sets the flags of the beam. Must be a combination of BeamFlags values, or 0."
				}
				Method
				{
					Declaration "void SetType(BeamType type)"
					Documentation "Sets the type of the beam."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Calls use on targets."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CPathTrack
			Documentation "Path track class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "CPathTrack@ GetPrevious()"
					Documentation ""
				}
				Method
				{
					Declaration "CPathTrack@ GetNext()"
					Documentation ""
				}
				Method
				{
					Declaration "CPathTrack@ Nearest(Vector vecOrigin)"
					Documentation ""
				}
				Method
				{
					Declaration "CPathTrack@ LookAhead(Vector& in vecOrigin, Vector& out vecResultOrigin, float flDist, const bool bMove)"
					Documentation ""
				}
				Method
				{
					Declaration "void Project(CPathTrack@ pStart, CPathTrack@ pEnd, Vector& out vecOrigin, float flDist)"
					Documentation ""
				}
				Method
				{
					Declaration "CPathTrack@ ValidPath(CPathTrack@ pPath, const bool testFlag)"
					Documentation "Returns pPath if enabled, null otherwise."
				}
				Method
				{
					Declaration "void Link()"
					Documentation "Links the tracks together"
				}
				Method
				{
					Declaration "void SetPrevious(CPathTrack@ pPrevious)"
					Documentation "Sets the previous track in this path"
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Calls use on targets."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "float m_flNewSpeed"
					Documentation "New train speed"
				}
				Property
				{
					Declaration "float m_flMaxSpeed"
					Documentation "New maximum speed"
				}
				Property
				{
					Declaration "EHandle m_hAltpath"
					Documentation ""
				}
				Property
				{
					Declaration "EHandle m_hPrevious"
					Documentation ""
				}
				Property
				{
					Declaration "EHandle m_hNext"
					Documentation ""
				}
				Property
				{
					Declaration "string_t m_altName"
					Documentation ""
				}
				Property
				{
					Declaration "float m_length"
					Documentation ""
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CSprite
			Documentation "Sprite class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void AnimateAndDie(float flFramerate)"
					Documentation "Makes this sprite play until time pev->dmgtime has been passed, then removes itself."
				}
				Method
				{
					Declaration "void SetBrightness(int brightness)"
					Documentation "Sets the brightness (render amount)."
				}
				Method
				{
					Declaration "void SetColor(int r, int g, int b)"
					Documentation "Sets the color."
				}
				Method
				{
					Declaration "void SetScale(float flScale)"
					Documentation "Sets the current scale."
				}
				Method
				{
					Declaration "void SetTexture(int iSpriteIndex)"
					Documentation "Sets the texture used by this sprite. Is a model index returned by g_Game.PrecacheModel."
				}
				Method
				{
					Declaration "void SetTransparency(int renderMode, int r, int g, int b, int renderAmount, int renderFx)"
					Documentation "Sets the transparency of this sprite."
				}
				Method
				{
					Declaration "float Frames() const"
					Documentation "Gets the number of frames in this sprite."
				}
				Method
				{
					Declaration "void TurnOn()"
					Documentation "Turns on this sprite."
				}
				Method
				{
					Declaration "void TurnOff()"
					Documentation "Turns off this sprite."
				}
				Method
				{
					Declaration "void SetAttachment(edict_t@ pEntity, int iAttachment)"
					Documentation "Makes this sprite follow the given entity."
				}
				Method
				{
					Declaration "void SpriteInit(const string& in szSpriteName, const Vector& in vecOrigin)"
					Documentation "Initializes this sprite."
				}
				Method
				{
					Declaration "void Expand(float flScaleSpeed, float flFadeSpeed)"
					Documentation "Causes this sprite to scale up and fade at the given rates.\nThis sprite will be removed once faded."
				}
				Method
				{
					Declaration "void Animate(float flFrames)"
					Documentation "Advances this sprite\'s frame by the given amount of frames."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Calls use on targets."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBasePlayer
			Documentation "Player entity base class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "int GetCheats()"
					Documentation "Get a player\'s cheat bits."
				}
				Method
				{
					Declaration "bool GetCheat(int iBit)"
					Documentation "Get a player\'s cheat bit."
				}
				Method
				{
					Declaration "bool SetCheat(int iBit, bool fValue, bool fRequestedBySelf = false)"
					Documentation "Set a player\'s cheat bit. (Requires cheat permission. If requested by self a permission message will be shown/logged.)"
				}
				Method
				{
					Declaration "void SendScoreInfo(edict_t@ edPlayer = null)"
					Documentation "Refresh the player\'s score information with one or all players."
				}
				Method
				{
					Declaration "void SetOverriddenPlayerModel(const string& in szOverrideModel)"
					Documentation "Set an overriden player model."
				}
				Method
				{
					Declaration "void ResetOverriddenPlayerModel(const bool bResetToClModel, const bool bForceReset)"
					Documentation "Reset an overriden player model."
				}
				Method
				{
					Declaration "int GetMaxSpeedOverride()"
					Documentation "Get the player max speed override (-1 = not overriding)"
				}
				Method
				{
					Declaration "int GetMaxSpeed()"
					Documentation "Get the player persistent max speed. default: sv_maxspeed"
				}
				Method
				{
					Declaration "void SetMaxSpeedOverride(int Speed)"
					Documentation "Override players max speed (temporarily) -1 will restore"
				}
				Method
				{
					Declaration "void SetMaxSpeed(int Speed)"
					Documentation "Set player persistent max speed. default: sv_maxspeed"
				}
				Method
				{
					Declaration "void ResetVModelPos()"
					Documentation "Reset viewmodel position."
				}
				Method
				{
					Declaration "void SetVModelPos( const Vector& in vecPos )"
					Documentation "Set custom viewmodel position."
				}
				Method
				{
					Declaration "void ShowOverheadSprite(const string& in szSpriteName, const float flZOffset, const float flLifeTime)"
					Documentation "Creates a sprite above the player\'s head"
				}
				Method
				{
					Declaration "void SetViewMode(PlayerViewMode viewMode)"
					Documentation "Sets the player\'s view mode"
				}
				Method
				{
					Declaration "void SetHasSuit(bool fHasSuit)"
					Documentation "Sets whether the player has an HEV suit."
				}
				Method
				{
					Declaration "bool HasSuit()"
					Documentation "Returns whether the player has an HEV suit."
				}
				Method
				{
					Declaration "void RemoveAllExcessAmmo()"
					Documentation "Clamps all the player\'s ammo to their maximum amounts."
				}
				Method
				{
					Declaration "void RemoveExcessAmmo(const string& in szName)"
					Documentation "Clamps this player\'s ammo of the given type to the range 0 - MAX_AMMO."
				}
				Method
				{
					Declaration "void RemoveExcessAmmo(size_t uiIndex)"
					Documentation "Clamps this player\'s ammo at the given inex to the range 0 - MAX_AMMO."
				}
				Method
				{
					Declaration "void ResetAllMaxAmmoToDefault()"
					Documentation "Resets the ammo settings for this player for all ammo to their default values."
				}
				Method
				{
					Declaration "void ResetMaxAmmoToDefault(const string& in szName)"
					Documentation "Resets the ammo setting for this player for the given ammo type to its default value."
				}
				Method
				{
					Declaration "void ResetMaxAmmoToDefault(size_t uiIndex)"
					Documentation "Resets the ammo setting for this player at the given index to its default value."
				}
				Method
				{
					Declaration "void SetMaxAmmo(const string& in szName, int iMaxAmmo)"
					Documentation "Sets the maximum ammo setting for this player for the given ammo type. Value must be >= 0."
				}
				Method
				{
					Declaration "void SetMaxAmmo(size_t uiIndex, int iMaxAmmo)"
					Documentation "Sets the maximum ammo setting for this player for the ammo at the given index. Value must be >= 0."
				}
				Method
				{
					Declaration "int GetMaxAmmo(const string& in szName) const"
					Documentation "Gets the maximum ammo setting for this player for the given ammo type. Returns -1 if no ammo setting is present."
				}
				Method
				{
					Declaration "int GetMaxAmmo(size_t uiIndex) const"
					Documentation "Gets the maximum ammo setting for this player for the ammo at the given index. Returns -1 if no ammo setting is present."
				}
				Method
				{
					Declaration "Vector GetAutoaimVector(float flDelta)"
					Documentation "Gets the autoaim vector for the given delta."
				}
				Method
				{
					Declaration "int AmmoInventory(int iAmmoIndex)"
					Documentation "Returns the amount of ammo currently in inventory of the given ammo index."
				}
				Method
				{
					Declaration "void SetSuitUpdate(const string& in szName, const bool bGroup, int iNoRepeat)"
					Documentation "Set a suit update."
				}
				Method
				{
					Declaration "void CheckSuitUpdate()"
					Documentation "Check for suit update messages."
				}
				Method
				{
					Declaration "void PlayerUse()"
					Documentation "Triggers the player\'s use behavior."
				}
				Method
				{
					Declaration "void EnableControl(const bool bControl)"
					Documentation "Sets whether the player has control."
				}
				Method
				{
					Declaration "void GiveNamedItem(const string& in szName, int iFlags = 0, int iAmmoCount = 0)"
					Documentation "Gives this player the item with the given name.\nFlags are spawnflags passed to the item."
				}
				Method
				{
					Declaration "void SelectItem(const string& in szItemName)"
					Documentation "Selects the item with the given name."
				}
				Method
				{
					Declaration "void SelectLastItem()"
					Documentation "Selects the last active item."
				}
				Method
				{
					Declaration "void SelectNextItem()"
					Documentation "Selects the next item relative to the given item."
				}
				Method
				{
					Declaration "void SelectPrevItem(int iItem)"
					Documentation "Selects the previous item relative to the given item."
				}
				Method
				{
					Declaration "bool HasWeapons() const"
					Documentation "Returns whether this player has any weapons."
				}
				Method
				{
					Declaration "CBasePlayerItem@ HasNamedPlayerItem(const string& in szItemName)"
					Documentation "Returns the given item, or null if this player has no item by that name."
				}
				Method
				{
					Declaration "bool HasPlayerItem(CBasePlayerItem@ pCheckItem)"
					Documentation "Returns whether this player has the given item."
				}
				Method
				{
					Declaration "CBasePlayerItem@ DropAmmo(const string& in szItemName)"
					Documentation "Drops ammo used by the named item."
				}
				Method
				{
					Declaration "CBaseEntity@ DropItem(const string& in szItemName)"
					Documentation "Drops the given item, or if no name, the current weapon."
				}
				Method
				{
					Declaration "Observer@ GetObserver()"
					Documentation "Gets the Observer instance that represents this player."
				}
				Method
				{
					Declaration "void ShowForcedRespawnMessage(int iSeconds)"
					Documentation "Shows the forced respawn message."
				}
				Method
				{
					Declaration "void StartPlayerDeathView(const Vector& in vecPosition, const Vector& in vecViewAngle)"
					Documentation "Sets the player\'s view to that of a dead person."
				}
				Method
				{
					Declaration "bool CanSpawn()"
					Documentation "Returns whether this player can spawn."
				}
				Method
				{
					Declaration "void StartDeathCam()"
					Documentation "Starts the death camera."
				}
				Method
				{
					Declaration "void CheatImpulseCommands(int iImpulse)"
					Documentation "Triggers the given impulse command."
				}
				Method
				{
					Declaration "void set_m_szAnimExtension(const string& in szAnimExtension)"
					Documentation "Sets the current animation extension."
				}
				Method
				{
					Declaration "string get_m_szAnimExtension() const"
					Documentation "Gets the current animation extension."
				}
				Method
				{
					Declaration "void SetAnimation(PLAYER_ANIM anim, int mode = 0)"
					Documentation "Set the player\'s animation."
				}
				Method
				{
					Declaration "void FlashlightTurnOff()"
					Documentation "Turns off the flashlight."
				}
				Method
				{
					Declaration "void FlashlightTurnOn()"
					Documentation "Turns on the flashlight."
				}
				Method
				{
					Declaration "bool FlashlightIsOn() const"
					Documentation "Returns whether the flashlight is on."
				}
				Method
				{
					Declaration "bool IsOnLadder() const"
					Documentation "Returns whether the player is on a ladder."
				}
				Method
				{
					Declaration "void SetItemPickupTimes(float flTime)"
					Documentation "Sets all item pickup times the given absolute time."
				}
				Method
				{
					Declaration "bool GetWeaponsBlocked()"
					Documentation "Returns whether the weapons are currently blocked."
				}
				Method
				{
					Declaration "void UnblockWeapons(CBaseEntity@ pSetter)"
					Documentation "Shows active weapon and unblocks weapon selection."
				}
				Method
				{
					Declaration "void BlockWeapons(CBaseEntity@ pSetter)"
					Documentation "Hides active weapon and blocks weapon selection."
				}
				Method
				{
					Declaration "void DeployWeapon()"
					Documentation "Deploy weapon."
				}
				Method
				{
					Declaration "void HolsterWeapon()"
					Documentation "Holster weapon."
				}
				Method
				{
					Declaration "bool SwitchWeapon(CBasePlayerItem@ pWeapon)"
					Documentation "Switches weapons to the given item."
				}
				Method
				{
					Declaration "void RemoveAllItems(const bool fRemoveSuit)"
					Documentation "Removes all items from the player\'s inventory."
				}
				Method
				{
					Declaration "void PackDeadPlayerItems()"
					Documentation "Packs player weapons into a weapon box if possible."
				}
				Method
				{
					Declaration "bool IsConnected() const"
					Documentation "Returns whether this player is connected."
				}
				Method
				{
					Declaration "void Duck()"
					Documentation "Makes the player duck."
				}
				Method
				{
					Declaration "void Jump()"
					Documentation "Makes the player jump."
				}
				Method
				{
					Declaration "void m_rgAmmo(size_t uiIndex, int iValue)"
					Documentation "Set player ammo amount."
				}
				Method
				{
					Declaration "int m_rgAmmo(size_t uiIndex)"
					Documentation "Get player ammo amount."
				}
				Method
				{
					Declaration "CBasePlayerItem@ m_rgpPlayerItems(size_t uiIndex)"
					Documentation "Get player weapons. Index must be between 0 and MAX_ITEM_TYPES."
				}
				Method
				{
					Declaration "void ResetEffects()"
					Documentation "Reset all effect modifiers"
				}
				Method
				{
					Declaration "void ApplyEffects()"
					Documentation "Re-calculate compounded effect modifiers and apply to the monster"
				}
				Method
				{
					Declaration "void ClearEnemyList()"
					Documentation "Clears this monster\'s list of enemies"
				}
				Method
				{
					Declaration "InventoryList@ get_m_pInventory() const"
					Documentation "The inventory items this monster has"
				}
				Method
				{
					Declaration "void MedicCallSound(float flDistance = 0.0f)"
					Documentation "Medic call sound."
				}
				Method
				{
					Declaration "string m_szTextureName()"
					Documentation "Current texture name we\'re standing on."
				}
				Method
				{
					Declaration "void StopPlayerFollowing(const bool bClearSchedule)"
					Documentation "Stops following a player."
				}
				Method
				{
					Declaration "void StartPlayerFollowing(CBaseEntity@ pLeader)"
					Documentation "Starts following a given player."
				}
				Method
				{
					Declaration "bool CanPlayerFollow()"
					Documentation "Returns whether this monster can follow a player."
				}
				Method
				{
					Declaration "bool IsPlayerFollowing()"
					Documentation "Returns whether this monster is following a player."
				}
				Method
				{
					Declaration "void FollowerPlayerUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue)"
					Documentation "Use method for following players (set only if friendly)"
				}
				Method
				{
					Declaration "void ShockGlowEffect(bool fMode)"
					Documentation "Turns the shock glow effect on or off."
				}
				Method
				{
					Declaration "CBaseEntity@ DropItem(const string& in szItemName, const Vector& in vecPos, const Vector& in vecAng)"
					Documentation "Drops the given item from the given position at the given angle."
				}
				Method
				{
					Declaration "bool CineCleanup()"
					Documentation "Cleans up after a cinematic event."
				}
				Method
				{
					Declaration "bool ExitScriptedSequence()"
					Documentation "Exits the scripted sequence this monster is currently in, if any."
				}
				Method
				{
					Declaration "bool HasAllMemories(int iMemory) const"
					Documentation "Returns whether this monster remembers all of the given memories."
				}
				Method
				{
					Declaration "bool HasMemory(int iMemory) const"
					Documentation "Returns whether this monster remembers any of the given memories."
				}
				Method
				{
					Declaration "void Forget(int iMemory)"
					Documentation "Makes this monster forget the given memories."
				}
				Method
				{
					Declaration "void Remember(int iMemory)"
					Documentation "Makes this monster remember the given memories."
				}
				Method
				{
					Declaration "void StopPlayerFollowing(const bool clearSchedule, bool bSilent = false)"
					Documentation "Stops following its target."
				}
				Method
				{
					Declaration "void StartPlayerFollowing(CBaseEntity@ pLeader, bool bSilent = false)"
					Documentation "Starts following its target."
				}
				Method
				{
					Declaration "void PainSound()"
					Documentation "Plays this monster\'s pain sound."
				}
				Method
				{
					Declaration "void IdleSound()"
					Documentation "Plays this monster\'s idle sound."
				}
				Method
				{
					Declaration "void AlertSound()"
					Documentation "Plays this monster\'s alert sound."
				}
				Method
				{
					Declaration "void DeathSound()"
					Documentation "Plays this monster\'s death sound."
				}
				Method
				{
					Declaration "Vector GetGunPosition()"
					Documentation ""
				}
				Method
				{
					Declaration "Vector ShootAtEnemy(const Vector& in vecShootOrigin)"
					Documentation "Shoots at the specified location."
				}
				Method
				{
					Declaration "void FadeMonster()"
					Documentation "Fades this monster.\nNote: does not kill the monster."
				}
				Method
				{
					Declaration "bool HasAlienGibs()"
					Documentation "Returns whether this monster has alien gibs."
				}
				Method
				{
					Declaration "bool HasHumanGibs()"
					Documentation "Returns whether this monster has human gibs."
				}
				Method
				{
					Declaration "void CallGibMonster()"
					Documentation "Determines whether to gib or fade this monster, and acts accordingly."
				}
				Method
				{
					Declaration "bool ShouldGibMonster(int iGib)"
					Documentation "Returns whether the monster should be gibbed given the gib type.\nSee GIB enum."
				}
				Method
				{
					Declaration "void GibMonster()"
					Documentation "Gibs the monster."
				}
				Method
				{
					Declaration "bool GetEnemy()"
					Documentation "Tries to find the best suitable enemy for this monster."
				}
				Method
				{
					Declaration "bool NoFriendlyFireToPos(Vector vecPos)"
					Documentation "Returns whether attacking the target location at this time would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire(Vector vecPos, CBaseEntity@ pTarget)"
					Documentation "Returns whether attacking the given target at this time from the given location would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire(Vector vecPos)"
					Documentation "Returns whether attacking at this time from the given location would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire()"
					Documentation "Returns whether attacking at this time would result in friendly fire"
				}
				Method
				{
					Declaration "bool FCheckAITrigger()"
					Documentation "Checks and, if necessary, fires the monster\'s trigger target."
				}
				Method
				{
					Declaration "void Eat(float flFullDuration)"
					Documentation "Make the monster \'full\' for a while."
				}
				Method
				{
					Declaration "bool FShouldEat()"
					Documentation "Returns whether this monster should eat."
				}
				Method
				{
					Declaration "CSound@ PBestSound()"
					Documentation "Returns a pointer to the sound the monster should react to."
				}
				Method
				{
					Declaration "bool HasAllConditions(int iConditions) const"
					Documentation "Returns whether this monster has all of the given AI conditions."
				}
				Method
				{
					Declaration "bool HasConditions(int iConditions) const"
					Documentation "Returns whether this monster has any of the given AI conditions."
				}
				Method
				{
					Declaration "void ClearConditions(int iConditions)"
					Documentation "Clears AI conditions."
				}
				Method
				{
					Declaration "void SetConditions(int iConditions)"
					Documentation "Sets AI conditions."
				}
				Method
				{
					Declaration "bool CheckAttacker(CBaseEntity@ pAttacker)"
					Documentation "Determine if we should ignore damage."
				}
				Method
				{
					Declaration "int RouteClassify(int iMoveFlag)"
					Documentation "Returns the MOVEGOAL for the given move flag."
				}
				Method
				{
					Declaration "void SetYawSpeed()"
					Documentation "Allows different yaw_speeds for each activity."
				}
				Method
				{
					Declaration "void MakeIdealYaw(Vector vecTarget)"
					Documentation "gets a yaw value for the caller that would\nface the supplied vector. Value is stuffed into the monster\'s\nideal_yaw."
				}
				Method
				{
					Declaration "int IScheduleFlags()"
					Documentation "Returns an integer with all Conditions\nbits that are currently set and also set in the current\nschedule\'s Interrupt mask."
				}
				Method
				{
					Declaration "bool MovementIsComplete()"
					Documentation "Returns whether movement is complete."
				}
				Method
				{
					Declaration "bool TaskIsComplete()"
					Documentation "Returns whether the task is complete."
				}
				Method
				{
					Declaration "bool TaskIsRunning()"
					Documentation "Returns whether a task is running."
				}
				Method
				{
					Declaration "void TaskBegin()"
					Documentation "Sets the task status to running."
				}
				Method
				{
					Declaration "void TaskFail()"
					Documentation "Sets the condition bit for a failed task."
				}
				Method
				{
					Declaration "void MovementComplete()"
					Documentation "Called when movement has completed."
				}
				Method
				{
					Declaration "void TaskComplete()"
					Documentation "Sets the task status to complete."
				}
				Method
				{
					Declaration "bool TestFGetNodeRoute(Vector vecDest)"
					Documentation "TEST FGetNodeRoute."
				}
				Method
				{
					Declaration "bool FGetNodeRoute(Vector vecDest)"
					Documentation "tries to build an entire node path from\nthe callers origin to the passed vector.\nIf this is  possible, ROUTE_SIZE waypoints will be copied into the callers m_Route.\ntrue is returned if the operation  succeeds (path is valid) or false if failed (no path  exists )."
				}
				Method
				{
					Declaration "bool PopEnemy()"
					Documentation "Try remembering the last few enemies."
				}
				Method
				{
					Declaration "void PushEnemy(CBaseEntity@ pTarget, Vector& in vecLastKnownPos)"
					Documentation "Remember the last few enemies, always remember the player."
				}
				Method
				{
					Declaration "bool CheckEnemy(CBaseEntity@ pEnemy)"
					Documentation "part of the Condition collection process, gets and stores data and conditions pertaining to a monster\'s enemy.\nReturns true if Enemy LKP was updated."
				}
				Method
				{
					Declaration "bool CheckAttacksFromPosition(CBaseEntity@ pTarget, float flDist, Vector vecPos)"
					Documentation "Check whether attacks are possible from the given position."
				}
				Method
				{
					Declaration "void CheckAttacks_Move(CBaseEntity@ pTarget, float flDist)"
					Documentation "Check attacks to the given enemy at the given distance while moving."
				}
				Method
				{
					Declaration "void CheckAttacks(CBaseEntity@ pTarget, float flDist)"
					Documentation "Check attacks to the given enemy at the given distance."
				}
				Method
				{
					Declaration "void ReportAIState()"
					Documentation "Reports the AI state."
				}
				Method
				{
					Declaration "void SetState(MONSTERSTATE state)"
					Documentation "Sets the current monster state."
				}
				Method
				{
					Declaration "void SetSequenceByName(const string& in szSequence)"
					Documentation "Sets the current sequence by name."
				}
				Method
				{
					Declaration "void SetGaitActivity(Activity newActivity)"
					Documentation "Sets the current gait activity."
				}
				Method
				{
					Declaration "void SetActivity(Activity newActivity)"
					Documentation "Sets the current activity."
				}
				Method
				{
					Declaration "MONSTERSTATE GetIdealState()"
					Documentation "Gets the ideal monster state."
				}
				Method
				{
					Declaration "Task@ GetTask()"
					Documentation "Gets the current task."
				}
				Method
				{
					Declaration "void SentenceStop()"
					Documentation "Stops playing its current sentence."
				}
				Method
				{
					Declaration "void PlayScriptedSentence(const string& in szSentence, float duration, float volume, float attenuation, const bool bConcurrent, CBaseEntity@ pListener)"
					Documentation "Plays the given scripted sentence."
				}
				Method
				{
					Declaration "void PlaySentence(const string& in szSentence, float duration, float volume, float attenuation)"
					Documentation "Plays the given sentence."
				}
				Method
				{
					Declaration "bool CanPlaySentence(const bool bDisregardState)"
					Documentation "Returns whether this monster can play its sentence."
				}
				Method
				{
					Declaration "bool CanPlaySequence(const bool bDisregardState, int iInterruptLevel)"
					Documentation "Returns whether this monster can play its sequence."
				}
				Method
				{
					Declaration "void ScheduleChange()"
					Documentation "Called after the monster\'s schedule changes."
				}
				Method
				{
					Declaration "Schedule@ GetSchedule()"
					Documentation "Gets the current schedule."
				}
				Method
				{
					Declaration "Schedule@ GetScheduleOfType(int iType)"
					Documentation "Gets one of the available schedules of the given type."
				}
				Method
				{
					Declaration "void RunTask(Task@ pTask)"
					Documentation "Runs the given task."
				}
				Method
				{
					Declaration "void StartTask(Task@ pTask)"
					Documentation "Starts the given task."
				}
				Method
				{
					Declaration "void MaintainSchedule()"
					Documentation "Maintains the monster\'s schedule."
				}
				Method
				{
					Declaration "Schedule@ ScheduleFromName(const string& in szName)"
					Documentation "Returns the schedule with name szName if it exists, NULL otherwise."
				}
				Method
				{
					Declaration "Schedule@ ScheduleInList(const string& in szName, array<Schedule@>@ pArray)"
					Documentation "Returns the schedule with name szName if it\'s in the list, NULL otherwise."
				}
				Method
				{
					Declaration "bool NextScheduledTask()"
					Documentation "Moves to the next scheduled task."
				}
				Method
				{
					Declaration "void ChangeSchedule(Schedule@ pNewSchedule)"
					Documentation "Changes this monster\'s schedule."
				}
				Method
				{
					Declaration "bool FScheduleDone()"
					Documentation "Returns whether this monster\'s schedule is done."
				}
				Method
				{
					Declaration "void ClearSchedule()"
					Documentation "Clears this monster\'s schedule."
				}
				Method
				{
					Declaration "bool FScheduleValid()"
					Documentation "Returns whether this monster\'s schedule is valid."
				}
				Method
				{
					Declaration "bool FHaveSchedule()"
					Documentation "Returns whether this monster has a schedule."
				}
				Method
				{
					Declaration "bool CheckTankUsage()"
					Documentation "Checks whether the monster can use a func_tank. Return true if possible."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack2_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack2(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack1_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack1(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack2_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack2(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack1_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack1(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "void StopAnimation()"
					Documentation "This will stop animation until you call ResetSequenceInfo() at some point in the future"
				}
				Method
				{
					Declaration "void Stop()"
					Documentation "Stops this monster moving"
				}
				Method
				{
					Declaration "Activity GetStoppedActivity()"
					Documentation "Gets the stopped activity"
				}
				Method
				{
					Declaration "bool ShouldAdvanceRoute(float flWaypointDist)"
					Documentation "Returns whether this monster should advance its route"
				}
				Method
				{
					Declaration "void MoveExecute(CBaseEntity@ pTargetEnt, const Vector& in vecDir, float flInterval)"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "void Move(float flInterval = 0.1f)"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "int CheckLocalMove(const Vector& in vecStart, const Vector& in vecEnd,CBaseEntity@ pTarget, float& out flDist, Vector& out vecEndPosition, bool fOriginalCheck = false)"
					Documentation "finds best visible enemy for attack"
				}
				Method
				{
					Declaration "bool FInViewCone(const Vector& in vecOrigin)"
					Documentation "see if given location is in monster\'s view cone"
				}
				Method
				{
					Declaration "bool FInViewCone(CBaseEntity@ pEntity)"
					Documentation "see if pEntity is in monster\'s view cone"
				}
				Method
				{
					Declaration "void BestVisibleEnemy()"
					Documentation "finds best visible enemy for attack"
				}
				Method
				{
					Declaration "void StartMonster()"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "void Revive()"
					Documentation "Revives the monster"
				}
				Method
				{
					Declaration "void BecomeDead(float flSavedHealth)"
					Documentation "Makes the monster become dead"
				}
				Method
				{
					Declaration "void MonsterInitDead()"
					Documentation "Call after animation/pose is set up"
				}
				Method
				{
					Declaration "void MonsterInit()"
					Documentation "Initializes the monster"
				}
				Method
				{
					Declaration "void SetupFriendly()"
					Documentation "use this overridden to make some other friendly monsters"
				}
				Method
				{
					Declaration "float DamageForce(float flDamage)"
					Documentation "Returns the amount of force applied to this monster when the given amount of damage is done."
				}
				Method
				{
					Declaration "float FlYawDiff()"
					Documentation "returns the difference ( in degrees ) between monster\'s current yaw and ideal_yaw.\nPositive result is left turn, negative is right turn."
				}
				Method
				{
					Declaration "float VecToYaw(Vector vecDir)"
					Documentation "turns a directional vector into a yaw value that points down that vector."
				}
				Method
				{
					Declaration "float ChangeYaw(int iSpeed)"
					Documentation "turns a monster towards its ideal_yaw"
				}
				Method
				{
					Declaration "bool ShouldFadeOnDeath()"
					Documentation "Returns whether this monster should fade on death."
				}
				Method
				{
					Declaration "void Listen()"
					Documentation "Listens for anything that is within audible distance."
				}
				Method
				{
					Declaration "void RunAI()"
					Documentation "Runs this monster\'s AI."
				}
				Method
				{
					Declaration "void Look(int iDistance)"
					Documentation "Look - Base class monster function to find enemies or\nfood by sight. iDistance is distance ( in units ) that the\nmonster can see.\nSets the sight bits of the m_afConditions mask to indicate\nwhich types of entities were sighted.\nFunction also sets the Looker\'s m_pLink\nto the head of a link list that contains all visible ents.\n(linked via each ent\'s m_pLink field)"
				}
				Method
				{
					Declaration "void MonsterUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Will make a monster angry at whomever activated it."
				}
				Method
				{
					Declaration "int8& m_rgbTimeBasedDamage(size_t uiIndex)"
					Documentation "time based damage counters, decr. 1 per 2 seconds. Index must be between 0 and CMG_TIMEBASED."
				}
				Method
				{
					Declaration "Waypoint& m_Route(size_t uiIndex)"
					Documentation "Positions of movement. Index must be between 0 and ROUTE_SIZE"
				}
				Method
				{
					Declaration "Vector& m_vecOldEnemy(size_t uiIndex)"
					Documentation "Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES."
				}
				Method
				{
					Declaration "EHandle& m_hOldEnemy(size_t uiIndex)"
					Documentation "Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES."
				}
				Method
				{
					Declaration "InventoryRules@ get_m_pInventoryRules() const"
					Documentation "The inventory rules."
				}
				Method
				{
					Declaration "bool IsToggleLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations."
				}
				Method
				{
					Declaration "void AngularMove(Vector vecDestAngle, float flSpeed)"
					Documentation "Performs angular movement."
				}
				Method
				{
					Declaration "void LinearMove(Vector vecDest, float flSpeed)"
					Documentation "Performs linear movement."
				}
				Method
				{
					Declaration "int GetSequenceActivityName(int iSequence)"
					Documentation "Gets activity for the given sequence."
				}
				Method
				{
					Declaration "void SetSequenceBox()"
					Documentation "Sets the sequence box."
				}
				Method
				{
					Declaration "int GetAttachmentCount()"
					Documentation "Gets the number of attachments that the current model has."
				}
				Method
				{
					Declaration "bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)"
					Documentation "Extracts the bounding box of the current model."
				}
				Method
				{
					Declaration "int GetBodygroup(int iGroup)"
					Documentation "Gets the value of the given body group."
				}
				Method
				{
					Declaration "void SetBodygroup(int iGroup, int iValue)"
					Documentation "Sets the given body group to the given value."
				}
				Method
				{
					Declaration "void GetAttachment(int iAttachment, Vector& out origin, Vector& out angles)"
					Documentation "Gets the attachment position."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence, int& out iDir)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "void GetAutomovement(Vector& out origin, Vector& out angles, float flInterval = 0.1f)"
					Documentation "Gets automatic movement."
				}
				Method
				{
					Declaration "void GetBonePosition(int iBone, Vector& out origin, Vector& out angles)"
					Documentation "Gets the position of the given bone."
				}
				Method
				{
					Declaration "float SetBlending(int iBlender, float flValue)"
					Documentation "Sets the given blending controller to the given value."
				}
				Method
				{
					Declaration "void InitBoneControllers()"
					Documentation "Initializes bone controllers."
				}
				Method
				{
					Declaration "float SetBoneController(int iController, float flValue)"
					Documentation "Sets the specified bone controller to the given value."
				}
				Method
				{
					Declaration "void DispatchAnimEvents(float flFutureInterval = 0.1f)"
					Documentation "Handle events that have happend since last time called up until X seconds into the future."
				}
				Method
				{
					Declaration "void ResetGaitSequenceInfo()"
					Documentation "Resets gait sequence info."
				}
				Method
				{
					Declaration "void ResetSequenceInfo()"
					Documentation "Resets sequence info."
				}
				Method
				{
					Declaration "int LookupSequence(const string& in szLabel)"
					Documentation "Returns the index of the given sequence, or -1 if no such sequence exists."
				}
				Method
				{
					Declaration "int LookupActivityHeaviest(int iActivity)"
					Documentation "Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int LookupActivity(int iActivity)"
					Documentation "Returns the index of the given activity, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int GetSequenceFlags()"
					Documentation "Get sequence flags."
				}
				Method
				{
					Declaration "float StudioFrameAdvance(float flInterval = 0.0f)"
					Documentation "Accumulate animation frame time from last time called until now."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseDelay@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseToggle@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseMonster@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "int m_iPlayerClass"
					Documentation "The player\'s class type."
				}
				Property
				{
					Declaration "float m_flNextDecalTime"
					Documentation "Next time this player can spray a decal."
				}
				Property
				{
					Declaration "int m_iDeaths"
					Documentation "get player death count."
				}
				Property
				{
					Declaration "EHandle m_hActiveItem"
					Documentation "The active item."
				}
				Property
				{
					Declaration "int m_iFOV"
					Documentation "Field of view."
				}
				Property
				{
					Declaration "int m_iHideHUD"
					Documentation "The players hud weapon info is to be hidden."
				}
				Property
				{
					Declaration "bool m_fLongJump"
					Documentation "Does this player have the longjump module?"
				}
				Property
				{
					Declaration "float m_fDeadTime"
					Documentation "the time at which the player died"
				}
				Property
				{
					Declaration "EHandle m_hTank"
					Documentation "the tank which the player is currently controlling, NULL if no tank"
				}
				Property
				{
					Declaration "int m_iTrain"
					Documentation "Train control position"
				}
				Property
				{
					Declaration "int m_iDrownRestored"
					Documentation "Track drowning damage restored."
				}
				Property
				{
					Declaration "int m_iDrownDmg"
					Documentation "Track drowning damage taken."
				}
				Property
				{
					Declaration "int m_lastPlayerDamageAmount"
					Documentation "Last damage taken."
				}
				Property
				{
					Declaration "float m_flSwimTime"
					Documentation "How long this player has been underwater."
				}
				Property
				{
					Declaration "uint m_afPhysicsFlags"
					Documentation ""
				}
				Property
				{
					Declaration "float m_flPlayerFallVelocity"
					Documentation "Player fall velocity."
				}
				Property
				{
					Declaration "int m_afButtonReleased"
					Documentation ""
				}
				Property
				{
					Declaration "int m_afButtonPressed"
					Documentation ""
				}
				Property
				{
					Declaration "int m_afButtonLast"
					Documentation ""
				}
				Property
				{
					Declaration "int m_iFlashBattery"
					Documentation "Player flashlight amount. 0 <= amount <= 100."
				}
				Property
				{
					Declaration "float m_flStopExtraSoundTime"
					Documentation "When to stop the m_iExtraSoundTypes sounds."
				}
				Property
				{
					Declaration "int m_iWeaponFlash"
					Documentation "Brightness of the weapon flash."
				}
				Property
				{
					Declaration "int m_iExtraSoundTypes"
					Documentation "Additional classification for this weapon\'s sound."
				}
				Property
				{
					Declaration "int m_iWeaponVolume"
					Documentation "How loud the player\'s weapon is right now."
				}
				Property
				{
					Declaration "float m_flLastMove"
					Documentation "When did this player move or tried to move (with the IN_ keys) ?"
				}
				Property
				{
					Declaration "EHandle m_hSpawnPoint"
					Documentation "Pointer for a spawn point to use."
				}
				Property
				{
					Declaration "float m_flRespawnDelayTime"
					Documentation "Gets added to the standard respawn delay time when killed, reset in spawn to 0.0."
				}
				Property
				{
					Declaration "float m_flTimeOfLastDeath"
					Documentation "Time of last death."
				}
				Property
				{
					Declaration "float m_flNextClientCommandTime"
					Documentation "The next time this player can execute a vocal client command"
				}
				Property
				{
					Declaration "const int random_seed"
					Documentation "The player\'s random seed."
				}
				Property
				{
					Declaration "float m_flEffectDamage"
					Documentation "Damage modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectSpeed"
					Documentation "Movement speed modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectFriction"
					Documentation "Movement friction modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectGravity"
					Documentation "Gravity modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectRespiration"
					Documentation "Extra/less breathing time underwater in seconds"
				}
				Property
				{
					Declaration "int m_iEffectNonSolid"
					Documentation "is non-solid"
				}
				Property
				{
					Declaration "int m_iEffectInvisible"
					Documentation "is invisible (render + non-targetable)"
				}
				Property
				{
					Declaration "int m_iEffectInvulnerable"
					Documentation "is invulnerable (god mode)"
				}
				Property
				{
					Declaration "int m_iEffectBlockWeapons"
					Documentation "Monster can\'t use weapons."
				}
				Property
				{
					Declaration "Vector m_vecEffectGlowColor"
					Documentation "Glow shell."
				}
				Property
				{
					Declaration "string_t m_iszGuardEntName"
					Documentation "Guard entity name."
				}
				Property
				{
					Declaration "EHandle m_hGuardEnt"
					Documentation "Monster will guard this entity and turn down follow requests."
				}
				Property
				{
					Declaration "float m_flFallVelocity"
					Documentation "Current fall speed."
				}
				Property
				{
					Declaration "float m_flAutomaticAttackTime"
					Documentation "How long an npc will attempt to fire full auto."
				}
				Property
				{
					Declaration "bool m_fCanFearCreatures"
					Documentation "Whether this monster can fear creatures."
				}
				Property
				{
					Declaration "int8 m_chTextureType"
					Documentation "Current texture type.\nSee TextureType enum."
				}
				Property
				{
					Declaration "string_t m_FormattedName"
					Documentation "The formatted name.\nFor better name outputs. E.g. \"Alien Slave\" rather than \"alien_slave\"."
				}
				Property
				{
					Declaration "float m_useTime"
					Documentation "Don\'t allow +USE until this time."
				}
				Property
				{
					Declaration "EHandle m_hCineBlocker"
					Documentation "Entity that is blocking cinematic execution."
				}
				Property
				{
					Declaration "EHandle m_hCine"
					Documentation "Cinematic entity."
				}
				Property
				{
					Declaration "SCRIPTSTATE m_scriptState"
					Documentation "internal cinematic state."
				}
				Property
				{
					Declaration "Vector m_HackedGunPos"
					Documentation "HACK until we can query end of gun."
				}
				Property
				{
					Declaration "string_t m_iszTriggerTarget"
					Documentation "Name of target that should be fired."
				}
				Property
				{
					Declaration "int m_iTriggerCondition"
					Documentation "for scripted AI, this is the condition that will cause the activation of the monster\'s TriggerTarget."
				}
				Property
				{
					Declaration "float m_flDistLook"
					Documentation "distance monster sees (Default 2048)."
				}
				Property
				{
					Declaration "float m_flDistTooFar"
					Documentation "if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in CheckEnemy."
				}
				Property
				{
					Declaration "float m_flHungryTime"
					Documentation "Time based damage inflictor."
				}
				Property
				{
					Declaration "int m_failSchedule"
					Documentation "Schedule type to choose if current schedule fails."
				}
				Property
				{
					Declaration "entvars_t@ pevTimeBasedInflictor"
					Documentation "Time based damage inflictor."
				}
				Property
				{
					Declaration "float m_tbdPrev"
					Documentation "Time-based damage timer."
				}
				Property
				{
					Declaration "float m_lastDamageAmount"
					Documentation "how much damage did monster (player) last take."
				}
				Property
				{
					Declaration "int m_bitsDamageType"
					Documentation "what types of damage has monster (player) taken."
				}
				Property
				{
					Declaration "float m_flNextAttack"
					Documentation "cannot attack again until this time."
				}
				Property
				{
					Declaration "int m_afMoveShootCap"
					Documentation "tells us what a monster can/can\'t do, while moving."
				}
				Property
				{
					Declaration "int m_afCapability"
					Documentation "tells us what a monster can/can\'t do."
				}
				Property
				{
					Declaration "int m_cAmmoLoaded"
					Documentation "how much ammo is in the weapon (used to trigger reload anim sequences)."
				}
				Property
				{
					Declaration "Vector m_vecEnemyLKP"
					Documentation "last known position of enemy. (enemy\'s origin)."
				}
				Property
				{
					Declaration "int m_iMaxHealth"
					Documentation "keeps track of monster\'s maximum health value (for re-healing, etc)."
				}
				Property
				{
					Declaration "int m_bloodColor"
					Documentation "color of blood particles."
				}
				Property
				{
					Declaration "int m_afMemory"
					Documentation "Monster memory."
				}
				Property
				{
					Declaration "int m_iHintNode"
					Documentation "this is the hint node that the monster is moving towards or performing active idle on.."
				}
				Property
				{
					Declaration "Vector m_vecLastPosition"
					Documentation "monster sometimes wants to return to where it started after an operation.."
				}
				Property
				{
					Declaration "int m_afSoundTypes"
					Documentation "Sound types that can be heard."
				}
				Property
				{
					Declaration "int m_iAudibleList"
					Documentation "first index of a linked list of sounds that the monster can hear."
				}
				Property
				{
					Declaration "Activity m_movementActivity"
					Documentation "When moving, set this activity."
				}
				Property
				{
					Declaration "Vector m_vecMoveGoal"
					Documentation "Kept around for node graph moves, so we know our ultimate goal."
				}
				Property
				{
					Declaration "float m_moveradius"
					Documentation "Minimum radius."
				}
				Property
				{
					Declaration "float m_moveWaitTime"
					Documentation "How long I should wait for something to move."
				}
				Property
				{
					Declaration "int m_iRouteIndex"
					Documentation "Index into m_Route[]."
				}
				Property
				{
					Declaration "int m_movementGoal"
					Documentation "Goal that defines route."
				}
				Property
				{
					Declaration "int m_iScheduleIndex"
					Documentation "Schedule index."
				}
				Property
				{
					Declaration "Schedule@ m_pScheduleSaved"
					Documentation "For land_on_ground schedules (remember last schedule and continue)."
				}
				Property
				{
					Declaration "Schedule@ m_pSchedule"
					Documentation "Current schedule."
				}
				Property
				{
					Declaration "int m_iTaskStatus"
					Documentation "Task status."
				}
				Property
				{
					Declaration "MONSTERSTATE m_IdealMonsterState"
					Documentation "monster should change to this state."
				}
				Property
				{
					Declaration "MONSTERSTATE m_MonsterState"
					Documentation "monster\'s current state."
				}
				Property
				{
					Declaration "int m_LastHitGroup"
					Documentation "the last body region that took damage."
				}
				Property
				{
					Declaration "Activity m_GaitActivity"
					Documentation gaitsequence.
				}
				Property
				{
					Declaration "Activity m_IdealActivity"
					Documentation "monster should switch to this activity."
				}
				Property
				{
					Declaration "Activity m_Activity"
					Documentation "what the monster is doing (animation)."
				}
				Property
				{
					Declaration "float m_flMoveWaitFinished"
					Documentation "if we\'re told to wait before moving, this is the time that the wait will be over."
				}
				Property
				{
					Declaration "float m_flWaitFinished"
					Documentation "if we\'re told to wait, this is the time that the wait will be over."
				}
				Property
				{
					Declaration "float m_flFieldOfView"
					Documentation "width of monster\'s field of view ( dot product )."
				}
				Property
				{
					Declaration "EHandle m_hTargetTank"
					Documentation "Target tank to control."
				}
				Property
				{
					Declaration "EHandle m_hTargetEnt"
					Documentation "the entity that the monster is trying to reach."
				}
				Property
				{
					Declaration "EHandle m_hEnemy"
					Documentation "the entity that the monster is fighting."
				}
				Property
				{
					Declaration "string_t m_sMaster"
					Documentation "This entity\'s master, if any."
				}
				Property
				{
					Declaration "int m_bitsDamageInflict"
					Documentation "DMG_ damage type that the door or trigger does."
				}
				Property
				{
					Declaration "Vector m_vecFinalAngle"
					Documentation "Final angle."
				}
				Property
				{
					Declaration "Vector m_vecFinalDest"
					Documentation "Final destination."
				}
				Property
				{
					Declaration "Vector m_vecAngle2"
					Documentation "Open angle."
				}
				Property
				{
					Declaration "Vector m_vecAngle1"
					Documentation "Closed angle."
				}
				Property
				{
					Declaration "Vector m_vecPosition2"
					Documentation "Open position."
				}
				Property
				{
					Declaration "Vector m_vecPosition1"
					Documentation "Closed position."
				}
				Property
				{
					Declaration "EHandle m_hActivator"
					Documentation "Handle to the activator."
				}
				Property
				{
					Declaration "float m_flHeight"
					Documentation Height.
				}
				Property
				{
					Declaration "int m_cTriggersLeft"
					Documentation "Trigger_counter only: # of activations remaining."
				}
				Property
				{
					Declaration "float m_flTLength"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flTWidth"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flLip"
					Documentation "How much to stick out of a wall. Will recede further into walls if negative."
				}
				Property
				{
					Declaration "float m_flWait"
					Documentation "How long to wait before resetting."
				}
				Property
				{
					Declaration "float m_flMoveDistance"
					Documentation "How far a door should slide or rotate."
				}
				Property
				{
					Declaration "TOGGLE_STATE m_toggle_state"
					Documentation "Current toggle state."
				}
				Property
				{
					Declaration "bool m_fSequenceLoops"
					Documentation "True if the sequence loops."
				}
				Property
				{
					Declaration "bool m_fSequenceFinished"
					Documentation "Flag set when StudioAdvanceFrame moves across a frame boundry."
				}
				Property
				{
					Declaration "float m_flLastGaitEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flLastEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flGroundSpeed"
					Documentation "Computed linear movement rate for current sequence."
				}
				Property
				{
					Declaration "float m_flFrameRate"
					Documentation "Computed FPS for current sequence."
				}
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CCineMonster
			Documentation "Cinematic monster entity base class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "int IgnoreConditions()"
					Documentation "Gets the ignore conditions."
				}
				Method
				{
					Declaration "bool CanInterrupt()"
					Documentation "Returns whether this script can be interrupted."
				}
				Method
				{
					Declaration "bool FCanOverrideState() const"
					Documentation "If this returns false, scripted sequences cannot possess entities regardless of state."
				}
				Method
				{
					Declaration "bool StartSequence(CBaseMonster@ pTarget, const string& in szSequence, const bool fCompleteOnEmpty)"
					Documentation "Make the entity enter a scripted sequence."
				}
				Method
				{
					Declaration "void CancelScript()"
					Documentation "Find all the cinematic entities with my targetname and stop them from playing."
				}
				Method
				{
					Declaration "void PossessEntity()"
					Documentation "Make the entity enter a scripted sequence."
				}
				Method
				{
					Declaration "void DelayStart(int iState)"
					Documentation "Find all the cinematic entities with my targetname and tell them to wait before starting."
				}
				Method
				{
					Declaration "void ResetEffects()"
					Documentation "Reset all effect modifiers"
				}
				Method
				{
					Declaration "void ApplyEffects()"
					Documentation "Re-calculate compounded effect modifiers and apply to the monster"
				}
				Method
				{
					Declaration "void ClearEnemyList()"
					Documentation "Clears this monster\'s list of enemies"
				}
				Method
				{
					Declaration "InventoryList@ get_m_pInventory() const"
					Documentation "The inventory items this monster has"
				}
				Method
				{
					Declaration "void MedicCallSound(float flDistance = 0.0f)"
					Documentation "Medic call sound."
				}
				Method
				{
					Declaration "string m_szTextureName()"
					Documentation "Current texture name we\'re standing on."
				}
				Method
				{
					Declaration "void StopPlayerFollowing(const bool bClearSchedule)"
					Documentation "Stops following a player."
				}
				Method
				{
					Declaration "void StartPlayerFollowing(CBaseEntity@ pLeader)"
					Documentation "Starts following a given player."
				}
				Method
				{
					Declaration "bool CanPlayerFollow()"
					Documentation "Returns whether this monster can follow a player."
				}
				Method
				{
					Declaration "bool IsPlayerFollowing()"
					Documentation "Returns whether this monster is following a player."
				}
				Method
				{
					Declaration "void FollowerPlayerUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue)"
					Documentation "Use method for following players (set only if friendly)"
				}
				Method
				{
					Declaration "void ShockGlowEffect(bool fMode)"
					Documentation "Turns the shock glow effect on or off."
				}
				Method
				{
					Declaration "CBaseEntity@ DropItem(const string& in szItemName, const Vector& in vecPos, const Vector& in vecAng)"
					Documentation "Drops the given item from the given position at the given angle."
				}
				Method
				{
					Declaration "bool CineCleanup()"
					Documentation "Cleans up after a cinematic event."
				}
				Method
				{
					Declaration "bool ExitScriptedSequence()"
					Documentation "Exits the scripted sequence this monster is currently in, if any."
				}
				Method
				{
					Declaration "bool HasAllMemories(int iMemory) const"
					Documentation "Returns whether this monster remembers all of the given memories."
				}
				Method
				{
					Declaration "bool HasMemory(int iMemory) const"
					Documentation "Returns whether this monster remembers any of the given memories."
				}
				Method
				{
					Declaration "void Forget(int iMemory)"
					Documentation "Makes this monster forget the given memories."
				}
				Method
				{
					Declaration "void Remember(int iMemory)"
					Documentation "Makes this monster remember the given memories."
				}
				Method
				{
					Declaration "void StopPlayerFollowing(const bool clearSchedule, bool bSilent = false)"
					Documentation "Stops following its target."
				}
				Method
				{
					Declaration "void StartPlayerFollowing(CBaseEntity@ pLeader, bool bSilent = false)"
					Documentation "Starts following its target."
				}
				Method
				{
					Declaration "void PainSound()"
					Documentation "Plays this monster\'s pain sound."
				}
				Method
				{
					Declaration "void IdleSound()"
					Documentation "Plays this monster\'s idle sound."
				}
				Method
				{
					Declaration "void AlertSound()"
					Documentation "Plays this monster\'s alert sound."
				}
				Method
				{
					Declaration "void DeathSound()"
					Documentation "Plays this monster\'s death sound."
				}
				Method
				{
					Declaration "Vector GetGunPosition()"
					Documentation ""
				}
				Method
				{
					Declaration "Vector ShootAtEnemy(const Vector& in vecShootOrigin)"
					Documentation "Shoots at the specified location."
				}
				Method
				{
					Declaration "void FadeMonster()"
					Documentation "Fades this monster.\nNote: does not kill the monster."
				}
				Method
				{
					Declaration "bool HasAlienGibs()"
					Documentation "Returns whether this monster has alien gibs."
				}
				Method
				{
					Declaration "bool HasHumanGibs()"
					Documentation "Returns whether this monster has human gibs."
				}
				Method
				{
					Declaration "void CallGibMonster()"
					Documentation "Determines whether to gib or fade this monster, and acts accordingly."
				}
				Method
				{
					Declaration "bool ShouldGibMonster(int iGib)"
					Documentation "Returns whether the monster should be gibbed given the gib type.\nSee GIB enum."
				}
				Method
				{
					Declaration "void GibMonster()"
					Documentation "Gibs the monster."
				}
				Method
				{
					Declaration "bool GetEnemy()"
					Documentation "Tries to find the best suitable enemy for this monster."
				}
				Method
				{
					Declaration "bool NoFriendlyFireToPos(Vector vecPos)"
					Documentation "Returns whether attacking the target location at this time would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire(Vector vecPos, CBaseEntity@ pTarget)"
					Documentation "Returns whether attacking the given target at this time from the given location would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire(Vector vecPos)"
					Documentation "Returns whether attacking at this time from the given location would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire()"
					Documentation "Returns whether attacking at this time would result in friendly fire"
				}
				Method
				{
					Declaration "bool FCheckAITrigger()"
					Documentation "Checks and, if necessary, fires the monster\'s trigger target."
				}
				Method
				{
					Declaration "void Eat(float flFullDuration)"
					Documentation "Make the monster \'full\' for a while."
				}
				Method
				{
					Declaration "bool FShouldEat()"
					Documentation "Returns whether this monster should eat."
				}
				Method
				{
					Declaration "CSound@ PBestSound()"
					Documentation "Returns a pointer to the sound the monster should react to."
				}
				Method
				{
					Declaration "bool HasAllConditions(int iConditions) const"
					Documentation "Returns whether this monster has all of the given AI conditions."
				}
				Method
				{
					Declaration "bool HasConditions(int iConditions) const"
					Documentation "Returns whether this monster has any of the given AI conditions."
				}
				Method
				{
					Declaration "void ClearConditions(int iConditions)"
					Documentation "Clears AI conditions."
				}
				Method
				{
					Declaration "void SetConditions(int iConditions)"
					Documentation "Sets AI conditions."
				}
				Method
				{
					Declaration "bool CheckAttacker(CBaseEntity@ pAttacker)"
					Documentation "Determine if we should ignore damage."
				}
				Method
				{
					Declaration "int RouteClassify(int iMoveFlag)"
					Documentation "Returns the MOVEGOAL for the given move flag."
				}
				Method
				{
					Declaration "void SetYawSpeed()"
					Documentation "Allows different yaw_speeds for each activity."
				}
				Method
				{
					Declaration "void MakeIdealYaw(Vector vecTarget)"
					Documentation "gets a yaw value for the caller that would\nface the supplied vector. Value is stuffed into the monster\'s\nideal_yaw."
				}
				Method
				{
					Declaration "int IScheduleFlags()"
					Documentation "Returns an integer with all Conditions\nbits that are currently set and also set in the current\nschedule\'s Interrupt mask."
				}
				Method
				{
					Declaration "bool MovementIsComplete()"
					Documentation "Returns whether movement is complete."
				}
				Method
				{
					Declaration "bool TaskIsComplete()"
					Documentation "Returns whether the task is complete."
				}
				Method
				{
					Declaration "bool TaskIsRunning()"
					Documentation "Returns whether a task is running."
				}
				Method
				{
					Declaration "void TaskBegin()"
					Documentation "Sets the task status to running."
				}
				Method
				{
					Declaration "void TaskFail()"
					Documentation "Sets the condition bit for a failed task."
				}
				Method
				{
					Declaration "void MovementComplete()"
					Documentation "Called when movement has completed."
				}
				Method
				{
					Declaration "void TaskComplete()"
					Documentation "Sets the task status to complete."
				}
				Method
				{
					Declaration "bool TestFGetNodeRoute(Vector vecDest)"
					Documentation "TEST FGetNodeRoute."
				}
				Method
				{
					Declaration "bool FGetNodeRoute(Vector vecDest)"
					Documentation "tries to build an entire node path from\nthe callers origin to the passed vector.\nIf this is  possible, ROUTE_SIZE waypoints will be copied into the callers m_Route.\ntrue is returned if the operation  succeeds (path is valid) or false if failed (no path  exists )."
				}
				Method
				{
					Declaration "bool PopEnemy()"
					Documentation "Try remembering the last few enemies."
				}
				Method
				{
					Declaration "void PushEnemy(CBaseEntity@ pTarget, Vector& in vecLastKnownPos)"
					Documentation "Remember the last few enemies, always remember the player."
				}
				Method
				{
					Declaration "bool CheckEnemy(CBaseEntity@ pEnemy)"
					Documentation "part of the Condition collection process, gets and stores data and conditions pertaining to a monster\'s enemy.\nReturns true if Enemy LKP was updated."
				}
				Method
				{
					Declaration "bool CheckAttacksFromPosition(CBaseEntity@ pTarget, float flDist, Vector vecPos)"
					Documentation "Check whether attacks are possible from the given position."
				}
				Method
				{
					Declaration "void CheckAttacks_Move(CBaseEntity@ pTarget, float flDist)"
					Documentation "Check attacks to the given enemy at the given distance while moving."
				}
				Method
				{
					Declaration "void CheckAttacks(CBaseEntity@ pTarget, float flDist)"
					Documentation "Check attacks to the given enemy at the given distance."
				}
				Method
				{
					Declaration "void ReportAIState()"
					Documentation "Reports the AI state."
				}
				Method
				{
					Declaration "void SetState(MONSTERSTATE state)"
					Documentation "Sets the current monster state."
				}
				Method
				{
					Declaration "void SetSequenceByName(const string& in szSequence)"
					Documentation "Sets the current sequence by name."
				}
				Method
				{
					Declaration "void SetGaitActivity(Activity newActivity)"
					Documentation "Sets the current gait activity."
				}
				Method
				{
					Declaration "void SetActivity(Activity newActivity)"
					Documentation "Sets the current activity."
				}
				Method
				{
					Declaration "MONSTERSTATE GetIdealState()"
					Documentation "Gets the ideal monster state."
				}
				Method
				{
					Declaration "Task@ GetTask()"
					Documentation "Gets the current task."
				}
				Method
				{
					Declaration "void SentenceStop()"
					Documentation "Stops playing its current sentence."
				}
				Method
				{
					Declaration "void PlayScriptedSentence(const string& in szSentence, float duration, float volume, float attenuation, const bool bConcurrent, CBaseEntity@ pListener)"
					Documentation "Plays the given scripted sentence."
				}
				Method
				{
					Declaration "void PlaySentence(const string& in szSentence, float duration, float volume, float attenuation)"
					Documentation "Plays the given sentence."
				}
				Method
				{
					Declaration "bool CanPlaySentence(const bool bDisregardState)"
					Documentation "Returns whether this monster can play its sentence."
				}
				Method
				{
					Declaration "bool CanPlaySequence(const bool bDisregardState, int iInterruptLevel)"
					Documentation "Returns whether this monster can play its sequence."
				}
				Method
				{
					Declaration "void ScheduleChange()"
					Documentation "Called after the monster\'s schedule changes."
				}
				Method
				{
					Declaration "Schedule@ GetSchedule()"
					Documentation "Gets the current schedule."
				}
				Method
				{
					Declaration "Schedule@ GetScheduleOfType(int iType)"
					Documentation "Gets one of the available schedules of the given type."
				}
				Method
				{
					Declaration "void RunTask(Task@ pTask)"
					Documentation "Runs the given task."
				}
				Method
				{
					Declaration "void StartTask(Task@ pTask)"
					Documentation "Starts the given task."
				}
				Method
				{
					Declaration "void MaintainSchedule()"
					Documentation "Maintains the monster\'s schedule."
				}
				Method
				{
					Declaration "Schedule@ ScheduleFromName(const string& in szName)"
					Documentation "Returns the schedule with name szName if it exists, NULL otherwise."
				}
				Method
				{
					Declaration "Schedule@ ScheduleInList(const string& in szName, array<Schedule@>@ pArray)"
					Documentation "Returns the schedule with name szName if it\'s in the list, NULL otherwise."
				}
				Method
				{
					Declaration "bool NextScheduledTask()"
					Documentation "Moves to the next scheduled task."
				}
				Method
				{
					Declaration "void ChangeSchedule(Schedule@ pNewSchedule)"
					Documentation "Changes this monster\'s schedule."
				}
				Method
				{
					Declaration "bool FScheduleDone()"
					Documentation "Returns whether this monster\'s schedule is done."
				}
				Method
				{
					Declaration "void ClearSchedule()"
					Documentation "Clears this monster\'s schedule."
				}
				Method
				{
					Declaration "bool FScheduleValid()"
					Documentation "Returns whether this monster\'s schedule is valid."
				}
				Method
				{
					Declaration "bool FHaveSchedule()"
					Documentation "Returns whether this monster has a schedule."
				}
				Method
				{
					Declaration "bool CheckTankUsage()"
					Documentation "Checks whether the monster can use a func_tank. Return true if possible."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack2_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack2(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack1_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack1(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack2_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack2(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack1_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack1(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "void StopAnimation()"
					Documentation "This will stop animation until you call ResetSequenceInfo() at some point in the future"
				}
				Method
				{
					Declaration "void Stop()"
					Documentation "Stops this monster moving"
				}
				Method
				{
					Declaration "Activity GetStoppedActivity()"
					Documentation "Gets the stopped activity"
				}
				Method
				{
					Declaration "bool ShouldAdvanceRoute(float flWaypointDist)"
					Documentation "Returns whether this monster should advance its route"
				}
				Method
				{
					Declaration "void MoveExecute(CBaseEntity@ pTargetEnt, const Vector& in vecDir, float flInterval)"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "void Move(float flInterval = 0.1f)"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "int CheckLocalMove(const Vector& in vecStart, const Vector& in vecEnd,CBaseEntity@ pTarget, float& out flDist, Vector& out vecEndPosition, bool fOriginalCheck = false)"
					Documentation "finds best visible enemy for attack"
				}
				Method
				{
					Declaration "bool FInViewCone(const Vector& in vecOrigin)"
					Documentation "see if given location is in monster\'s view cone"
				}
				Method
				{
					Declaration "bool FInViewCone(CBaseEntity@ pEntity)"
					Documentation "see if pEntity is in monster\'s view cone"
				}
				Method
				{
					Declaration "void BestVisibleEnemy()"
					Documentation "finds best visible enemy for attack"
				}
				Method
				{
					Declaration "void StartMonster()"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "void Revive()"
					Documentation "Revives the monster"
				}
				Method
				{
					Declaration "void BecomeDead(float flSavedHealth)"
					Documentation "Makes the monster become dead"
				}
				Method
				{
					Declaration "void MonsterInitDead()"
					Documentation "Call after animation/pose is set up"
				}
				Method
				{
					Declaration "void MonsterInit()"
					Documentation "Initializes the monster"
				}
				Method
				{
					Declaration "void SetupFriendly()"
					Documentation "use this overridden to make some other friendly monsters"
				}
				Method
				{
					Declaration "float DamageForce(float flDamage)"
					Documentation "Returns the amount of force applied to this monster when the given amount of damage is done."
				}
				Method
				{
					Declaration "float FlYawDiff()"
					Documentation "returns the difference ( in degrees ) between monster\'s current yaw and ideal_yaw.\nPositive result is left turn, negative is right turn."
				}
				Method
				{
					Declaration "float VecToYaw(Vector vecDir)"
					Documentation "turns a directional vector into a yaw value that points down that vector."
				}
				Method
				{
					Declaration "float ChangeYaw(int iSpeed)"
					Documentation "turns a monster towards its ideal_yaw"
				}
				Method
				{
					Declaration "bool ShouldFadeOnDeath()"
					Documentation "Returns whether this monster should fade on death."
				}
				Method
				{
					Declaration "void Listen()"
					Documentation "Listens for anything that is within audible distance."
				}
				Method
				{
					Declaration "void RunAI()"
					Documentation "Runs this monster\'s AI."
				}
				Method
				{
					Declaration "void Look(int iDistance)"
					Documentation "Look - Base class monster function to find enemies or\nfood by sight. iDistance is distance ( in units ) that the\nmonster can see.\nSets the sight bits of the m_afConditions mask to indicate\nwhich types of entities were sighted.\nFunction also sets the Looker\'s m_pLink\nto the head of a link list that contains all visible ents.\n(linked via each ent\'s m_pLink field)"
				}
				Method
				{
					Declaration "void MonsterUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Will make a monster angry at whomever activated it."
				}
				Method
				{
					Declaration "int8& m_rgbTimeBasedDamage(size_t uiIndex)"
					Documentation "time based damage counters, decr. 1 per 2 seconds. Index must be between 0 and CMG_TIMEBASED."
				}
				Method
				{
					Declaration "Waypoint& m_Route(size_t uiIndex)"
					Documentation "Positions of movement. Index must be between 0 and ROUTE_SIZE"
				}
				Method
				{
					Declaration "Vector& m_vecOldEnemy(size_t uiIndex)"
					Documentation "Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES."
				}
				Method
				{
					Declaration "EHandle& m_hOldEnemy(size_t uiIndex)"
					Documentation "Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES."
				}
				Method
				{
					Declaration "InventoryRules@ get_m_pInventoryRules() const"
					Documentation "The inventory rules."
				}
				Method
				{
					Declaration "bool IsToggleLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations."
				}
				Method
				{
					Declaration "void AngularMove(Vector vecDestAngle, float flSpeed)"
					Documentation "Performs angular movement."
				}
				Method
				{
					Declaration "void LinearMove(Vector vecDest, float flSpeed)"
					Documentation "Performs linear movement."
				}
				Method
				{
					Declaration "int GetSequenceActivityName(int iSequence)"
					Documentation "Gets activity for the given sequence."
				}
				Method
				{
					Declaration "void SetSequenceBox()"
					Documentation "Sets the sequence box."
				}
				Method
				{
					Declaration "int GetAttachmentCount()"
					Documentation "Gets the number of attachments that the current model has."
				}
				Method
				{
					Declaration "bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)"
					Documentation "Extracts the bounding box of the current model."
				}
				Method
				{
					Declaration "int GetBodygroup(int iGroup)"
					Documentation "Gets the value of the given body group."
				}
				Method
				{
					Declaration "void SetBodygroup(int iGroup, int iValue)"
					Documentation "Sets the given body group to the given value."
				}
				Method
				{
					Declaration "void GetAttachment(int iAttachment, Vector& out origin, Vector& out angles)"
					Documentation "Gets the attachment position."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence, int& out iDir)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "void GetAutomovement(Vector& out origin, Vector& out angles, float flInterval = 0.1f)"
					Documentation "Gets automatic movement."
				}
				Method
				{
					Declaration "void GetBonePosition(int iBone, Vector& out origin, Vector& out angles)"
					Documentation "Gets the position of the given bone."
				}
				Method
				{
					Declaration "float SetBlending(int iBlender, float flValue)"
					Documentation "Sets the given blending controller to the given value."
				}
				Method
				{
					Declaration "void InitBoneControllers()"
					Documentation "Initializes bone controllers."
				}
				Method
				{
					Declaration "float SetBoneController(int iController, float flValue)"
					Documentation "Sets the specified bone controller to the given value."
				}
				Method
				{
					Declaration "void DispatchAnimEvents(float flFutureInterval = 0.1f)"
					Documentation "Handle events that have happend since last time called up until X seconds into the future."
				}
				Method
				{
					Declaration "void ResetGaitSequenceInfo()"
					Documentation "Resets gait sequence info."
				}
				Method
				{
					Declaration "void ResetSequenceInfo()"
					Documentation "Resets sequence info."
				}
				Method
				{
					Declaration "int LookupSequence(const string& in szLabel)"
					Documentation "Returns the index of the given sequence, or -1 if no such sequence exists."
				}
				Method
				{
					Declaration "int LookupActivityHeaviest(int iActivity)"
					Documentation "Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int LookupActivity(int iActivity)"
					Documentation "Returns the index of the given activity, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int GetSequenceFlags()"
					Documentation "Get sequence flags."
				}
				Method
				{
					Declaration "float StudioFrameAdvance(float flInterval = 0.0f)"
					Documentation "Accumulate animation frame time from last time called until now."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseDelay@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseToggle@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseMonster@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "float m_flMoveToRadius"
					Documentation "When in radius, script is done."
				}
				Property
				{
					Declaration "bool m_interruptable"
					Documentation "Whether this scripted sequence can be interrupted."
				}
				Property
				{
					Declaration "float m_startTime"
					Documentation "When to start the script."
				}
				Property
				{
					Declaration "int m_iDelay"
					Documentation "Delay before execution."
				}
				Property
				{
					Declaration "float m_flRepeat"
					Documentation "How much time has to pass before the scripted sequence can repeat."
				}
				Property
				{
					Declaration "float m_flRadius"
					Documentation "The radius to search in."
				}
				Property
				{
					Declaration "string_t m_iszEntity"
					Documentation "The target entity name."
				}
				Property
				{
					Declaration "string_t m_iszPlay"
					Documentation "The play animation name."
				}
				Property
				{
					Declaration "string_t m_iszIdle"
					Documentation "Te idle animation name."
				}
				Property
				{
					Declaration "float m_flEffectDamage"
					Documentation "Damage modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectSpeed"
					Documentation "Movement speed modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectFriction"
					Documentation "Movement friction modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectGravity"
					Documentation "Gravity modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectRespiration"
					Documentation "Extra/less breathing time underwater in seconds"
				}
				Property
				{
					Declaration "int m_iEffectNonSolid"
					Documentation "is non-solid"
				}
				Property
				{
					Declaration "int m_iEffectInvisible"
					Documentation "is invisible (render + non-targetable)"
				}
				Property
				{
					Declaration "int m_iEffectInvulnerable"
					Documentation "is invulnerable (god mode)"
				}
				Property
				{
					Declaration "int m_iEffectBlockWeapons"
					Documentation "Monster can\'t use weapons."
				}
				Property
				{
					Declaration "Vector m_vecEffectGlowColor"
					Documentation "Glow shell."
				}
				Property
				{
					Declaration "string_t m_iszGuardEntName"
					Documentation "Guard entity name."
				}
				Property
				{
					Declaration "EHandle m_hGuardEnt"
					Documentation "Monster will guard this entity and turn down follow requests."
				}
				Property
				{
					Declaration "float m_flFallVelocity"
					Documentation "Current fall speed."
				}
				Property
				{
					Declaration "float m_flAutomaticAttackTime"
					Documentation "How long an npc will attempt to fire full auto."
				}
				Property
				{
					Declaration "bool m_fCanFearCreatures"
					Documentation "Whether this monster can fear creatures."
				}
				Property
				{
					Declaration "int8 m_chTextureType"
					Documentation "Current texture type.\nSee TextureType enum."
				}
				Property
				{
					Declaration "string_t m_FormattedName"
					Documentation "The formatted name.\nFor better name outputs. E.g. \"Alien Slave\" rather than \"alien_slave\"."
				}
				Property
				{
					Declaration "float m_useTime"
					Documentation "Don\'t allow +USE until this time."
				}
				Property
				{
					Declaration "EHandle m_hCineBlocker"
					Documentation "Entity that is blocking cinematic execution."
				}
				Property
				{
					Declaration "EHandle m_hCine"
					Documentation "Cinematic entity."
				}
				Property
				{
					Declaration "SCRIPTSTATE m_scriptState"
					Documentation "internal cinematic state."
				}
				Property
				{
					Declaration "Vector m_HackedGunPos"
					Documentation "HACK until we can query end of gun."
				}
				Property
				{
					Declaration "string_t m_iszTriggerTarget"
					Documentation "Name of target that should be fired."
				}
				Property
				{
					Declaration "int m_iTriggerCondition"
					Documentation "for scripted AI, this is the condition that will cause the activation of the monster\'s TriggerTarget."
				}
				Property
				{
					Declaration "float m_flDistLook"
					Documentation "distance monster sees (Default 2048)."
				}
				Property
				{
					Declaration "float m_flDistTooFar"
					Documentation "if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in CheckEnemy."
				}
				Property
				{
					Declaration "float m_flHungryTime"
					Documentation "Time based damage inflictor."
				}
				Property
				{
					Declaration "int m_failSchedule"
					Documentation "Schedule type to choose if current schedule fails."
				}
				Property
				{
					Declaration "entvars_t@ pevTimeBasedInflictor"
					Documentation "Time based damage inflictor."
				}
				Property
				{
					Declaration "float m_tbdPrev"
					Documentation "Time-based damage timer."
				}
				Property
				{
					Declaration "float m_lastDamageAmount"
					Documentation "how much damage did monster (player) last take."
				}
				Property
				{
					Declaration "int m_bitsDamageType"
					Documentation "what types of damage has monster (player) taken."
				}
				Property
				{
					Declaration "float m_flNextAttack"
					Documentation "cannot attack again until this time."
				}
				Property
				{
					Declaration "int m_afMoveShootCap"
					Documentation "tells us what a monster can/can\'t do, while moving."
				}
				Property
				{
					Declaration "int m_afCapability"
					Documentation "tells us what a monster can/can\'t do."
				}
				Property
				{
					Declaration "int m_cAmmoLoaded"
					Documentation "how much ammo is in the weapon (used to trigger reload anim sequences)."
				}
				Property
				{
					Declaration "Vector m_vecEnemyLKP"
					Documentation "last known position of enemy. (enemy\'s origin)."
				}
				Property
				{
					Declaration "int m_iMaxHealth"
					Documentation "keeps track of monster\'s maximum health value (for re-healing, etc)."
				}
				Property
				{
					Declaration "int m_bloodColor"
					Documentation "color of blood particles."
				}
				Property
				{
					Declaration "int m_afMemory"
					Documentation "Monster memory."
				}
				Property
				{
					Declaration "int m_iHintNode"
					Documentation "this is the hint node that the monster is moving towards or performing active idle on.."
				}
				Property
				{
					Declaration "Vector m_vecLastPosition"
					Documentation "monster sometimes wants to return to where it started after an operation.."
				}
				Property
				{
					Declaration "int m_afSoundTypes"
					Documentation "Sound types that can be heard."
				}
				Property
				{
					Declaration "int m_iAudibleList"
					Documentation "first index of a linked list of sounds that the monster can hear."
				}
				Property
				{
					Declaration "Activity m_movementActivity"
					Documentation "When moving, set this activity."
				}
				Property
				{
					Declaration "Vector m_vecMoveGoal"
					Documentation "Kept around for node graph moves, so we know our ultimate goal."
				}
				Property
				{
					Declaration "float m_moveradius"
					Documentation "Minimum radius."
				}
				Property
				{
					Declaration "float m_moveWaitTime"
					Documentation "How long I should wait for something to move."
				}
				Property
				{
					Declaration "int m_iRouteIndex"
					Documentation "Index into m_Route[]."
				}
				Property
				{
					Declaration "int m_movementGoal"
					Documentation "Goal that defines route."
				}
				Property
				{
					Declaration "int m_iScheduleIndex"
					Documentation "Schedule index."
				}
				Property
				{
					Declaration "Schedule@ m_pScheduleSaved"
					Documentation "For land_on_ground schedules (remember last schedule and continue)."
				}
				Property
				{
					Declaration "Schedule@ m_pSchedule"
					Documentation "Current schedule."
				}
				Property
				{
					Declaration "int m_iTaskStatus"
					Documentation "Task status."
				}
				Property
				{
					Declaration "MONSTERSTATE m_IdealMonsterState"
					Documentation "monster should change to this state."
				}
				Property
				{
					Declaration "MONSTERSTATE m_MonsterState"
					Documentation "monster\'s current state."
				}
				Property
				{
					Declaration "int m_LastHitGroup"
					Documentation "the last body region that took damage."
				}
				Property
				{
					Declaration "Activity m_GaitActivity"
					Documentation gaitsequence.
				}
				Property
				{
					Declaration "Activity m_IdealActivity"
					Documentation "monster should switch to this activity."
				}
				Property
				{
					Declaration "Activity m_Activity"
					Documentation "what the monster is doing (animation)."
				}
				Property
				{
					Declaration "float m_flMoveWaitFinished"
					Documentation "if we\'re told to wait before moving, this is the time that the wait will be over."
				}
				Property
				{
					Declaration "float m_flWaitFinished"
					Documentation "if we\'re told to wait, this is the time that the wait will be over."
				}
				Property
				{
					Declaration "float m_flFieldOfView"
					Documentation "width of monster\'s field of view ( dot product )."
				}
				Property
				{
					Declaration "EHandle m_hTargetTank"
					Documentation "Target tank to control."
				}
				Property
				{
					Declaration "EHandle m_hTargetEnt"
					Documentation "the entity that the monster is trying to reach."
				}
				Property
				{
					Declaration "EHandle m_hEnemy"
					Documentation "the entity that the monster is fighting."
				}
				Property
				{
					Declaration "string_t m_sMaster"
					Documentation "This entity\'s master, if any."
				}
				Property
				{
					Declaration "int m_bitsDamageInflict"
					Documentation "DMG_ damage type that the door or trigger does."
				}
				Property
				{
					Declaration "Vector m_vecFinalAngle"
					Documentation "Final angle."
				}
				Property
				{
					Declaration "Vector m_vecFinalDest"
					Documentation "Final destination."
				}
				Property
				{
					Declaration "Vector m_vecAngle2"
					Documentation "Open angle."
				}
				Property
				{
					Declaration "Vector m_vecAngle1"
					Documentation "Closed angle."
				}
				Property
				{
					Declaration "Vector m_vecPosition2"
					Documentation "Open position."
				}
				Property
				{
					Declaration "Vector m_vecPosition1"
					Documentation "Closed position."
				}
				Property
				{
					Declaration "EHandle m_hActivator"
					Documentation "Handle to the activator."
				}
				Property
				{
					Declaration "float m_flHeight"
					Documentation Height.
				}
				Property
				{
					Declaration "int m_cTriggersLeft"
					Documentation "Trigger_counter only: # of activations remaining."
				}
				Property
				{
					Declaration "float m_flTLength"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flTWidth"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flLip"
					Documentation "How much to stick out of a wall. Will recede further into walls if negative."
				}
				Property
				{
					Declaration "float m_flWait"
					Documentation "How long to wait before resetting."
				}
				Property
				{
					Declaration "float m_flMoveDistance"
					Documentation "How far a door should slide or rotate."
				}
				Property
				{
					Declaration "TOGGLE_STATE m_toggle_state"
					Documentation "Current toggle state."
				}
				Property
				{
					Declaration "bool m_fSequenceLoops"
					Documentation "True if the sequence loops."
				}
				Property
				{
					Declaration "bool m_fSequenceFinished"
					Documentation "Flag set when StudioAdvanceFrame moves across a frame boundry."
				}
				Property
				{
					Declaration "float m_flLastGaitEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flLastEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flGroundSpeed"
					Documentation "Computed linear movement rate for current sequence."
				}
				Property
				{
					Declaration "float m_flFrameRate"
					Documentation "Computed FPS for current sequence."
				}
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBaseMonster
			Documentation "Monster entity base class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "CGrenade@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayer@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CCineMonster@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "void ResetEffects()"
					Documentation "Reset all effect modifiers"
				}
				Method
				{
					Declaration "void ApplyEffects()"
					Documentation "Re-calculate compounded effect modifiers and apply to the monster"
				}
				Method
				{
					Declaration "void ClearEnemyList()"
					Documentation "Clears this monster\'s list of enemies"
				}
				Method
				{
					Declaration "InventoryList@ get_m_pInventory() const"
					Documentation "The inventory items this monster has"
				}
				Method
				{
					Declaration "void MedicCallSound(float flDistance = 0.0f)"
					Documentation "Medic call sound."
				}
				Method
				{
					Declaration "string m_szTextureName()"
					Documentation "Current texture name we\'re standing on."
				}
				Method
				{
					Declaration "void StopPlayerFollowing(const bool bClearSchedule)"
					Documentation "Stops following a player."
				}
				Method
				{
					Declaration "void StartPlayerFollowing(CBaseEntity@ pLeader)"
					Documentation "Starts following a given player."
				}
				Method
				{
					Declaration "bool CanPlayerFollow()"
					Documentation "Returns whether this monster can follow a player."
				}
				Method
				{
					Declaration "bool IsPlayerFollowing()"
					Documentation "Returns whether this monster is following a player."
				}
				Method
				{
					Declaration "void FollowerPlayerUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue)"
					Documentation "Use method for following players (set only if friendly)"
				}
				Method
				{
					Declaration "void ShockGlowEffect(bool fMode)"
					Documentation "Turns the shock glow effect on or off."
				}
				Method
				{
					Declaration "CBaseEntity@ DropItem(const string& in szItemName, const Vector& in vecPos, const Vector& in vecAng)"
					Documentation "Drops the given item from the given position at the given angle."
				}
				Method
				{
					Declaration "bool CineCleanup()"
					Documentation "Cleans up after a cinematic event."
				}
				Method
				{
					Declaration "bool ExitScriptedSequence()"
					Documentation "Exits the scripted sequence this monster is currently in, if any."
				}
				Method
				{
					Declaration "bool HasAllMemories(int iMemory) const"
					Documentation "Returns whether this monster remembers all of the given memories."
				}
				Method
				{
					Declaration "bool HasMemory(int iMemory) const"
					Documentation "Returns whether this monster remembers any of the given memories."
				}
				Method
				{
					Declaration "void Forget(int iMemory)"
					Documentation "Makes this monster forget the given memories."
				}
				Method
				{
					Declaration "void Remember(int iMemory)"
					Documentation "Makes this monster remember the given memories."
				}
				Method
				{
					Declaration "void StopPlayerFollowing(const bool clearSchedule, bool bSilent = false)"
					Documentation "Stops following its target."
				}
				Method
				{
					Declaration "void StartPlayerFollowing(CBaseEntity@ pLeader, bool bSilent = false)"
					Documentation "Starts following its target."
				}
				Method
				{
					Declaration "void PainSound()"
					Documentation "Plays this monster\'s pain sound."
				}
				Method
				{
					Declaration "void IdleSound()"
					Documentation "Plays this monster\'s idle sound."
				}
				Method
				{
					Declaration "void AlertSound()"
					Documentation "Plays this monster\'s alert sound."
				}
				Method
				{
					Declaration "void DeathSound()"
					Documentation "Plays this monster\'s death sound."
				}
				Method
				{
					Declaration "Vector GetGunPosition()"
					Documentation ""
				}
				Method
				{
					Declaration "Vector ShootAtEnemy(const Vector& in vecShootOrigin)"
					Documentation "Shoots at the specified location."
				}
				Method
				{
					Declaration "void FadeMonster()"
					Documentation "Fades this monster.\nNote: does not kill the monster."
				}
				Method
				{
					Declaration "bool HasAlienGibs()"
					Documentation "Returns whether this monster has alien gibs."
				}
				Method
				{
					Declaration "bool HasHumanGibs()"
					Documentation "Returns whether this monster has human gibs."
				}
				Method
				{
					Declaration "void CallGibMonster()"
					Documentation "Determines whether to gib or fade this monster, and acts accordingly."
				}
				Method
				{
					Declaration "bool ShouldGibMonster(int iGib)"
					Documentation "Returns whether the monster should be gibbed given the gib type.\nSee GIB enum."
				}
				Method
				{
					Declaration "void GibMonster()"
					Documentation "Gibs the monster."
				}
				Method
				{
					Declaration "bool GetEnemy()"
					Documentation "Tries to find the best suitable enemy for this monster."
				}
				Method
				{
					Declaration "bool NoFriendlyFireToPos(Vector vecPos)"
					Documentation "Returns whether attacking the target location at this time would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire(Vector vecPos, CBaseEntity@ pTarget)"
					Documentation "Returns whether attacking the given target at this time from the given location would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire(Vector vecPos)"
					Documentation "Returns whether attacking at this time from the given location would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire()"
					Documentation "Returns whether attacking at this time would result in friendly fire"
				}
				Method
				{
					Declaration "bool FCheckAITrigger()"
					Documentation "Checks and, if necessary, fires the monster\'s trigger target."
				}
				Method
				{
					Declaration "void Eat(float flFullDuration)"
					Documentation "Make the monster \'full\' for a while."
				}
				Method
				{
					Declaration "bool FShouldEat()"
					Documentation "Returns whether this monster should eat."
				}
				Method
				{
					Declaration "CSound@ PBestSound()"
					Documentation "Returns a pointer to the sound the monster should react to."
				}
				Method
				{
					Declaration "bool HasAllConditions(int iConditions) const"
					Documentation "Returns whether this monster has all of the given AI conditions."
				}
				Method
				{
					Declaration "bool HasConditions(int iConditions) const"
					Documentation "Returns whether this monster has any of the given AI conditions."
				}
				Method
				{
					Declaration "void ClearConditions(int iConditions)"
					Documentation "Clears AI conditions."
				}
				Method
				{
					Declaration "void SetConditions(int iConditions)"
					Documentation "Sets AI conditions."
				}
				Method
				{
					Declaration "bool CheckAttacker(CBaseEntity@ pAttacker)"
					Documentation "Determine if we should ignore damage."
				}
				Method
				{
					Declaration "int RouteClassify(int iMoveFlag)"
					Documentation "Returns the MOVEGOAL for the given move flag."
				}
				Method
				{
					Declaration "void SetYawSpeed()"
					Documentation "Allows different yaw_speeds for each activity."
				}
				Method
				{
					Declaration "void MakeIdealYaw(Vector vecTarget)"
					Documentation "gets a yaw value for the caller that would\nface the supplied vector. Value is stuffed into the monster\'s\nideal_yaw."
				}
				Method
				{
					Declaration "int IScheduleFlags()"
					Documentation "Returns an integer with all Conditions\nbits that are currently set and also set in the current\nschedule\'s Interrupt mask."
				}
				Method
				{
					Declaration "bool MovementIsComplete()"
					Documentation "Returns whether movement is complete."
				}
				Method
				{
					Declaration "bool TaskIsComplete()"
					Documentation "Returns whether the task is complete."
				}
				Method
				{
					Declaration "bool TaskIsRunning()"
					Documentation "Returns whether a task is running."
				}
				Method
				{
					Declaration "void TaskBegin()"
					Documentation "Sets the task status to running."
				}
				Method
				{
					Declaration "void TaskFail()"
					Documentation "Sets the condition bit for a failed task."
				}
				Method
				{
					Declaration "void MovementComplete()"
					Documentation "Called when movement has completed."
				}
				Method
				{
					Declaration "void TaskComplete()"
					Documentation "Sets the task status to complete."
				}
				Method
				{
					Declaration "bool TestFGetNodeRoute(Vector vecDest)"
					Documentation "TEST FGetNodeRoute."
				}
				Method
				{
					Declaration "bool FGetNodeRoute(Vector vecDest)"
					Documentation "tries to build an entire node path from\nthe callers origin to the passed vector.\nIf this is  possible, ROUTE_SIZE waypoints will be copied into the callers m_Route.\ntrue is returned if the operation  succeeds (path is valid) or false if failed (no path  exists )."
				}
				Method
				{
					Declaration "bool PopEnemy()"
					Documentation "Try remembering the last few enemies."
				}
				Method
				{
					Declaration "void PushEnemy(CBaseEntity@ pTarget, Vector& in vecLastKnownPos)"
					Documentation "Remember the last few enemies, always remember the player."
				}
				Method
				{
					Declaration "bool CheckEnemy(CBaseEntity@ pEnemy)"
					Documentation "part of the Condition collection process, gets and stores data and conditions pertaining to a monster\'s enemy.\nReturns true if Enemy LKP was updated."
				}
				Method
				{
					Declaration "bool CheckAttacksFromPosition(CBaseEntity@ pTarget, float flDist, Vector vecPos)"
					Documentation "Check whether attacks are possible from the given position."
				}
				Method
				{
					Declaration "void CheckAttacks_Move(CBaseEntity@ pTarget, float flDist)"
					Documentation "Check attacks to the given enemy at the given distance while moving."
				}
				Method
				{
					Declaration "void CheckAttacks(CBaseEntity@ pTarget, float flDist)"
					Documentation "Check attacks to the given enemy at the given distance."
				}
				Method
				{
					Declaration "void ReportAIState()"
					Documentation "Reports the AI state."
				}
				Method
				{
					Declaration "void SetState(MONSTERSTATE state)"
					Documentation "Sets the current monster state."
				}
				Method
				{
					Declaration "void SetSequenceByName(const string& in szSequence)"
					Documentation "Sets the current sequence by name."
				}
				Method
				{
					Declaration "void SetGaitActivity(Activity newActivity)"
					Documentation "Sets the current gait activity."
				}
				Method
				{
					Declaration "void SetActivity(Activity newActivity)"
					Documentation "Sets the current activity."
				}
				Method
				{
					Declaration "MONSTERSTATE GetIdealState()"
					Documentation "Gets the ideal monster state."
				}
				Method
				{
					Declaration "Task@ GetTask()"
					Documentation "Gets the current task."
				}
				Method
				{
					Declaration "void SentenceStop()"
					Documentation "Stops playing its current sentence."
				}
				Method
				{
					Declaration "void PlayScriptedSentence(const string& in szSentence, float duration, float volume, float attenuation, const bool bConcurrent, CBaseEntity@ pListener)"
					Documentation "Plays the given scripted sentence."
				}
				Method
				{
					Declaration "void PlaySentence(const string& in szSentence, float duration, float volume, float attenuation)"
					Documentation "Plays the given sentence."
				}
				Method
				{
					Declaration "bool CanPlaySentence(const bool bDisregardState)"
					Documentation "Returns whether this monster can play its sentence."
				}
				Method
				{
					Declaration "bool CanPlaySequence(const bool bDisregardState, int iInterruptLevel)"
					Documentation "Returns whether this monster can play its sequence."
				}
				Method
				{
					Declaration "void ScheduleChange()"
					Documentation "Called after the monster\'s schedule changes."
				}
				Method
				{
					Declaration "Schedule@ GetSchedule()"
					Documentation "Gets the current schedule."
				}
				Method
				{
					Declaration "Schedule@ GetScheduleOfType(int iType)"
					Documentation "Gets one of the available schedules of the given type."
				}
				Method
				{
					Declaration "void RunTask(Task@ pTask)"
					Documentation "Runs the given task."
				}
				Method
				{
					Declaration "void StartTask(Task@ pTask)"
					Documentation "Starts the given task."
				}
				Method
				{
					Declaration "void MaintainSchedule()"
					Documentation "Maintains the monster\'s schedule."
				}
				Method
				{
					Declaration "Schedule@ ScheduleFromName(const string& in szName)"
					Documentation "Returns the schedule with name szName if it exists, NULL otherwise."
				}
				Method
				{
					Declaration "Schedule@ ScheduleInList(const string& in szName, array<Schedule@>@ pArray)"
					Documentation "Returns the schedule with name szName if it\'s in the list, NULL otherwise."
				}
				Method
				{
					Declaration "bool NextScheduledTask()"
					Documentation "Moves to the next scheduled task."
				}
				Method
				{
					Declaration "void ChangeSchedule(Schedule@ pNewSchedule)"
					Documentation "Changes this monster\'s schedule."
				}
				Method
				{
					Declaration "bool FScheduleDone()"
					Documentation "Returns whether this monster\'s schedule is done."
				}
				Method
				{
					Declaration "void ClearSchedule()"
					Documentation "Clears this monster\'s schedule."
				}
				Method
				{
					Declaration "bool FScheduleValid()"
					Documentation "Returns whether this monster\'s schedule is valid."
				}
				Method
				{
					Declaration "bool FHaveSchedule()"
					Documentation "Returns whether this monster has a schedule."
				}
				Method
				{
					Declaration "bool CheckTankUsage()"
					Documentation "Checks whether the monster can use a func_tank. Return true if possible."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack2_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack2(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack1_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack1(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack2_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack2(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack1_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack1(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "void StopAnimation()"
					Documentation "This will stop animation until you call ResetSequenceInfo() at some point in the future"
				}
				Method
				{
					Declaration "void Stop()"
					Documentation "Stops this monster moving"
				}
				Method
				{
					Declaration "Activity GetStoppedActivity()"
					Documentation "Gets the stopped activity"
				}
				Method
				{
					Declaration "bool ShouldAdvanceRoute(float flWaypointDist)"
					Documentation "Returns whether this monster should advance its route"
				}
				Method
				{
					Declaration "void MoveExecute(CBaseEntity@ pTargetEnt, const Vector& in vecDir, float flInterval)"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "void Move(float flInterval = 0.1f)"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "int CheckLocalMove(const Vector& in vecStart, const Vector& in vecEnd,CBaseEntity@ pTarget, float& out flDist, Vector& out vecEndPosition, bool fOriginalCheck = false)"
					Documentation "finds best visible enemy for attack"
				}
				Method
				{
					Declaration "bool FInViewCone(const Vector& in vecOrigin)"
					Documentation "see if given location is in monster\'s view cone"
				}
				Method
				{
					Declaration "bool FInViewCone(CBaseEntity@ pEntity)"
					Documentation "see if pEntity is in monster\'s view cone"
				}
				Method
				{
					Declaration "void BestVisibleEnemy()"
					Documentation "finds best visible enemy for attack"
				}
				Method
				{
					Declaration "void StartMonster()"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "void Revive()"
					Documentation "Revives the monster"
				}
				Method
				{
					Declaration "void BecomeDead(float flSavedHealth)"
					Documentation "Makes the monster become dead"
				}
				Method
				{
					Declaration "void MonsterInitDead()"
					Documentation "Call after animation/pose is set up"
				}
				Method
				{
					Declaration "void MonsterInit()"
					Documentation "Initializes the monster"
				}
				Method
				{
					Declaration "void SetupFriendly()"
					Documentation "use this overridden to make some other friendly monsters"
				}
				Method
				{
					Declaration "float DamageForce(float flDamage)"
					Documentation "Returns the amount of force applied to this monster when the given amount of damage is done."
				}
				Method
				{
					Declaration "float FlYawDiff()"
					Documentation "returns the difference ( in degrees ) between monster\'s current yaw and ideal_yaw.\nPositive result is left turn, negative is right turn."
				}
				Method
				{
					Declaration "float VecToYaw(Vector vecDir)"
					Documentation "turns a directional vector into a yaw value that points down that vector."
				}
				Method
				{
					Declaration "float ChangeYaw(int iSpeed)"
					Documentation "turns a monster towards its ideal_yaw"
				}
				Method
				{
					Declaration "bool ShouldFadeOnDeath()"
					Documentation "Returns whether this monster should fade on death."
				}
				Method
				{
					Declaration "void Listen()"
					Documentation "Listens for anything that is within audible distance."
				}
				Method
				{
					Declaration "void RunAI()"
					Documentation "Runs this monster\'s AI."
				}
				Method
				{
					Declaration "void Look(int iDistance)"
					Documentation "Look - Base class monster function to find enemies or\nfood by sight. iDistance is distance ( in units ) that the\nmonster can see.\nSets the sight bits of the m_afConditions mask to indicate\nwhich types of entities were sighted.\nFunction also sets the Looker\'s m_pLink\nto the head of a link list that contains all visible ents.\n(linked via each ent\'s m_pLink field)"
				}
				Method
				{
					Declaration "void MonsterUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Will make a monster angry at whomever activated it."
				}
				Method
				{
					Declaration "int8& m_rgbTimeBasedDamage(size_t uiIndex)"
					Documentation "time based damage counters, decr. 1 per 2 seconds. Index must be between 0 and CMG_TIMEBASED."
				}
				Method
				{
					Declaration "Waypoint& m_Route(size_t uiIndex)"
					Documentation "Positions of movement. Index must be between 0 and ROUTE_SIZE"
				}
				Method
				{
					Declaration "Vector& m_vecOldEnemy(size_t uiIndex)"
					Documentation "Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES."
				}
				Method
				{
					Declaration "EHandle& m_hOldEnemy(size_t uiIndex)"
					Documentation "Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES."
				}
				Method
				{
					Declaration "InventoryRules@ get_m_pInventoryRules() const"
					Documentation "The inventory rules."
				}
				Method
				{
					Declaration "bool IsToggleLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations."
				}
				Method
				{
					Declaration "void AngularMove(Vector vecDestAngle, float flSpeed)"
					Documentation "Performs angular movement."
				}
				Method
				{
					Declaration "void LinearMove(Vector vecDest, float flSpeed)"
					Documentation "Performs linear movement."
				}
				Method
				{
					Declaration "int GetSequenceActivityName(int iSequence)"
					Documentation "Gets activity for the given sequence."
				}
				Method
				{
					Declaration "void SetSequenceBox()"
					Documentation "Sets the sequence box."
				}
				Method
				{
					Declaration "int GetAttachmentCount()"
					Documentation "Gets the number of attachments that the current model has."
				}
				Method
				{
					Declaration "bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)"
					Documentation "Extracts the bounding box of the current model."
				}
				Method
				{
					Declaration "int GetBodygroup(int iGroup)"
					Documentation "Gets the value of the given body group."
				}
				Method
				{
					Declaration "void SetBodygroup(int iGroup, int iValue)"
					Documentation "Sets the given body group to the given value."
				}
				Method
				{
					Declaration "void GetAttachment(int iAttachment, Vector& out origin, Vector& out angles)"
					Documentation "Gets the attachment position."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence, int& out iDir)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "void GetAutomovement(Vector& out origin, Vector& out angles, float flInterval = 0.1f)"
					Documentation "Gets automatic movement."
				}
				Method
				{
					Declaration "void GetBonePosition(int iBone, Vector& out origin, Vector& out angles)"
					Documentation "Gets the position of the given bone."
				}
				Method
				{
					Declaration "float SetBlending(int iBlender, float flValue)"
					Documentation "Sets the given blending controller to the given value."
				}
				Method
				{
					Declaration "void InitBoneControllers()"
					Documentation "Initializes bone controllers."
				}
				Method
				{
					Declaration "float SetBoneController(int iController, float flValue)"
					Documentation "Sets the specified bone controller to the given value."
				}
				Method
				{
					Declaration "void DispatchAnimEvents(float flFutureInterval = 0.1f)"
					Documentation "Handle events that have happend since last time called up until X seconds into the future."
				}
				Method
				{
					Declaration "void ResetGaitSequenceInfo()"
					Documentation "Resets gait sequence info."
				}
				Method
				{
					Declaration "void ResetSequenceInfo()"
					Documentation "Resets sequence info."
				}
				Method
				{
					Declaration "int LookupSequence(const string& in szLabel)"
					Documentation "Returns the index of the given sequence, or -1 if no such sequence exists."
				}
				Method
				{
					Declaration "int LookupActivityHeaviest(int iActivity)"
					Documentation "Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int LookupActivity(int iActivity)"
					Documentation "Returns the index of the given activity, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int GetSequenceFlags()"
					Documentation "Get sequence flags."
				}
				Method
				{
					Declaration "float StudioFrameAdvance(float flInterval = 0.0f)"
					Documentation "Accumulate animation frame time from last time called until now."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseDelay@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseToggle@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "float m_flEffectDamage"
					Documentation "Damage modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectSpeed"
					Documentation "Movement speed modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectFriction"
					Documentation "Movement friction modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectGravity"
					Documentation "Gravity modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectRespiration"
					Documentation "Extra/less breathing time underwater in seconds"
				}
				Property
				{
					Declaration "int m_iEffectNonSolid"
					Documentation "is non-solid"
				}
				Property
				{
					Declaration "int m_iEffectInvisible"
					Documentation "is invisible (render + non-targetable)"
				}
				Property
				{
					Declaration "int m_iEffectInvulnerable"
					Documentation "is invulnerable (god mode)"
				}
				Property
				{
					Declaration "int m_iEffectBlockWeapons"
					Documentation "Monster can\'t use weapons."
				}
				Property
				{
					Declaration "Vector m_vecEffectGlowColor"
					Documentation "Glow shell."
				}
				Property
				{
					Declaration "string_t m_iszGuardEntName"
					Documentation "Guard entity name."
				}
				Property
				{
					Declaration "EHandle m_hGuardEnt"
					Documentation "Monster will guard this entity and turn down follow requests."
				}
				Property
				{
					Declaration "float m_flFallVelocity"
					Documentation "Current fall speed."
				}
				Property
				{
					Declaration "float m_flAutomaticAttackTime"
					Documentation "How long an npc will attempt to fire full auto."
				}
				Property
				{
					Declaration "bool m_fCanFearCreatures"
					Documentation "Whether this monster can fear creatures."
				}
				Property
				{
					Declaration "int8 m_chTextureType"
					Documentation "Current texture type.\nSee TextureType enum."
				}
				Property
				{
					Declaration "string_t m_FormattedName"
					Documentation "The formatted name.\nFor better name outputs. E.g. \"Alien Slave\" rather than \"alien_slave\"."
				}
				Property
				{
					Declaration "float m_useTime"
					Documentation "Don\'t allow +USE until this time."
				}
				Property
				{
					Declaration "EHandle m_hCineBlocker"
					Documentation "Entity that is blocking cinematic execution."
				}
				Property
				{
					Declaration "EHandle m_hCine"
					Documentation "Cinematic entity."
				}
				Property
				{
					Declaration "SCRIPTSTATE m_scriptState"
					Documentation "internal cinematic state."
				}
				Property
				{
					Declaration "Vector m_HackedGunPos"
					Documentation "HACK until we can query end of gun."
				}
				Property
				{
					Declaration "string_t m_iszTriggerTarget"
					Documentation "Name of target that should be fired."
				}
				Property
				{
					Declaration "int m_iTriggerCondition"
					Documentation "for scripted AI, this is the condition that will cause the activation of the monster\'s TriggerTarget."
				}
				Property
				{
					Declaration "float m_flDistLook"
					Documentation "distance monster sees (Default 2048)."
				}
				Property
				{
					Declaration "float m_flDistTooFar"
					Documentation "if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in CheckEnemy."
				}
				Property
				{
					Declaration "float m_flHungryTime"
					Documentation "Time based damage inflictor."
				}
				Property
				{
					Declaration "int m_failSchedule"
					Documentation "Schedule type to choose if current schedule fails."
				}
				Property
				{
					Declaration "entvars_t@ pevTimeBasedInflictor"
					Documentation "Time based damage inflictor."
				}
				Property
				{
					Declaration "float m_tbdPrev"
					Documentation "Time-based damage timer."
				}
				Property
				{
					Declaration "float m_lastDamageAmount"
					Documentation "how much damage did monster (player) last take."
				}
				Property
				{
					Declaration "int m_bitsDamageType"
					Documentation "what types of damage has monster (player) taken."
				}
				Property
				{
					Declaration "float m_flNextAttack"
					Documentation "cannot attack again until this time."
				}
				Property
				{
					Declaration "int m_afMoveShootCap"
					Documentation "tells us what a monster can/can\'t do, while moving."
				}
				Property
				{
					Declaration "int m_afCapability"
					Documentation "tells us what a monster can/can\'t do."
				}
				Property
				{
					Declaration "int m_cAmmoLoaded"
					Documentation "how much ammo is in the weapon (used to trigger reload anim sequences)."
				}
				Property
				{
					Declaration "Vector m_vecEnemyLKP"
					Documentation "last known position of enemy. (enemy\'s origin)."
				}
				Property
				{
					Declaration "int m_iMaxHealth"
					Documentation "keeps track of monster\'s maximum health value (for re-healing, etc)."
				}
				Property
				{
					Declaration "int m_bloodColor"
					Documentation "color of blood particles."
				}
				Property
				{
					Declaration "int m_afMemory"
					Documentation "Monster memory."
				}
				Property
				{
					Declaration "int m_iHintNode"
					Documentation "this is the hint node that the monster is moving towards or performing active idle on.."
				}
				Property
				{
					Declaration "Vector m_vecLastPosition"
					Documentation "monster sometimes wants to return to where it started after an operation.."
				}
				Property
				{
					Declaration "int m_afSoundTypes"
					Documentation "Sound types that can be heard."
				}
				Property
				{
					Declaration "int m_iAudibleList"
					Documentation "first index of a linked list of sounds that the monster can hear."
				}
				Property
				{
					Declaration "Activity m_movementActivity"
					Documentation "When moving, set this activity."
				}
				Property
				{
					Declaration "Vector m_vecMoveGoal"
					Documentation "Kept around for node graph moves, so we know our ultimate goal."
				}
				Property
				{
					Declaration "float m_moveradius"
					Documentation "Minimum radius."
				}
				Property
				{
					Declaration "float m_moveWaitTime"
					Documentation "How long I should wait for something to move."
				}
				Property
				{
					Declaration "int m_iRouteIndex"
					Documentation "Index into m_Route[]."
				}
				Property
				{
					Declaration "int m_movementGoal"
					Documentation "Goal that defines route."
				}
				Property
				{
					Declaration "int m_iScheduleIndex"
					Documentation "Schedule index."
				}
				Property
				{
					Declaration "Schedule@ m_pScheduleSaved"
					Documentation "For land_on_ground schedules (remember last schedule and continue)."
				}
				Property
				{
					Declaration "Schedule@ m_pSchedule"
					Documentation "Current schedule."
				}
				Property
				{
					Declaration "int m_iTaskStatus"
					Documentation "Task status."
				}
				Property
				{
					Declaration "MONSTERSTATE m_IdealMonsterState"
					Documentation "monster should change to this state."
				}
				Property
				{
					Declaration "MONSTERSTATE m_MonsterState"
					Documentation "monster\'s current state."
				}
				Property
				{
					Declaration "int m_LastHitGroup"
					Documentation "the last body region that took damage."
				}
				Property
				{
					Declaration "Activity m_GaitActivity"
					Documentation gaitsequence.
				}
				Property
				{
					Declaration "Activity m_IdealActivity"
					Documentation "monster should switch to this activity."
				}
				Property
				{
					Declaration "Activity m_Activity"
					Documentation "what the monster is doing (animation)."
				}
				Property
				{
					Declaration "float m_flMoveWaitFinished"
					Documentation "if we\'re told to wait before moving, this is the time that the wait will be over."
				}
				Property
				{
					Declaration "float m_flWaitFinished"
					Documentation "if we\'re told to wait, this is the time that the wait will be over."
				}
				Property
				{
					Declaration "float m_flFieldOfView"
					Documentation "width of monster\'s field of view ( dot product )."
				}
				Property
				{
					Declaration "EHandle m_hTargetTank"
					Documentation "Target tank to control."
				}
				Property
				{
					Declaration "EHandle m_hTargetEnt"
					Documentation "the entity that the monster is trying to reach."
				}
				Property
				{
					Declaration "EHandle m_hEnemy"
					Documentation "the entity that the monster is fighting."
				}
				Property
				{
					Declaration "string_t m_sMaster"
					Documentation "This entity\'s master, if any."
				}
				Property
				{
					Declaration "int m_bitsDamageInflict"
					Documentation "DMG_ damage type that the door or trigger does."
				}
				Property
				{
					Declaration "Vector m_vecFinalAngle"
					Documentation "Final angle."
				}
				Property
				{
					Declaration "Vector m_vecFinalDest"
					Documentation "Final destination."
				}
				Property
				{
					Declaration "Vector m_vecAngle2"
					Documentation "Open angle."
				}
				Property
				{
					Declaration "Vector m_vecAngle1"
					Documentation "Closed angle."
				}
				Property
				{
					Declaration "Vector m_vecPosition2"
					Documentation "Open position."
				}
				Property
				{
					Declaration "Vector m_vecPosition1"
					Documentation "Closed position."
				}
				Property
				{
					Declaration "EHandle m_hActivator"
					Documentation "Handle to the activator."
				}
				Property
				{
					Declaration "float m_flHeight"
					Documentation Height.
				}
				Property
				{
					Declaration "int m_cTriggersLeft"
					Documentation "Trigger_counter only: # of activations remaining."
				}
				Property
				{
					Declaration "float m_flTLength"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flTWidth"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flLip"
					Documentation "How much to stick out of a wall. Will recede further into walls if negative."
				}
				Property
				{
					Declaration "float m_flWait"
					Documentation "How long to wait before resetting."
				}
				Property
				{
					Declaration "float m_flMoveDistance"
					Documentation "How far a door should slide or rotate."
				}
				Property
				{
					Declaration "TOGGLE_STATE m_toggle_state"
					Documentation "Current toggle state."
				}
				Property
				{
					Declaration "bool m_fSequenceLoops"
					Documentation "True if the sequence loops."
				}
				Property
				{
					Declaration "bool m_fSequenceFinished"
					Documentation "Flag set when StudioAdvanceFrame moves across a frame boundry."
				}
				Property
				{
					Declaration "float m_flLastGaitEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flLastEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flGroundSpeed"
					Documentation "Computed linear movement rate for current sequence."
				}
				Property
				{
					Declaration "float m_flFrameRate"
					Documentation "Computed FPS for current sequence."
				}
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CGrenade
			Documentation "Grenade class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void Explode(Vector vecSrc, Vector vecAim)"
					Documentation "Makes this grenade explode"
				}
				Method
				{
					Declaration "void ResetEffects()"
					Documentation "Reset all effect modifiers"
				}
				Method
				{
					Declaration "void ApplyEffects()"
					Documentation "Re-calculate compounded effect modifiers and apply to the monster"
				}
				Method
				{
					Declaration "void ClearEnemyList()"
					Documentation "Clears this monster\'s list of enemies"
				}
				Method
				{
					Declaration "InventoryList@ get_m_pInventory() const"
					Documentation "The inventory items this monster has"
				}
				Method
				{
					Declaration "void MedicCallSound(float flDistance = 0.0f)"
					Documentation "Medic call sound."
				}
				Method
				{
					Declaration "string m_szTextureName()"
					Documentation "Current texture name we\'re standing on."
				}
				Method
				{
					Declaration "void StopPlayerFollowing(const bool bClearSchedule)"
					Documentation "Stops following a player."
				}
				Method
				{
					Declaration "void StartPlayerFollowing(CBaseEntity@ pLeader)"
					Documentation "Starts following a given player."
				}
				Method
				{
					Declaration "bool CanPlayerFollow()"
					Documentation "Returns whether this monster can follow a player."
				}
				Method
				{
					Declaration "bool IsPlayerFollowing()"
					Documentation "Returns whether this monster is following a player."
				}
				Method
				{
					Declaration "void FollowerPlayerUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue)"
					Documentation "Use method for following players (set only if friendly)"
				}
				Method
				{
					Declaration "void ShockGlowEffect(bool fMode)"
					Documentation "Turns the shock glow effect on or off."
				}
				Method
				{
					Declaration "CBaseEntity@ DropItem(const string& in szItemName, const Vector& in vecPos, const Vector& in vecAng)"
					Documentation "Drops the given item from the given position at the given angle."
				}
				Method
				{
					Declaration "bool CineCleanup()"
					Documentation "Cleans up after a cinematic event."
				}
				Method
				{
					Declaration "bool ExitScriptedSequence()"
					Documentation "Exits the scripted sequence this monster is currently in, if any."
				}
				Method
				{
					Declaration "bool HasAllMemories(int iMemory) const"
					Documentation "Returns whether this monster remembers all of the given memories."
				}
				Method
				{
					Declaration "bool HasMemory(int iMemory) const"
					Documentation "Returns whether this monster remembers any of the given memories."
				}
				Method
				{
					Declaration "void Forget(int iMemory)"
					Documentation "Makes this monster forget the given memories."
				}
				Method
				{
					Declaration "void Remember(int iMemory)"
					Documentation "Makes this monster remember the given memories."
				}
				Method
				{
					Declaration "void StopPlayerFollowing(const bool clearSchedule, bool bSilent = false)"
					Documentation "Stops following its target."
				}
				Method
				{
					Declaration "void StartPlayerFollowing(CBaseEntity@ pLeader, bool bSilent = false)"
					Documentation "Starts following its target."
				}
				Method
				{
					Declaration "void PainSound()"
					Documentation "Plays this monster\'s pain sound."
				}
				Method
				{
					Declaration "void IdleSound()"
					Documentation "Plays this monster\'s idle sound."
				}
				Method
				{
					Declaration "void AlertSound()"
					Documentation "Plays this monster\'s alert sound."
				}
				Method
				{
					Declaration "void DeathSound()"
					Documentation "Plays this monster\'s death sound."
				}
				Method
				{
					Declaration "Vector GetGunPosition()"
					Documentation ""
				}
				Method
				{
					Declaration "Vector ShootAtEnemy(const Vector& in vecShootOrigin)"
					Documentation "Shoots at the specified location."
				}
				Method
				{
					Declaration "void FadeMonster()"
					Documentation "Fades this monster.\nNote: does not kill the monster."
				}
				Method
				{
					Declaration "bool HasAlienGibs()"
					Documentation "Returns whether this monster has alien gibs."
				}
				Method
				{
					Declaration "bool HasHumanGibs()"
					Documentation "Returns whether this monster has human gibs."
				}
				Method
				{
					Declaration "void CallGibMonster()"
					Documentation "Determines whether to gib or fade this monster, and acts accordingly."
				}
				Method
				{
					Declaration "bool ShouldGibMonster(int iGib)"
					Documentation "Returns whether the monster should be gibbed given the gib type.\nSee GIB enum."
				}
				Method
				{
					Declaration "void GibMonster()"
					Documentation "Gibs the monster."
				}
				Method
				{
					Declaration "bool GetEnemy()"
					Documentation "Tries to find the best suitable enemy for this monster."
				}
				Method
				{
					Declaration "bool NoFriendlyFireToPos(Vector vecPos)"
					Documentation "Returns whether attacking the target location at this time would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire(Vector vecPos, CBaseEntity@ pTarget)"
					Documentation "Returns whether attacking the given target at this time from the given location would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire(Vector vecPos)"
					Documentation "Returns whether attacking at this time from the given location would result in friendly fire"
				}
				Method
				{
					Declaration "bool NoFriendlyFire()"
					Documentation "Returns whether attacking at this time would result in friendly fire"
				}
				Method
				{
					Declaration "bool FCheckAITrigger()"
					Documentation "Checks and, if necessary, fires the monster\'s trigger target."
				}
				Method
				{
					Declaration "void Eat(float flFullDuration)"
					Documentation "Make the monster \'full\' for a while."
				}
				Method
				{
					Declaration "bool FShouldEat()"
					Documentation "Returns whether this monster should eat."
				}
				Method
				{
					Declaration "CSound@ PBestSound()"
					Documentation "Returns a pointer to the sound the monster should react to."
				}
				Method
				{
					Declaration "bool HasAllConditions(int iConditions) const"
					Documentation "Returns whether this monster has all of the given AI conditions."
				}
				Method
				{
					Declaration "bool HasConditions(int iConditions) const"
					Documentation "Returns whether this monster has any of the given AI conditions."
				}
				Method
				{
					Declaration "void ClearConditions(int iConditions)"
					Documentation "Clears AI conditions."
				}
				Method
				{
					Declaration "void SetConditions(int iConditions)"
					Documentation "Sets AI conditions."
				}
				Method
				{
					Declaration "bool CheckAttacker(CBaseEntity@ pAttacker)"
					Documentation "Determine if we should ignore damage."
				}
				Method
				{
					Declaration "int RouteClassify(int iMoveFlag)"
					Documentation "Returns the MOVEGOAL for the given move flag."
				}
				Method
				{
					Declaration "void SetYawSpeed()"
					Documentation "Allows different yaw_speeds for each activity."
				}
				Method
				{
					Declaration "void MakeIdealYaw(Vector vecTarget)"
					Documentation "gets a yaw value for the caller that would\nface the supplied vector. Value is stuffed into the monster\'s\nideal_yaw."
				}
				Method
				{
					Declaration "int IScheduleFlags()"
					Documentation "Returns an integer with all Conditions\nbits that are currently set and also set in the current\nschedule\'s Interrupt mask."
				}
				Method
				{
					Declaration "bool MovementIsComplete()"
					Documentation "Returns whether movement is complete."
				}
				Method
				{
					Declaration "bool TaskIsComplete()"
					Documentation "Returns whether the task is complete."
				}
				Method
				{
					Declaration "bool TaskIsRunning()"
					Documentation "Returns whether a task is running."
				}
				Method
				{
					Declaration "void TaskBegin()"
					Documentation "Sets the task status to running."
				}
				Method
				{
					Declaration "void TaskFail()"
					Documentation "Sets the condition bit for a failed task."
				}
				Method
				{
					Declaration "void MovementComplete()"
					Documentation "Called when movement has completed."
				}
				Method
				{
					Declaration "void TaskComplete()"
					Documentation "Sets the task status to complete."
				}
				Method
				{
					Declaration "bool TestFGetNodeRoute(Vector vecDest)"
					Documentation "TEST FGetNodeRoute."
				}
				Method
				{
					Declaration "bool FGetNodeRoute(Vector vecDest)"
					Documentation "tries to build an entire node path from\nthe callers origin to the passed vector.\nIf this is  possible, ROUTE_SIZE waypoints will be copied into the callers m_Route.\ntrue is returned if the operation  succeeds (path is valid) or false if failed (no path  exists )."
				}
				Method
				{
					Declaration "bool PopEnemy()"
					Documentation "Try remembering the last few enemies."
				}
				Method
				{
					Declaration "void PushEnemy(CBaseEntity@ pTarget, Vector& in vecLastKnownPos)"
					Documentation "Remember the last few enemies, always remember the player."
				}
				Method
				{
					Declaration "bool CheckEnemy(CBaseEntity@ pEnemy)"
					Documentation "part of the Condition collection process, gets and stores data and conditions pertaining to a monster\'s enemy.\nReturns true if Enemy LKP was updated."
				}
				Method
				{
					Declaration "bool CheckAttacksFromPosition(CBaseEntity@ pTarget, float flDist, Vector vecPos)"
					Documentation "Check whether attacks are possible from the given position."
				}
				Method
				{
					Declaration "void CheckAttacks_Move(CBaseEntity@ pTarget, float flDist)"
					Documentation "Check attacks to the given enemy at the given distance while moving."
				}
				Method
				{
					Declaration "void CheckAttacks(CBaseEntity@ pTarget, float flDist)"
					Documentation "Check attacks to the given enemy at the given distance."
				}
				Method
				{
					Declaration "void ReportAIState()"
					Documentation "Reports the AI state."
				}
				Method
				{
					Declaration "void SetState(MONSTERSTATE state)"
					Documentation "Sets the current monster state."
				}
				Method
				{
					Declaration "void SetSequenceByName(const string& in szSequence)"
					Documentation "Sets the current sequence by name."
				}
				Method
				{
					Declaration "void SetGaitActivity(Activity newActivity)"
					Documentation "Sets the current gait activity."
				}
				Method
				{
					Declaration "void SetActivity(Activity newActivity)"
					Documentation "Sets the current activity."
				}
				Method
				{
					Declaration "MONSTERSTATE GetIdealState()"
					Documentation "Gets the ideal monster state."
				}
				Method
				{
					Declaration "Task@ GetTask()"
					Documentation "Gets the current task."
				}
				Method
				{
					Declaration "void SentenceStop()"
					Documentation "Stops playing its current sentence."
				}
				Method
				{
					Declaration "void PlayScriptedSentence(const string& in szSentence, float duration, float volume, float attenuation, const bool bConcurrent, CBaseEntity@ pListener)"
					Documentation "Plays the given scripted sentence."
				}
				Method
				{
					Declaration "void PlaySentence(const string& in szSentence, float duration, float volume, float attenuation)"
					Documentation "Plays the given sentence."
				}
				Method
				{
					Declaration "bool CanPlaySentence(const bool bDisregardState)"
					Documentation "Returns whether this monster can play its sentence."
				}
				Method
				{
					Declaration "bool CanPlaySequence(const bool bDisregardState, int iInterruptLevel)"
					Documentation "Returns whether this monster can play its sequence."
				}
				Method
				{
					Declaration "void ScheduleChange()"
					Documentation "Called after the monster\'s schedule changes."
				}
				Method
				{
					Declaration "Schedule@ GetSchedule()"
					Documentation "Gets the current schedule."
				}
				Method
				{
					Declaration "Schedule@ GetScheduleOfType(int iType)"
					Documentation "Gets one of the available schedules of the given type."
				}
				Method
				{
					Declaration "void RunTask(Task@ pTask)"
					Documentation "Runs the given task."
				}
				Method
				{
					Declaration "void StartTask(Task@ pTask)"
					Documentation "Starts the given task."
				}
				Method
				{
					Declaration "void MaintainSchedule()"
					Documentation "Maintains the monster\'s schedule."
				}
				Method
				{
					Declaration "Schedule@ ScheduleFromName(const string& in szName)"
					Documentation "Returns the schedule with name szName if it exists, NULL otherwise."
				}
				Method
				{
					Declaration "Schedule@ ScheduleInList(const string& in szName, array<Schedule@>@ pArray)"
					Documentation "Returns the schedule with name szName if it\'s in the list, NULL otherwise."
				}
				Method
				{
					Declaration "bool NextScheduledTask()"
					Documentation "Moves to the next scheduled task."
				}
				Method
				{
					Declaration "void ChangeSchedule(Schedule@ pNewSchedule)"
					Documentation "Changes this monster\'s schedule."
				}
				Method
				{
					Declaration "bool FScheduleDone()"
					Documentation "Returns whether this monster\'s schedule is done."
				}
				Method
				{
					Declaration "void ClearSchedule()"
					Documentation "Clears this monster\'s schedule."
				}
				Method
				{
					Declaration "bool FScheduleValid()"
					Documentation "Returns whether this monster\'s schedule is valid."
				}
				Method
				{
					Declaration "bool FHaveSchedule()"
					Documentation "Returns whether this monster has a schedule."
				}
				Method
				{
					Declaration "bool CheckTankUsage()"
					Documentation "Checks whether the monster can use a func_tank. Return true if possible."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack2_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack2(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack1_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckMeleeAttack1(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack2_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack2(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack1_Move(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "bool CheckRangeAttack1(float flDot, float flDist)"
					Documentation "this function will survey conditions and set appropriate conditions bits for attack types."
				}
				Method
				{
					Declaration "void StopAnimation()"
					Documentation "This will stop animation until you call ResetSequenceInfo() at some point in the future"
				}
				Method
				{
					Declaration "void Stop()"
					Documentation "Stops this monster moving"
				}
				Method
				{
					Declaration "Activity GetStoppedActivity()"
					Documentation "Gets the stopped activity"
				}
				Method
				{
					Declaration "bool ShouldAdvanceRoute(float flWaypointDist)"
					Documentation "Returns whether this monster should advance its route"
				}
				Method
				{
					Declaration "void MoveExecute(CBaseEntity@ pTargetEnt, const Vector& in vecDir, float flInterval)"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "void Move(float flInterval = 0.1f)"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "int CheckLocalMove(const Vector& in vecStart, const Vector& in vecEnd,CBaseEntity@ pTarget, float& out flDist, Vector& out vecEndPosition, bool fOriginalCheck = false)"
					Documentation "finds best visible enemy for attack"
				}
				Method
				{
					Declaration "bool FInViewCone(const Vector& in vecOrigin)"
					Documentation "see if given location is in monster\'s view cone"
				}
				Method
				{
					Declaration "bool FInViewCone(CBaseEntity@ pEntity)"
					Documentation "see if pEntity is in monster\'s view cone"
				}
				Method
				{
					Declaration "void BestVisibleEnemy()"
					Documentation "finds best visible enemy for attack"
				}
				Method
				{
					Declaration "void StartMonster()"
					Documentation "Starts the monster"
				}
				Method
				{
					Declaration "void Revive()"
					Documentation "Revives the monster"
				}
				Method
				{
					Declaration "void BecomeDead(float flSavedHealth)"
					Documentation "Makes the monster become dead"
				}
				Method
				{
					Declaration "void MonsterInitDead()"
					Documentation "Call after animation/pose is set up"
				}
				Method
				{
					Declaration "void MonsterInit()"
					Documentation "Initializes the monster"
				}
				Method
				{
					Declaration "void SetupFriendly()"
					Documentation "use this overridden to make some other friendly monsters"
				}
				Method
				{
					Declaration "float DamageForce(float flDamage)"
					Documentation "Returns the amount of force applied to this monster when the given amount of damage is done."
				}
				Method
				{
					Declaration "float FlYawDiff()"
					Documentation "returns the difference ( in degrees ) between monster\'s current yaw and ideal_yaw.\nPositive result is left turn, negative is right turn."
				}
				Method
				{
					Declaration "float VecToYaw(Vector vecDir)"
					Documentation "turns a directional vector into a yaw value that points down that vector."
				}
				Method
				{
					Declaration "float ChangeYaw(int iSpeed)"
					Documentation "turns a monster towards its ideal_yaw"
				}
				Method
				{
					Declaration "bool ShouldFadeOnDeath()"
					Documentation "Returns whether this monster should fade on death."
				}
				Method
				{
					Declaration "void Listen()"
					Documentation "Listens for anything that is within audible distance."
				}
				Method
				{
					Declaration "void RunAI()"
					Documentation "Runs this monster\'s AI."
				}
				Method
				{
					Declaration "void Look(int iDistance)"
					Documentation "Look - Base class monster function to find enemies or\nfood by sight. iDistance is distance ( in units ) that the\nmonster can see.\nSets the sight bits of the m_afConditions mask to indicate\nwhich types of entities were sighted.\nFunction also sets the Looker\'s m_pLink\nto the head of a link list that contains all visible ents.\n(linked via each ent\'s m_pLink field)"
				}
				Method
				{
					Declaration "void MonsterUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Will make a monster angry at whomever activated it."
				}
				Method
				{
					Declaration "int8& m_rgbTimeBasedDamage(size_t uiIndex)"
					Documentation "time based damage counters, decr. 1 per 2 seconds. Index must be between 0 and CMG_TIMEBASED."
				}
				Method
				{
					Declaration "Waypoint& m_Route(size_t uiIndex)"
					Documentation "Positions of movement. Index must be between 0 and ROUTE_SIZE"
				}
				Method
				{
					Declaration "Vector& m_vecOldEnemy(size_t uiIndex)"
					Documentation "Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES."
				}
				Method
				{
					Declaration "EHandle& m_hOldEnemy(size_t uiIndex)"
					Documentation "Target tank to control. Index must be between 0 and MAX_OLD_ENEMIES."
				}
				Method
				{
					Declaration "InventoryRules@ get_m_pInventoryRules() const"
					Documentation "The inventory rules."
				}
				Method
				{
					Declaration "bool IsToggleLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations."
				}
				Method
				{
					Declaration "void AngularMove(Vector vecDestAngle, float flSpeed)"
					Documentation "Performs angular movement."
				}
				Method
				{
					Declaration "void LinearMove(Vector vecDest, float flSpeed)"
					Documentation "Performs linear movement."
				}
				Method
				{
					Declaration "int GetSequenceActivityName(int iSequence)"
					Documentation "Gets activity for the given sequence."
				}
				Method
				{
					Declaration "void SetSequenceBox()"
					Documentation "Sets the sequence box."
				}
				Method
				{
					Declaration "int GetAttachmentCount()"
					Documentation "Gets the number of attachments that the current model has."
				}
				Method
				{
					Declaration "bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)"
					Documentation "Extracts the bounding box of the current model."
				}
				Method
				{
					Declaration "int GetBodygroup(int iGroup)"
					Documentation "Gets the value of the given body group."
				}
				Method
				{
					Declaration "void SetBodygroup(int iGroup, int iValue)"
					Documentation "Sets the given body group to the given value."
				}
				Method
				{
					Declaration "void GetAttachment(int iAttachment, Vector& out origin, Vector& out angles)"
					Documentation "Gets the attachment position."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence, int& out iDir)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "void GetAutomovement(Vector& out origin, Vector& out angles, float flInterval = 0.1f)"
					Documentation "Gets automatic movement."
				}
				Method
				{
					Declaration "void GetBonePosition(int iBone, Vector& out origin, Vector& out angles)"
					Documentation "Gets the position of the given bone."
				}
				Method
				{
					Declaration "float SetBlending(int iBlender, float flValue)"
					Documentation "Sets the given blending controller to the given value."
				}
				Method
				{
					Declaration "void InitBoneControllers()"
					Documentation "Initializes bone controllers."
				}
				Method
				{
					Declaration "float SetBoneController(int iController, float flValue)"
					Documentation "Sets the specified bone controller to the given value."
				}
				Method
				{
					Declaration "void DispatchAnimEvents(float flFutureInterval = 0.1f)"
					Documentation "Handle events that have happend since last time called up until X seconds into the future."
				}
				Method
				{
					Declaration "void ResetGaitSequenceInfo()"
					Documentation "Resets gait sequence info."
				}
				Method
				{
					Declaration "void ResetSequenceInfo()"
					Documentation "Resets sequence info."
				}
				Method
				{
					Declaration "int LookupSequence(const string& in szLabel)"
					Documentation "Returns the index of the given sequence, or -1 if no such sequence exists."
				}
				Method
				{
					Declaration "int LookupActivityHeaviest(int iActivity)"
					Documentation "Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int LookupActivity(int iActivity)"
					Documentation "Returns the index of the given activity, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int GetSequenceFlags()"
					Documentation "Get sequence flags."
				}
				Method
				{
					Declaration "float StudioFrameAdvance(float flInterval = 0.0f)"
					Documentation "Accumulate animation frame time from last time called until now."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseDelay@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseToggle@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseMonster@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "float m_flEffectDamage"
					Documentation "Damage modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectSpeed"
					Documentation "Movement speed modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectFriction"
					Documentation "Movement friction modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectGravity"
					Documentation "Gravity modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectRespiration"
					Documentation "Extra/less breathing time underwater in seconds"
				}
				Property
				{
					Declaration "int m_iEffectNonSolid"
					Documentation "is non-solid"
				}
				Property
				{
					Declaration "int m_iEffectInvisible"
					Documentation "is invisible (render + non-targetable)"
				}
				Property
				{
					Declaration "int m_iEffectInvulnerable"
					Documentation "is invulnerable (god mode)"
				}
				Property
				{
					Declaration "int m_iEffectBlockWeapons"
					Documentation "Monster can\'t use weapons."
				}
				Property
				{
					Declaration "Vector m_vecEffectGlowColor"
					Documentation "Glow shell."
				}
				Property
				{
					Declaration "string_t m_iszGuardEntName"
					Documentation "Guard entity name."
				}
				Property
				{
					Declaration "EHandle m_hGuardEnt"
					Documentation "Monster will guard this entity and turn down follow requests."
				}
				Property
				{
					Declaration "float m_flFallVelocity"
					Documentation "Current fall speed."
				}
				Property
				{
					Declaration "float m_flAutomaticAttackTime"
					Documentation "How long an npc will attempt to fire full auto."
				}
				Property
				{
					Declaration "bool m_fCanFearCreatures"
					Documentation "Whether this monster can fear creatures."
				}
				Property
				{
					Declaration "int8 m_chTextureType"
					Documentation "Current texture type.\nSee TextureType enum."
				}
				Property
				{
					Declaration "string_t m_FormattedName"
					Documentation "The formatted name.\nFor better name outputs. E.g. \"Alien Slave\" rather than \"alien_slave\"."
				}
				Property
				{
					Declaration "float m_useTime"
					Documentation "Don\'t allow +USE until this time."
				}
				Property
				{
					Declaration "EHandle m_hCineBlocker"
					Documentation "Entity that is blocking cinematic execution."
				}
				Property
				{
					Declaration "EHandle m_hCine"
					Documentation "Cinematic entity."
				}
				Property
				{
					Declaration "SCRIPTSTATE m_scriptState"
					Documentation "internal cinematic state."
				}
				Property
				{
					Declaration "Vector m_HackedGunPos"
					Documentation "HACK until we can query end of gun."
				}
				Property
				{
					Declaration "string_t m_iszTriggerTarget"
					Documentation "Name of target that should be fired."
				}
				Property
				{
					Declaration "int m_iTriggerCondition"
					Documentation "for scripted AI, this is the condition that will cause the activation of the monster\'s TriggerTarget."
				}
				Property
				{
					Declaration "float m_flDistLook"
					Documentation "distance monster sees (Default 2048)."
				}
				Property
				{
					Declaration "float m_flDistTooFar"
					Documentation "if enemy farther away than this, bits_COND_ENEMY_TOOFAR set in CheckEnemy."
				}
				Property
				{
					Declaration "float m_flHungryTime"
					Documentation "Time based damage inflictor."
				}
				Property
				{
					Declaration "int m_failSchedule"
					Documentation "Schedule type to choose if current schedule fails."
				}
				Property
				{
					Declaration "entvars_t@ pevTimeBasedInflictor"
					Documentation "Time based damage inflictor."
				}
				Property
				{
					Declaration "float m_tbdPrev"
					Documentation "Time-based damage timer."
				}
				Property
				{
					Declaration "float m_lastDamageAmount"
					Documentation "how much damage did monster (player) last take."
				}
				Property
				{
					Declaration "int m_bitsDamageType"
					Documentation "what types of damage has monster (player) taken."
				}
				Property
				{
					Declaration "float m_flNextAttack"
					Documentation "cannot attack again until this time."
				}
				Property
				{
					Declaration "int m_afMoveShootCap"
					Documentation "tells us what a monster can/can\'t do, while moving."
				}
				Property
				{
					Declaration "int m_afCapability"
					Documentation "tells us what a monster can/can\'t do."
				}
				Property
				{
					Declaration "int m_cAmmoLoaded"
					Documentation "how much ammo is in the weapon (used to trigger reload anim sequences)."
				}
				Property
				{
					Declaration "Vector m_vecEnemyLKP"
					Documentation "last known position of enemy. (enemy\'s origin)."
				}
				Property
				{
					Declaration "int m_iMaxHealth"
					Documentation "keeps track of monster\'s maximum health value (for re-healing, etc)."
				}
				Property
				{
					Declaration "int m_bloodColor"
					Documentation "color of blood particles."
				}
				Property
				{
					Declaration "int m_afMemory"
					Documentation "Monster memory."
				}
				Property
				{
					Declaration "int m_iHintNode"
					Documentation "this is the hint node that the monster is moving towards or performing active idle on.."
				}
				Property
				{
					Declaration "Vector m_vecLastPosition"
					Documentation "monster sometimes wants to return to where it started after an operation.."
				}
				Property
				{
					Declaration "int m_afSoundTypes"
					Documentation "Sound types that can be heard."
				}
				Property
				{
					Declaration "int m_iAudibleList"
					Documentation "first index of a linked list of sounds that the monster can hear."
				}
				Property
				{
					Declaration "Activity m_movementActivity"
					Documentation "When moving, set this activity."
				}
				Property
				{
					Declaration "Vector m_vecMoveGoal"
					Documentation "Kept around for node graph moves, so we know our ultimate goal."
				}
				Property
				{
					Declaration "float m_moveradius"
					Documentation "Minimum radius."
				}
				Property
				{
					Declaration "float m_moveWaitTime"
					Documentation "How long I should wait for something to move."
				}
				Property
				{
					Declaration "int m_iRouteIndex"
					Documentation "Index into m_Route[]."
				}
				Property
				{
					Declaration "int m_movementGoal"
					Documentation "Goal that defines route."
				}
				Property
				{
					Declaration "int m_iScheduleIndex"
					Documentation "Schedule index."
				}
				Property
				{
					Declaration "Schedule@ m_pScheduleSaved"
					Documentation "For land_on_ground schedules (remember last schedule and continue)."
				}
				Property
				{
					Declaration "Schedule@ m_pSchedule"
					Documentation "Current schedule."
				}
				Property
				{
					Declaration "int m_iTaskStatus"
					Documentation "Task status."
				}
				Property
				{
					Declaration "MONSTERSTATE m_IdealMonsterState"
					Documentation "monster should change to this state."
				}
				Property
				{
					Declaration "MONSTERSTATE m_MonsterState"
					Documentation "monster\'s current state."
				}
				Property
				{
					Declaration "int m_LastHitGroup"
					Documentation "the last body region that took damage."
				}
				Property
				{
					Declaration "Activity m_GaitActivity"
					Documentation gaitsequence.
				}
				Property
				{
					Declaration "Activity m_IdealActivity"
					Documentation "monster should switch to this activity."
				}
				Property
				{
					Declaration "Activity m_Activity"
					Documentation "what the monster is doing (animation)."
				}
				Property
				{
					Declaration "float m_flMoveWaitFinished"
					Documentation "if we\'re told to wait before moving, this is the time that the wait will be over."
				}
				Property
				{
					Declaration "float m_flWaitFinished"
					Documentation "if we\'re told to wait, this is the time that the wait will be over."
				}
				Property
				{
					Declaration "float m_flFieldOfView"
					Documentation "width of monster\'s field of view ( dot product )."
				}
				Property
				{
					Declaration "EHandle m_hTargetTank"
					Documentation "Target tank to control."
				}
				Property
				{
					Declaration "EHandle m_hTargetEnt"
					Documentation "the entity that the monster is trying to reach."
				}
				Property
				{
					Declaration "EHandle m_hEnemy"
					Documentation "the entity that the monster is fighting."
				}
				Property
				{
					Declaration "string_t m_sMaster"
					Documentation "This entity\'s master, if any."
				}
				Property
				{
					Declaration "int m_bitsDamageInflict"
					Documentation "DMG_ damage type that the door or trigger does."
				}
				Property
				{
					Declaration "Vector m_vecFinalAngle"
					Documentation "Final angle."
				}
				Property
				{
					Declaration "Vector m_vecFinalDest"
					Documentation "Final destination."
				}
				Property
				{
					Declaration "Vector m_vecAngle2"
					Documentation "Open angle."
				}
				Property
				{
					Declaration "Vector m_vecAngle1"
					Documentation "Closed angle."
				}
				Property
				{
					Declaration "Vector m_vecPosition2"
					Documentation "Open position."
				}
				Property
				{
					Declaration "Vector m_vecPosition1"
					Documentation "Closed position."
				}
				Property
				{
					Declaration "EHandle m_hActivator"
					Documentation "Handle to the activator."
				}
				Property
				{
					Declaration "float m_flHeight"
					Documentation Height.
				}
				Property
				{
					Declaration "int m_cTriggersLeft"
					Documentation "Trigger_counter only: # of activations remaining."
				}
				Property
				{
					Declaration "float m_flTLength"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flTWidth"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flLip"
					Documentation "How much to stick out of a wall. Will recede further into walls if negative."
				}
				Property
				{
					Declaration "float m_flWait"
					Documentation "How long to wait before resetting."
				}
				Property
				{
					Declaration "float m_flMoveDistance"
					Documentation "How far a door should slide or rotate."
				}
				Property
				{
					Declaration "TOGGLE_STATE m_toggle_state"
					Documentation "Current toggle state."
				}
				Property
				{
					Declaration "bool m_fSequenceLoops"
					Documentation "True if the sequence loops."
				}
				Property
				{
					Declaration "bool m_fSequenceFinished"
					Documentation "Flag set when StudioAdvanceFrame moves across a frame boundry."
				}
				Property
				{
					Declaration "float m_flLastGaitEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flLastEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flGroundSpeed"
					Documentation "Computed linear movement rate for current sequence."
				}
				Property
				{
					Declaration "float m_flFrameRate"
					Documentation "Computed FPS for current sequence."
				}
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CItem
			Documentation "Generic item class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "bool MyTouch(CBasePlayer@ pPlayer)"
					Documentation "The item\'s touch function."
				}
				Method
				{
					Declaration "void Materialize()"
					Documentation "Makes this entity visible and tangible."
				}
				Method
				{
					Declaration "void ItemTouch(CBaseEntity@ pOther)"
					Documentation "Item touch function"
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Calls use on targets."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CItemInventory
			Documentation "Item_inventory entity class\nCollection rules -- DENY/CAN\'T have rules take precedence over REQUIRE/MUST\nAll string filters can be tokenized with a semi-colon \';\'"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void RemoveItemEffects()"
					Documentation "Prepares to remove effects from holder."
				}
				Method
				{
					Declaration "void AddItemEffects()"
					Documentation "Prepares to add effects to holder."
				}
				Method
				{
					Declaration "void Destroy()"
					Documentation "Destroys this item."
				}
				Method
				{
					Declaration "void Return()"
					Documentation "Returns this item to its original spawn location."
				}
				Method
				{
					Declaration "bool Drop(bool fForce = false, CBaseEntity@ pCaller = null)"
					Documentation "Drops this item, if it\'s being carried."
				}
				Method
				{
					Declaration "bool CanCollect(CBaseEntity@ pOther)"
					Documentation "Returns whether this item can be collected by the given entity."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Calls use on targets."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "bool m_fRemovedByForced"
					Documentation "Item was just removed by force"
				}
				Property
				{
					Declaration "float m_flDropTime"
					Documentation "Time the item was last dropped"
				}
				Property
				{
					Declaration "float m_flCollectTime"
					Documentation "Time the item was last collected"
				}
				Property
				{
					Declaration "float m_flTouchedTime"
					Documentation "Time the item was last touched"
				}
				Property
				{
					Declaration "int m_iCollectCount"
					Documentation "Number of times the item has been collected"
				}
				Property
				{
					Declaration "float m_flEffectDamage"
					Documentation "Damage modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectSpeed"
					Documentation "Movement speed modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectFriction"
					Documentation "Movement friction modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectGravity"
					Documentation "Gravity modifier (%)"
				}
				Property
				{
					Declaration "float m_flEffectRespiration"
					Documentation "Extra/less breathing time underwater in seconds"
				}
				Property
				{
					Declaration "bool m_fEffectNonSolid"
					Documentation "Holder is non-solid"
				}
				Property
				{
					Declaration "bool m_fEffectInvisible"
					Documentation "Holder is invisible (render + non-targetable)"
				}
				Property
				{
					Declaration "bool m_fEffectInvulnerable"
					Documentation "Holder is invulnerable (god mode)"
				}
				Property
				{
					Declaration "bool m_fEffectBlockWeapons"
					Documentation "Holder can\'t use weapons"
				}
				Property
				{
					Declaration "Vector m_vecEffectGlowColor"
					Documentation "Holder has a glow shell"
				}
				Property
				{
					Declaration "bool m_fEffectsPermanent"
					Documentation "Holder keeps effects after dropping the item"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnDestroy"
					Documentation "On destroy"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnMaterialise"
					Documentation "On materialise after return"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnReturnOther"
					Documentation "On return (for everyone else)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnReturnTeam"
					Documentation "On return (for collector\'s team)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnReturnSelf"
					Documentation "On return (for collector)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnWearingOutOther"
					Documentation "On wearing out (for everyone else)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnWearingOutTeam"
					Documentation "On wearing out (for collector\'s team)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnWearingOutSelf"
					Documentation "On wearing out (for collector)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnUseOther"
					Documentation "On use by trigger (for everyone else)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnUseTeam"
					Documentation "On use by trigger (for collector\'s team)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnUseSelf"
					Documentation "On use by trigger (for collector)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnCantDropOther"
					Documentation "On failed drop (for everyone else)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnCantDropTeam"
					Documentation "On failed drop (for collector\'s team)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnCantDropSelf"
					Documentation "On failed drop (for collector)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnDropOther"
					Documentation "On successful drop (for everyone else)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnDropTeam"
					Documentation "On successful drop (for collector\'s team)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnDropSelf"
					Documentation "On successful drop (for collector)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnCantCollectOther"
					Documentation "On failed collection (for everyone else)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnCantCollectTeam"
					Documentation "On failed collection (for collector\'s team)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnCantCollectSelf"
					Documentation "On failed collection (for collector)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnCollectOther"
					Documentation "On successful collection (for everyone else)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnCollectTeam"
					Documentation "On successful collection (for collector\'s team)"
				}
				Property
				{
					Declaration "string_t m_szTriggerOnCollectSelf"
					Documentation "On successful collection (for collector)"
				}
				Property
				{
					Declaration "bool m_fKeepOnRespawn"
					Documentation "Holder still has the item after respawning (only applies to players -- re-equip NPC\'s manually)"
				}
				Property
				{
					Declaration "bool m_fKeepOnDeath"
					Documentation "Holder still has the item after dying (i.e. so they can keep it while being revived)"
				}
				Property
				{
					Declaration "bool m_fDelayedRespawn"
					Documentation "Delayed respawn on return (like with weapons/ammo/pickups)"
				}
				Property
				{
					Declaration "float m_flReturnTime"
					Documentation "How long this item returns to its\' original location when dropped (-1 = never, 0 = instant)"
				}
				Property
				{
					Declaration "bool m_fCanBeDropped"
					Documentation "Holder is allowed to drop this item by choice"
				}
				Property
				{
					Declaration "float m_flWearOutTime"
					Documentation "Perform a trigger prior to this item being forcibly dropped (0 = none)"
				}
				Property
				{
					Declaration "float m_flMaximumHoldTime"
					Documentation "Limit to how long this item can be held for, forcibly dropped after (0 = no limit)"
				}
				Property
				{
					Declaration "string_t m_szItemNameNotMoved"
					Documentation "These item(s) must NOT have moved"
				}
				Property
				{
					Declaration "int m_iCantHaveItemGroupNum"
					Documentation "Number of item(s) from the can\'t have group(s) (0 = all)"
				}
				Property
				{
					Declaration "string_t m_szCantHaveItemGroup"
					Documentation "Must not have an item in these group(s)"
				}
				Property
				{
					Declaration "string_t m_szCantHaveItemName"
					Documentation "Must not have these item(s)"
				}
				Property
				{
					Declaration "string_t m_szItemNameMoved"
					Documentation "These item(s) must have moved"
				}
				Property
				{
					Declaration "int m_iRequiresItemGroupNum"
					Documentation "Number of item(s) from the required group(s) required (0 = all)"
				}
				Property
				{
					Declaration "string_t m_szRequiresItemGroup"
					Documentation "Require an item from these group(s)"
				}
				Property
				{
					Declaration "string_t m_szRequiresItemName"
					Documentation "Require these item(s)"
				}
				Property
				{
					Declaration "int m_iAllowedNpcClassify"
					Documentation "NPC classification filter"
				}
				Property
				{
					Declaration "string_t m_szAllowedTeams"
					Documentation "Team filters"
				}
				Property
				{
					Declaration "string_t m_szAllowedClassNames"
					Documentation "CBaseEntity class name filters"
				}
				Property
				{
					Declaration "string_t m_szAllowedTargetNames"
					Documentation "CBaseEntity target name filters"
				}
				Property
				{
					Declaration "int m_iCarriedSequence"
					Documentation "Model sequence number while CARRIED."
				}
				Property
				{
					Declaration "string_t m_szCarriedSequenceName"
					Documentation "Model sequence name while CARRIED."
				}
				Property
				{
					Declaration "int m_iCarriedBody"
					Documentation "Model body while CARRIED."
				}
				Property
				{
					Declaration "int m_iCarriedSkin"
					Documentation "Model skin while CARRIED."
				}
				Property
				{
					Declaration "int m_iIdleSequence"
					Documentation "Model sequence number while IDLE."
				}
				Property
				{
					Declaration "string_t m_szIdleSequenceName"
					Documentation "Model sequence name while IDLE."
				}
				Property
				{
					Declaration "int m_iIdleBody"
					Documentation "Model body while IDLE."
				}
				Property
				{
					Declaration "int m_iIdleSkin"
					Documentation "Model skin while IDLE (not carried)."
				}
				Property
				{
					Declaration "bool m_fHiddenWhenCarried"
					Documentation "Model is hidden while it is being carried."
				}
				Property
				{
					Declaration "float m_flWeight"
					Documentation "How heavy the item is (0-100),\nholders can hold multiple items up to a total weight 100, think of this as KG if you like (though what person can carry 100KG!?)."
				}
				Property
				{
					Declaration "int m_iCollectLimit"
					Documentation "How many times the item can be picked up, destroyed when limit is reached (0 = infinite)."
				}
				Property
				{
					Declaration "string_t m_szDescription"
					Documentation "Friendly item description for client-side UI."
				}
				Property
				{
					Declaration "string m_szDisplayName"
					Documentation "Friendly item name for client-side UI."
				}
				Property
				{
					Declaration "string_t m_szItemGroup"
					Documentation "Group name referred to by triggers."
				}
				Property
				{
					Declaration "string_t m_szItemName"
					Documentation "Item name referred to by triggers, doesn\'t need to be unique -- remember the targetname refers to the entity itself only."
				}
				Property
				{
					Declaration "int m_iMoveType"
					Documentation "Spawn-time move type."
				}
				Property
				{
					Declaration "Vector m_vecSpawnAngles"
					Documentation "Spawn-time angles."
				}
				Property
				{
					Declaration "Vector m_vecSpawnOrigin"
					Documentation "Spawn-time origin."
				}
				Property
				{
					Declaration "EHandle m_hHolder"
					Documentation "The monster or player holding this item."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBasePlayerAmmo
			Documentation "Player ammo class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void Materialize()"
					Documentation "Makes this entity visible and tangible."
				}
				Method
				{
					Declaration "bool AddAmmo(CBaseEntity@ pOther)"
					Documentation "Adds ammo to the given entity."
				}
				Method
				{
					Declaration "void DefaultTouch(CBaseEntity@ pOther)"
					Documentation "Default touch"
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Calls use on targets."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBasePlayerWeapon
			Documentation "Player Weapon entity base class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void ChangeWeaponSkin(int16 skin)"
					Documentation ""
				}
				Method
				{
					Declaration "void SetFOV(int iFOV)"
					Documentation "0 means reset to default fov"
				}
				Method
				{
					Declaration "void PrecacheCustomModels()"
					Documentation "Precaches custom models if needed."
				}
				Method
				{
					Declaration "string GetV_Model(const string& in szAlternative)"
					Documentation "Gets the weapon\'s V model."
				}
				Method
				{
					Declaration "string GetV_Model()"
					Documentation "Gets the weapon\'s V model."
				}
				Method
				{
					Declaration "string GetW_Model(const string& in szAlternative)"
					Documentation "Gets the weapon\'s W model."
				}
				Method
				{
					Declaration "string GetW_Model()"
					Documentation "Gets the weapon\'s W model."
				}
				Method
				{
					Declaration "string GetP_Model(const string& in szAlternative)"
					Documentation "Gets the weapon\'s P model."
				}
				Method
				{
					Declaration "string GetP_Model()"
					Documentation "Gets the weapon\'s P model."
				}
				Method
				{
					Declaration "void BurstSupplement()"
					Documentation ""
				}
				Method
				{
					Declaration "bool UseDecrement()"
					Documentation "Whether the client predicts this weapon"
				}
				Method
				{
					Declaration "bool ShouldWeaponIdle()"
					Documentation ""
				}
				Method
				{
					Declaration "void RetireWeapon()"
					Documentation "no more ammo for this gun, put it away."
				}
				Method
				{
					Declaration "void WeaponIdle()"
					Documentation "called when no buttons pressed"
				}
				Method
				{
					Declaration "bool ShouldReload()"
					Documentation "Returns whether this weapon should reload automatically."
				}
				Method
				{
					Declaration "void FinishReload()"
					Documentation "Finishes the reload for this weapon."
				}
				Method
				{
					Declaration "void Reload()"
					Documentation ""
				}
				Method
				{
					Declaration "void TertiaryAttack()"
					Documentation "do \"+ATTACK3\""
				}
				Method
				{
					Declaration "void SecondaryAttack()"
					Documentation "do \"+ATTACK2\""
				}
				Method
				{
					Declaration "void PrimaryAttack()"
					Documentation "do \"+ATTACK\""
				}
				Method
				{
					Declaration "bool DefaultReload(int iClipSize, int iAnim, float flDelay, int iSubModel = 0)"
					Documentation ""
				}
				Method
				{
					Declaration "bool DefaultReload(int iClipSize, int iAnim, float flDelay, int iSubModel, int iClip, int iAmmoType)"
					Documentation ""
				}
				Method
				{
					Declaration "bool DefaultDeploy(const string& in szViewModel, const string& in szWeaponModel, int iAnim, const string& in szAnimExt, int skiplocal = 0, int body = 0)"
					Documentation ""
				}
				Method
				{
					Declaration "bool IsUseable()"
					Documentation ""
				}
				Method
				{
					Declaration "Vector BulletAccuracy(const Vector& in vecMoving, const Vector& in vecStanding, const Vector& in vecCrouched)"
					Documentation "Universal code to determine player bullet accuracy based on speed/stance"
				}
				Method
				{
					Declaration "void SendWeaponAnim(int iAnim, int skiplocal = 0, int body = 0)"
					Documentation "skiplocal is 1 if client is predicting weapon animations"
				}
				Method
				{
					Declaration "void ResetEmptySound()"
					Documentation ""
				}
				Method
				{
					Declaration "bool PlayEmptySound()"
					Documentation ""
				}
				Method
				{
					Declaration "int AddSecondaryAmmo(int iCount, const string& in szName, int iMaxCarry)"
					Documentation ""
				}
				Method
				{
					Declaration "int AddPrimaryAmmo(int iCount, const string& in szName, int iMaxClip, int iMaxCarry)"
					Documentation ""
				}
				Method
				{
					Declaration "bool AddWeapon()"
					Documentation ""
				}
				Method
				{
					Declaration "bool ExtractClipAmmo(CBasePlayerWeapon@ pWeapon)"
					Documentation ""
				}
				Method
				{
					Declaration "bool ExtractAmmo(CBasePlayerWeapon@ pWeapon)"
					Documentation ""
				}
				Method
				{
					Declaration "bool CanHaveDuplicates()"
					Documentation "Can this weapon have duplicates added?"
				}
				Method
				{
					Declaration "CBasePlayerItem@ DropItem()"
					Documentation "CBaseEntity to drop.\nBy default, this entity."
				}
				Method
				{
					Declaration "float GetRespawnTime() const"
					Documentation "Gets this item\'s respawn time (time from pickup to respawn)."
				}
				Method
				{
					Declaration "int iFlags()"
					Documentation "Gets the item flags."
				}
				Method
				{
					Declaration "int iWeight()"
					Documentation "Gets the item weight."
				}
				Method
				{
					Declaration "int iMaxClip()"
					Documentation "Gets the max clip amount."
				}
				Method
				{
					Declaration "string pszName()"
					Documentation "Gets the name of this item."
				}
				Method
				{
					Declaration "int iMaxAmmo2()"
					Documentation "Gets the secondary ammo maximum."
				}
				Method
				{
					Declaration "string pszAmmo2()"
					Documentation "Gets the name of the secondary ammo."
				}
				Method
				{
					Declaration "int iMaxAmmo1()"
					Documentation "Gets the primary ammo maximum."
				}
				Method
				{
					Declaration "string pszAmmo1()"
					Documentation "Gets the name of the primary ammo."
				}
				Method
				{
					Declaration "int iItemPosition()"
					Documentation "Gets the item position."
				}
				Method
				{
					Declaration "int iItemSlot()"
					Documentation "Gets the slot this item is in. 0 to MAX_ITEMS_SLOTS."
				}
				Method
				{
					Declaration "CBasePlayerWeapon@ GetWeaponPtr()"
					Documentation "Gets this item as a weapon. Returns null if this is not a weapon."
				}
				Method
				{
					Declaration "bool UpdateClientData(CBasePlayer@ pPlayer)"
					Documentation "Updates client data."
				}
				Method
				{
					Declaration "int SecondaryAmmoIndex()"
					Documentation "Gets the secondary ammo index, or -1 if this item doesn\'t use secondary ammo."
				}
				Method
				{
					Declaration "int PrimaryAmmoIndex()"
					Documentation "Gets the primary ammo index, or -1 if this item doesn\'t use primary ammo."
				}
				Method
				{
					Declaration "void AttachToPlayer(CBasePlayer@ pPlayer)"
					Documentation "Attach this item to the given player."
				}
				Method
				{
					Declaration "void Kill()"
					Documentation "Kills this item."
				}
				Method
				{
					Declaration "void LoadSprites(CBasePlayer@ pPlayer, const string& in szName)"
					Documentation "Load item sprites."
				}
				Method
				{
					Declaration "void UpdateItemInfo()"
					Documentation "Updates item info."
				}
				Method
				{
					Declaration "void Holster(int iSkipLocal = 0)"
					Documentation "Holsters this weapon."
				}
				Method
				{
					Declaration "bool CanHolster()"
					Documentation "Can this weapon be put away right now?"
				}
				Method
				{
					Declaration "bool Deploy()"
					Documentation "Returns if deploy was successful."
				}
				Method
				{
					Declaration "bool CanDeploy()"
					Documentation "Returns whether this item can deploy."
				}
				Method
				{
					Declaration "void GetItemInfo(ItemInfo& out info)"
					Documentation "Gets item info."
				}
				Method
				{
					Declaration "void CheckRespawn()"
					Documentation "Check respawn."
				}
				Method
				{
					Declaration "void FallInit()"
					Documentation "Fall init."
				}
				Method
				{
					Declaration "CBasePlayerItem@ RespawnItem()"
					Documentation "Copy a weapon."
				}
				Method
				{
					Declaration "void AttemptToMaterialize()"
					Documentation "Think function. The weapon desires to become visible and tangible, if the game rules allow for it."
				}
				Method
				{
					Declaration "void Materialize()"
					Documentation "Make a weapon visible and tangible."
				}
				Method
				{
					Declaration "void FallThink()"
					Documentation "Think function. When an item is first spawned, this think is run to determine when the object has hit the ground."
				}
				Method
				{
					Declaration "void ItemUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue)"
					Documentation "Default weapon use function."
				}
				Method
				{
					Declaration "void DefaultTouch(CBaseEntity@ pOther)"
					Documentation "Touch function. Default touch."
				}
				Method
				{
					Declaration "void Collect(CBaseEntity@ pOther)"
					Documentation "Attempts to let pOther collect this item."
				}
				Method
				{
					Declaration "void DestroyItem()"
					Documentation "Think function. Destroys this item."
				}
				Method
				{
					Declaration "bool AddDuplicate(CBasePlayerItem@ pItem)"
					Documentation "returns true if this item wants the duplicate removed from the world."
				}
				Method
				{
					Declaration "bool AddToPlayer(CBasePlayer@ pPlayer)"
					Documentation "Returns true if this item wants itself added to the player\'s inventory."
				}
				Method
				{
					Declaration "int GetSequenceActivityName(int iSequence)"
					Documentation "Gets activity for the given sequence."
				}
				Method
				{
					Declaration "void SetSequenceBox()"
					Documentation "Sets the sequence box."
				}
				Method
				{
					Declaration "int GetAttachmentCount()"
					Documentation "Gets the number of attachments that the current model has."
				}
				Method
				{
					Declaration "bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)"
					Documentation "Extracts the bounding box of the current model."
				}
				Method
				{
					Declaration "int GetBodygroup(int iGroup)"
					Documentation "Gets the value of the given body group."
				}
				Method
				{
					Declaration "void SetBodygroup(int iGroup, int iValue)"
					Documentation "Sets the given body group to the given value."
				}
				Method
				{
					Declaration "void GetAttachment(int iAttachment, Vector& out origin, Vector& out angles)"
					Documentation "Gets the attachment position."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence, int& out iDir)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "void GetAutomovement(Vector& out origin, Vector& out angles, float flInterval = 0.1f)"
					Documentation "Gets automatic movement."
				}
				Method
				{
					Declaration "void GetBonePosition(int iBone, Vector& out origin, Vector& out angles)"
					Documentation "Gets the position of the given bone."
				}
				Method
				{
					Declaration "float SetBlending(int iBlender, float flValue)"
					Documentation "Sets the given blending controller to the given value."
				}
				Method
				{
					Declaration "void InitBoneControllers()"
					Documentation "Initializes bone controllers."
				}
				Method
				{
					Declaration "float SetBoneController(int iController, float flValue)"
					Documentation "Sets the specified bone controller to the given value."
				}
				Method
				{
					Declaration "void DispatchAnimEvents(float flFutureInterval = 0.1f)"
					Documentation "Handle events that have happend since last time called up until X seconds into the future."
				}
				Method
				{
					Declaration "void ResetGaitSequenceInfo()"
					Documentation "Resets gait sequence info."
				}
				Method
				{
					Declaration "void ResetSequenceInfo()"
					Documentation "Resets sequence info."
				}
				Method
				{
					Declaration "int LookupSequence(const string& in szLabel)"
					Documentation "Returns the index of the given sequence, or -1 if no such sequence exists."
				}
				Method
				{
					Declaration "int LookupActivityHeaviest(int iActivity)"
					Documentation "Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int LookupActivity(int iActivity)"
					Documentation "Returns the index of the given activity, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int GetSequenceFlags()"
					Documentation "Get sequence flags."
				}
				Method
				{
					Declaration "float StudioFrameAdvance(float flInterval = 0.0f)"
					Documentation "Accumulate animation frame time from last time called until now."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseDelay@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBasePlayerItem@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "int m_iDefaultSecAmmo"
					Documentation "The amount of secondary ammo you receive when you pick up this weapon as placed by a level designer."
				}
				Property
				{
					Declaration "int m_iDefaultAmmo"
					Documentation "The amount of primary ammo you receive when you pick up this weapon as placed by a level designer."
				}
				Property
				{
					Declaration "float m_flNextBurstRound"
					Documentation "When the next burst round is to be fired"
				}
				Property
				{
					Declaration "bool m_fInZoom"
					Documentation "Weapon is zoomed in"
				}
				Property
				{
					Declaration "bool m_fIsAkimbo"
					Documentation "Weapon is in \'akimbo\' mode"
				}
				Property
				{
					Declaration "float m_flCustomDmg"
					Documentation "Per-entity weapon damage"
				}
				Property
				{
					Declaration "bool m_fInReload"
					Documentation "Are we in the middle of a reload"
				}
				Property
				{
					Declaration "int m_iClip2"
					Documentation "number of shots left in the secondary weapon clip, -1 it not used"
				}
				Property
				{
					Declaration "int m_iClip"
					Documentation "number of shots left in the primary weapon clip, -1 it not used"
				}
				Property
				{
					Declaration "int m_iSecondaryAmmoType"
					Documentation "\"secondary\" ammo index into players m_rgAmmo[]"
				}
				Property
				{
					Declaration "int m_iPrimaryAmmoType"
					Documentation "\"primary\" ammo index into players m_rgAmmo[]"
				}
				Property
				{
					Declaration "float m_flTimeWeaponIdle"
					Documentation "soonest time ItemPostFrame will call WeaponIdle"
				}
				Property
				{
					Declaration "float m_flNextTertiaryAttack"
					Documentation "soonest time ItemPostFrame will call TertiaryAttack"
				}
				Property
				{
					Declaration "float m_flNextSecondaryAttack"
					Documentation "soonest time ItemPostFrame will call SecondaryAttack"
				}
				Property
				{
					Declaration "float m_flNextPrimaryAttack"
					Documentation "soonest time ItemPostFrame will call PrimaryAttack"
				}
				Property
				{
					Declaration "bool m_bFireOnEmpty"
					Documentation "True when the gun is empty and the player is still holding down the attack key(s)"
				}
				Property
				{
					Declaration "bool m_bPlayEmptySound"
					Documentation "Whether to play the empty sound when the player attempts to fire"
				}
				Property
				{
					Declaration "bool m_bExclusiveHold"
					Documentation "If set, as long as a player has this item, the player must keep this weapon selected.No more than one item with this set can be carried at one time."
				}
				Property
				{
					Declaration "float m_flLastBounce"
					Documentation "The last bounce time."
				}
				Property
				{
					Declaration "const int m_iId"
					Documentation "The item id."
				}
				Property
				{
					Declaration "EHandle m_hNextItem"
					Documentation "Gets the next item. null if no next item."
				}
				Property
				{
					Declaration "EHandle m_hPlayer"
					Documentation "The owning player. null if no owner."
				}
				Property
				{
					Declaration "bool m_fSequenceLoops"
					Documentation "True if the sequence loops."
				}
				Property
				{
					Declaration "bool m_fSequenceFinished"
					Documentation "Flag set when StudioAdvanceFrame moves across a frame boundry."
				}
				Property
				{
					Declaration "float m_flLastGaitEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flLastEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flGroundSpeed"
					Documentation "Computed linear movement rate for current sequence."
				}
				Property
				{
					Declaration "float m_flFrameRate"
					Documentation "Computed FPS for current sequence."
				}
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBasePlayerItem
			Documentation "Player item base class"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "CBasePlayerWeapon@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "bool CanHaveDuplicates()"
					Documentation "Can this weapon have duplicates added?"
				}
				Method
				{
					Declaration "CBasePlayerItem@ DropItem()"
					Documentation "CBaseEntity to drop.\nBy default, this entity."
				}
				Method
				{
					Declaration "float GetRespawnTime() const"
					Documentation "Gets this item\'s respawn time (time from pickup to respawn)."
				}
				Method
				{
					Declaration "int iFlags()"
					Documentation "Gets the item flags."
				}
				Method
				{
					Declaration "int iWeight()"
					Documentation "Gets the item weight."
				}
				Method
				{
					Declaration "int iMaxClip()"
					Documentation "Gets the max clip amount."
				}
				Method
				{
					Declaration "string pszName()"
					Documentation "Gets the name of this item."
				}
				Method
				{
					Declaration "int iMaxAmmo2()"
					Documentation "Gets the secondary ammo maximum."
				}
				Method
				{
					Declaration "string pszAmmo2()"
					Documentation "Gets the name of the secondary ammo."
				}
				Method
				{
					Declaration "int iMaxAmmo1()"
					Documentation "Gets the primary ammo maximum."
				}
				Method
				{
					Declaration "string pszAmmo1()"
					Documentation "Gets the name of the primary ammo."
				}
				Method
				{
					Declaration "int iItemPosition()"
					Documentation "Gets the item position."
				}
				Method
				{
					Declaration "int iItemSlot()"
					Documentation "Gets the slot this item is in. 0 to MAX_ITEMS_SLOTS."
				}
				Method
				{
					Declaration "CBasePlayerWeapon@ GetWeaponPtr()"
					Documentation "Gets this item as a weapon. Returns null if this is not a weapon."
				}
				Method
				{
					Declaration "bool UpdateClientData(CBasePlayer@ pPlayer)"
					Documentation "Updates client data."
				}
				Method
				{
					Declaration "int SecondaryAmmoIndex()"
					Documentation "Gets the secondary ammo index, or -1 if this item doesn\'t use secondary ammo."
				}
				Method
				{
					Declaration "int PrimaryAmmoIndex()"
					Documentation "Gets the primary ammo index, or -1 if this item doesn\'t use primary ammo."
				}
				Method
				{
					Declaration "void AttachToPlayer(CBasePlayer@ pPlayer)"
					Documentation "Attach this item to the given player."
				}
				Method
				{
					Declaration "void Kill()"
					Documentation "Kills this item."
				}
				Method
				{
					Declaration "void LoadSprites(CBasePlayer@ pPlayer, const string& in szName)"
					Documentation "Load item sprites."
				}
				Method
				{
					Declaration "void UpdateItemInfo()"
					Documentation "Updates item info."
				}
				Method
				{
					Declaration "void Holster(int iSkipLocal = 0)"
					Documentation "Holsters this weapon."
				}
				Method
				{
					Declaration "bool CanHolster()"
					Documentation "Can this weapon be put away right now?"
				}
				Method
				{
					Declaration "bool Deploy()"
					Documentation "Returns if deploy was successful."
				}
				Method
				{
					Declaration "bool CanDeploy()"
					Documentation "Returns whether this item can deploy."
				}
				Method
				{
					Declaration "void GetItemInfo(ItemInfo& out info)"
					Documentation "Gets item info."
				}
				Method
				{
					Declaration "void CheckRespawn()"
					Documentation "Check respawn."
				}
				Method
				{
					Declaration "void FallInit()"
					Documentation "Fall init."
				}
				Method
				{
					Declaration "CBasePlayerItem@ RespawnItem()"
					Documentation "Copy a weapon."
				}
				Method
				{
					Declaration "void AttemptToMaterialize()"
					Documentation "Think function. The weapon desires to become visible and tangible, if the game rules allow for it."
				}
				Method
				{
					Declaration "void Materialize()"
					Documentation "Make a weapon visible and tangible."
				}
				Method
				{
					Declaration "void FallThink()"
					Documentation "Think function. When an item is first spawned, this think is run to determine when the object has hit the ground."
				}
				Method
				{
					Declaration "void ItemUse(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue)"
					Documentation "Default weapon use function."
				}
				Method
				{
					Declaration "void DefaultTouch(CBaseEntity@ pOther)"
					Documentation "Touch function. Default touch."
				}
				Method
				{
					Declaration "void Collect(CBaseEntity@ pOther)"
					Documentation "Attempts to let pOther collect this item."
				}
				Method
				{
					Declaration "void DestroyItem()"
					Documentation "Think function. Destroys this item."
				}
				Method
				{
					Declaration "bool AddDuplicate(CBasePlayerItem@ pItem)"
					Documentation "returns true if this item wants the duplicate removed from the world."
				}
				Method
				{
					Declaration "bool AddToPlayer(CBasePlayer@ pPlayer)"
					Documentation "Returns true if this item wants itself added to the player\'s inventory."
				}
				Method
				{
					Declaration "int GetSequenceActivityName(int iSequence)"
					Documentation "Gets activity for the given sequence."
				}
				Method
				{
					Declaration "void SetSequenceBox()"
					Documentation "Sets the sequence box."
				}
				Method
				{
					Declaration "int GetAttachmentCount()"
					Documentation "Gets the number of attachments that the current model has."
				}
				Method
				{
					Declaration "bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)"
					Documentation "Extracts the bounding box of the current model."
				}
				Method
				{
					Declaration "int GetBodygroup(int iGroup)"
					Documentation "Gets the value of the given body group."
				}
				Method
				{
					Declaration "void SetBodygroup(int iGroup, int iValue)"
					Documentation "Sets the given body group to the given value."
				}
				Method
				{
					Declaration "void GetAttachment(int iAttachment, Vector& out origin, Vector& out angles)"
					Documentation "Gets the attachment position."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence, int& out iDir)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "void GetAutomovement(Vector& out origin, Vector& out angles, float flInterval = 0.1f)"
					Documentation "Gets automatic movement."
				}
				Method
				{
					Declaration "void GetBonePosition(int iBone, Vector& out origin, Vector& out angles)"
					Documentation "Gets the position of the given bone."
				}
				Method
				{
					Declaration "float SetBlending(int iBlender, float flValue)"
					Documentation "Sets the given blending controller to the given value."
				}
				Method
				{
					Declaration "void InitBoneControllers()"
					Documentation "Initializes bone controllers."
				}
				Method
				{
					Declaration "float SetBoneController(int iController, float flValue)"
					Documentation "Sets the specified bone controller to the given value."
				}
				Method
				{
					Declaration "void DispatchAnimEvents(float flFutureInterval = 0.1f)"
					Documentation "Handle events that have happend since last time called up until X seconds into the future."
				}
				Method
				{
					Declaration "void ResetGaitSequenceInfo()"
					Documentation "Resets gait sequence info."
				}
				Method
				{
					Declaration "void ResetSequenceInfo()"
					Documentation "Resets sequence info."
				}
				Method
				{
					Declaration "int LookupSequence(const string& in szLabel)"
					Documentation "Returns the index of the given sequence, or -1 if no such sequence exists."
				}
				Method
				{
					Declaration "int LookupActivityHeaviest(int iActivity)"
					Documentation "Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int LookupActivity(int iActivity)"
					Documentation "Returns the index of the given activity, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int GetSequenceFlags()"
					Documentation "Get sequence flags."
				}
				Method
				{
					Declaration "float StudioFrameAdvance(float flInterval = 0.0f)"
					Documentation "Accumulate animation frame time from last time called until now."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseDelay@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "bool m_bExclusiveHold"
					Documentation "If set, as long as a player has this item, the player must keep this weapon selected.No more than one item with this set can be carried at one time."
				}
				Property
				{
					Declaration "float m_flLastBounce"
					Documentation "The last bounce time."
				}
				Property
				{
					Declaration "const int m_iId"
					Documentation "The item id."
				}
				Property
				{
					Declaration "EHandle m_hNextItem"
					Documentation "Gets the next item. null if no next item."
				}
				Property
				{
					Declaration "EHandle m_hPlayer"
					Documentation "The owning player. null if no owner."
				}
				Property
				{
					Declaration "bool m_fSequenceLoops"
					Documentation "True if the sequence loops."
				}
				Property
				{
					Declaration "bool m_fSequenceFinished"
					Documentation "Flag set when StudioAdvanceFrame moves across a frame boundry."
				}
				Property
				{
					Declaration "float m_flLastGaitEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flLastEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flGroundSpeed"
					Documentation "Computed linear movement rate for current sequence."
				}
				Property
				{
					Declaration "float m_flFrameRate"
					Documentation "Computed FPS for current sequence."
				}
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBaseToggle
			Documentation "All entities that can be toggled derive from this"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "CBaseDoor@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseButton@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CGrenade@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayer@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CCineMonster@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseMonster@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "InventoryRules@ get_m_pInventoryRules() const"
					Documentation "The inventory rules."
				}
				Method
				{
					Declaration "bool IsToggleLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master.\nSeparate from IsLockedByMaster due to limitations."
				}
				Method
				{
					Declaration "void AngularMove(Vector vecDestAngle, float flSpeed)"
					Documentation "Performs angular movement."
				}
				Method
				{
					Declaration "void LinearMove(Vector vecDest, float flSpeed)"
					Documentation "Performs linear movement."
				}
				Method
				{
					Declaration "int GetSequenceActivityName(int iSequence)"
					Documentation "Gets activity for the given sequence."
				}
				Method
				{
					Declaration "void SetSequenceBox()"
					Documentation "Sets the sequence box."
				}
				Method
				{
					Declaration "int GetAttachmentCount()"
					Documentation "Gets the number of attachments that the current model has."
				}
				Method
				{
					Declaration "bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)"
					Documentation "Extracts the bounding box of the current model."
				}
				Method
				{
					Declaration "int GetBodygroup(int iGroup)"
					Documentation "Gets the value of the given body group."
				}
				Method
				{
					Declaration "void SetBodygroup(int iGroup, int iValue)"
					Documentation "Sets the given body group to the given value."
				}
				Method
				{
					Declaration "void GetAttachment(int iAttachment, Vector& out origin, Vector& out angles)"
					Documentation "Gets the attachment position."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence, int& out iDir)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "void GetAutomovement(Vector& out origin, Vector& out angles, float flInterval = 0.1f)"
					Documentation "Gets automatic movement."
				}
				Method
				{
					Declaration "void GetBonePosition(int iBone, Vector& out origin, Vector& out angles)"
					Documentation "Gets the position of the given bone."
				}
				Method
				{
					Declaration "float SetBlending(int iBlender, float flValue)"
					Documentation "Sets the given blending controller to the given value."
				}
				Method
				{
					Declaration "void InitBoneControllers()"
					Documentation "Initializes bone controllers."
				}
				Method
				{
					Declaration "float SetBoneController(int iController, float flValue)"
					Documentation "Sets the specified bone controller to the given value."
				}
				Method
				{
					Declaration "void DispatchAnimEvents(float flFutureInterval = 0.1f)"
					Documentation "Handle events that have happend since last time called up until X seconds into the future."
				}
				Method
				{
					Declaration "void ResetGaitSequenceInfo()"
					Documentation "Resets gait sequence info."
				}
				Method
				{
					Declaration "void ResetSequenceInfo()"
					Documentation "Resets sequence info."
				}
				Method
				{
					Declaration "int LookupSequence(const string& in szLabel)"
					Documentation "Returns the index of the given sequence, or -1 if no such sequence exists."
				}
				Method
				{
					Declaration "int LookupActivityHeaviest(int iActivity)"
					Documentation "Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int LookupActivity(int iActivity)"
					Documentation "Returns the index of the given activity, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int GetSequenceFlags()"
					Documentation "Get sequence flags."
				}
				Method
				{
					Declaration "float StudioFrameAdvance(float flInterval = 0.0f)"
					Documentation "Accumulate animation frame time from last time called until now."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseDelay@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "string_t m_sMaster"
					Documentation "This entity\'s master, if any."
				}
				Property
				{
					Declaration "int m_bitsDamageInflict"
					Documentation "DMG_ damage type that the door or trigger does."
				}
				Property
				{
					Declaration "Vector m_vecFinalAngle"
					Documentation "Final angle."
				}
				Property
				{
					Declaration "Vector m_vecFinalDest"
					Documentation "Final destination."
				}
				Property
				{
					Declaration "Vector m_vecAngle2"
					Documentation "Open angle."
				}
				Property
				{
					Declaration "Vector m_vecAngle1"
					Documentation "Closed angle."
				}
				Property
				{
					Declaration "Vector m_vecPosition2"
					Documentation "Open position."
				}
				Property
				{
					Declaration "Vector m_vecPosition1"
					Documentation "Closed position."
				}
				Property
				{
					Declaration "EHandle m_hActivator"
					Documentation "Handle to the activator."
				}
				Property
				{
					Declaration "float m_flHeight"
					Documentation Height.
				}
				Property
				{
					Declaration "int m_cTriggersLeft"
					Documentation "Trigger_counter only: # of activations remaining."
				}
				Property
				{
					Declaration "float m_flTLength"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flTWidth"
					Documentation "For plats."
				}
				Property
				{
					Declaration "float m_flLip"
					Documentation "How much to stick out of a wall. Will recede further into walls if negative."
				}
				Property
				{
					Declaration "float m_flWait"
					Documentation "How long to wait before resetting."
				}
				Property
				{
					Declaration "float m_flMoveDistance"
					Documentation "How far a door should slide or rotate."
				}
				Property
				{
					Declaration "TOGGLE_STATE m_toggle_state"
					Documentation "Current toggle state."
				}
				Property
				{
					Declaration "bool m_fSequenceLoops"
					Documentation "True if the sequence loops."
				}
				Property
				{
					Declaration "bool m_fSequenceFinished"
					Documentation "Flag set when StudioAdvanceFrame moves across a frame boundry."
				}
				Property
				{
					Declaration "float m_flLastGaitEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flLastEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flGroundSpeed"
					Documentation "Computed linear movement rate for current sequence."
				}
				Property
				{
					Declaration "float m_flFrameRate"
					Documentation "Computed FPS for current sequence."
				}
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBaseAnimating
			Documentation "All entities that can animate derive from this"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "CBaseDoor@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseButton@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayerWeapon@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CGrenade@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayer@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CCineMonster@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseMonster@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayerItem@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseToggle@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "int GetSequenceActivityName(int iSequence)"
					Documentation "Gets activity for the given sequence."
				}
				Method
				{
					Declaration "void SetSequenceBox()"
					Documentation "Sets the sequence box."
				}
				Method
				{
					Declaration "int GetAttachmentCount()"
					Documentation "Gets the number of attachments that the current model has."
				}
				Method
				{
					Declaration "bool ExtractBbox(int iSequence, Vector& out mins, Vector& out maxs)"
					Documentation "Extracts the bounding box of the current model."
				}
				Method
				{
					Declaration "int GetBodygroup(int iGroup)"
					Documentation "Gets the value of the given body group."
				}
				Method
				{
					Declaration "void SetBodygroup(int iGroup, int iValue)"
					Documentation "Sets the given body group to the given value."
				}
				Method
				{
					Declaration "void GetAttachment(int iAttachment, Vector& out origin, Vector& out angles)"
					Documentation "Gets the attachment position."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "int FindTransition(int iEndingSequence, int iGoalSequence, int& out iDir)"
					Documentation "Find the transition between 2 sequences."
				}
				Method
				{
					Declaration "void GetAutomovement(Vector& out origin, Vector& out angles, float flInterval = 0.1f)"
					Documentation "Gets automatic movement."
				}
				Method
				{
					Declaration "void GetBonePosition(int iBone, Vector& out origin, Vector& out angles)"
					Documentation "Gets the position of the given bone."
				}
				Method
				{
					Declaration "float SetBlending(int iBlender, float flValue)"
					Documentation "Sets the given blending controller to the given value."
				}
				Method
				{
					Declaration "void InitBoneControllers()"
					Documentation "Initializes bone controllers."
				}
				Method
				{
					Declaration "float SetBoneController(int iController, float flValue)"
					Documentation "Sets the specified bone controller to the given value."
				}
				Method
				{
					Declaration "void DispatchAnimEvents(float flFutureInterval = 0.1f)"
					Documentation "Handle events that have happend since last time called up until X seconds into the future."
				}
				Method
				{
					Declaration "void ResetGaitSequenceInfo()"
					Documentation "Resets gait sequence info."
				}
				Method
				{
					Declaration "void ResetSequenceInfo()"
					Documentation "Resets sequence info."
				}
				Method
				{
					Declaration "int LookupSequence(const string& in szLabel)"
					Documentation "Returns the index of the given sequence, or -1 if no such sequence exists."
				}
				Method
				{
					Declaration "int LookupActivityHeaviest(int iActivity)"
					Documentation "Returns the index of the given activity that has the heaviest weight, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int LookupActivity(int iActivity)"
					Documentation "Returns the index of the given activity, or -1 if no such activity exists."
				}
				Method
				{
					Declaration "int GetSequenceFlags()"
					Documentation "Get sequence flags."
				}
				Method
				{
					Declaration "float StudioFrameAdvance(float flInterval = 0.0f)"
					Documentation "Accumulate animation frame time from last time called until now."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
				Method
				{
					Declaration "CBaseDelay@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "bool m_fSequenceLoops"
					Documentation "True if the sequence loops."
				}
				Property
				{
					Declaration "bool m_fSequenceFinished"
					Documentation "Flag set when StudioAdvanceFrame moves across a frame boundry."
				}
				Property
				{
					Declaration "float m_flLastGaitEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flLastEventCheck"
					Documentation "Last time the event list was checked."
				}
				Property
				{
					Declaration "float m_flGroundSpeed"
					Documentation "Computed linear movement rate for current sequence."
				}
				Property
				{
					Declaration "float m_flFrameRate"
					Documentation "Computed FPS for current sequence."
				}
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBaseDelay
			Documentation "All entities that can trigger with a delay derive from this"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "CBaseDoor@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseButton@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayerWeapon@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CGrenade@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayer@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CCineMonster@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseMonster@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayerItem@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseToggle@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "void DelayThink()"
					Documentation "Think function. Used internally."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Causes this entity to trigger its targets with an optional delay."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CBaseEntity@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "string_t m_iszKillTarget"
					Documentation "The name of the kill target, if any."
				}
				Property
				{
					Declaration "float m_flDelay"
					Documentation "Delay before fire."
				}
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CBaseEntity
			Documentation "All entities derive from this"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "CGib@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseDoor@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseButton@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CItem@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayerAmmo@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseTank@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CLaser@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBeam@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CPathTrack@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayerWeapon@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CSprite@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CGrenade@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayer@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CCineMonster@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseMonster@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBasePlayerItem@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseToggle@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseAnimating@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "CBaseDelay@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "void ClearUserData()"
					Documentation "Clears the user data on this entity. WARNING: clears all data.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionaryValue& GetUserData(const string& in szKey)"
					Documentation "Gets the user data stored under the specified key on this entity.\nDo not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "dictionary@ GetUserData()"
					Documentation "Gets the user data on this entity. Do not keep references to this data, the object might be removed from this entity.\nOnly map scripts can use this."
				}
				Method
				{
					Declaration "void EndRevive(float flTimeUntilRevive)"
					Documentation "Called when this entity should be revived. flTimeUntilRevive is the time until the revival should start."
				}
				Method
				{
					Declaration "void BeginRevive(float flTimeUntilRevive)"
					Documentation "Prepares this entity for revival. flTimeUntilRevive is the time until the revive action completes."
				}
				Method
				{
					Declaration "bool IsRevivable()"
					Documentation "Returns whether this entity is revivable at this time."
				}
				Method
				{
					Declaration "void OnDestroy()"
					Documentation "Entity destructor."
				}
				Method
				{
					Declaration "void OnCreate()"
					Documentation "Entity constructor."
				}
				Method
				{
					Declaration "void GetDamagePoints(entvars_t@ pevAttacker, entvars_t@ pevInflictor, float flDamage)"
					Documentation "Adds damage points to the inflicting entity."
				}
				Method
				{
					Declaration "float GetPointsForDamage(float flDamage)"
					Documentation "Returns the points received for damage done."
				}
				Method
				{
					Declaration "bool IsFacing(entvars_t@ pevTest, float flDotProduct = VIEW_FIELD_ULTRA_NARROW)"
					Documentation "Returns whether this entity is facing the given entity, within the given view field."
				}
				Method
				{
					Declaration "bool FVisible(const Vector& in vecOrigin)"
					Documentation "Returns whether this entity is visible from the given origin."
				}
				Method
				{
					Declaration "bool FVisible(CBaseEntity@ pEntity, bool fIgnoreGlass)"
					Documentation "Returns whether this entity is visible to the given entity."
				}
				Method
				{
					Declaration "int Illumination()"
					Documentation "Returns this entity\'s illumination."
				}
				Method
				{
					Declaration "Vector BodyTarget(const Vector& in posSrc)"
					Documentation "Returns this entity\'s body target for shooting."
				}
				Method
				{
					Declaration "Vector EarPosition()"
					Documentation "Returns this entity\'s ear position."
				}
				Method
				{
					Declaration "Vector EyePosition()"
					Documentation "Returns this entity\'s eye position."
				}
				Method
				{
					Declaration "Vector Center()"
					Documentation "Returns this entity\'s center."
				}
				Method
				{
					Declaration "bool FBecomeProne(CBaseEntity@ pOther)"
					Documentation "Makes this entity become prone."
				}
				Method
				{
					Declaration "CBaseEntity@ Respawn()"
					Documentation "Respawns this entity."
				}
				Method
				{
					Declaration "void UpdateOnRemove()"
					Documentation "Updates this entity when removed."
				}
				Method
				{
					Declaration "void Blocked(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s blocked function."
				}
				Method
				{
					Declaration "void Use(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue = 0.0f)"
					Documentation "Trigger\'s this entity\'s use function."
				}
				Method
				{
					Declaration "void Touch(CBaseEntity@ pOther)"
					Documentation "Triggers this entity\'s touch function."
				}
				Method
				{
					Declaration "void Think()"
					Documentation "Makes this entity think. Do not call directly."
				}
				Method
				{
					Declaration "CBaseEntity@ GetNextTarget()"
					Documentation "Gets the next target to trigger."
				}
				Method
				{
					Declaration "bool CriticalRemove()"
					Documentation "Removes this entity in critical situations."
				}
				Method
				{
					Declaration "bool IsMachine()"
					Documentation "Returns whether this is a machine."
				}
				Method
				{
					Declaration "bool IsBreakable()"
					Documentation "Returns whether this is a breakable brush entity."
				}
				Method
				{
					Declaration "bool IsPointEnt()"
					Documentation "Returns whether this is a point entity."
				}
				Method
				{
					Declaration "bool IsNetClient()"
					Documentation "Returns whether this is a net client."
				}
				Method
				{
					Declaration "bool IsPlayer()"
					Documentation "Returns whether this entity is a player."
				}
				Method
				{
					Declaration "bool IsMonster()"
					Documentation "Returns whether this entity is a monster."
				}
				Method
				{
					Declaration "bool IsInWorld()"
					Documentation "Returns whether this entity is in the world."
				}
				Method
				{
					Declaration "bool ReflectGauss()"
					Documentation "Returns whether this entity reflects gauss shots."
				}
				Method
				{
					Declaration "bool IsBSPModel()"
					Documentation "Returns whether this entity is a BSP model."
				}
				Method
				{
					Declaration "bool IsAlive()"
					Documentation "Returns whether this entity is alive."
				}
				Method
				{
					Declaration "bool IsSneaking()"
					Documentation "Returns whether this entity is sneaking."
				}
				Method
				{
					Declaration "bool OnControls(entvars_t@ pev)"
					Documentation "Reacts to controls set on the pev."
				}
				Method
				{
					Declaration "void StopSneaking()"
					Documentation "Stops sneaking."
				}
				Method
				{
					Declaration "void StartSneaking()"
					Documentation "Starts sneaking."
				}
				Method
				{
					Declaration "void SetToggleState(int state)"
					Documentation "Sets this entity\'s toggle state."
				}
				Method
				{
					Declaration "int DamageDecal(int bitsDamageType)"
					Documentation "Returns the damage decal\nSee decal_e."
				}
				Method
				{
					Declaration "void OverrideReset()"
					Documentation "Resets this entity."
				}
				Method
				{
					Declaration "bool IsMoving()"
					Documentation "Returns whether this entity is moving."
				}
				Method
				{
					Declaration "float GetDelay()"
					Documentation "Gets this entity\'s trigger delay."
				}
				Method
				{
					Declaration "bool RemovePlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Removes the given player item to this entity."
				}
				Method
				{
					Declaration "AddPlayerItemResult AddPlayerItem(CBasePlayerItem@ pItem)"
					Documentation "Adds the given player item to this entity."
				}
				Method
				{
					Declaration "void AddPointsToTeam(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity\'s team."
				}
				Method
				{
					Declaration "void AddPoints(int score, const bool bAllowNegativeScore)"
					Documentation "Adds points to this entity."
				}
				Method
				{
					Declaration "int GetToggleState()"
					Documentation "Gets the toggle state.\nSee the TOGGLE_STATE enum."
				}
				Method
				{
					Declaration "bool SetupModel()"
					Documentation "Sets up the model."
				}
				Method
				{
					Declaration "int entindex()"
					Documentation "Returns this entity\'s index."
				}
				Method
				{
					Declaration "edict_t@ edict()"
					Documentation "Returns this entity\'s edict."
				}
				Method
				{
					Declaration "bool IsLockedByMaster()"
					Documentation "Returns whether this entity is locked by its master."
				}
				Method
				{
					Declaration "bool IsDormant()"
					Documentation "Returns whether this entity is dormant."
				}
				Method
				{
					Declaration "void MakeDormant()"
					Documentation "Makes this entity dormant."
				}
				Method
				{
					Declaration "bool Intersects(CBaseEntity@ pOther)"
					Documentation "Returns whether this entity intersects with the given entity."
				}
				Method
				{
					Declaration "void SUB_UseTargets(CBaseEntity@ pActivator, USE_TYPE useType, float flValue)"
					Documentation "Calls use on targets."
				}
				Method
				{
					Declaration "void FireBullets(uint cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread,float flDistance, Bullet iBulletType, int iTracerFreq = 4, int iDamage = 0, entvars_t@ pevAttacker = null, FireBulletsDrawMode fDraw = FBDM_DRAW)"
					Documentation "Fires bullets. Must call CMath::MakeAimVectors with an angle vector first."
				}
				Method
				{
					Declaration "bool ShouldToggle(USE_TYPE useType, const bool currentState)"
					Documentation "Returns whether this entity should toggle."
				}
				Method
				{
					Declaration "void SUB_CallUseToggle()"
					Documentation "Think function. Calls use toggle on this entity."
				}
				Method
				{
					Declaration "void SUB_FadeOut()"
					Documentation "Think function. Fades this entity."
				}
				Method
				{
					Declaration "void SUB_StartFadeOut()"
					Documentation "Think function. Starts fading this entity."
				}
				Method
				{
					Declaration "void SUB_DoNothing()"
					Documentation "Think function. Explicitly does nothing."
				}
				Method
				{
					Declaration "void SUB_Remove()"
					Documentation "Think function. Delay-removes this entity."
				}
				Method
				{
					Declaration "bool BlockedByEntity(CBaseEntity@ pOther, float flDamage)"
					Documentation "Returns true if you should be blocked by the entity, false otherwise. Also deals blocking damage to the entity, if applicable."
				}
				Method
				{
					Declaration "CustomKeyvalues@ GetCustomKeyvalues()"
					Documentation "Gets this entity\'s custom keyvalues."
				}
				Method
				{
					Declaration "CBaseMonster@ MyMonsterPointer()"
					Documentation "Returns this entity as its monster entity, if it is a monster."
				}
				Method
				{
					Declaration "bool IsTriggered(CBaseEntity@ pActivator)"
					Documentation "Returns whether this entity is triggered by the given entity."
				}
				Method
				{
					Declaration "int BloodColor()"
					Documentation "Returns the blood color. See the BLOOD_COLOR enum."
				}
				Method
				{
					Declaration "void Killed(entvars_t@pevAtttacker, int iGibbed)"
					Documentation "Tells this entity it\'s been killed. See the GIB enum for possible values."
				}
				Method
				{
					Declaration "bool TakeArmor(float flArmor, int bitsDamageType, int armor_cap = 0)"
					Documentation "Takes armor from this entity. Note: flArmor is added to entity armor. Use negative values to subtract.If armor_cap is non-zero, won\'t add more than armor_cap. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "bool TakeHealth(float flHealth, int bitsDamageType, int health_cap = 0)"
					Documentation "Takes health from this entity. Note: flHealth is added to entity health. Use negative values to subtract.If health_cap is non-zero, won\'t add more than health_cap. Returns true if it took damage, false otherwise."
				}
				Method
				{
					Declaration "int TakeDamage(entvars_t@ pevInflictor, entvars_t@ pevAttacker, float flDamage, int bitsDamageType)"
					Documentation "Causes this entity to take damage. Returns 1 if it took damage, 0 otherwise."
				}
				Method
				{
					Declaration "int Classify()"
					Documentation "Gets this entity\'s classification."
				}
				Method
				{
					Declaration "int IRelationshipByClass(CLASS iClass)"
					Documentation "Gets the relationship between this entity and the given entity classification. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "int IRelationship(CBaseEntity@ other, bool ignoreNoTarget = false)"
					Documentation "Gets the relationship between this entity and the given entity. See the RELATIONSHIP enum."
				}
				Method
				{
					Declaration "void ClearClassification()"
					Documentation "Clears this entity\'s classification override."
				}
				Method
				{
					Declaration "void SetClassificationFromEntity(CBaseEntity@ pEntity)"
					Documentation "Sets this entity\'s classification override to the classification override set on the given entity. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "void SetClassification(int cl)"
					Documentation "Sets this entity\'s classification override. Can override the entity\'s player ally setting."
				}
				Method
				{
					Declaration "int GetClassification(int cl)"
					Documentation "Gets this entity\'s classification. Returns the given value if none is set. See the CLASSIFICATION enum."
				}
				Method
				{
					Declaration "void SetObjectCollisionBox()"
					Documentation "Sets up the object collision box."
				}
				Method
				{
					Declaration "int ObjectCaps()"
					Documentation "Gets this entity\'s objects caps. See the FCAP enum."
				}
				Method
				{
					Declaration "void Precache()"
					Documentation "Precaches the entity. Do not call directly."
				}
				Method
				{
					Declaration "bool opEquals(CBaseEntity@ pOther)"
					Documentation "Compares 2 entities for equality."
				}
				Method
				{
					Declaration "void SetPlayerAllyDirect(bool fState)"
					Documentation "Sets this entity\'s player ally status.\nUse this only if you need the setting to be exactly what you give it (e.g. when copying from another monster)"
				}
				Method
				{
					Declaration "void SetPlayerAlly(bool fState)"
					Documentation "Sets this entity\'s player ally status."
				}
				Method
				{
					Declaration "bool IsPlayerAlly() const"
					Documentation "Returns whether this entity is allied to players."
				}
				Method
				{
					Declaration "int FindMonstersInWorld(array<CBaseEntity@>@ pArray, int flagMask)"
					Documentation "Finds monsters in the world"
				}
				Method
				{
					Declaration "string SOUNDREPLACEMENT_Find(const string& in szFilename)"
					Documentation "Find sound replacement for the given file."
				}
				Method
				{
					Declaration "bool FVisibleFromPos(const Vector& in vecTarget, const Vector& in vecStart)"
					Documentation "Returns whether this entity is visible from the given position."
				}
				Method
				{
					Declaration "string GetTargetname() const"
					Documentation "Returns this entity\'s target name."
				}
				Method
				{
					Declaration "string GetClassificationName() const"
					Documentation "Returns this entity\'s classification name."
				}
				Method
				{
					Declaration "string GetClassificationTag() const"
					Documentation "Returns this entity\'s classification tag."
				}
				Method
				{
					Declaration "string GetClassname() const"
					Documentation "Returns this entity\'s class name."
				}
				Method
				{
					Declaration "string TeamID()"
					Documentation "Returns this entity\'s team ID."
				}
				Method
				{
					Declaration "bool HasTarget(const string& in szTarget)"
					Documentation "Returns whether this entity has the given target."
				}
				Method
				{
					Declaration "int GiveAmmo(int iAmount, const string& in szName, int iMax, const bool fFromWeapon = true)"
					Documentation "Gives ammo to this entity."
				}
				Method
				{
					Declaration "void TraceBleed(float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces entity bleed event."
				}
				Method
				{
					Declaration "void TraceAttack(entvars_t@ pevAttacker, float flDamage, const Vector& in vecDir, TraceResult& in traceResult, int bitsDamageType)"
					Documentation "Traces an attack by the given entity to this entity."
				}
				Method
				{
					Declaration "bool KeyValue(const string& in szKeyName, const string& in szValue)"
					Documentation "Sets keyvalue data on this entity"
				}
				Method
				{
					Declaration "void SetOrigin(const Vector& in vecOrigin)"
					Documentation "Sets this entity\'s (absolute) origin"
				}
				Method
				{
					Declaration "const Vector& GetOrigin() const"
					Documentation "Gets the entity\'s (absolute) origin."
				}
				Method
				{
					Declaration "CItemInventory@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
			}
			Properties
			{
				Property
				{
					Declaration "Vector m_vecOriginalRenderColor"
					Documentation "Original render color."
				}
				Property
				{
					Declaration "float m_flOriginalRenderAmount"
					Documentation "Original render amount."
				}
				Property
				{
					Declaration "int m_iOriginalRenderFX"
					Documentation "Original render FX."
				}
				Property
				{
					Declaration "int m_iOriginalRenderMode"
					Documentation "Original render model."
				}
				Property
				{
					Declaration "string_t classnameInFilterType"
					Documentation "Class name in filter type."
				}
				Property
				{
					Declaration "string_t targetnameInFilterType"
					Documentation "Target name in filter type."
				}
				Property
				{
					Declaration "string_t classnameOutFilterType"
					Documentation "Class name out filter type."
				}
				Property
				{
					Declaration "string_t targetnameOutFilterType"
					Documentation "Target name out filter type."
				}
				Property
				{
					Declaration "Vector m_vecLastOrigin"
					Documentation "Last origin vector"
				}
				Property
				{
					Declaration "bool m_fCustomModel"
					Documentation "Whether a custom model is used."
				}
				Property
				{
					Declaration "bool m_fCanFadeStart"
					Documentation "Whether fading can start."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWaitB"
					Documentation "Maximum fade wait time B."
				}
				Property
				{
					Declaration "float m_flMaximumFadeWait"
					Documentation "Maximum fade wait time."
				}
				Property
				{
					Declaration "int m_iClassSelection"
					Documentation "The overridden classification."
				}
				Property
				{
					Declaration "bool m_fOverrideClass"
					Documentation "Whether this entity overrides the classification."
				}
				Property
				{
					Declaration "entvars_t@ pev"
					Documentation "Entity variables"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CDecals
			Documentation "Dynamic decal manager"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "string GetIndex(decal_e decal) const"
					Documentation "Gets the texture frame index of the given decal."
				}
				Method
				{
					Declaration "string GetName(decal_e decal) const"
					Documentation "Gets the name of the texture representing the given decal."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName entvars_t
			Documentation "Networked entity variables"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "edict_t@ get_pContainingEntity() const"
					Documentation "Entity containing entity. pContainingEntity.vars equals this entvars instance."
				}
				Method
				{
					Declaration "bool FlagBitSet(int iFlags)"
					Documentation "Returns whether the given flag(s) are set on the entvars flags variable"
				}
				Method
				{
					Declaration "bool SpawnFlagBitSet(int iFlags)"
					Documentation "Returns whether the given flag(s) are set on the entvars spawnflags variable"
				}
				Method
				{
					Declaration "void set_blending(uint, int8)"
					Documentation "Set entity blending by index (0..1, 0..255). Used by entities with models to set x or y axis blending."
				}
				Method
				{
					Declaration "int8 get_blending(uint)"
					Documentation "Get entity blending by index (0..1). Used by entities with models to get x or y axis blending."
				}
				Method
				{
					Declaration "void set_controller(uint, int8)"
					Documentation "Set entity controller by index (0..3, 0..255) Used by entities with studio models to set bone controller settings."
				}
				Method
				{
					Declaration "int8 get_controller(uint)"
					Documentation "Get entity controller by index (0..3). Used by entities with studio models to get bone controller settings."
				}
				Method
				{
					Declaration "bool ClassNameIs(const string& in szClassName)"
					Documentation "Returns whether the given class name is this entity\'s class name"
				}
			}
			Properties
			{
				Property
				{
					Declaration "edict_t@ euser4"
					Documentation "User variable 4 (Edict)"
				}
				Property
				{
					Declaration "edict_t@ euser3"
					Documentation "User variable 3 (Edict)"
				}
				Property
				{
					Declaration "edict_t@ euser2"
					Documentation "User variable 2 (Edict)"
				}
				Property
				{
					Declaration "edict_t@ euser1"
					Documentation "User variable 1 (Edict)"
				}
				Property
				{
					Declaration "Vector vuser4"
					Documentation "User variable 4 (Vector)"
				}
				Property
				{
					Declaration "Vector vuser3"
					Documentation "User variable 3 (Vector)"
				}
				Property
				{
					Declaration "Vector vuser2"
					Documentation "User variable 2 (Vector)"
				}
				Property
				{
					Declaration "Vector vuser1"
					Documentation "User variable 1 (Vector)"
				}
				Property
				{
					Declaration "float fuser4"
					Documentation "User variable 4 (float)"
				}
				Property
				{
					Declaration "float fuser3"
					Documentation "User variable 3 (float)"
				}
				Property
				{
					Declaration "float fuser2"
					Documentation "User variable 2 (float)"
				}
				Property
				{
					Declaration "float fuser1"
					Documentation "User variable 1 (float)"
				}
				Property
				{
					Declaration "int iuser4"
					Documentation "User variable 4 (integer)"
				}
				Property
				{
					Declaration "int iuser3"
					Documentation "User variable 3 (integer)"
				}
				Property
				{
					Declaration "int iuser2"
					Documentation "User variable 2 (integer)"
				}
				Property
				{
					Declaration "int iuser1"
					Documentation "User variable 1 (integer)"
				}
				Property
				{
					Declaration "int groupinfo"
					Documentation "Entity group info. Used for internal operations."
				}
				Property
				{
					Declaration "int oldbuttons"
					Documentation "Player old buttons. Previous frame\'s contents of buttons."
				}
				Property
				{
					Declaration "int gamestate"
					Documentation "Entity gamestate. Reserved for future use."
				}
				Property
				{
					Declaration "float flFallVelocity"
					Documentation "Player fall velocity."
				}
				Property
				{
					Declaration "int iStepLeft"
					Documentation "Entity step left flag. Used for internal operations."
				}
				Property
				{
					Declaration "int flDuckTime"
					Documentation "Entity duck time. Used for internal operations."
				}
				Property
				{
					Declaration "int flSwimTime"
					Documentation "Entity swim time. Used for internal operations."
				}
				Property
				{
					Declaration "int flTimeStepSound"
					Documentation "Entity time of step sound. Used for internal operations."
				}
				Property
				{
					Declaration "int bInDuck"
					Documentation "Entity ducking flag. Used for internal operations."
				}
				Property
				{
					Declaration "int pushmsec"
					Documentation "Entity push milliseconds. Used for internal operations."
				}
				Property
				{
					Declaration "int weaponanim"
					Documentation "Player weapon animation"
				}
				Property
				{
					Declaration "float fov"
					Documentation "Player field of view"
				}
				Property
				{
					Declaration "float maxspeed"
					Documentation "Entity maximum speed"
				}
				Property
				{
					Declaration "int playerclass"
					Documentation "Entity player class. Reserved for future use."
				}
				Property
				{
					Declaration "float radsuit_finished"
					Documentation "Entity radiation suit finished. Reserved for future use."
				}
				Property
				{
					Declaration "float pain_finished"
					Documentation "Player pain finished. Time at which the player can take damage again while drowning."
				}
				Property
				{
					Declaration "float air_finished"
					Documentation "Player air finished. Time at which the player runs out of air when underwater."
				}
				Property
				{
					Declaration "float speed"
					Documentation "Entity speed"
				}
				Property
				{
					Declaration "string_t noise3"
					Documentation "Entity noise 3. Usually used to store a sound name."
				}
				Property
				{
					Declaration "string_t noise2"
					Documentation "Entity noise 2. Usually used to store a sound name."
				}
				Property
				{
					Declaration "string_t noise1"
					Documentation "Entity noise 1. Usually used to store a sound name."
				}
				Property
				{
					Declaration "string_t noise"
					Documentation "Entity noise. Usually used to store a sound name."
				}
				Property
				{
					Declaration "float dmgtime"
					Documentation "Entity damage time. Time at which this entity last took damage. Usually used to limit damage effects from being shown too often."
				}
				Property
				{
					Declaration "float dmg"
					Documentation "Entity damage. Usually stores how much damage this entity can do to other entities."
				}
				Property
				{
					Declaration "float dmg_save"
					Documentation "Entity damage save. Used for internal operations."
				}
				Property
				{
					Declaration "float dmg_take"
					Documentation "Entity damage take. Used for internal operations."
				}
				Property
				{
					Declaration "string_t message"
					Documentation "The entity message. Used for various things."
				}
				Property
				{
					Declaration "string_t netname"
					Documentation "The entity net name. Used for various things, such as the player\'s name."
				}
				Property
				{
					Declaration "string_t targetname"
					Documentation "The entity target name"
				}
				Property
				{
					Declaration "string_t target"
					Documentation "The entity target. If set, is the name of one or more targets to trigger. Otherwise, is empty."
				}
				Property
				{
					Declaration "int watertype"
					Documentation "Player only. Contains the type of water contents the player is currently in. See CONTENTS enum."
				}
				Property
				{
					Declaration "int waterlevel"
					Documentation "Entity water level\nSee WATERLEVEL enum."
				}
				Property
				{
					Declaration "float armorvalue"
					Documentation "Entity armor value"
				}
				Property
				{
					Declaration "float armortype"
					Documentation "Entity armor type. Represents maximum armor (similar to max_health)."
				}
				Property
				{
					Declaration "float teleport_time"
					Documentation "Entity teleport time. Intended for internal operations."
				}
				Property
				{
					Declaration "float max_health"
					Documentation "Entity maximum health"
				}
				Property
				{
					Declaration "int team"
					Documentation "Entity team. Reserved for future use."
				}
				Property
				{
					Declaration "int colormap"
					Documentation "Entity color map. Used for player model colors."
				}
				Property
				{
					Declaration "int flags"
					Documentation "Entity flags\nSee EdictFlags enum."
				}
				Property
				{
					Declaration "int spawnflags"
					Documentation "Entity spawn flags"
				}
				Property
				{
					Declaration "edict_t@ groundentity"
					Documentation "Entity ground entity"
				}
				Property
				{
					Declaration "edict_t@ owner"
					Documentation "Entity owner"
				}
				Property
				{
					Declaration "edict_t@ aiment"
					Documentation "Entity pointer when MOVETYPE_FOLLOW"
				}
				Property
				{
					Declaration "edict_t@ enemy"
					Documentation "Entity enemy"
				}
				Property
				{
					Declaration "edict_t@ dmg_inflictor"
					Documentation "Entity damage inflictor"
				}
				Property
				{
					Declaration "edict_t@ chain"
					Documentation "Entity pointer when linked into a linked list. Used for temporary lists."
				}
				Property
				{
					Declaration "int impulse"
					Documentation "Entity impulse bit vector. Used for various internal operations."
				}
				Property
				{
					Declaration "int button"
					Documentation "Entity button bit vector. Usually used to track which buttons the player is currently pressing."
				}
				Property
				{
					Declaration "Vector view_ofs"
					Documentation "Entity view offset. Used to set an eye offset."
				}
				Property
				{
					Declaration "int deadflag"
					Documentation "Entity dead flag\nSee DEAD enum."
				}
				Property
				{
					Declaration "float takedamage"
					Documentation "Entity take damage flag\nSee DAMAGE enum."
				}
				Property
				{
					Declaration "int weapons"
					Documentation "Entity weapons bit vector. Largely used by monsters to track which weapons they have, and by players for internal purposes."
				}
				Property
				{
					Declaration "float frags"
					Documentation "Entity frags. Usually used for the number of kills or score."
				}
				Property
				{
					Declaration "float health"
					Documentation "Entity health. Do not set directly unless you are absolutely sure you know what you are doing."
				}
				Property
				{
					Declaration "int renderfx"
					Documentation "Entity render fx"
				}
				Property
				{
					Declaration "Vector rendercolor"
					Documentation "Entity render color (rgb)"
				}
				Property
				{
					Declaration "float renderamt"
					Documentation "Entity render amount (0..255)"
				}
				Property
				{
					Declaration "int rendermode"
					Documentation "Entity render mode. See RenderModes enum."
				}
				Property
				{
					Declaration "float scale"
					Documentation "Entity rendering scale (0..255). Applies to studio and sprite models."
				}
				Property
				{
					Declaration "float framerate"
					Documentation "Entity framerate. used by entities with studio models to control sequence frame rate."
				}
				Property
				{
					Declaration "float animtime"
					Documentation "Entity animation time. Used for internal operations."
				}
				Property
				{
					Declaration "float frame"
					Documentation "Entity frame. Used by entities with studio models to set the current frame that a sequence is using. Automatically incremented.Used by brush models for animated textures: 1 for animated, 0 for off."
				}
				Property
				{
					Declaration "int gaitsequence"
					Documentation "Entity gait sequence. Used by entities with studio models for walking sequences."
				}
				Property
				{
					Declaration "int sequence"
					Documentation "Entity sequence. Used by entities with studio models to set which sequence to use."
				}
				Property
				{
					Declaration "int light_level"
					Documentation "Player only light level. This is a single value between 0 and 255 inclusive. Use g_EngineFuncs.GetEntityIllum to retrieve this value."
				}
				Property
				{
					Declaration "float friction"
					Documentation "Entity friction. Is a scalar between 0 and 1, inclusive."
				}
				Property
				{
					Declaration "float gravity"
					Documentation "Entity gravity. Is a scalar between 0 and 1, inclusive."
				}
				Property
				{
					Declaration "int effects"
					Documentation "Entity effects\nSee EFFECTS enum."
				}
				Property
				{
					Declaration "int body"
					Documentation "Entity body index. Used by entities with studio models to set which body to use."
				}
				Property
				{
					Declaration "int skin"
					Documentation "Entity skin index. Used by entities with studio models to set which skin to use."
				}
				Property
				{
					Declaration "int solid"
					Documentation "Entity solid flag\nSee SOLID enum."
				}
				Property
				{
					Declaration "int movetype"
					Documentation "Entity movetype\nSee MOVETYPE enum."
				}
				Property
				{
					Declaration "float nextthink"
					Documentation "Entity next think time. The next time this entity will execute its think function, as an absolute time value. Otherwise, is 0."
				}
				Property
				{
					Declaration "float ltime"
					Documentation "Entity ltime. The last time this entity has executed its think function. Otherwise, is 0."
				}
				Property
				{
					Declaration "Vector size"
					Documentation "Entity size. Equivalent to maxs - mins"
				}
				Property
				{
					Declaration "Vector maxs"
					Documentation "Entity maximum size. Relative to the player\'s origin."
				}
				Property
				{
					Declaration "Vector mins"
					Documentation "Entity minimum size. Relative to the player\'s origin."
				}
				Property
				{
					Declaration "Vector absmax"
					Documentation "Entity absolute maximum size. Is an absolute position in the world. Automatically updated by the engine."
				}
				Property
				{
					Declaration "Vector absmin"
					Documentation "Entity absolute minimum size. Is an absolute position in the world. Automatically updated by the engine."
				}
				Property
				{
					Declaration "string_t weaponmodel"
					Documentation "Entity weapon model index. If this player has a visible weapon, is the name of that third person (p_) model. Otherwise, is an empty string."
				}
				Property
				{
					Declaration "string_t viewmodel"
					Documentation "Player view model index. If this player has a visible weapon, is the name of that view (v_) model. Otherwise, is an empty string."
				}
				Property
				{
					Declaration "string_t model"
					Documentation "The entity model name. If this entity has a model, is the name of that model. Otherwise, is an empty string.Use g_EntityFuncs.SetModel to set this variable."
				}
				Property
				{
					Declaration "const int modelindex"
					Documentation "Entity model index. If this entity has a model, is the unique index of the model. Otherwise, is 0."
				}
				Property
				{
					Declaration "float yaw_speed"
					Documentation "Entity yaw speed. See ideal_yaw."
				}
				Property
				{
					Declaration "float ideal_yaw"
					Documentation "Entity ideal yaw. Used in conjunction with yaw_speed to interpolate the entity\'s current yaw angle to this value."
				}
				Property
				{
					Declaration "float pitch_speed"
					Documentation "Entity pitch speed. See idealpitch."
				}
				Property
				{
					Declaration "float idealpitch"
					Documentation "Entity ideal pitch. Used in conjunction with pitch_speed to interpolate the entity\'s current pitch angle to this value."
				}
				Property
				{
					Declaration "int fixangle"
					Documentation "Entity fix angle. Engine uses this value to change player view angles, and then resets it to FAM_NOTHING. See FixAngleMode enum."
				}
				Property
				{
					Declaration "float starttime"
					Documentation "Entity start time. Reserved for future use."
				}
				Property
				{
					Declaration "float impacttime"
					Documentation "Entity impact time. Reserved for future use."
				}
				Property
				{
					Declaration "Vector startpos"
					Documentation "Entity start position. Reserved for future use."
				}
				Property
				{
					Declaration "Vector endpos"
					Documentation "Entity end position. Reserved for future use."
				}
				Property
				{
					Declaration "Vector v_angle"
					Documentation "Player view angle. These are the angles used for the player\'s view, and differ from the regular angles variable."
				}
				Property
				{
					Declaration "Vector punchangle"
					Documentation "Player punch angle. These angles are applied to players when they are \'punched\'.These angles are automatically interpolated back to the null vector over time."
				}
				Property
				{
					Declaration "Vector avelocity"
					Documentation "Entity angular velocity, in degrees/sec. Applied to the entity\'s angles."
				}
				Property
				{
					Declaration "Vector angles"
					Documentation "Entity angles, in degrees."
				}
				Property
				{
					Declaration "Vector movedir"
					Documentation "Entity move direction. Used by some entities for movement directions, but some entities use it for other purposes."
				}
				Property
				{
					Declaration "Vector basevelocity"
					Documentation "Entity base velocity. Used when standing on another entity that applies velocity to entities standing on it, for instance conveyors."
				}
				Property
				{
					Declaration "Vector velocity"
					Documentation "Entity velocity"
				}
				Property
				{
					Declaration "Vector oldorigin"
					Documentation "Old entity origin. Used by some entities to store off their original origin before moving to a different location."
				}
				Property
				{
					Declaration "Vector origin"
					Documentation "Entity origin. Must be set using g_EntityFuncs.SetOrigin."
				}
				Property
				{
					Declaration "string_t globalname"
					Documentation "The entity global name"
				}
				Property
				{
					Declaration "const string_t classname"
					Documentation "The entity class name"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName edict_t
			Documentation "Entity dictionary structure"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "int16 get_leafnums(uint)"
					Documentation "get leafnums"
				}
			}
			Properties
			{
				Property
				{
					Declaration "entvars_t vars"
					Documentation "Entity variables instance"
				}
				Property
				{
					Declaration "const float freetime"
					Documentation "When this edict was last freed"
				}
				Property
				{
					Declaration "const int num_leafs"
					Documentation "Number of leafs"
				}
				Property
				{
					Declaration "const int headnode"
					Documentation "Head node"
				}
				Property
				{
					Declaration "const int serialnumber"
					Documentation "Serial number"
				}
				Property
				{
					Declaration "const int free"
					Documentation "Flag telling whether this edict is free"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CMath
			Documentation "Math functions"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "bool Compare(double flLhs, double flRhs, double flEpsilon) const"
					Documentation "Compares the given floating point variables and returns whether they are equal, considering certain variance (epsilon) between them."
				}
				Method
				{
					Declaration "bool Compare(float flLhs, float flRhs, float flEpsilon) const"
					Documentation "Compares the given floating point variables and returns whether they are equal, considering certain variance (epsilon) between them."
				}
				Method
				{
					Declaration "float RadiansToDegrees(float flRadians) const"
					Documentation "Returns the given value in radians as degrees"
				}
				Method
				{
					Declaration "float DegreesToRadians(float flDegrees) const"
					Documentation "Returns the given value in degrees as radians"
				}
				Method
				{
					Declaration "float Ceil(float flValue) const"
					Documentation "Returns the float value, rounded up to the nearest whole number"
				}
				Method
				{
					Declaration "float Floor(float flValue) const"
					Documentation "Returns the float value, rounded down to the nearest whole number"
				}
				Method
				{
					Declaration "float clamp(float min, float max, float value) const"
					Documentation "Clamps a value between a range"
				}
				Method
				{
					Declaration "int clamp(int min, int max, int value) const"
					Documentation "Clamps a value between a range"
				}
				Method
				{
					Declaration "float max(float lhs, float rhs) const"
					Documentation "Returns the larger of the two values"
				}
				Method
				{
					Declaration "int64 max(int64 lhs, int64 rhs) const"
					Documentation "Returns the larger of the two values"
				}
				Method
				{
					Declaration "uint64 max(uint64 lhs, uint64 rhs) const"
					Documentation "Returns the larger of the two values"
				}
				Method
				{
					Declaration "float min(float lhs, float rhs) const"
					Documentation "Returns the smaller of the two values"
				}
				Method
				{
					Declaration "int64 min(int64 lhs, int64 rhs) const"
					Documentation "Returns the smaller of the two values"
				}
				Method
				{
					Declaration "uint64 min(uint64 lhs, uint64 rhs) const"
					Documentation "Returns the smaller of the two values"
				}
				Method
				{
					Declaration "float AngleDistance(float flNext, float flCur)"
					Documentation "Returns the distance between 2 angles"
				}
				Method
				{
					Declaration "float ApproachAngle(float target, float value, float speed)"
					Documentation "Given a target and current angle value, and a rotation speed, all in degrees, returns a new angle that is either between value and target, or target, depending on whether the speed is high enough to reach that angle."
				}
				Method
				{
					Declaration "float AngleDiff(float flDestAngle, float flSrcAngle)"
					Documentation "Returns the difference between 2 angles"
				}
				Method
				{
					Declaration "float AngleMod(float flAngle)"
					Documentation "Clamps the given angle between 0 and 360"
				}
				Method
				{
					Declaration "Vector VecToAngles(const Vector& in vec)"
					Documentation "Transforms a vector to an angle"
				}
				Method
				{
					Declaration "float VecToYaw(const Vector& in vec)"
					Documentation "Transforms a vector to a yaw value"
				}
				Method
				{
					Declaration "void MakeInvVectors(const Vector& in vecAngles)"
					Documentation "Make inverted vectors"
				}
				Method
				{
					Declaration "void MakeAimVectors(const Vector& in vecAngles)"
					Documentation "Make aim vectors"
				}
				Method
				{
					Declaration "Vector RotateVector(Vector& in vecToRotate,const Vector& in vecAngles, const Vector& in vecOffset)"
					Documentation "Rotate vector"
				}
				Method
				{
					Declaration "void MakeVectors(const Vector& in vecAngles)"
					Documentation "Makes vectors"
				}
				Method
				{
					Declaration "float RandomFloat(float low, float high)"
					Documentation "Returns a random float between low and high"
				}
				Method
				{
					Declaration "int32 RandomLong(int32 low, int32 high)"
					Documentation "Returns a random integer between low and high"
				}
			}
			Properties
			{
				Property
				{
					Declaration "const double PI"
					Documentation PI
				}
				Property
				{
					Declaration "const double DOUBLE_MAX"
					Documentation "Double maximum positive value"
				}
				Property
				{
					Declaration "const float FLOAT_MAX"
					Documentation "Float maximum positive value"
				}
				Property
				{
					Declaration "const double DOUBLE_MIN"
					Documentation "Double minimum positive value"
				}
				Property
				{
					Declaration "const float FLOAT_MIN"
					Documentation "Float minimum positive value"
				}
				Property
				{
					Declaration "const size_t SIZE_MAX"
					Documentation "Size_t maximum value"
				}
				Property
				{
					Declaration "const uint64 UINT64_MAX"
					Documentation "Uint64 maximum value"
				}
				Property
				{
					Declaration "const uint32 UINT32_MAX"
					Documentation "Uint32 maximum value"
				}
				Property
				{
					Declaration "const uint16 UINT16_MAX"
					Documentation "Uint16 maximum value"
				}
				Property
				{
					Declaration "const uint8 UINT8_MAX"
					Documentation "Uint8 maximum value"
				}
				Property
				{
					Declaration "const int64 INT64_MAX"
					Documentation "Int64 maximum value"
				}
				Property
				{
					Declaration "const int32 INT32_MAX"
					Documentation "Int32 maximum value"
				}
				Property
				{
					Declaration "const int16 INT16_MAX"
					Documentation "Int16 maximum value"
				}
				Property
				{
					Declaration "const int8 INT8_MAX"
					Documentation "Int8 maximum value"
				}
				Property
				{
					Declaration "const int64 INT64_MIN"
					Documentation "Int64 minimum value"
				}
				Property
				{
					Declaration "const int32 INT32_MIN"
					Documentation "Int32 minimum value"
				}
				Property
				{
					Declaration "const int16 INT16_MIN"
					Documentation "Int16 minimum value"
				}
				Property
				{
					Declaration "const int8 INT8_MIN"
					Documentation "Int8 minimum value"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName Vector
			Documentation "3D Vector"
			Flags 135938
			Methods
			{
				Method
				{
					Declaration "string ToString() const"
					Documentation "Returns a string representation of this vector"
				}
				Method
				{
					Declaration "Vector2D Make2D() const"
					Documentation "Returns the 2D form of this vector"
				}
				Method
				{
					Declaration "Vector Normalize() const"
					Documentation "Returns the normalized form of this vector"
				}
				Method
				{
					Declaration "float Length2D() const"
					Documentation "Gets the length of this vector in 2D"
				}
				Method
				{
					Declaration "float Length() const"
					Documentation "Gets the length of this vector"
				}
				Method
				{
					Declaration "Vector opDiv(const Vector& in other) const"
					Documentation "Divide vectors"
				}
				Method
				{
					Declaration "Vector opMul(const Vector& in other) const"
					Documentation "Multiply vectors"
				}
				Method
				{
					Declaration "bool opEquals(const Vector& in other) const"
					Documentation "Compare vectors"
				}
				Method
				{
					Declaration "float opIndex(size_t uiIndex) const"
					Documentation "Index operator"
				}
				Method
				{
					Declaration "float& opIndex(size_t uiIndex)"
					Documentation "Index operator"
				}
				Method
				{
					Declaration "Vector opDiv_r(float fl) const"
					Documentation "Divide vector by value"
				}
				Method
				{
					Declaration "Vector opDiv(float fl) const"
					Documentation "Divide vector by value"
				}
				Method
				{
					Declaration "Vector opMul_r(float fl) const"
					Documentation "Multiply vector by value"
				}
				Method
				{
					Declaration "Vector opMul(float fl) const"
					Documentation "Multiply vector by value"
				}
				Method
				{
					Declaration "Vector opSub(const Vector& in other) const"
					Documentation "Subtract vectors"
				}
				Method
				{
					Declaration "Vector opAdd(const Vector& in other) const"
					Documentation "Add vectors"
				}
				Method
				{
					Declaration "Vector opNeg() const"
					Documentation "Negate vector"
				}
				Method
				{
					Declaration "Vector& opAssign(const Vector& in other)"
					Documentation "Assign vector"
				}
				Method
				{
					Declaration "void Vector(float x, float y, float z)"
					Documentation "Constructs a 3D vector from 3 floats"
				}
				Method
				{
					Declaration "void Vector(const Vector& in vec)"
					Documentation "Copy constructs a 3D vector"
				}
				Method
				{
					Declaration "void Vector()"
					Documentation "Default constructs a 3D vector (0, 0, 0)"
				}
			}
			Properties
			{
				Property
				{
					Declaration "float z"
					Documentation "Vector z variable"
				}
				Property
				{
					Declaration "float y"
					Documentation "Vector y variable"
				}
				Property
				{
					Declaration "float x"
					Documentation "Vector x variable"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName Vector2D
			Documentation "2D Vector"
			Flags 131842
			Methods
			{
				Method
				{
					Declaration "string ToString() const"
					Documentation "Returns a string representation of this vector"
				}
				Method
				{
					Declaration "Vector2D Normalize() const"
					Documentation "Returns the normalized form of this vector"
				}
				Method
				{
					Declaration "float Length() const"
					Documentation "Gets the length of this vector"
				}
				Method
				{
					Declaration "bool opEquals(const Vector2D& in other) const"
					Documentation "Compare vectors"
				}
				Method
				{
					Declaration "Vector2D opDiv_r(float fl) const"
					Documentation "Divide vector by a value"
				}
				Method
				{
					Declaration "Vector2D opDiv(float fl) const"
					Documentation "Divide vector by a value"
				}
				Method
				{
					Declaration "Vector2D opMul_r(float fl) const"
					Documentation "Multiply vector by a value"
				}
				Method
				{
					Declaration "Vector2D opMul(float fl) const"
					Documentation "Multiply vector by a value"
				}
				Method
				{
					Declaration "Vector2D opSub(const Vector2D& in other) const"
					Documentation "Subtract vectors"
				}
				Method
				{
					Declaration "Vector2D opAdd(const Vector2D& in other) const"
					Documentation "Add vectors"
				}
				Method
				{
					Declaration "Vector2D& opAssign(const Vector2D& in other)"
					Documentation "Assign vector"
				}
				Method
				{
					Declaration "void Vector2D(float x, float y)"
					Documentation "Constructs a 2D vector from 2 floats"
				}
				Method
				{
					Declaration "void Vector2D(const Vector2D& in other)"
					Documentation "Copy constructs a 2D vector"
				}
				Method
				{
					Declaration "void Vector2D()"
					Documentation "Default constructs a 2D vector (0, 0)"
				}
			}
			Properties
			{
				Property
				{
					Declaration "float y"
					Documentation "Vector2D y variable"
				}
				Property
				{
					Declaration "float x"
					Documentation "Vector2D x variable"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CDebugger
			Documentation Debugger
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void OutputStatistics()"
					Documentation "Output statistics."
				}
				Method
				{
					Declaration "void OutputMembers()"
					Documentation "Output member variables."
				}
				Method
				{
					Declaration "void OutputGlobals()"
					Documentation "Output global variables."
				}
				Method
				{
					Declaration "void OutputLocals()"
					Documentation "Output local variables."
				}
				Method
				{
					Declaration "uint32 GetCurrentStackLevel() const"
					Documentation "Gets the current stack level."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CScheduler
			Documentation "Scheduler for calling functions.\nSupports up to 8 parameters for function or method calls."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void ClearTimerList()"
					Documentation "Removes all queued functions from the list of functions to call."
				}
				Method
				{
					Declaration "CScheduledFunction@ GetCurrentFunction() const"
					Documentation "Returns the function currently being executed, if any."
				}
				Method
				{
					Declaration "void RemoveTimer(CScheduledFunction@ pFunction)"
					Documentation "Removes the given function from the list of functions to call."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(?& in thisObject, const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nCalls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(?& in thisObject, const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nCalls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(?& in thisObject, const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nCalls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(?& in thisObject, const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nCalls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(?& in thisObject, const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nCalls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(?& in thisObject, const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nCalls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(?& in thisObject, const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nCalls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(?& in thisObject, const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nCalls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(?& in thisObject, const string& in szFunction, float flRepeatTime, int iRepeatCount)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nCalls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES)."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES)."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES)."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES)."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES)."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES)."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES)."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(const string& in szFunction, float flRepeatTime, int iRepeatCount, ?& in)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES)."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(const string& in szFunction, float flRepeatTime, int iRepeatCount)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES)."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(?& in thisObject, const string& in szFunction, float flRepeatTime)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nThe given function is called an infinite number of times.\nCalls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetInterval(const string& in szFunction, float flRepeatTime)"
					Documentation "Adds a timer that calls the given function every flRepeatTime seconds,\nfor iRepeatCount times (or infinite times if REPEAT_INFINITE_TIMES).\nThe given function is called an infinite number of times."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(?& in thisObject, const string& in szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds. Calls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(?& in thisObject, const string& in szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds. Calls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(?& in thisObject, const string& in szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds. Calls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(?& in thisObject, const string& in szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds. Calls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(?& in thisObject, const string& in szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds. Calls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(?& in thisObject, const string& in szFunction, float flDelay, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds. Calls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(?& in thisObject, const string& in szFunction, float flDelay, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds. Calls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(?& in thisObject, const string& in szFunction, float flDelay, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds. Calls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(?& in thisObject, const string& in szFunction, float flDelay)"
					Documentation "Adds a timer that calls the given function after flDelay seconds. Calls object methods."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(const string& in szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(const string& in szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(const string& in szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(const string& in szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(const string& in szFunction, float flDelay, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(const string& in szFunction, float flDelay, ?& in, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(const string& in szFunction, float flDelay, ?& in, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(const string& in szFunction, float flDelay, ?& in)"
					Documentation "Adds a timer that calls the given function after flDelay seconds."
				}
				Method
				{
					Declaration "CScheduledFunction@ SetTimeout(const string& in szFunction, float flDelay)"
					Documentation "Adds a timer that calls the given function after flDelay seconds."
				}
			}
			Properties
			{
				Property
				{
					Declaration "const int REPEAT_INFINITE_TIMES"
					Documentation "If passed to AddTimer, causes the given function to be called infinite times"
				}
			}
		}
		Class
		{
			Namespace ""
			ClassName CScheduledFunction
			Documentation "Handle to a scheduled function"
			Flags 1
			Methods
			{
				Method
				{
					Declaration "bool HasBeenRemoved() const"
					Documentation "Returns whether this function has been removed from the scheduler or not"
				}
				Method
				{
					Declaration "void MakeInfiniteRepeat()"
					Documentation "Makes this an infinite repeat function"
				}
				Method
				{
					Declaration "void SetRepeatCount(const int iRepeatCount)"
					Documentation "Sets the repeat count. Must be a positive value (may be zero) or REPEAT_INFINITE_TIMES"
				}
				Method
				{
					Declaration "bool IsInfiniteRepeat() const"
					Documentation "Returns whether this function repeats infinitely"
				}
				Method
				{
					Declaration "int GetRepeatCount() const"
					Documentation "Gets the repeat count"
				}
				Method
				{
					Declaration "void SetRepeatTime(const float flRepeatTime)"
					Documentation "Sets the repeat time, in seconds. Must be a positive value (may be zero)"
				}
				Method
				{
					Declaration "float GetRepeatTime() const"
					Documentation "Gets the repeat time, in seconds"
				}
				Method
				{
					Declaration "void SetNextCallTime(const float flNextCallTime)"
					Documentation "Sets the next call time, in seconds. Is an absolute value (g_Engine.time + RepeatTime by default).Times in the past will result in a call on the next frame."
				}
				Method
				{
					Declaration "float GetNextCallTime() const"
					Documentation "Gets the next call time, in seconds"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName CVirtualFileSystem
			Documentation "Virtual File System"
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "void RemoveFile(const string& in szFilename)"
					Documentation "Removes a file."
				}
				Method
				{
					Declaration "File@ OpenFile(const string& in szFilename, const OpenFileFlags_t uiOpenFlags)"
					Documentation "Opens a file. Returns nullptr if the file could not be opened."
				}
				Method
				{
					Declaration "const FileQuota@ GetFileQuota() const"
					Documentation "Gets the file system quota object. Do not store a handle to this object, as it may be replaced at any time."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName FileQuota
			Documentation "Represents a quota that filesystems adhere to when handling write operations."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "size_t SizeLeftAfterWrite(size_t uiSizeInBytes) const"
					Documentation "Returns the size that is left after the given amount of bytes have been written."
				}
				Method
				{
					Declaration "bool CanWriteAmount(size_t uiSizeInBytes) const"
					Documentation "Returns whether the given amount of bytes can be written."
				}
				Method
				{
					Declaration "size_t GetSizeLeft() const"
					Documentation "Gets the amount of size, in bytes, left that can be written to."
				}
				Method
				{
					Declaration "size_t GetSizeInUse() const"
					Documentation "Gets the size, in bytes, that is in use."
				}
				Method
				{
					Declaration "size_t GetTotalSize() const"
					Documentation "Gets the total size, in bytes, that is allowed to be used by filesystems using this quota object."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName File
			Documentation "File class.\nIs used to read from/write to files in disk."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "void Write(const BLOB@ pBlob)"
					Documentation "Writes a blob to the file."
				}
				Method
				{
					Declaration "void Write(const string& in szString)"
					Documentation "Writes a string to the file."
				}
				Method
				{
					Declaration "BLOB@ ReadBlob()"
					Documentation "Reads as much as possible data into a BLOB."
				}
				Method
				{
					Declaration "BLOB@ ReadBlob(size_t uiSizeInBytes, bool fCanResize = true)"
					Documentation "Reads a number of bytes into a BLOB."
				}
				Method
				{
					Declaration "bool Read(BLOB@ pBlob)"
					Documentation "Reads as much as possible data into the given BLOB."
				}
				Method
				{
					Declaration "bool Read(BLOB@ pBlob, size_t uiSizeInBytes)"
					Documentation "Reads a number of bytes into the given BLOB."
				}
				Method
				{
					Declaration "void ReadLine(string& out szOutLine, const string& in szDelim = \'\n\')"
					Documentation "Reads a line from the file."
				}
				Method
				{
					Declaration "string ReadCharacter()"
					Documentation "Reads a single character."
				}
				Method
				{
					Declaration "bool EOFReached() const"
					Documentation "Returns whether end of file was reached."
				}
				Method
				{
					Declaration "size_t Seek(const size_t uiPosition, const SeekFileFlags_t uiSeekMode)"
					Documentation "Sets the read/write pointer to a new position. Returns the new position within the file."
				}
				Method
				{
					Declaration "size_t Tell() const"
					Documentation "Tells the position of the read/write pointer."
				}
				Method
				{
					Declaration "size_t GetSize() const"
					Documentation "Returns the size of the file."
				}
				Method
				{
					Declaration "void Remove()"
					Documentation "Removes the file. The file must be open, and you must have write access."
				}
				Method
				{
					Declaration "void Close()"
					Documentation "Closes the file if it is open."
				}
				Method
				{
					Declaration "bool IsOpen() const"
					Documentation "Returns whether the file was successfully opened."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName BLOB
			Documentation "Binary Large OBject class used for storing arbitrary amounts of binary data."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "void Clear()"
					Documentation "Clears this BLOB of all data and allocated memory. All flags are reset to their default values."
				}
				Method
				{
					Declaration "void ShrinkToFit()"
					Documentation "Shrinks this BLOB to fit the data that was written to it."
				}
				Method
				{
					Declaration "void Reserve(size_t uiMinimumSize)"
					Documentation "Reserves the given amount of space, if needed."
				}
				Method
				{
					Declaration "void Resize(size_t uiNewSize)"
					Documentation "Resizes this BLOB. Data may be lost because of this."
				}
				Method
				{
					Declaration "bool Write(const string& in szString)"
					Documentation "Writes a variable length string to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(const string& in szString, size_t uiSizeInBytes)"
					Documentation "Writes a fixed length string to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(double data)"
					Documentation "Writes a double to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(float data)"
					Documentation "Writes a float to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(uint64 data)"
					Documentation "Writes a uint64 to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(uint32 data)"
					Documentation "Writes a uint32 to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(uint16 data)"
					Documentation "Writes a uint16 to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(uint8 data)"
					Documentation "Writes a uint8 to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(int64 data)"
					Documentation "Writes an int64 to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(int32 data)"
					Documentation "Writes an int32 to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(int16 data)"
					Documentation "Writes an int16 to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool Write(int8 data)"
					Documentation "Writes an int8 to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool WriteBytesUntil(size_t uiEndOffset, int iValue = 0)"
					Documentation "Writes a given value until the given end offset to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "bool WriteBytes(size_t uiSizeInBytes, int iValue = 0)"
					Documentation "Writes a given value a number of bytes to this BLOB. Returns true if the write succeeded."
				}
				Method
				{
					Declaration "string ReadString()"
					Documentation "Reads a variable length string from this BLOB."
				}
				Method
				{
					Declaration "string ReadString(bool& out fSuccess)"
					Documentation "Reads a variable length string from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "string ReadString(size_t uiSizeInBytes, bool& out fSuccess)"
					Documentation "Reads a fixed length string from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "string ReadString(size_t uiSizeInBytes)"
					Documentation "Reads a fixed length string from this BLOB."
				}
				Method
				{
					Declaration "double ReadDouble(bool& out fSuccess)"
					Documentation "Reads a double from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "float ReadFloat(bool& out fSuccess)"
					Documentation "Reads a float from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "int64 ReadUInt64(bool& out fSuccess)"
					Documentation "Reads a uint64 from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "int32 ReadUInt32(bool& out fSuccess)"
					Documentation "Reads a uint32 from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "int16 ReadUInt16(bool& out fSuccess)"
					Documentation "Reads a uint16 from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "uint8 ReadUInt8(bool& out fSuccess)"
					Documentation "Reads a uint8 from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "int64 ReadInt64(bool& out fSuccess)"
					Documentation "Reads an int64 from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "int32 ReadInt32(bool& out fSuccess)"
					Documentation "Reads an int32 from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "int16 ReadInt16(bool& out fSuccess)"
					Documentation "Reads an int16 from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "int8 ReadInt8(bool& out fSuccess)"
					Documentation "Reads an int8 from this BLOB. fSuccess is true if the read succeeded."
				}
				Method
				{
					Declaration "double ReadDouble()"
					Documentation "Reads a double from this BLOB."
				}
				Method
				{
					Declaration "float ReadFloat()"
					Documentation "Reads a float from this BLOB."
				}
				Method
				{
					Declaration "int64 ReadUInt64()"
					Documentation "Reads a uint64 from this BLOB."
				}
				Method
				{
					Declaration "int32 ReadUInt32()"
					Documentation "Reads a uint32 from this BLOB."
				}
				Method
				{
					Declaration "int16 ReadUInt16()"
					Documentation "Reads a uint16 from this BLOB."
				}
				Method
				{
					Declaration "uint8 ReadUInt8()"
					Documentation "Reads a uint8 from this BLOB."
				}
				Method
				{
					Declaration "int64 ReadInt64()"
					Documentation "Reads an int64 from this BLOB."
				}
				Method
				{
					Declaration "int32 ReadInt32()"
					Documentation "Reads an int32 from this BLOB."
				}
				Method
				{
					Declaration "int16 ReadInt16()"
					Documentation "Reads an int16 from this BLOB."
				}
				Method
				{
					Declaration "int8 ReadInt8()"
					Documentation "Reads an int8 from this BLOB."
				}
				Method
				{
					Declaration "void SetCanResize(bool fState)"
					Documentation "Sets whether this BLOB is allowed to resize its buffer."
				}
				Method
				{
					Declaration "bool CanResize() const"
					Documentation "Returns whether this BLOB is allowed to resize its buffer."
				}
				Method
				{
					Declaration "size_t GetWriteBytesLeft() const"
					Documentation "Gets the number of bytes left that can be written to. This may change if a write operation causes the buffer to be resized."
				}
				Method
				{
					Declaration "bool CanWriteSize(size_t uiSizeInBytes) const"
					Documentation "Returns whether the given amount of bytes can be written to this BLOB."
				}
				Method
				{
					Declaration "size_t GetWriteOffset() const"
					Documentation "Gets the write offset, in bytes. This is the number of bytes written to this buffer."
				}
				Method
				{
					Declaration "bool ReadSizeValid(size_t uiSizeInBytes) const"
					Documentation "Returns whether the given amount of bytes can be read from this BLOB."
				}
				Method
				{
					Declaration "bool ReadReachedEnd() const"
					Documentation "Returns whether the last read operation reached the end of data that was written to this BLOB."
				}
				Method
				{
					Declaration "size_t GetReadOffset() const"
					Documentation "Gets the read offset, in bytes."
				}
				Method
				{
					Declaration "size_t GetSizeInBytes() const"
					Documentation "Gets the size of this BLOB, in bytes."
				}
				Method
				{
					Declaration "bool HasAllocatedBuffer() const"
					Documentation "Returns whether this instance has allocated a buffer."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace Regex
			ClassName MatchResults
			Documentation "Regular expression match results"
			Flags 1
			Methods
			{
				Method
				{
					Declaration "void Swap(MatchResults@ other)"
					Documentation "Swaps these match results with the given results."
				}
				Method
				{
					Declaration "string Format(const string& in szFormat, MatchFlagType flags = Regex::match_default) const"
					Documentation "Gets the length of the given submatch"
				}
				Method
				{
					Declaration "string GetString(size_t uiIndex = 0) const"
					Documentation "Gets the given submatch as a string"
				}
				Method
				{
					Declaration "int GetPosition(size_t uiIndex = 0) const"
					Documentation "Gets the position of the given submatch"
				}
				Method
				{
					Declaration "int GetLength(size_t uiIndex = 0) const"
					Documentation "Gets the length of the given submatch"
				}
				Method
				{
					Declaration "SubMatch GetSuffix() const"
					Documentation "Gets the suffix submatch"
				}
				Method
				{
					Declaration "SubMatch GetPrefix() const"
					Documentation "Gets the prefix submatch"
				}
				Method
				{
					Declaration "SubMatch opIndex(size_t uiIndex) const"
					Documentation "Returns the sub match object at the given index"
				}
				Method
				{
					Declaration "size_t GetMaxSize() const"
					Documentation "Returns the maximum size"
				}
				Method
				{
					Declaration "size_t GetSize() const"
					Documentation "Returns the number of matches"
				}
				Method
				{
					Declaration "bool IsEmpty() const"
					Documentation "Returns whether this match results object is empty or not"
				}
				Method
				{
					Declaration "MatchResults@ MatchResults(const MatchResults@ pOther)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "MatchResults@ MatchResults()"
					Documentation Constructor
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace Regex
			ClassName SubMatch
			Documentation "Regular expression submatch"
			Flags 5378
			Methods
			{
				Method
				{
					Declaration "int Compare(const string& in szString) const"
					Documentation "Compares this submatch to a string"
				}
				Method
				{
					Declaration "int Compare(const SubMatch& in other) const"
					Documentation "Compares this submatch to another"
				}
				Method
				{
					Declaration "string GetString() const"
					Documentation "Gets this submatch as a string"
				}
				Method
				{
					Declaration "int GetLength() const"
					Documentation "Gets the length of the submatch"
				}
				Method
				{
					Declaration "void SubMatch(const SubMatch& in other)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "void SubMatch()"
					Documentation "Constructor. Do not use."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace Regex
			ClassName Regex
			Documentation "Represents a regular expression"
			Flags 1
			Methods
			{
				Method
				{
					Declaration "void Swap(Regex@ other)"
					Documentation "Swaps this regular expression\'s contents with the given expression"
				}
				Method
				{
					Declaration "FlagType GetFlags() const"
					Documentation "Gets this regex\'s flags"
				}
				Method
				{
					Declaration "uint GetMarkCount() const"
					Documentation "Gets the mark count"
				}
				Method
				{
					Declaration "Regex& Assign(const string& in szExpression, FlagType flags = Regex::ECMAScript)"
					Documentation "Assigns the given regular expression to this one."
				}
				Method
				{
					Declaration "Regex& Assign(const Regex@ pOther)"
					Documentation "Assigns the given regular expression to this one."
				}
				Method
				{
					Declaration "Regex@ Regex(const string& in szExpression, FlagType flags = Regex::ECMAScript)"
					Documentation "Initialization Constructor"
				}
				Method
				{
					Declaration "Regex@ Regex(const Regex@ pOther)"
					Documentation "Copy Constructor"
				}
				Method
				{
					Declaration "Regex@ Regex()"
					Documentation "Default Constructor"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace Reflection
			ClassName CReflection
			Documentation "Reflection global used for generial purpose needs."
			Flags 262145
			Methods
			{
			}
			Properties
			{
				Property
				{
					Declaration "IReflectionGroup Module"
					Documentation "Module group"
				}
				Property
				{
					Declaration "IReflectionGroup Engine"
					Documentation "Engine group"
				}
			}
		}
		Class
		{
			Namespace Reflection
			ClassName IReflectionGroup
			Documentation "Reflection group. Represents a group of reflectable objects."
			Flags 262145
			Methods
			{
				Method
				{
					Declaration "ObjectType@ GetObjectTypeByIndex(uint uiIndex) const"
					Documentation "Gets the object type at the given index."
				}
				Method
				{
					Declaration "uint GetObjectTypeCount() const"
					Documentation "Gets the number of object types."
				}
				Method
				{
					Declaration "ObjectType@ FindObjectType(const string& in szName, bool fSearchByDecl = false)"
					Documentation "Finds an object type. Searches by name by default, searches by declaration if fSearchByDecl is set to true."
				}
				Method
				{
					Declaration "Function@ GetGlobalFunctionByIndex(uint uiIndex)"
					Documentation "Gets the global function at the given index."
				}
				Method
				{
					Declaration "uint GetGlobalFunctionCount() const"
					Documentation "Gets the number of global functions."
				}
				Method
				{
					Declaration "Function@ FindGlobalFunction(const string& in szName, bool fSearchByDecl = false)"
					Documentation "Finds a global function. Searches by name by default, searches by declaration if fSearchByDecl is set to true."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace Reflection
			ClassName ObjectType
			Documentation "Represents an object type"
			Flags 1
			Methods
			{
				Method
				{
					Declaration "bool DerivesFrom(const ObjectType@ pObjectType) const"
					Documentation "Returns whether this object derives from the given type."
				}
				Method
				{
					Declaration "bool DerivesFrom(const string& in szName) const"
					Documentation "Returns whether this object derives from the given type."
				}
				Method
				{
					Declaration "bool IsCompatible(const ObjectType@ pObjectType) const"
					Documentation "Returns whether the given object type is compatible with this one."
				}
				Method
				{
					Declaration "bool Equals(const ObjectType@ pObjectType) const"
					Documentation "Returns whether the given object type is identical to this one."
				}
				Method
				{
					Declaration "bool MethodExists(const string& in szFunctionSignature)"
					Documentation "Gets a method by declaration."
				}
				Method
				{
					Declaration "Method@ GetMethod(const string& in szFunctionSignature)"
					Documentation "Gets a method by declaration."
				}
				Method
				{
					Declaration "Method@ GetMethodByIndex(uint uiIndex) const"
					Documentation "Gets the method at the given index."
				}
				Method
				{
					Declaration "uint GetMethodCount() const"
					Documentation "Gets the number of methods this object type has."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace Reflection
			ClassName Method
			Documentation "Reflection method class. Can be used to call object methods."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Calls this method."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Calls this method."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Calls this method."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Calls this method."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Calls this method."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in thisObject, ?& in, ?& in, ?& in)"
					Documentation "Calls this method."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in thisObject, ?& in, ?& in)"
					Documentation "Calls this method."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in thisObject, ?& in)"
					Documentation "Calls this method."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in thisObject)"
					Documentation "Calls this method."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in thisObject, Arguments@ pArguments)"
					Documentation "Calls this method. pArguments must be valid."
				}
				Method
				{
					Declaration "bool IsCompatible(const Callable@ pCallable) const"
					Documentation "Returns whether the given object type is compatible with this one."
				}
				Method
				{
					Declaration "bool Equals(const Callable@ pCallable) const"
					Documentation "Returns whether the given callable type is identical to this one."
				}
				Method
				{
					Declaration "string GetName() const"
					Documentation "Gets this instance\'s name."
				}
				Method
				{
					Declaration "string GetNamespace() const"
					Documentation "Gets this instance\'s namespace."
				}
				Method
				{
					Declaration "Callable@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace Reflection
			ClassName Function
			Documentation "Reflection function class. Can be used to call global functions."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Calls this function."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Calls this function."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Calls this function."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Calls this function."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in, ?& in, ?& in, ?& in)"
					Documentation "Calls this function."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in, ?& in, ?& in)"
					Documentation "Calls this function."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in, ?& in)"
					Documentation "Calls this function."
				}
				Method
				{
					Declaration "ReturnValue@ Call(?& in)"
					Documentation "Calls this function."
				}
				Method
				{
					Declaration "ReturnValue@ Call()"
					Documentation "Calls this function."
				}
				Method
				{
					Declaration "ReturnValue@ Call(Arguments@ pArguments)"
					Documentation "Calls this function. pArguments must be valid."
				}
				Method
				{
					Declaration "bool IsCompatible(const Callable@ pCallable) const"
					Documentation "Returns whether the given object type is compatible with this one."
				}
				Method
				{
					Declaration "bool Equals(const Callable@ pCallable) const"
					Documentation "Returns whether the given callable type is identical to this one."
				}
				Method
				{
					Declaration "string GetName() const"
					Documentation "Gets this instance\'s name."
				}
				Method
				{
					Declaration "string GetNamespace() const"
					Documentation "Gets this instance\'s namespace."
				}
				Method
				{
					Declaration "Callable@ opImplCast()"
					Documentation "Implicitly casts to base type."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace Reflection
			ClassName Callable
			Documentation "Reflection base class for callable objects."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "Method@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "Function@ opCast()"
					Documentation "Explicitly casts to sub type."
				}
				Method
				{
					Declaration "bool IsCompatible(const Callable@ pCallable) const"
					Documentation "Returns whether the given object type is compatible with this one."
				}
				Method
				{
					Declaration "bool Equals(const Callable@ pCallable) const"
					Documentation "Returns whether the given callable type is identical to this one."
				}
				Method
				{
					Declaration "string GetName() const"
					Documentation "Gets this instance\'s name."
				}
				Method
				{
					Declaration "string GetNamespace() const"
					Documentation "Gets this instance\'s namespace."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace Reflection
			ClassName ReturnValue
			Documentation "Reflection return value."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "any@ ToAny() const"
					Documentation "Returns the return value as an any instance, if there was a return value."
				}
				Method
				{
					Declaration "bool HasReturnValue() const"
					Documentation "Returns whether there is a return value or not."
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace Reflection
			ClassName Arguments
			Documentation "This class can hold arguments for a function or method call."
			Flags 1
			Methods
			{
				Method
				{
					Declaration "bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Sets the arguments this instance contains."
				}
				Method
				{
					Declaration "bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Sets the arguments this instance contains."
				}
				Method
				{
					Declaration "bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Sets the arguments this instance contains."
				}
				Method
				{
					Declaration "bool SetArguments(?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Sets the arguments this instance contains."
				}
				Method
				{
					Declaration "bool SetArguments(?& in, ?& in, ?& in, ?& in)"
					Documentation "Sets the arguments this instance contains."
				}
				Method
				{
					Declaration "bool SetArguments(?& in, ?& in, ?& in)"
					Documentation "Sets the arguments this instance contains."
				}
				Method
				{
					Declaration "bool SetArguments(?& in, ?& in)"
					Documentation "Sets the arguments this instance contains."
				}
				Method
				{
					Declaration "bool SetArguments(?& in)"
					Documentation "Sets the arguments this instance contains."
				}
				Method
				{
					Declaration "bool SetArguments()"
					Documentation "Sets the arguments this instance contains."
				}
				Method
				{
					Declaration "void Clear()"
					Documentation "Clears this instance\'s data."
				}
				Method
				{
					Declaration "bool HasArguments() const"
					Documentation "Returns whether this instance holds any arguments."
				}
				Method
				{
					Declaration "size_t GetCount() const"
					Documentation "Gets number of arguments."
				}
				Method
				{
					Declaration "Arguments& opAssign(const Arguments& in other)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Constructs a Arguments instance with the given arguments."
				}
				Method
				{
					Declaration "Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Constructs a Arguments instance with the given arguments."
				}
				Method
				{
					Declaration "Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Constructs a Arguments instance with the given arguments."
				}
				Method
				{
					Declaration "Arguments@ Arguments(?& in, ?& in, ?& in, ?& in, ?& in)"
					Documentation "Constructs a Arguments instance with the given arguments."
				}
				Method
				{
					Declaration "Arguments@ Arguments(?& in, ?& in, ?& in, ?& in)"
					Documentation "Constructs a Arguments instance with the given arguments."
				}
				Method
				{
					Declaration "Arguments@ Arguments(?& in, ?& in, ?& in)"
					Documentation "Constructs a Arguments instance with the given arguments."
				}
				Method
				{
					Declaration "Arguments@ Arguments(?& in, ?& in)"
					Documentation "Constructs a Arguments instance with the given arguments."
				}
				Method
				{
					Declaration "Arguments@ Arguments(?& in)"
					Documentation "Constructs a Arguments instance with the given arguments."
				}
				Method
				{
					Declaration "Arguments@ Arguments()"
					Documentation "Constructs a Arguments instance with the given arguments."
				}
				Method
				{
					Declaration "Arguments@ Arguments(const Arguments& in other)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "Arguments@ Arguments()"
					Documentation "Default constructor"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName string_t
			Documentation "Opaque handle to a pooled string."
			Flags 10
			Methods
			{
				Method
				{
					Declaration "int opImplConv() const"
					Documentation "Converts this string_t to an integer."
				}
				Method
				{
					Declaration "string opImplConv() const"
					Documentation "Converts this string_t to a string."
				}
				Method
				{
					Declaration "string_t& opAssign(int str)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "string_t& opAssign(const string& in str)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "string_t& opAssign(const string_t& in str)"
					Documentation "Assignment operator"
				}
				Method
				{
					Declaration "void string_t(int str)"
					Documentation "Construct a string_t from an integer"
				}
				Method
				{
					Declaration "void string_t(const string& in str)"
					Documentation "Construct a string_t from a string"
				}
				Method
				{
					Declaration "void string_t(const string_t& in str)"
					Documentation "Copy Constructor"
				}
				Method
				{
					Declaration "void string_t()"
					Documentation "Default Constructor"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName char
			Documentation "Char value type"
			Flags 8202
			Methods
			{
				Method
				{
					Declaration "bool opEquals(const string& in szString) const"
					Documentation "Compares this char with the given character."
				}
				Method
				{
					Declaration "char opAssign(const string& in szString)"
					Documentation "Assigns the first character of the given string to this character."
				}
				Method
				{
					Declaration "uint32 opImplConv() const"
					Documentation "Implicitly converts this character to an unsigned 32 bit integer."
				}
				Method
				{
					Declaration "char opAssign(const char& in character)"
					Documentation "Assigns one character to another."
				}
				Method
				{
					Declaration "void char(const string& in szString)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "void char(const char& in character)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "void char()"
					Documentation "Default constructor"
				}
			}
			Properties
			{
			}
		}
		Class
		{
			Namespace ""
			ClassName string
			Documentation "String type"
			Flags 7938
			Methods
			{
				Method
				{
					Declaration "array<string>@ Split(const string& in szDelimiter) const"
					Documentation "Splits this string by the given delimiter."
				}
				Method
				{
					Declaration "string opAdd(char character) const"
					Documentation "Returns a copy of this string with the given character appended."
				}
				Method
				{
					Declaration "string opAdd(bool bValue) const"
					Documentation "Returns a copy of this string with the given boolean appended."
				}
				Method
				{
					Declaration "string opAdd(uint64 uiValue) const"
					Documentation "Returns a copy of this string with the given 64 bit unsigned integer appended."
				}
				Method
				{
					Declaration "string opAdd(int64 iValue) const"
					Documentation "Returns a copy of this string with the given 64 bit integer appended."
				}
				Method
				{
					Declaration "string opAdd(double flValue) const"
					Documentation "Returns a copy of this string with the given double appended."
				}
				Method
				{
					Declaration "string opAdd(const string& in szString) const"
					Documentation "Returns a copy of this string with the given string appended."
				}
				Method
				{
					Declaration "void Truncate(const size_t uiMaxLength)"
					Documentation "Truncates the string to uiMaxLength characters."
				}
				Method
				{
					Declaration "string& Replace(const string& in szSubstring, const string& in szReplacement, const String::CompareType compareType = String::DEFAULT_COMPARE)"
					Documentation "Replaces the given substring with the given replacement string."
				}
				Method
				{
					Declaration "string SubString(uint startIndex = 0, uint count = String::INVALID_INDEX) const"
					Documentation "Returns a substring of this string."
				}
				Method
				{
					Declaration "string& ToUppercase()"
					Documentation "Converts this string to upper case."
				}
				Method
				{
					Declaration "string& ToLowercase()"
					Documentation "Converts this string to lower case."
				}
				Method
				{
					Declaration "string Tokenize(const string& in delimiter) const"
					Documentation "Get the next token of the given string.\nReturns String::NO_MORE_TOKENS if none remaining."
				}
				Method
				{
					Declaration "uint FindLastNotOf(const string& in szString, uint startIndex = String::INVALID_INDEX, const String::CompareType compareType = String::DEFAULT_COMPARE) const"
					Documentation "Find the first instance of the given string, searching in reverse.\nReturns String::INVALID_INDEX if not found."
				}
				Method
				{
					Declaration "uint FindFirstNotOf(const string& in szString, uint startIndex = 0, const String::CompareType compareType = String::DEFAULT_COMPARE) const"
					Documentation "Find the first instance of the given string.\nReturns String::INVALID_INDEX if not found."
				}
				Method
				{
					Declaration "uint FindLastOf(const string& in szString, const uint startIndex = 0, const String::CompareType compareType = String::DEFAULT_COMPARE) const"
					Documentation "Find the last instance of any character in the given string.\nReturns String::INVALID_INDEX if not found."
				}
				Method
				{
					Declaration "uint FindFirstOf(const string& in szString, const uint startIndex = 0, const String::CompareType compareType = String::DEFAULT_COMPARE) const"
					Documentation "Find the first instance of any character in the given string.\nReturns String::INVALID_INDEX if not found."
				}
				Method
				{
					Declaration "uint RFind(const string& in szString, uint startIndex = String::INVALID_INDEX, const String::CompareType compareType = String::DEFAULT_COMPARE) const"
					Documentation "Find the first instance of the given string, searching in reverse.\nReturns String::INVALID_INDEX if not found."
				}
				Method
				{
					Declaration "uint Find(const string& in szString, const uint startIndex = 0, const String::CompareType compareType = String::DEFAULT_COMPARE) const"
					Documentation "Find the first instance of the given string.\nReturns String::INVALID_INDEX if not found."
				}
				Method
				{
					Declaration "bool EndsWith(const string& in szString, const String::CompareType compareType = String::DEFAULT_COMPARE) const"
					Documentation "Returns true if the string ends with the given string."
				}
				Method
				{
					Declaration "bool StartsWith(const string& in szString, const String::CompareType compareType = String::DEFAULT_COMPARE) const"
					Documentation "Returns true if the string starts with the given string."
				}
				Method
				{
					Declaration "void Trim(const string& in szCharacter = \' \')"
					Documentation "Trims leading and trailing whitespace, or a given character."
				}
				Method
				{
					Declaration "bool opEquals(const string& in szString) const"
					Documentation "Returns whether strings are equal."
				}
				Method
				{
					Declaration "int ICompareN(const string& in szString, const uint amount) const"
					Documentation "Compares strings up to amount characters case-insensitively."
				}
				Method
				{
					Declaration "int ICompare(const string& in szString) const"
					Documentation "Compares strings case-insensitively."
				}
				Method
				{
					Declaration "int CompareN(const string& in szString, const uint amount) const"
					Documentation "Compares strings up to amount characters."
				}
				Method
				{
					Declaration "int Compare(const string& in szString) const"
					Documentation "Compares strings."
				}
				Method
				{
					Declaration "int opCmp(const string& in szString) const"
					Documentation "Compares strings."
				}
				Method
				{
					Declaration "string& opAddAssign(char character)"
					Documentation "Appends the given character to this string."
				}
				Method
				{
					Declaration "string& opAddAssign(bool bValue)"
					Documentation "Appends the given boolean to this string."
				}
				Method
				{
					Declaration "string& opAddAssign(uint64 uiValue)"
					Documentation "Appends the given 64 bit unsigned integer to this string."
				}
				Method
				{
					Declaration "string& opAddAssign(int64 iValue)"
					Documentation "Appends the given 64 bit integer to this string."
				}
				Method
				{
					Declaration "string& opAddAssign(double flValue)"
					Documentation "Appends the given double to this string."
				}
				Method
				{
					Declaration "string& opAddAssign(const string& in szString)"
					Documentation "Appends the given string to this one."
				}
				Method
				{
					Declaration "void SetCharAt(uint uiIndex, char character)"
					Documentation "Sets a character by index."
				}
				Method
				{
					Declaration "char opIndex(uint uiIndex) const"
					Documentation "Gets a character by index."
				}
				Method
				{
					Declaration "void Clear()"
					Documentation "Clears the contents of this string."
				}
				Method
				{
					Declaration "void Reserve(uint iMinimum, bool bKeepData = true)"
					Documentation "Reserves at least iMinimum characters worth of capacity. If bKeepData is true, the original string is kept."
				}
				Method
				{
					Declaration "void Resize(uint uiSize, bool bKeepData = true)"
					Documentation "Shrinks this string to uiSize. If bKeepData is true, the original string is kept."
				}
				Method
				{
					Declaration "bool IsEmpty() const"
					Documentation "Returns whether this string is empty."
				}
				Method
				{
					Declaration "uint Length() const"
					Documentation "Gets the length of this string."
				}
				Method
				{
					Declaration "string& opAssign(char character)"
					Documentation "Assigns a character to this string."
				}
				Method
				{
					Declaration "string& opAssign(bool bValue)"
					Documentation "Assigns a boolean to this string."
				}
				Method
				{
					Declaration "string& opAssign(uint64 uiValue)"
					Documentation "Assigns a 64 bit unsigned int to this string."
				}
				Method
				{
					Declaration "string& opAssign(int64 iValue)"
					Documentation "Assigns a 64 bit integer to this string."
				}
				Method
				{
					Declaration "string& opAssign(double flValue)"
					Documentation "Assigns a double to this string."
				}
				Method
				{
					Declaration "string& opAssign(const string& in szString)"
					Documentation "Assigns a string to this one."
				}
				Method
				{
					Declaration "string& Assign(const string& in szString, uint uiBegin, uint uiCount)"
					Documentation "Assigns a string to this, copying up to uiCount characters."
				}
				Method
				{
					Declaration "void string(char character)"
					Documentation "Construct a string from a char."
				}
				Method
				{
					Declaration "void string(bool bValue)"
					Documentation "Construct a string from a boolean."
				}
				Method
				{
					Declaration "void string(uint64 uiValue)"
					Documentation "Construct a string from a 64 bit unsigned integer."
				}
				Method
				{
					Declaration "void string(int64 iValue)"
					Documentation "Construct a string from a 64 bit integer."
				}
				Method
				{
					Declaration "void string(double flValue)"
					Documentation "Construct a string from a double."
				}
				Method
				{
					Declaration "void string(const string& in szString)"
					Documentation "Copy constructor"
				}
				Method
				{
					Declaration "void string()"
					Documentation Constructor
				}
			}
			Properties
			{
			}
		}
	}
	Enums
	{
		Enum
		{
			Namespace ""
			Documentation "Hook function return codes."
			Name HookReturnCode
			Values
			{
				Value
				{
					Name HOOK_HANDLED
					Value 1
					Documentation "Returned when a hook function has handled the call"
				}
				Value
				{
					Name HOOK_CONTINUE
					Value 0
					Documentation "Returned when a hook function has not handled the call"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Type of say the client used"
			Name ClientSayType
			Values
			{
				Value
				{
					Name CLIENTSAY_SAYTEAM
					Value 1
					Documentation "Say team"
				}
				Value
				{
					Name CLIENTSAY_SAY
					Value 0
					Documentation Say
				}
			}
		}
		Enum
		{
			Namespace ConCommandFlag
			Documentation "Console command flags"
			Name ConCommandFlag
			Values
			{
				Value
				{
					Name Cheat
					Value 2
					Documentation "If set, the invoking player (if any) must have cheat access."
				}
				Value
				{
					Name AdminOnly
					Value 1
					Documentation "If set, the invoking player (if any) must have admin access."
				}
				Value
				{
					Name None
					Value 0
					Documentation "No flags to set"
				}
			}
		}
		Enum
		{
			Namespace ConCommandKind
			Documentation "Console command kind."
			Name Type
			Values
			{
				Value
				{
					Name CVar
					Value 3
					Documentation "This console command is a cvar"
				}
				Value
				{
					Name ClientCommand
					Value 2
					Documentation "This console command is a client command"
				}
				Value
				{
					Name ConCommand
					Value 1
					Documentation "This console command is a command"
				}
			}
		}
		Enum
		{
			Namespace NetworkMessages
			Documentation "Network message types"
			Name NetworkMessageType
			Values
			{
				Value
				{
					Name VModelPos
					Value 145
					Documentation "User message"
				}
				Value
				{
					Name UpdateTime
					Value 144
					Documentation "User message"
				}
				Value
				{
					Name TimeDisplay
					Value 143
					Documentation "User message"
				}
				Value
				{
					Name UpdateNum
					Value 142
					Documentation "User message"
				}
				Value
				{
					Name NumDisplay
					Value 141
					Documentation "User message"
				}
				Value
				{
					Name CustSpr
					Value 140
					Documentation "User message"
				}
				Value
				{
					Name ToggleElem
					Value 139
					Documentation "User message"
				}
				Value
				{
					Name WeaponSpr
					Value 138
					Documentation "User message"
				}
				Value
				{
					Name ClassicMode
					Value 137
					Documentation "User message"
				}
				Value
				{
					Name Flamethwr
					Value 136
					Documentation "User message"
				}
				Value
				{
					Name ViewMode
					Value 135
					Documentation "User message"
				}
				Value
				{
					Name Concuss
					Value 134
					Documentation "User message"
				}
				Value
				{
					Name InvRemove
					Value 133
					Documentation "User message"
				}
				Value
				{
					Name InvAdd
					Value 132
					Documentation "User message"
				}
				Value
				{
					Name PrintKB
					Value 131
					Documentation "User message"
				}
				Value
				{
					Name ASScriptName
					Value 130
					Documentation "User message"
				}
				Value
				{
					Name PrtlUpdt
					Value 129
					Documentation "User message"
				}
				Value
				{
					Name Fog
					Value 128
					Documentation "User message"
				}
				Value
				{
					Name CameraMouse
					Value 127
					Documentation "User message"
				}
				Value
				{
					Name WeatherFX
					Value 126
					Documentation "User message"
				}
				Value
				{
					Name ServerBuild
					Value 125
					Documentation "User message"
				}
				Value
				{
					Name ServerVer
					Value 124
					Documentation "User message"
				}
				Value
				{
					Name TeamNames
					Value 123
					Documentation "User message"
				}
				Value
				{
					Name ServerName
					Value 122
					Documentation "User message"
				}
				Value
				{
					Name VGUIMenu
					Value 121
					Documentation "User message"
				}
				Value
				{
					Name Playlist
					Value 120
					Documentation "User message"
				}
				Value
				{
					Name ShieldRic
					Value 119
					Documentation "User message"
				}
				Value
				{
					Name RampSprite
					Value 118
					Documentation "User message"
				}
				Value
				{
					Name SRPrimedOff
					Value 117
					Documentation "User message"
				}
				Value
				{
					Name SRPrimed
					Value 116
					Documentation "User message"
				}
				Value
				{
					Name SRDetonate
					Value 115
					Documentation "User message"
				}
				Value
				{
					Name TracerDecal
					Value 114
					Documentation "User message"
				}
				Value
				{
					Name SporeTrail
					Value 113
					Documentation "User message"
				}
				Value
				{
					Name GargSplash
					Value 112
					Documentation "User message"
				}
				Value
				{
					Name CreateBlood
					Value 111
					Documentation "User message"
				}
				Value
				{
					Name ShkFlash
					Value 110
					Documentation "User message"
				}
				Value
				{
					Name ToxicCloud
					Value 109
					Documentation "User message"
				}
				Value
				{
					Name SoundList
					Value 108
					Documentation "User message"
				}
				Value
				{
					Name StartSound
					Value 107
					Documentation "User message"
				}
				Value
				{
					Name NextMap
					Value 106
					Documentation "User message"
				}
				Value
				{
					Name VoteMenu
					Value 105
					Documentation "User message"
				}
				Value
				{
					Name EndVote
					Value 104
					Documentation "User message"
				}
				Value
				{
					Name CbElec
					Value 103
					Documentation "User message"
				}
				Value
				{
					Name MapList
					Value 102
					Documentation "User message"
				}
				Value
				{
					Name TimeEnd
					Value 101
					Documentation "User message"
				}
				Value
				{
					Name Speaksent
					Value 100
					Documentation "User message"
				}
				Value
				{
					Name TE_CUSTOM
					Value 99
					Documentation "User message"
				}
				Value
				{
					Name Spectator
					Value 98
					Documentation "User message"
				}
				Value
				{
					Name Gib
					Value 97
					Documentation "User message"
				}
				Value
				{
					Name AmmoX
					Value 96
					Documentation "User message"
				}
				Value
				{
					Name ScreenFade
					Value 95
					Documentation "User message"
				}
				Value
				{
					Name ScreenShake
					Value 94
					Documentation "User message"
				}
				Value
				{
					Name ShowMenu
					Value 93
					Documentation "User message"
				}
				Value
				{
					Name SetFOV
					Value 92
					Documentation "User message"
				}
				Value
				{
					Name HideHUD
					Value 91
					Documentation "User message"
				}
				Value
				{
					Name ItemPickup
					Value 90
					Documentation "User message"
				}
				Value
				{
					Name WeapPickup
					Value 89
					Documentation "User message"
				}
				Value
				{
					Name AmmoPickup
					Value 88
					Documentation "User message"
				}
				Value
				{
					Name MOTD
					Value 87
					Documentation "User message"
				}
				Value
				{
					Name GameMode
					Value 86
					Documentation "User message"
				}
				Value
				{
					Name TeamScore
					Value 85
					Documentation "User message"
				}
				Value
				{
					Name TeamInfo
					Value 84
					Documentation "User message"
				}
				Value
				{
					Name ScoreInfo
					Value 83
					Documentation "User message"
				}
				Value
				{
					Name DeathMsg
					Value 82
					Documentation "User message"
				}
				Value
				{
					Name GameTitle
					Value 81
					Documentation "User message"
				}
				Value
				{
					Name CdAudio
					Value 80
					Documentation "User message"
				}
				Value
				{
					Name InitHUD
					Value 79
					Documentation "User message"
				}
				Value
				{
					Name ResetHUD
					Value 78
					Documentation "User message"
				}
				Value
				{
					Name CustWeapon
					Value 77
					Documentation "User message"
				}
				Value
				{
					Name WeaponList
					Value 76
					Documentation "User message"
				}
				Value
				{
					Name TextMsg
					Value 75
					Documentation "User message"
				}
				Value
				{
					Name SayText
					Value 74
					Documentation "User message"
				}
				Value
				{
					Name HudText
					Value 73
					Documentation "User message"
				}
				Value
				{
					Name Train
					Value 72
					Documentation "User message"
				}
				Value
				{
					Name Battery
					Value 71
					Documentation "User message"
				}
				Value
				{
					Name Damage
					Value 70
					Documentation "User message"
				}
				Value
				{
					Name Health
					Value 69
					Documentation "User message"
				}
				Value
				{
					Name FlashBat
					Value 68
					Documentation "User message"
				}
				Value
				{
					Name Flashlight
					Value 67
					Documentation "User message"
				}
				Value
				{
					Name Geiger
					Value 66
					Documentation "User message"
				}
				Value
				{
					Name CurWeapon
					Value 65
					Documentation "User message"
				}
				Value
				{
					Name SelAmmo
					Value 64
					Documentation "User message"
				}
				Value
				{
					Name SVC_STUFFTEXT
					Value 9
					Documentation "Executes command on the client side."
				}
				Value
				{
					Name SVC_INTERMISSION
					Value 30
					Documentation "Enables intermission for clients."
				}
				Value
				{
					Name SVC_TEMPENTITY
					Value 23
					Documentation "Creates temporary entities on the client side."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Temporary entity types. Used in network messages of type SVC_TEMPENTITY."
			Name TempEntityType
			Values
			{
				Value
				{
					Name TE_USERTRACER
					Value 127
					Documentation "Larger message than the standard tracer, but allows some customization."
				}
				Value
				{
					Name TE_MULTIGUNSHOT
					Value 126
					Documentation "Much more compact shotgun message"
				}
				Value
				{
					Name TE_KILLPLAYERATTACHMENTS
					Value 125
					Documentation "Will expire all TENTS attached to a player."
				}
				Value
				{
					Name TE_PLAYERATTACHMENT
					Value 124
					Documentation "Attaches a TENT to a player (this is a high-priority tent)"
				}
				Value
				{
					Name TE_FIREFIELD
					Value 123
					Documentation "Makes a field of fire."
				}
				Value
				{
					Name TE_PARTICLEBURST
					Value 122
					Documentation "Very similar to lavasplash."
				}
				Value
				{
					Name TE_PLAYERSPRITES
					Value 121
					Documentation "Sprites emit from a player\'s bounding box (ONLY use for players!)"
				}
				Value
				{
					Name TE_SPRAY
					Value 120
					Documentation "Throws a shower of sprites or models"
				}
				Value
				{
					Name TE_PROJECTILE
					Value 119
					Documentation "Makes a projectile (like a nail) (this is a high-priority tent)"
				}
				Value
				{
					Name TE_DECALHIGH
					Value 118
					Documentation "Same as TE_DECAL, but the texture index was greater than 256"
				}
				Value
				{
					Name TE_WORLDDECALHIGH
					Value 117
					Documentation "Decal (with texture index > 256) applied to world brush"
				}
				Value
				{
					Name TE_WORLDDECAL
					Value 116
					Documentation "Decal applied to the world brush"
				}
				Value
				{
					Name TE_BLOODSPRITE
					Value 115
					Documentation "Spray of opaque sprite1\'s that fall, single sprite2 for 1..2 secs (this is a high-priority tent)"
				}
				Value
				{
					Name TE_BUBBLETRAIL
					Value 114
					Documentation "Create alpha sprites along a line, float upwards"
				}
				Value
				{
					Name TE_BUBBLES
					Value 113
					Documentation "Create alpha sprites inside of box, float upwards"
				}
				Value
				{
					Name TE_PLAYERDECAL
					Value 112
					Documentation "Draw a player decal (spray paint)"
				}
				Value
				{
					Name TE_ARMOR_RICOCHET
					Value 111
					Documentation "Quick spark sprite, client ricochet sound. "
				}
				Value
				{
					Name TE_SPRITE_SPRAY
					Value 110
					Documentation "Spray of alpha sprites"
				}
				Value
				{
					Name TE_GUNSHOTDECAL
					Value 109
					Documentation "Decal and ricochet sound"
				}
				Value
				{
					Name TE_BREAKMODEL
					Value 108
					Documentation "Box of models or sprites"
				}
				Value
				{
					Name TE_EXPLODEMODEL
					Value 107
					Documentation "Spherical shower of models, picks from sets"
				}
				Value
				{
					Name TE_MODEL
					Value 106
					Documentation "Create a moving model that bounces and makes a sound when it hits"
				}
				Value
				{
					Name TE_FIZZ
					Value 105
					Documentation "Create alpha sprites inside of entity, float upwards"
				}
				Value
				{
					Name TE_DECAL
					Value 104
					Documentation "Decal applied to a brush entity (not the world)"
				}
				Value
				{
					Name TE_BLOOD
					Value 103
					Documentation "Particle spray"
				}
				Value
				{
					Name TE_SHOWLINE
					Value 102
					Documentation "Line of particles every 5 units, dies in 30 seconds"
				}
				Value
				{
					Name TE_BLOODSTREAM
					Value 101
					Documentation "Particle spray"
				}
				Value
				{
					Name TE_LARGEFUNNEL
					Value 100
					Documentation "Creates a large funnel"
				}
				Value
				{
					Name TE_KILLBEAM
					Value 99
					Documentation "Kill all beams attached to entity"
				}
				Value
				{
					Name TE_BOX
					Value 31
					Documentation "Draws a box"
				}
				Value
				{
					Name TE_LINE
					Value 30
					Documentation "Draws a line"
				}
				Value
				{
					Name TE_TEXTMESSAGE
					Value 29
					Documentation "Text message"
				}
				Value
				{
					Name TE_ELIGHT
					Value 28
					Documentation "Point entity light, no world effect"
				}
				Value
				{
					Name TE_DLIGHT
					Value 27
					Documentation "Dynamic light effect"
				}
				Value
				{
					Name TE_STREAK_SPLASH
					Value 25
					Documentation "Oriented shower of tracers"
				}
				Value
				{
					Name TE_BEAMRING
					Value 24
					Documentation "Connect a beam ring to two entities"
				}
				Value
				{
					Name TE_GLOWSPRITE
					Value 23
					Documentation "Glowing sprite"
				}
				Value
				{
					Name TE_BEAMFOLLOW
					Value 22
					Documentation "Create a line of decaying beam segments until entity stops moving"
				}
				Value
				{
					Name TE_BEAMCYLINDER
					Value 21
					Documentation "Cylinder that expands to max radius over lifetime"
				}
				Value
				{
					Name TE_BEAMDISK
					Value 20
					Documentation "Disk that expands to max radius over lifetime"
				}
				Value
				{
					Name TE_BEAMTORUS
					Value 19
					Documentation "Screen aligned beam ring, expands to max radius over lifetime"
				}
				Value
				{
					Name TE_BEAMSPRITE
					Value 18
					Documentation "A beam with a sprite at the end"
				}
				Value
				{
					Name TE_SPRITE
					Value 17
					Documentation "Additive sprite, plays 1 cycle"
				}
				Value
				{
					Name TE_SPRITETRAIL
					Value 15
					Documentation "Line of moving glow sprites with gravity, fadeout, and collisions"
				}
				Value
				{
					Name TE_IMPLOSION
					Value 14
					Documentation "Tracers moving toward a point"
				}
				Value
				{
					Name TE_BSPDECAL
					Value 13
					Documentation "Decal from the .BSP file "
				}
				Value
				{
					Name TE_EXPLOSION2
					Value 12
					Documentation "Explosion effect"
				}
				Value
				{
					Name TE_TELEPORT
					Value 11
					Documentation "Teleport effect"
				}
				Value
				{
					Name TE_LAVASPLASH
					Value 10
					Documentation "Lava splash effect"
				}
				Value
				{
					Name TE_SPARKS
					Value 9
					Documentation "Spark effect"
				}
				Value
				{
					Name TE_BEAMENTS
					Value 8
					Documentation "Beam effect between two entities"
				}
				Value
				{
					Name TE_LIGHTNING
					Value 7
					Documentation "TE_BEAMPOINTS with simplified parameters"
				}
				Value
				{
					Name TE_TRACER
					Value 6
					Documentation "Tracer effect from point to point"
				}
				Value
				{
					Name TE_SMOKE
					Value 5
					Documentation "Alphablend sprite, move vertically 30 pps"
				}
				Value
				{
					Name TE_TAREXPLOSION
					Value 4
					Documentation "Quake1 \"tarbaby\" explosion with sound"
				}
				Value
				{
					Name TE_EXPLOSION
					Value 3
					Documentation "Additive sprite, 2 dynamic lights, flickering particles, explosion sound, move vertically 8 pps"
				}
				Value
				{
					Name TE_GUNSHOT
					Value 2
					Documentation "Particle effect plus ricochet sound"
				}
				Value
				{
					Name TE_BEAMENTPOINT
					Value 1
					Documentation "Beam effect between point and entity"
				}
				Value
				{
					Name TE_BEAMPOINTS
					Value 0
					Documentation "Beam effect between two points"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "TE_FIREFIELD flags"
			Name TE_FireFieldFlag
			Values
			{
				Value
				{
					Name TEFIRE_FLAG_ADDITIVE
					Value 32
					Documentation "If set, sprite is rendered non-opaque with additive"
				}
				Value
				{
					Name TEFIRE_FLAG_PLANAR
					Value 16
					Documentation "If set, all fire sprites have same initial Z instead of randomly filling a cube. "
				}
				Value
				{
					Name TEFIRE_FLAG_ALPHA
					Value 8
					Documentation "If set, sprite is rendered alpha blended at 50% else, opaque"
				}
				Value
				{
					Name TEFIRE_FLAG_LOOP
					Value 4
					Documentation "If set, sprite plays at 15 fps, otherwise plays at whatever rate stretches the animation over the sprite\'s duration."
				}
				Value
				{
					Name TEFIRE_FLAG_SOMEFLOAT
					Value 2
					Documentation "Some of the sprites will drift upwards. (50% chance)"
				}
				Value
				{
					Name TEFIRE_FLAG_ALLFLOAT
					Value 1
					Documentation "All sprites will drift upwards as they animate"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "TE_EXPLOSION flags"
			Name TE_ExplosionFlag
			Values
			{
				Value
				{
					Name TE_EXPLFLAG_NOPARTICLES
					Value 8
					Documentation "Do not draw particles"
				}
				Value
				{
					Name TE_EXPLFLAG_NOSOUND
					Value 4
					Documentation "Do not play client explosion sound"
				}
				Value
				{
					Name TE_EXPLFLAG_NODLIGHTS
					Value 2
					Documentation "Do not render dynamic lights"
				}
				Value
				{
					Name TE_EXPLFLAG_NOADDITIVE
					Value 1
					Documentation "Sprite will be drawn opaque (ensure that the sprite you send is a non-additive sprite)"
				}
				Value
				{
					Name TE_EXPLFLAG_NONE
					Value 0
					Documentation "All flags clear makes default Half-Life explosion"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Network message destination types."
			Name NetworkMessageDest
			Values
			{
				Value
				{
					Name MSG_SPEC
					Value 9
					Documentation "Sends to all spectator proxies"
				}
				Value
				{
					Name MSG_ONE_UNRELIABLE
					Value 8
					Documentation "Send to one client, but don\'t put in reliable stream, put in unreliable datagram ( could be dropped )"
				}
				Value
				{
					Name MSG_PAS_R
					Value 7
					Documentation "Reliable to PAS"
				}
				Value
				{
					Name MSG_PVS_R
					Value 6
					Documentation "Reliable to PVS"
				}
				Value
				{
					Name MSG_PAS
					Value 5
					Documentation "Ents in PAS of org"
				}
				Value
				{
					Name MSG_PVS
					Value 4
					Documentation "Ents in PVS of org"
				}
				Value
				{
					Name MSG_INIT
					Value 3
					Documentation "write to the init string"
				}
				Value
				{
					Name MSG_ALL
					Value 2
					Documentation "reliable to all"
				}
				Value
				{
					Name MSG_ONE
					Value 1
					Documentation "reliable to one (msg_entity)"
				}
				Value
				{
					Name MSG_BROADCAST
					Value 0
					Documentation "unreliable to all"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Global state values"
			Name GLOBALESTATE
			Values
			{
				Value
				{
					Name GLOBAL_DEAD
					Value 2
					Documentation "Global state when removed"
				}
				Value
				{
					Name GLOBAL_ON
					Value 1
					Documentation "Global state when on"
				}
				Value
				{
					Name GLOBAL_OFF
					Value 0
					Documentation "Global state when off"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Flags used by custom time displays."
			Name HUD_TIME
			Values
			{
				Value
				{
					Name HUD_TIME_COUNT_DOWN
					Value 8388608
					Documentation "Count down."
				}
				Value
				{
					Name HUD_TIME_FREEZE
					Value 4194304
					Documentation "Freeze the displayed value."
				}
				Value
				{
					Name HUD_TIME_ZERO_HOURS
					Value 2097152
					Documentation "Draw hours even if the value is zero."
				}
				Value
				{
					Name HUD_TIME_MILLISECONDS
					Value 1048576
					Documentation "Draw milliseconds."
				}
				Value
				{
					Name HUD_TIME_SECONDS
					Value 524288
					Documentation "Draw seconds."
				}
				Value
				{
					Name HUD_TIME_MINUTES
					Value 262144
					Documentation "Draw minutes."
				}
				Value
				{
					Name HUD_TIME_HOURS
					Value 131072
					Documentation "Draw hours."
				}
				Value
				{
					Name HUD_TIME_RIGHT_ALIGN
					Value 65536
					Documentation "Draw right aligned element."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Flags used by custom numeric displays."
			Name HUD_NUM
			Values
			{
				Value
				{
					Name HUD_NUM_PLUS_SIGN
					Value 2097152
					Documentation "Draw sign for positive values."
				}
				Value
				{
					Name HUD_NUM_NEGATIVE_NUMBERS
					Value 1048576
					Documentation "Allow negative values."
				}
				Value
				{
					Name HUD_NUM_LEADING_ZEROS
					Value 524288
					Documentation "Draw leading zeros."
				}
				Value
				{
					Name HUD_NUM_DONT_DRAW_ZERO
					Value 262144
					Documentation "Hide the element if the value is zero."
				}
				Value
				{
					Name HUD_NUM_SEPARATOR
					Value 131072
					Documentation "Draw separator."
				}
				Value
				{
					Name HUD_NUM_RIGHT_ALIGN
					Value 65536
					Documentation "Draw right aligned element."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Flags used by custom HUD sprites."
			Name HUD_SPR
			Values
			{
				Value
				{
					Name HUD_SPR_HIDE_WHEN_STOPPED
					Value 524288
					Documentation "Hide the sprite when the animation stops."
				}
				Value
				{
					Name HUD_SPR_PLAY_ONCE
					Value 262144
					Documentation "Play the animation only once."
				}
				Value
				{
					Name HUD_SPR_MASKED
					Value 131072
					Documentation "Draw masked sprite."
				}
				Value
				{
					Name HUD_SPR_OPAQUE
					Value 65536
					Documentation "Draw opaque sprite."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Common flags used by all custom HUD elements."
			Name HUD_ELEM
			Values
			{
				Value
				{
					Name HUD_ELEM_DYNAMIC_ALPHA
					Value 256
					Documentation "Use the default client-side HUD alpha and flash the element when updated."
				}
				Value
				{
					Name HUD_ELEM_DEFAULT_ALPHA
					Value 128
					Documentation "Use the default client-side HUD alpha (hud_defaultalpha)."
				}
				Value
				{
					Name HUD_ELEM_EFFECT_ONCE
					Value 64
					Documentation "Play the effect only once."
				}
				Value
				{
					Name HUD_ELEM_HIDDEN
					Value 32
					Documentation "Create a hidden element."
				}
				Value
				{
					Name HUD_ELEM_NO_BORDER
					Value 16
					Documentation "Ignore the client-side HUD border (hud_bordersize)."
				}
				Value
				{
					Name HUD_ELEM_SCR_CENTER_Y
					Value 8
					Documentation "Y position relative to the center of the screen."
				}
				Value
				{
					Name HUD_ELEM_SCR_CENTER_X
					Value 4
					Documentation "X position relative to the center of the screen."
				}
				Value
				{
					Name HUD_ELEM_ABSOLUTE_Y
					Value 2
					Documentation "Y position in pixels."
				}
				Value
				{
					Name HUD_ELEM_ABSOLUTE_X
					Value 1
					Documentation "X position in pixels."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "HUD element effects."
			Name HUD_EFFECT
			Values
			{
				Value
				{
					Name HUD_EFFECT_SINE_PULSE
					Value 8
					Documentation "Sine pulse from color1 through zero to color2."
				}
				Value
				{
					Name HUD_EFFECT_TOGGLE
					Value 7
					Documentation "Toggle between color1 and color2."
				}
				Value
				{
					Name HUD_EFFECT_COSINE
					Value 6
					Documentation "Cosine ramp up and ramp down from color1 through color2 back to color1."
				}
				Value
				{
					Name HUD_EFFECT_COSINE_DOWN
					Value 5
					Documentation "Cosine ramp down from color2 to color1."
				}
				Value
				{
					Name HUD_EFFECT_COSINE_UP
					Value 4
					Documentation "Cosine ramp up from color1 to color2."
				}
				Value
				{
					Name HUD_EFFECT_TRIANGLE
					Value 3
					Documentation "Linear ramp up and ramp down from color1 through color2 back to color1."
				}
				Value
				{
					Name HUD_EFFECT_RAMP_DOWN
					Value 2
					Documentation "Linear ramp down from color2 to color1."
				}
				Value
				{
					Name HUD_EFFECT_RAMP_UP
					Value 1
					Documentation "Linear ramp up from color1 to color2."
				}
				Value
				{
					Name HUD_EFFECT_NONE
					Value 0
					Documentation "No effect."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Used to dictate where client print commands print the given text."
			Name HUD
			Values
			{
				Value
				{
					Name HUD_PRINTCENTER
					Value 4
					Documentation "Print to center of screen"
				}
				Value
				{
					Name HUD_PRINTTALK
					Value 3
					Documentation "Print to chat"
				}
				Value
				{
					Name HUD_PRINTCONSOLE
					Value 2
					Documentation "Print to console"
				}
				Value
				{
					Name HUD_PRINTNOTIFY
					Value 1
					Documentation "Print notify"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Fade flags for CPlayerFuncs::ScreenFade and ScreenFadeAll"
			Name FFADE
			Values
			{
				Value
				{
					Name FFADE_STAYOUT
					Value 4
					Documentation "ignores the duration, stays faded out until new ScreenFade message received"
				}
				Value
				{
					Name FFADE_MODULATE
					Value 2
					Documentation "Modulate (don\'t blend)"
				}
				Value
				{
					Name FFADE_OUT
					Value 1
					Documentation "Fade out (not in)"
				}
				Value
				{
					Name FFADE_IN
					Value 0
					Documentation "Just here so we don\'t pass 0 into the function"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Admin levels"
			Name AdminLevel_t
			Values
			{
				Value
				{
					Name ADMIN_OWNER
					Value 2
					Documentation "Server owner (applies to a listenserver host player)"
				}
				Value
				{
					Name ADMIN_YES
					Value 1
					Documentation "Server administrator"
				}
				Value
				{
					Name ADMIN_NO
					Value 0
					Documentation "Not an administrator"
				}
				Value
				{
					Name ADMIN_INIT
					Value -1
					Documentation "Level on connect, tells functions not to use cached level"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Pitch values. Other values are possible. Range: 0 - 255, where 255 is very high."
			Name PITCH
			Values
			{
				Value
				{
					Name PITCH_HIGH
					Value 120
					Documentation "high pitch"
				}
				Value
				{
					Name PITCH_LOW
					Value 95
					Documentation "low pitch"
				}
				Value
				{
					Name PITCH_NORM
					Value 100
					Documentation "non-pitch shifted"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Audio channels"
			Name SOUND_CHANNEL
			Values
			{
				Value
				{
					Name CHAN_MUSIC
					Value 7
					Documentation ""
				}
				Value
				{
					Name CHAN_STATIC
					Value 6
					Documentation "allocate channel from the static area"
				}
				Value
				{
					Name CHAN_STREAM
					Value 5
					Documentation "allocate stream channel from the static or dynamic area"
				}
				Value
				{
					Name CHAN_BODY
					Value 4
					Documentation ""
				}
				Value
				{
					Name CHAN_ITEM
					Value 3
					Documentation ""
				}
				Value
				{
					Name CHAN_VOICE
					Value 2
					Documentation ""
				}
				Value
				{
					Name CHAN_WEAPON
					Value 1
					Documentation ""
				}
				Value
				{
					Name CHAN_AUTO
					Value 0
					Documentation "Automatically selects a channel for use. You cannot stop sounds while using this channel with StopSound, or in conjunction with the SND_STOP flag."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Sound flags"
			Name SoundFlag
			Values
			{
				Value
				{
					Name SND_SKIP_ORIGIN_USE_ENT
					Value 8192
					Documentation "Skip Origin and use entity flag"
				}
				Value
				{
					Name SND_LINEAR
					Value 4096
					Documentation "Linear flag"
				}
				Value
				{
					Name SND_FORCE_LOOP
					Value 2048
					Documentation "Force loop flag"
				}
				Value
				{
					Name SND_FORCE_SINGLE
					Value 1024
					Documentation "Force single flag"
				}
				Value
				{
					Name SND_REFRESH
					Value 512
					Documentation "Refresh flag"
				}
				Value
				{
					Name SND_SENTENCE
					Value 256
					Documentation "Sentence flag"
				}
				Value
				{
					Name SND_CHANGE_PITCH
					Value 128
					Documentation "Change pitch flag"
				}
				Value
				{
					Name SND_CHANGE_VOL
					Value 64
					Documentation "Change volume flag"
				}
				Value
				{
					Name SND_STOP
					Value 32
					Documentation "Stop flag"
				}
				Value
				{
					Name SND_ENT
					Value 16
					Documentation "Entity flag"
				}
				Value
				{
					Name SND_ORIGIN
					Value 8
					Documentation "Origin flag"
				}
				Value
				{
					Name SND_ATTENUATION
					Value 4
					Documentation "Attenuation flag"
				}
				Value
				{
					Name SND_PITCH
					Value 2
					Documentation "Pitch flag"
				}
				Value
				{
					Name SND_VOLUME
					Value 1
					Documentation "Volume flag"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Alert type for console messages"
			Name ALERT_TYPE
			Values
			{
				Value
				{
					Name at_logged
					Value 5
					Documentation "Server print to console (only in multiplayer games)"
				}
				Value
				{
					Name at_error
					Value 4
					Documentation "Prints \'Error: <message>\'"
				}
				Value
				{
					Name at_warning
					Value 3
					Documentation "Prints \'Warning: <message>\'"
				}
				Value
				{
					Name at_aiconsole
					Value 2
					Documentation "Only shown if developer is 2 or larger"
				}
				Value
				{
					Name at_console
					Value 1
					Documentation "Outputs text to the console only if developer is larger than 0"
				}
				Value
				{
					Name at_notice
					Value 0
					Documentation "Prints \'NOTICE: <message>\'"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Ignore glass options.\nFlag for certain trace functions."
			Name HULL_NUMBER
			Values
			{
				Value
				{
					Name head_hull
					Value 3
					Documentation "Head hull."
				}
				Value
				{
					Name large_hull
					Value 2
					Documentation "Large hull."
				}
				Value
				{
					Name human_hull
					Value 1
					Documentation "Human sized hull."
				}
				Value
				{
					Name point_hull
					Value 0
					Documentation "Point hull. No size."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Ignore glass options.\nFlag for certain trace functions."
			Name IGNORE_GLASS
			Values
			{
				Value
				{
					Name dont_ignore_glass
					Value 0
					Documentation "Don\'t ignore glass"
				}
				Value
				{
					Name ignore_glass
					Value 1
					Documentation "Ignore glass"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Ignore monsters options.\nFlag for certain trace functions."
			Name IGNORE_MONSTERS
			Values
			{
				Value
				{
					Name missile
					Value 2
					Documentation "Object doing the trace is a missile"
				}
				Value
				{
					Name dont_ignore_monsters
					Value 0
					Documentation "Don\'t ignore monsters"
				}
				Value
				{
					Name ignore_monsters
					Value 1
					Documentation "Ignore monsters"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "func_tank spawn flags"
			Name TankFlags
			Values
			{
				Value
				{
					Name SF_TANK_PLAYERCANTFIRE
					Value 1024
					Documentation "If set, controlling player can\'t fire this tank."
				}
				Value
				{
					Name SF_TANK_USERELATIONS
					Value 512
					Documentation "If set, uses the relationship specified when dealing with player targets. Otherwise, defaults to always attacking monsters."
				}
				Value
				{
					Name SF_TANK_CANCONTROL
					Value 32
					Documentation "Whether this func_tank is controllable or not"
				}
				Value
				{
					Name SF_TANK_LINEOFSIGHT
					Value 16
					Documentation "Whether to only attack if the tank has a direct line of sight of its target or continue firing."
				}
				Value
				{
					Name SF_TANK_ACTIVE
					Value 1
					Documentation "Whether the tank is active or not"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "func_tank bullet types"
			Name TANKBULLET
			Values
			{
				Value
				{
					Name TANK_BULLET_12MM
					Value 3
					Documentation "12 mm rounds"
				}
				Value
				{
					Name TANK_BULLET_MP5
					Value 2
					Documentation "MP5 rounds"
				}
				Value
				{
					Name TANK_BULLET_9MM
					Value 1
					Documentation "9mm rounds"
				}
				Value
				{
					Name TANK_BULLET_NONE
					Value 0
					Documentation "No bullet. Nothing is fired when this is set"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "CBeam spawn flags"
			Name CBeamSpawnflags
			Values
			{
				Value
				{
					Name SF_BEAM_TEMPORARY
					Value 32768
					Documentation "Whether the beam is a temporary entity"
				}
				Value
				{
					Name SF_BEAM_SHADEOUT
					Value 256
					Documentation "Whether to fade the beam out at its end point"
				}
				Value
				{
					Name SF_BEAM_SHADEIN
					Value 128
					Documentation "Whether to fade the beam in at its start point"
				}
				Value
				{
					Name SF_BEAM_DECALS
					Value 64
					Documentation "Whether to create decals when the beam does damage to BSP models"
				}
				Value
				{
					Name SF_BEAM_SPARKEND
					Value 32
					Documentation "Whether to allow creation of sparks at the beam\'s end point"
				}
				Value
				{
					Name SF_BEAM_SPARKSTART
					Value 16
					Documentation "Whether to allow creation of sparks at the beam\'s start point"
				}
				Value
				{
					Name SF_BEAM_RING
					Value 8
					Documentation "Whether this beam is a ring between 2 points"
				}
				Value
				{
					Name SF_BEAM_RANDOM
					Value 4
					Documentation "Whether beams are created to a randomly selected entity with the given target name"
				}
				Value
				{
					Name SF_BEAM_TOGGLE
					Value 2
					Documentation "Whether the beam should be togglable by triggering it"
				}
				Value
				{
					Name SF_BEAM_STARTON
					Value 1
					Documentation "Whether the beam should start on"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Beam flags used by CBeam::SetFlags"
			Name BeamFlags
			Values
			{
				Value
				{
					Name BEAM_FSHADEOUT
					Value 128
					Documentation "Beam fades out at its end point"
				}
				Value
				{
					Name BEAM_FSHADEIN
					Value 64
					Documentation "Beam fades in at its start point"
				}
				Value
				{
					Name BEAM_FSOLID
					Value 32
					Documentation "Beam is a solid shape"
				}
				Value
				{
					Name BEAM_FSINE
					Value 16
					Documentation "Beam shape follows a sinus shape"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Beam types used by CBeam::SetType"
			Name BeamType
			Values
			{
				Value
				{
					Name BEAM_HOSE
					Value 3
					Documentation "I don\'t even know what this does"
				}
				Value
				{
					Name BEAM_ENTS
					Value 2
					Documentation "Beam is a beam between entities"
				}
				Value
				{
					Name BEAM_ENTPOINT
					Value 1
					Documentation "Beam is a beam between point and entity"
				}
				Value
				{
					Name BEAM_POINTS
					Value 0
					Documentation "Beam is a beam between 2 points"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "path_track spawnflags"
			Name PathTrackSpawnFlags
			Values
			{
				Value
				{
					Name SF_PATH_ALTERNATE
					Value 32768
					Documentation ""
				}
				Value
				{
					Name SF_PATH_DISABLE_TRAIN
					Value 8
					Documentation ""
				}
				Value
				{
					Name SF_PATH_ALTREVERSE
					Value 4
					Documentation ""
				}
				Value
				{
					Name SF_PATH_FIREONCE
					Value 2
					Documentation ""
				}
				Value
				{
					Name SF_PATH_DISABLED
					Value 1
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Weapon id values"
			Name WeaponIds
			Values
			{
				Value
				{
					Name MAX_WEAPONS
					Value 256
					Documentation "Maximum number of weapons that the game supports"
				}
				Value
				{
					Name WEAPON_DISPLACER
					Value 29
					Documentation ""
				}
				Value
				{
					Name WEAPON_SHOCKRIFLE
					Value 28
					Documentation ""
				}
				Value
				{
					Name WEAPON_DESERT_EAGLE
					Value 27
					Documentation ""
				}
				Value
				{
					Name WEAPON_SPORELAUNCHER
					Value 26
					Documentation ""
				}
				Value
				{
					Name WEAPON_M16
					Value 25
					Documentation ""
				}
				Value
				{
					Name WEAPON_M249
					Value 24
					Documentation ""
				}
				Value
				{
					Name WEAPON_SNIPERRIFLE
					Value 23
					Documentation ""
				}
				Value
				{
					Name WEAPON_GRAPPLE
					Value 22
					Documentation ""
				}
				Value
				{
					Name WEAPON_MINIGUN
					Value 21
					Documentation ""
				}
				Value
				{
					Name WEAPON_PIPEWRENCH
					Value 20
					Documentation ""
				}
				Value
				{
					Name WEAPON_CROWBAR_ELECTRIC
					Value 19
					Documentation ""
				}
				Value
				{
					Name WEAPON_MEDKIT
					Value 18
					Documentation ""
				}
				Value
				{
					Name WEAPON_UZI
					Value 17
					Documentation ""
				}
				Value
				{
					Name WEAPON_SNARK
					Value 15
					Documentation ""
				}
				Value
				{
					Name WEAPON_SATCHEL
					Value 14
					Documentation ""
				}
				Value
				{
					Name WEAPON_TRIPMINE
					Value 13
					Documentation ""
				}
				Value
				{
					Name WEAPON_HANDGRENADE
					Value 12
					Documentation ""
				}
				Value
				{
					Name WEAPON_HORNETGUN
					Value 11
					Documentation ""
				}
				Value
				{
					Name WEAPON_EGON
					Value 10
					Documentation ""
				}
				Value
				{
					Name WEAPON_GAUSS
					Value 9
					Documentation ""
				}
				Value
				{
					Name WEAPON_RPG
					Value 8
					Documentation ""
				}
				Value
				{
					Name WEAPON_SHOTGUN
					Value 7
					Documentation ""
				}
				Value
				{
					Name WEAPON_CROSSBOW
					Value 6
					Documentation ""
				}
				Value
				{
					Name WEAPON_CHAINGUN
					Value 5
					Documentation ""
				}
				Value
				{
					Name WEAPON_MP5
					Value 4
					Documentation ""
				}
				Value
				{
					Name WEAPON_PYTHON
					Value 3
					Documentation ""
				}
				Value
				{
					Name WEAPON_GLOCK
					Value 2
					Documentation ""
				}
				Value
				{
					Name WEAPON_CROWBAR
					Value 1
					Documentation ""
				}
				Value
				{
					Name WEAPON_NONE
					Value 0
					Documentation "Weapon id used for invalid weapon ids."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Item flags used by ItemInfo::iFlags"
			Name ItemFlag
			Values
			{
				Value
				{
					Name ITEM_FLAG_ESSENTIAL
					Value 128
					Documentation "This weapon should not be dropped straight away when the player dies, only if he is gibbed or if he respawned."
				}
				Value
				{
					Name ITEM_FLAG_IGNOREWEAPONSTAY
					Value 64
					Documentation "Ignore weaponstay settings when respawning this weapon."
				}
				Value
				{
					Name ITEM_FLAG_DUALWIELD
					Value 32
					Documentation "Use a special HUD ammo configuration unique to a dual wielded weapons."
				}
				Value
				{
					Name ITEM_FLAG_EXHAUSTIBLE
					Value 16
					Documentation "A player can totally exhaust their ammo supply and lose this weapon."
				}
				Value
				{
					Name ITEM_FLAG_LIMITINWORLD
					Value 8
					Documentation "If there are few entity slots left, this item will not respawn."
				}
				Value
				{
					Name ITEM_FLAG_NOAUTOSWITCHEMPTY
					Value 4
					Documentation "Don\'t automatically switch away from this weapon when it runs out of ammo."
				}
				Value
				{
					Name ITEM_FLAG_NOAUTORELOAD
					Value 2
					Documentation "Don\'t automatically reload this weapon."
				}
				Value
				{
					Name ITEM_FLAG_SELECTONEMPTY
					Value 1
					Documentation "Allow this weapon to be selected if it has no ammo."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Sound flags for monster schedules."
			Name bits_SOUND
			Values
			{
				Value
				{
					Name bits_ALL_SOUNDS
					Value -1
					Documentation "All sound flags"
				}
				Value
				{
					Name bits_SOUND_BULLETHIT
					Value 128
					Documentation "a bullet just hit at this location"
				}
				Value
				{
					Name bits_SOUND_GARBAGE
					Value 64
					Documentation "trash cans, banana peels, old fast food bags."
				}
				Value
				{
					Name bits_SOUND_DANGER
					Value 32
					Documentation "pending danger. Grenade that is about to explode, explosive barrel that is damaged, falling crate"
				}
				Value
				{
					Name bits_SOUND_MEAT
					Value 16
					Documentation "gib or pork chop"
				}
				Value
				{
					Name bits_SOUND_CARCASS
					Value 8
					Documentation "dead body"
				}
				Value
				{
					Name bits_SOUND_PLAYER
					Value 4
					Documentation "all noises generated by player. walking, shooting, falling, splashing"
				}
				Value
				{
					Name bits_SOUND_WORLD
					Value 2
					Documentation "door opening/closing, glass breaking"
				}
				Value
				{
					Name bits_SOUND_COMBAT
					Value 1
					Documentation "gunshots, explosions"
				}
				Value
				{
					Name bits_SOUND_NONE
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "MoveToOrigin move type."
			Name MOVE_TYPE
			Values
			{
				Value
				{
					Name MOVE_STRAFE
					Value 1
					Documentation "Moves in direction specified, no matter which way monster is facing."
				}
				Value
				{
					Name MOVE_NORMAL
					Value 0
					Documentation "Normal move in the direction monster is facing."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Print type"
			Name PRINT_TYPE
			Values
			{
				Value
				{
					Name print_chat
					Value 2
					Documentation "Print to chat. Note: does not work. Use CPlayerFuncs::ClientPrint with HUD_PRINTTALK instead."
				}
				Value
				{
					Name print_center
					Value 1
					Documentation "Print to the center of the screen"
				}
				Value
				{
					Name print_console
					Value 0
					Documentation "Print to the console"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Console variable flags."
			Name FCVAR
			Values
			{
				Value
				{
					Name FCVAR_UNLOGGED
					Value 256
					Documentation "If this is a FCVAR_SERVER, don\'t log changes to the log file / console if we are creating a log"
				}
				Value
				{
					Name FCVAR_PRINTABLEONLY
					Value 128
					Documentation "This cvar\'s string cannot contain unprintable characters (e.g. used for player name etc)"
				}
				Value
				{
					Name FCVAR_SPONLY
					Value 64
					Documentation "This cvar cannot be changed by clients connected to a multiplayer server."
				}
				Value
				{
					Name FCVAR_PROTECTED
					Value 32
					Documentation "It\'s a server cvar, but we don\'t send the data since it\'s a password, etc."
				}
				Value
				{
					Name FCVAR_CLIENTDLL
					Value 16
					Documentation "Defined by the client dll."
				}
				Value
				{
					Name FCVAR_EXTDLL
					Value 8
					Documentation "Defined by external dll."
				}
				Value
				{
					Name FCVAR_SERVER
					Value 4
					Documentation "Notifies players when changed."
				}
				Value
				{
					Name FCVAR_USERINFO
					Value 2
					Documentation "Changes the client\'s info string."
				}
				Value
				{
					Name FCVAR_ARCHIVE
					Value 1
					Documentation "Save this cvar."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Contents of a spot in the world"
			Name CONTENTS
			Values
			{
				Value
				{
					Name CONTENTS_LADDER
					Value -16
					Documentation ""
				}
				Value
				{
					Name CONTENTS_SKY
					Value -6
					Documentation ""
				}
				Value
				{
					Name CONTENTS_LAVA
					Value -5
					Documentation ""
				}
				Value
				{
					Name CONTENTS_SLIME
					Value -4
					Documentation ""
				}
				Value
				{
					Name CONTENTS_WATER
					Value -3
					Documentation ""
				}
				Value
				{
					Name CONTENTS_SOLID
					Value -2
					Documentation ""
				}
				Value
				{
					Name CONTENTS_EMPTY
					Value -1
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Walk move types"
			Name WALKMOVE
			Values
			{
				Value
				{
					Name WALKMOVE_CHECKONLY
					Value 2
					Documentation "move, but don\'t touch triggers"
				}
				Value
				{
					Name WALKMOVE_WORLDONLY
					Value 1
					Documentation "doesn\'t hit ANY entities, no matter what the solid type"
				}
				Value
				{
					Name WALKMOVE_NORMAL
					Value 0
					Documentation "normal walkmove"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Door flags."
			Name DoorFlag
			Values
			{
				Value
				{
					Name SF_DOOR_NO_LINK_CHECKING
					Value 1024
					Documentation "Don\'t make sure the doors are in-sync."
				}
				Value
				{
					Name SF_DOOR_SILENT
					Value -2147483648
					Documentation ""
				}
				Value
				{
					Name SF_DOOR_NOMONSTERS
					Value 512
					Documentation "Monster can\'t open"
				}
				Value
				{
					Name SF_DOOR_USE_ONLY
					Value 256
					Documentation "door must be opened by player\'s use button."
				}
				Value
				{
					Name SF_DOOR_ROTATE_X
					Value 128
					Documentation ""
				}
				Value
				{
					Name SF_DOOR_ROTATE_Z
					Value 64
					Documentation ""
				}
				Value
				{
					Name SF_DOOR_NO_AUTO_RETURN
					Value 32
					Documentation ""
				}
				Value
				{
					Name SF_DOOR_ONEWAY
					Value 16
					Documentation ""
				}
				Value
				{
					Name SF_DOOR_PASSABLE
					Value 8
					Documentation ""
				}
				Value
				{
					Name SF_DOOR_ROTATE_BACKWARDS
					Value 2
					Documentation ""
				}
				Value
				{
					Name SF_DOOR_START_OPEN
					Value 1
					Documentation ""
				}
				Value
				{
					Name SF_DOOR_ROTATE_Y
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Button codes used by CBaseButton"
			Name ButtonCode
			Values
			{
				Value
				{
					Name BUTTON_RETURN
					Value 2
					Documentation "Return the button to its default state"
				}
				Value
				{
					Name BUTTON_ACTIVATE
					Value 1
					Documentation "Activate the button"
				}
				Value
				{
					Name BUTTON_NOTHING
					Value 0
					Documentation "Do nothing"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Satchel codes"
			Name SATCHELCODE
			Values
			{
				Value
				{
					Name SATCHEL_RELEASE
					Value 1
					Documentation "Release all satches charges owner by a player from their owner"
				}
				Value
				{
					Name SATCHEL_DETONATE
					Value 0
					Documentation "Detonates all satchel charges owned by a player"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Player hook flags. Used to skip execution of code when a hook performs an action that overrides built-in behavior."
			Name PlayerHookFlag
			Values
			{
				Value
				{
					Name PlrHook_SkipUse
					Value 2
					Documentation "Don\'t run +use checks"
				}
				Value
				{
					Name PlrHook_SkipVehicles
					Value 1
					Documentation "Don\'t run vehicle checks"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Player view mode."
			Name PlayerViewMode
			Values
			{
				Value
				{
					Name ViewMode_ThirdPerson
					Value 1
					Documentation ""
				}
				Value
				{
					Name ViewMode_FirstPerson
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Player animations, set using CBasePlayer::SetAnimation."
			Name PLAYER_ANIM
			Values
			{
				Value
				{
					Name PLAYER_BARNACLE_CHEW
					Value 11
					Documentation ""
				}
				Value
				{
					Name PLAYER_BARNACLE_CHOMP
					Value 10
					Documentation ""
				}
				Value
				{
					Name PLAYER_BARNACLE_PULL
					Value 9
					Documentation ""
				}
				Value
				{
					Name PLAYER_BARNACLE_HIT
					Value 8
					Documentation ""
				}
				Value
				{
					Name PLAYER_DEPLOY
					Value 7
					Documentation ""
				}
				Value
				{
					Name PLAYER_RELOAD
					Value 6
					Documentation ""
				}
				Value
				{
					Name PLAYER_ATTACK1
					Value 5
					Documentation ""
				}
				Value
				{
					Name PLAYER_DIE
					Value 4
					Documentation ""
				}
				Value
				{
					Name PLAYER_SUPERJUMP
					Value 3
					Documentation ""
				}
				Value
				{
					Name PLAYER_JUMP
					Value 2
					Documentation ""
				}
				Value
				{
					Name PLAYER_WALK
					Value 1
					Documentation ""
				}
				Value
				{
					Name PLAYER_IDLE
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Player physics flags used in CBasePlayer::m_afPhysicsFlags"
			Name PFLAG
			Values
			{
				Value
				{
					Name PFLAG_CAMERA
					Value 128
					Documentation "Looking through a trigger_camera"
				}
				Value
				{
					Name PFLAG_GRAPPLE
					Value 64
					Documentation "Toggle grapple use"
				}
				Value
				{
					Name PFLAG_OBSERVER
					Value 32
					Documentation "player is locked in stationary cam mode. Spectators can move, observers can\'t."
				}
				Value
				{
					Name PFLAG_USING
					Value 16
					Documentation "Using a continuous entity"
				}
				Value
				{
					Name PFLAG_DUCKING
					Value 8
					Documentation "In the process of ducking, but totally squatted yet"
				}
				Value
				{
					Name PFLAG_ONBARNACLE
					Value 4
					Documentation ""
				}
				Value
				{
					Name PFLAG_ONTRAIN
					Value 2
					Documentation ""
				}
				Value
				{
					Name PFLAG_ONSWING
					Value 1
					Documentation ""
				}
				Value
				{
					Name PFLAG_ONLADDER
					Value 1
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Train modes used by CBasePlayer::m_iTrain"
			Name Train
			Values
			{
				Value
				{
					Name TRAIN_BACK
					Value 5
					Documentation ""
				}
				Value
				{
					Name TRAIN_FAST
					Value 4
					Documentation ""
				}
				Value
				{
					Name TRAIN_MEDIUM
					Value 3
					Documentation ""
				}
				Value
				{
					Name TRAIN_SLOW
					Value 2
					Documentation ""
				}
				Value
				{
					Name TRAIN_NEUTRAL
					Value 1
					Documentation ""
				}
				Value
				{
					Name TRAIN_OFF
					Value 0
					Documentation ""
				}
				Value
				{
					Name TRAIN_NEW
					Value 192
					Documentation ""
				}
				Value
				{
					Name TRAIN_ACTIVE
					Value 128
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Bit field values for entvars_t.buttons.\nUsed by players to determine which buttons have been pressed"
			Name In_Buttons
			Values
			{
				Value
				{
					Name IN_SCORE
					Value 32768
					Documentation "Used by client.dll for when scoreboard is held down"
				}
				Value
				{
					Name IN_ALT1
					Value 16384
					Documentation "Tertiary attack"
				}
				Value
				{
					Name IN_RELOAD
					Value 8192
					Documentation Reload
				}
				Value
				{
					Name IN_RUN
					Value 4096
					Documentation Run/Walk
				}
				Value
				{
					Name IN_ATTACK2
					Value 2048
					Documentation "Secondary attack"
				}
				Value
				{
					Name IN_MOVERIGHT
					Value 1024
					Documentation "Move right"
				}
				Value
				{
					Name IN_MOVELEFT
					Value 512
					Documentation "Move left"
				}
				Value
				{
					Name IN_RIGHT
					Value 256
					Documentation ""
				}
				Value
				{
					Name IN_LEFT
					Value 128
					Documentation ""
				}
				Value
				{
					Name IN_CANCEL
					Value 64
					Documentation ""
				}
				Value
				{
					Name IN_USE
					Value 32
					Documentation Use
				}
				Value
				{
					Name IN_BACK
					Value 16
					Documentation "Move backward"
				}
				Value
				{
					Name IN_FORWARD
					Value 8
					Documentation "Move forward"
				}
				Value
				{
					Name IN_DUCK
					Value 4
					Documentation Duck
				}
				Value
				{
					Name IN_JUMP
					Value 2
					Documentation Jump
				}
				Value
				{
					Name IN_ATTACK
					Value 1
					Documentation "Primary attack"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Observer modes"
			Name ObserverMode
			Values
			{
				Value
				{
					Name OBS_ROAMING
					Value 2
					Documentation Roaming
				}
				Value
				{
					Name OBS_CHASE_FREE
					Value 1
					Documentation "Free movement"
				}
				Value
				{
					Name OBS_CHASE_LOCKED
					Value 3
					Documentation "Chase locked"
				}
				Value
				{
					Name OBS_NONE
					Value 0
					Documentation "Player not in observer mode"
				}
				Value
				{
					Name OBS_ENTERING
					Value -1
					Documentation "Player in the process of entering observer mode"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Key Codes"
			Name KeyCode
			Values
			{
				Value
				{
					Name KEY_LAST
					Value 103
					Documentation "The last number in the range of key codes."
				}
				Value
				{
					Name KEY_F12
					Value 102
					Documentation F12
				}
				Value
				{
					Name KEY_F11
					Value 101
					Documentation F11
				}
				Value
				{
					Name KEY_F10
					Value 100
					Documentation F10
				}
				Value
				{
					Name KEY_F9
					Value 99
					Documentation F9
				}
				Value
				{
					Name KEY_F8
					Value 98
					Documentation F8
				}
				Value
				{
					Name KEY_F7
					Value 97
					Documentation F7
				}
				Value
				{
					Name KEY_F6
					Value 96
					Documentation F6
				}
				Value
				{
					Name KEY_F5
					Value 95
					Documentation F5
				}
				Value
				{
					Name KEY_F4
					Value 94
					Documentation F4
				}
				Value
				{
					Name KEY_F3
					Value 93
					Documentation F3
				}
				Value
				{
					Name KEY_F2
					Value 92
					Documentation F2
				}
				Value
				{
					Name KEY_F1
					Value 91
					Documentation F1
				}
				Value
				{
					Name KEY_RIGHT
					Value 90
					Documentation RIGHT
				}
				Value
				{
					Name KEY_DOWN
					Value 89
					Documentation DOWN
				}
				Value
				{
					Name KEY_LEFT
					Value 88
					Documentation LEFT
				}
				Value
				{
					Name KEY_UP
					Value 87
					Documentation UP
				}
				Value
				{
					Name KEY_APP
					Value 86
					Documentation APP
				}
				Value
				{
					Name KEY_RWIN
					Value 85
					Documentation RWIN
				}
				Value
				{
					Name KEY_LWIN
					Value 84
					Documentation LWIN
				}
				Value
				{
					Name KEY_RCONTROL
					Value 83
					Documentation RCONTROL
				}
				Value
				{
					Name KEY_LCONTROL
					Value 82
					Documentation LCONTROL
				}
				Value
				{
					Name KEY_RALT
					Value 81
					Documentation RALT
				}
				Value
				{
					Name KEY_LALT
					Value 80
					Documentation LALT
				}
				Value
				{
					Name KEY_RSHIFT
					Value 79
					Documentation RSHIFT
				}
				Value
				{
					Name KEY_LSHIFT
					Value 78
					Documentation LSHIFT
				}
				Value
				{
					Name KEY_BREAK
					Value 77
					Documentation BREAK
				}
				Value
				{
					Name KEY_PAGEDOWN
					Value 76
					Documentation PAGEDOWN
				}
				Value
				{
					Name KEY_PAGEUP
					Value 75
					Documentation PAGEUP
				}
				Value
				{
					Name KEY_END
					Value 74
					Documentation END
				}
				Value
				{
					Name KEY_HOME
					Value 73
					Documentation HOME
				}
				Value
				{
					Name KEY_DELETE
					Value 72
					Documentation DELETE
				}
				Value
				{
					Name KEY_INSERT
					Value 71
					Documentation INSERT
				}
				Value
				{
					Name KEY_SCROLLLOCK
					Value 70
					Documentation SCROLLLOCK
				}
				Value
				{
					Name KEY_ESCAPE
					Value 69
					Documentation ESCAPE
				}
				Value
				{
					Name KEY_NUMLOCK
					Value 68
					Documentation NUMLOCK
				}
				Value
				{
					Name KEY_CAPSLOCK
					Value 67
					Documentation CAPSLOCK
				}
				Value
				{
					Name KEY_TAB
					Value 66
					Documentation TAB
				}
				Value
				{
					Name KEY_BACKSPACE
					Value 65
					Documentation BACKSPACE
				}
				Value
				{
					Name KEY_SPACE
					Value 64
					Documentation SPACE
				}
				Value
				{
					Name KEY_ENTER
					Value 63
					Documentation ENTER
				}
				Value
				{
					Name KEY_EQUAL
					Value 62
					Documentation EQUAL
				}
				Value
				{
					Name KEY_MINUS
					Value 61
					Documentation MINUS
				}
				Value
				{
					Name KEY_BACKSLASH
					Value 60
					Documentation BACKSLASH
				}
				Value
				{
					Name KEY_SLASH
					Value 59
					Documentation SLASH
				}
				Value
				{
					Name KEY_PERIOD
					Value 58
					Documentation PERIOD
				}
				Value
				{
					Name KEY_COMMA
					Value 57
					Documentation COMMA
				}
				Value
				{
					Name KEY_BACKQUOTE
					Value 56
					Documentation BACKQUOTE
				}
				Value
				{
					Name KEY_APOSTROPHE
					Value 55
					Documentation APOSTROPHE
				}
				Value
				{
					Name KEY_SEMICOLON
					Value 54
					Documentation SEMICOLON
				}
				Value
				{
					Name KEY_RBRACKET
					Value 53
					Documentation RBRACKET
				}
				Value
				{
					Name KEY_LBRACKET
					Value 52
					Documentation LBRACKET
				}
				Value
				{
					Name KEY_PAD_DECIMAL
					Value 51
					Documentation "Numpad DECIMAL"
				}
				Value
				{
					Name KEY_PAD_ENTER
					Value 50
					Documentation "Numpad ENTER"
				}
				Value
				{
					Name KEY_PAD_PLUS
					Value 49
					Documentation "Numpad PLUS"
				}
				Value
				{
					Name KEY_PAD_MINUS
					Value 48
					Documentation "Numpad MINUS"
				}
				Value
				{
					Name KEY_PAD_MULTIPLY
					Value 47
					Documentation "Numpad MULTIPLY"
				}
				Value
				{
					Name KEY_PAD_DIVIDE
					Value 46
					Documentation "Numpad DIVIDE"
				}
				Value
				{
					Name KEY_PAD_9
					Value 45
					Documentation "Numpad 9"
				}
				Value
				{
					Name KEY_PAD_8
					Value 44
					Documentation "Numpad 8"
				}
				Value
				{
					Name KEY_PAD_7
					Value 43
					Documentation "Numpad 7"
				}
				Value
				{
					Name KEY_PAD_6
					Value 42
					Documentation "Numpad 6"
				}
				Value
				{
					Name KEY_PAD_5
					Value 41
					Documentation "Numpad 5"
				}
				Value
				{
					Name KEY_PAD_4
					Value 40
					Documentation "Numpad 4"
				}
				Value
				{
					Name KEY_PAD_3
					Value 39
					Documentation "Numpad 3"
				}
				Value
				{
					Name KEY_PAD_2
					Value 38
					Documentation "Numpad 2"
				}
				Value
				{
					Name KEY_PAD_1
					Value 37
					Documentation "Numpad 1"
				}
				Value
				{
					Name KEY_PAD_0
					Value 36
					Documentation "Numpad 0"
				}
				Value
				{
					Name KEY_Z
					Value 35
					Documentation Z
				}
				Value
				{
					Name KEY_Y
					Value 34
					Documentation Y
				}
				Value
				{
					Name KEY_X
					Value 33
					Documentation X
				}
				Value
				{
					Name KEY_W
					Value 32
					Documentation W
				}
				Value
				{
					Name KEY_V
					Value 31
					Documentation V
				}
				Value
				{
					Name KEY_U
					Value 30
					Documentation U
				}
				Value
				{
					Name KEY_T
					Value 29
					Documentation T
				}
				Value
				{
					Name KEY_S
					Value 28
					Documentation S
				}
				Value
				{
					Name KEY_R
					Value 27
					Documentation R
				}
				Value
				{
					Name KEY_Q
					Value 26
					Documentation Q
				}
				Value
				{
					Name KEY_P
					Value 25
					Documentation P
				}
				Value
				{
					Name KEY_O
					Value 24
					Documentation O
				}
				Value
				{
					Name KEY_N
					Value 23
					Documentation N
				}
				Value
				{
					Name KEY_M
					Value 22
					Documentation M
				}
				Value
				{
					Name KEY_L
					Value 21
					Documentation L
				}
				Value
				{
					Name KEY_K
					Value 20
					Documentation K
				}
				Value
				{
					Name KEY_J
					Value 19
					Documentation J
				}
				Value
				{
					Name KEY_I
					Value 18
					Documentation I
				}
				Value
				{
					Name KEY_H
					Value 17
					Documentation H
				}
				Value
				{
					Name KEY_G
					Value 16
					Documentation G
				}
				Value
				{
					Name KEY_F
					Value 15
					Documentation F
				}
				Value
				{
					Name KEY_E
					Value 14
					Documentation E
				}
				Value
				{
					Name KEY_D
					Value 13
					Documentation D
				}
				Value
				{
					Name KEY_C
					Value 12
					Documentation C
				}
				Value
				{
					Name KEY_B
					Value 11
					Documentation B
				}
				Value
				{
					Name KEY_A
					Value 10
					Documentation A
				}
				Value
				{
					Name KEY_9
					Value 9
					Documentation 9
				}
				Value
				{
					Name KEY_8
					Value 8
					Documentation 8
				}
				Value
				{
					Name KEY_7
					Value 7
					Documentation 7
				}
				Value
				{
					Name KEY_6
					Value 6
					Documentation 6
				}
				Value
				{
					Name KEY_5
					Value 5
					Documentation 5
				}
				Value
				{
					Name KEY_4
					Value 4
					Documentation 4
				}
				Value
				{
					Name KEY_3
					Value 3
					Documentation 3
				}
				Value
				{
					Name KEY_2
					Value 2
					Documentation 2
				}
				Value
				{
					Name KEY_1
					Value 1
					Documentation 1
				}
				Value
				{
					Name KEY_0
					Value 0
					Documentation 0
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Hit Group standards"
			Name HITGROUP
			Values
			{
				Value
				{
					Name HITGROUP_RIGHTLEG
					Value 7
					Documentation ""
				}
				Value
				{
					Name HITGROUP_LEFTLEG
					Value 6
					Documentation ""
				}
				Value
				{
					Name HITGROUP_RIGHTARM
					Value 5
					Documentation ""
				}
				Value
				{
					Name HITGROUP_LEFTARM
					Value 4
					Documentation ""
				}
				Value
				{
					Name HITGROUP_STOMACH
					Value 3
					Documentation ""
				}
				Value
				{
					Name HITGROUP_CHEST
					Value 2
					Documentation ""
				}
				Value
				{
					Name HITGROUP_HEAD
					Value 1
					Documentation ""
				}
				Value
				{
					Name HITGROUP_GENERIC
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Tells us what a monster can do.\nSee MonsterEntity::m_afCapability"
			Name bits_CAPABILITY
			Values
			{
				Value
				{
					Name bits_CAP_DOORS_GROUP
					Value 832
					Documentation "Combination of bits_CAP_USE, bits_CAP_AUTO_DOORS, and bits_CAP_OPEN_DOORS"
				}
				Value
				{
					Name bits_CAP_FALL_DAMAGE
					Value 131072
					Documentation "can take fall damage"
				}
				Value
				{
					Name bits_CAP_USE_TANK
					Value 65536
					Documentation "can use func_tanks"
				}
				Value
				{
					Name bits_CAP_FLY
					Value 32768
					Documentation "can fly, move all around"
				}
				Value
				{
					Name bits_CAP_MELEE_ATTACK2
					Value 16384
					Documentation "can do a melee attack 2"
				}
				Value
				{
					Name bits_CAP_MELEE_ATTACK1
					Value 8192
					Documentation "can do a melee attack 1"
				}
				Value
				{
					Name bits_CAP_RANGE_ATTACK2
					Value 4096
					Documentation "can do a range attack 2"
				}
				Value
				{
					Name bits_CAP_RANGE_ATTACK1
					Value 2048
					Documentation "can do a range attack 1"
				}
				Value
				{
					Name bits_CAP_TURN_HEAD
					Value 1024
					Documentation "can turn head, always bone controller 0"
				}
				Value
				{
					Name bits_CAP_OPEN_DOORS
					Value 512
					Documentation "can open manual doors"
				}
				Value
				{
					Name bits_CAP_AUTO_DOORS
					Value 256
					Documentation "can trigger auto doors"
				}
				Value
				{
					Name bits_CAP_HEAR
					Value 128
					Documentation "can hear forced sounds"
				}
				Value
				{
					Name bits_CAP_USE
					Value 64
					Documentation "open doors/push buttons/pull levers"
				}
				Value
				{
					Name bits_CAP_CLIMB
					Value 32
					Documentation "climb ladders/ropes"
				}
				Value
				{
					Name bits_CAP_SWIM
					Value 16
					Documentation "proficiently navigate in water"
				}
				Value
				{
					Name bits_CAP_SQUAD
					Value 8
					Documentation "can form squads"
				}
				Value
				{
					Name bits_CAP_STRAFE
					Value 4
					Documentation "strafe ( walk/run sideways)"
				}
				Value
				{
					Name bits_CAP_JUMP
					Value 2
					Documentation jump/leap
				}
				Value
				{
					Name bits_CAP_DUCK
					Value 1
					Documentation crouch
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Monster event types"
			Name MonsterEventType
			Values
			{
				Value
				{
					Name MONSTER_EVENT_SWISHSOUND
					Value 2010
					Documentation ""
				}
				Value
				{
					Name MONSTER_EVENT_FOOTSTEP
					Value 2003
					Documentation ""
				}
				Value
				{
					Name MONSTER_EVENT_BODYDROP_HEAVY
					Value 2002
					Documentation ""
				}
				Value
				{
					Name MONSTER_EVENT_BODYDROP_LIGHT
					Value 2001
					Documentation ""
				}
				Value
				{
					Name EVENT_CLIENT
					Value 5000
					Documentation ""
				}
				Value
				{
					Name EVENT_SHARED
					Value 2000
					Documentation ""
				}
				Value
				{
					Name EVENT_SCRIPTED
					Value 1000
					Documentation ""
				}
				Value
				{
					Name EVENT_SPECIFIC
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Task types for the monster AI"
			Name TASK_TYPE
			Values
			{
				Value
				{
					Name LAST_COMMON_TASK
					Value 112
					Documentation ""
				}
				Value
				{
					Name TASK_PATH_WAYPOINT_DEPARTURE
					Value 111
					Documentation ""
				}
				Value
				{
					Name TASK_PATH_WAYPOINT_WAIT
					Value 110
					Documentation ""
				}
				Value
				{
					Name TASK_PATH_WAYPOINT_ARRIVAL
					Value 109
					Documentation ""
				}
				Value
				{
					Name TASK_PATH_WAYPOINT_ANGLES
					Value 108
					Documentation ""
				}
				Value
				{
					Name TASK_PATH_WAYPOINT_MOVEMENT
					Value 107
					Documentation ""
				}
				Value
				{
					Name TASK_PATH_WAYPOINT_INITIALIZE
					Value 106
					Documentation ""
				}
				Value
				{
					Name TASK_MOVE_TO_ENEMY
					Value 105
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_BESTCOMBATSOUND
					Value 104
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_COVER_DISTANCE_FROM_ENEMY
					Value 103
					Documentation ""
				}
				Value
				{
					Name TASK_RUN_TO_TANK
					Value 102
					Documentation ""
				}
				Value
				{
					Name TASK_USE_TANK
					Value 101
					Documentation ""
				}
				Value
				{
					Name TASK_PLAY_SEQUENCE_COWER
					Value 100
					Documentation ""
				}
				Value
				{
					Name TASK_MOVE_TO_TARGET_RANGE_FORCE
					Value 99
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT_FOR_MOVEMENT_GRENADE
					Value 98
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_ATTACKPOINT_TO_ENEMY
					Value 97
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT_AT_TANK
					Value 96
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_TANK
					Value 95
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_TANK
					Value 94
					Documentation ""
				}
				Value
				{
					Name TASK_MOVE_AWAY_PLAYERPATH
					Value 93
					Documentation ""
				}
				Value
				{
					Name TASK_WALK_PLAYERPATH_FOR_UNITS
					Value 92
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT_FOR_MOVEMENT_ENEMY_OCCLUDED
					Value 91
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT_FOR_MOVEMENT_AP
					Value 90
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT_FOR_MOVEMENT
					Value 89
					Documentation ""
				}
				Value
				{
					Name TASK_FORGET
					Value 88
					Documentation ""
				}
				Value
				{
					Name TASK_REMEMBER
					Value 87
					Documentation ""
				}
				Value
				{
					Name TASK_TURN_RIGHT
					Value 86
					Documentation ""
				}
				Value
				{
					Name TASK_TURN_LEFT
					Value 85
					Documentation ""
				}
				Value
				{
					Name TASK_STOP_MOVING
					Value 84
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT_INDEFINITE
					Value 83
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT_RANDOM
					Value 82
					Documentation ""
				}
				Value
				{
					Name TASK_FACE_SCRIPT
					Value 81
					Documentation ""
				}
				Value
				{
					Name TASK_PLANT_ON_SCRIPT
					Value 80
					Documentation ""
				}
				Value
				{
					Name TASK_ENABLE_SCRIPT
					Value 79
					Documentation ""
				}
				Value
				{
					Name TASK_PLAY_SCRIPT
					Value 78
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT_FOR_SCRIPT
					Value 77
					Documentation ""
				}
				Value
				{
					Name TASK_DIE
					Value 76
					Documentation ""
				}
				Value
				{
					Name TASK_EAT
					Value 75
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_COVER_FROM_ORIGIN
					Value 74
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_FAR_NODE_COVER_FROM_ENEMY
					Value 73
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_NEAR_NODE_COVER_FROM_ENEMY
					Value 72
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_NODE_COVER_FROM_ENEMY
					Value 71
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_LATERAL_COVER_FROM_ENEMY
					Value 70
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_COVER_FROM_ENEMY
					Value 69
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_COVER_FROM_BEST_SOUND
					Value 68
					Documentation ""
				}
				Value
				{
					Name TASK_SOUND_DIE
					Value 67
					Documentation ""
				}
				Value
				{
					Name TASK_SOUND_PAIN
					Value 66
					Documentation ""
				}
				Value
				{
					Name TASK_SOUND_WAKE
					Value 65
					Documentation ""
				}
				Value
				{
					Name TASK_SOUND_IDLE
					Value 64
					Documentation ""
				}
				Value
				{
					Name TASK_PLAY_SEQUENCE_FACE_TARGET
					Value 63
					Documentation ""
				}
				Value
				{
					Name TASK_PLAY_SEQUENCE_FACE_ENEMY
					Value 62
					Documentation ""
				}
				Value
				{
					Name TASK_PLAY_SEQUENCE
					Value 61
					Documentation ""
				}
				Value
				{
					Name TASK_CLEAR_FAIL_SCHEDULE
					Value 60
					Documentation ""
				}
				Value
				{
					Name TASK_SET_FAIL_SCHEDULE
					Value 59
					Documentation ""
				}
				Value
				{
					Name TASK_SET_SCHEDULE
					Value 58
					Documentation ""
				}
				Value
				{
					Name TASK_SET_ACTIVITY
					Value 57
					Documentation ""
				}
				Value
				{
					Name TASK_SOUND_DEATH
					Value 56
					Documentation ""
				}
				Value
				{
					Name TASK_SOUND_ANGRY
					Value 55
					Documentation ""
				}
				Value
				{
					Name TASK_DODGE_RIGHT
					Value 54
					Documentation ""
				}
				Value
				{
					Name TASK_DODGE_LEFT
					Value 53
					Documentation ""
				}
				Value
				{
					Name TASK_STEP_BACK
					Value 52
					Documentation ""
				}
				Value
				{
					Name TASK_STEP_FORWARD
					Value 51
					Documentation ""
				}
				Value
				{
					Name TASK_STEP_RIGHT
					Value 50
					Documentation ""
				}
				Value
				{
					Name TASK_STEP_LEFT
					Value 49
					Documentation ""
				}
				Value
				{
					Name TASK_GUARD
					Value 48
					Documentation ""
				}
				Value
				{
					Name TASK_STAND
					Value 47
					Documentation ""
				}
				Value
				{
					Name TASK_CROUCH
					Value 46
					Documentation ""
				}
				Value
				{
					Name TASK_SPECIAL_ATTACK2
					Value 45
					Documentation ""
				}
				Value
				{
					Name TASK_SPECIAL_ATTACK1
					Value 44
					Documentation ""
				}
				Value
				{
					Name TASK_RELOAD_NOTURN
					Value 43
					Documentation ""
				}
				Value
				{
					Name TASK_MELEE_ATTACK2_NOTURN
					Value 42
					Documentation ""
				}
				Value
				{
					Name TASK_MELEE_ATTACK1_NOTURN
					Value 41
					Documentation ""
				}
				Value
				{
					Name TASK_RANGE_ATTACK2_NOTURN
					Value 40
					Documentation ""
				}
				Value
				{
					Name TASK_RANGE_ATTACK1_NOTURN
					Value 39
					Documentation ""
				}
				Value
				{
					Name TASK_RELOAD
					Value 38
					Documentation ""
				}
				Value
				{
					Name TASK_MELEE_ATTACK2
					Value 37
					Documentation ""
				}
				Value
				{
					Name TASK_MELEE_ATTACK1
					Value 36
					Documentation ""
				}
				Value
				{
					Name TASK_RANGE_ATTACK2
					Value 35
					Documentation ""
				}
				Value
				{
					Name TASK_RANGE_ATTACK1
					Value 34
					Documentation ""
				}
				Value
				{
					Name TASK_FACE_LASTPOSITION
					Value 33
					Documentation ""
				}
				Value
				{
					Name TASK_FACE_TARGET
					Value 32
					Documentation ""
				}
				Value
				{
					Name TASK_FACE_HINTNODE
					Value 31
					Documentation ""
				}
				Value
				{
					Name TASK_FACE_ENEMY
					Value 30
					Documentation ""
				}
				Value
				{
					Name TASK_FACE_ROUTE
					Value 29
					Documentation ""
				}
				Value
				{
					Name TASK_FACE_IDEAL
					Value 28
					Documentation ""
				}
				Value
				{
					Name TASK_SMALL_FLINCH
					Value 27
					Documentation ""
				}
				Value
				{
					Name TASK_CLEAR_HINTNODE
					Value 26
					Documentation ""
				}
				Value
				{
					Name TASK_FIND_HINTNODE
					Value 25
					Documentation ""
				}
				Value
				{
					Name TASK_PLAY_ACTIVE_IDLE
					Value 24
					Documentation ""
				}
				Value
				{
					Name TASK_CLEAR_LASTPOSITION
					Value 23
					Documentation ""
				}
				Value
				{
					Name TASK_STORE_LASTPOSITION
					Value 22
					Documentation ""
				}
				Value
				{
					Name TASK_CLEAR_MOVE_WAIT
					Value 21
					Documentation ""
				}
				Value
				{
					Name TASK_STRAFE_PATH
					Value 20
					Documentation ""
				}
				Value
				{
					Name TASK_WALK_PATH
					Value 19
					Documentation ""
				}
				Value
				{
					Name TASK_RUN_PATH
					Value 18
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_BESTSCENT
					Value 17
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_BESTSOUND
					Value 16
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_LASTPOSITION
					Value 15
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_HINTNODE
					Value 14
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_TARGET
					Value 13
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_SPOT
					Value 12
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_LEADER
					Value 11
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_ENEMY_CORPSE
					Value 10
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_ENEMY_LKP
					Value 9
					Documentation ""
				}
				Value
				{
					Name TASK_GET_PATH_TO_ENEMY
					Value 8
					Documentation ""
				}
				Value
				{
					Name TASK_MOVE_TO_TARGET_RANGE
					Value 7
					Documentation ""
				}
				Value
				{
					Name TASK_RUN_TO_TARGET
					Value 6
					Documentation ""
				}
				Value
				{
					Name TASK_WALK_TO_TARGET
					Value 5
					Documentation ""
				}
				Value
				{
					Name TASK_SUGGEST_STATE
					Value 4
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT_PVS
					Value 3
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT_FACE_ENEMY
					Value 2
					Documentation ""
				}
				Value
				{
					Name TASK_WAIT
					Value 1
					Documentation ""
				}
				Value
				{
					Name TASK_INVALID
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Schedule types for monster AI"
			Name SCHEDULE_TYPE
			Values
			{
				Value
				{
					Name LAST_COMMON_SCHEDULE
					Value 57
					Documentation ""
				}
				Value
				{
					Name SCHED_PATH_WAYPOINT
					Value 56
					Documentation ""
				}
				Value
				{
					Name SCHED_GUARD_POINT
					Value 55
					Documentation ""
				}
				Value
				{
					Name SCHED_TELEPORT_FALL
					Value 54
					Documentation ""
				}
				Value
				{
					Name SCHED_SMALL_FLINCH_SPECIAL
					Value 53
					Documentation ""
				}
				Value
				{
					Name SCHED_RANGE_ATTACK1_DEFAULT
					Value 52
					Documentation ""
				}
				Value
				{
					Name SCHED_LOSE_ENEMY
					Value 51
					Documentation ""
				}
				Value
				{
					Name SCHED_FIND_ATTACK_POINT
					Value 50
					Documentation ""
				}
				Value
				{
					Name SCHED_WAIT_AT_TANK
					Value 49
					Documentation ""
				}
				Value
				{
					Name SCHED_MOVE_TO_TANK
					Value 48
					Documentation ""
				}
				Value
				{
					Name SCHED_MOVE_AWAY_PLAYERFOLLOW
					Value 47
					Documentation ""
				}
				Value
				{
					Name SCHED_TARGET_PLAYERCHASE_FORCE
					Value 46
					Documentation ""
				}
				Value
				{
					Name SCHED_TARGET_PLAYERCHASE
					Value 45
					Documentation ""
				}
				Value
				{
					Name SCHED_TARGET_PLAYERFACE
					Value 44
					Documentation ""
				}
				Value
				{
					Name SCHED_FAIL
					Value 43
					Documentation ""
				}
				Value
				{
					Name SCHED_AISCRIPT
					Value 42
					Documentation ""
				}
				Value
				{
					Name SCHED_BARNACLE_VICTIM_CHOMP
					Value 41
					Documentation ""
				}
				Value
				{
					Name SCHED_BARNACLE_VICTIM_GRAB
					Value 40
					Documentation ""
				}
				Value
				{
					Name SCHED_WAKE
					Value 39
					Documentation ""
				}
				Value
				{
					Name SCHED_SLEEP
					Value 38
					Documentation ""
				}
				Value
				{
					Name SCHED_FOLLOW
					Value 37
					Documentation ""
				}
				Value
				{
					Name SCHED_WAIT_TILL_SEEN
					Value 36
					Documentation ""
				}
				Value
				{
					Name SCHED_WAIT_TRIGGER
					Value 35
					Documentation ""
				}
				Value
				{
					Name SCHED_DIE
					Value 34
					Documentation ""
				}
				Value
				{
					Name SCHED_AMBUSH
					Value 33
					Documentation ""
				}
				Value
				{
					Name SCHED_GUARD
					Value 32
					Documentation ""
				}
				Value
				{
					Name SCHED_RELOAD
					Value 31
					Documentation ""
				}
				Value
				{
					Name SCHED_ARM_WEAPON
					Value 30
					Documentation ""
				}
				Value
				{
					Name SCHED_STANDOFF
					Value 29
					Documentation ""
				}
				Value
				{
					Name SCHED_SPECIAL_ATTACK2
					Value 28
					Documentation ""
				}
				Value
				{
					Name SCHED_SPECIAL_ATTACK1
					Value 27
					Documentation ""
				}
				Value
				{
					Name SCHED_RANGE_ATTACK2
					Value 26
					Documentation ""
				}
				Value
				{
					Name SCHED_RANGE_ATTACK1
					Value 25
					Documentation ""
				}
				Value
				{
					Name SCHED_MELEE_ATTACK2
					Value 24
					Documentation ""
				}
				Value
				{
					Name SCHED_MELEE_ATTACK1
					Value 23
					Documentation ""
				}
				Value
				{
					Name SCHED_COWER
					Value 22
					Documentation ""
				}
				Value
				{
					Name SCHED_TAKE_COVER_FROM_ORIGIN
					Value 21
					Documentation ""
				}
				Value
				{
					Name SCHED_TAKE_COVER_FROM_BEST_SOUND
					Value 20
					Documentation ""
				}
				Value
				{
					Name SCHED_TAKE_COVER_FROM_ENEMY
					Value 19
					Documentation ""
				}
				Value
				{
					Name SCHED_SMALL_FLINCH
					Value 18
					Documentation ""
				}
				Value
				{
					Name SCHED_TARGET_CHASE
					Value 17
					Documentation ""
				}
				Value
				{
					Name SCHED_TARGET_FACE
					Value 16
					Documentation ""
				}
				Value
				{
					Name SCHED_VICTORY_DANCE
					Value 15
					Documentation ""
				}
				Value
				{
					Name SCHED_CHASE_ENEMY_FAILED
					Value 14
					Documentation ""
				}
				Value
				{
					Name SCHED_CHASE_ENEMY
					Value 13
					Documentation ""
				}
				Value
				{
					Name SCHED_COMBAT_STAND
					Value 12
					Documentation ""
				}
				Value
				{
					Name SCHED_COMBAT_FACE
					Value 11
					Documentation ""
				}
				Value
				{
					Name SCHED_INVESTIGATE_COMBAT
					Value 10
					Documentation ""
				}
				Value
				{
					Name SCHED_INVESTIGATE_SOUND
					Value 9
					Documentation ""
				}
				Value
				{
					Name SCHED_ALERT_STAND
					Value 8
					Documentation ""
				}
				Value
				{
					Name SCHED_ALERT_BIG_FLINCH
					Value 7
					Documentation ""
				}
				Value
				{
					Name SCHED_ALERT_SMALL_FLINCH
					Value 6
					Documentation ""
				}
				Value
				{
					Name SCHED_ALERT_FACE
					Value 5
					Documentation ""
				}
				Value
				{
					Name SCHED_WAKE_CALLED
					Value 4
					Documentation ""
				}
				Value
				{
					Name SCHED_WAKE_ANGRY
					Value 3
					Documentation ""
				}
				Value
				{
					Name SCHED_IDLE_WALK
					Value 2
					Documentation ""
				}
				Value
				{
					Name SCHED_IDLE_STAND
					Value 1
					Documentation ""
				}
				Value
				{
					Name SCHED_NONE
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "trigger conditions for scripted AI"
			Name AITRIGGER
			Values
			{
				Value
				{
					Name AITRIGGER_SEEPLAYER_NOT_IN_COMBAT
					Value 11
					Documentation "See Player, Not In Combat"
				}
				Value
				{
					Name AITRIGGER_SEEPLAYER_UNCONDITIONAL
					Value 10
					Documentation "See Player Unconditional"
				}
				Value
				{
					Name AITRIGGER_HEARCOMBAT
					Value 9
					Documentation "Hear Combat"
				}
				Value
				{
					Name AITRIGGER_HEARPLAYER
					Value 8
					Documentation "Hear Player"
				}
				Value
				{
					Name AITRIGGER_HEARWORLD
					Value 7
					Documentation "Hear World"
				}
				Value
				{
					Name AITRIGGER_SQUADLEADERDIE
					Value 6
					Documentation "Squad Leader Dead"
				}
				Value
				{
					Name AITRIGGER_SQUADMEMBERDIE
					Value 5
					Documentation "Squad Member Dead"
				}
				Value
				{
					Name AITRIGGER_DEATH
					Value 4
					Documentation Death
				}
				Value
				{
					Name AITRIGGER_HALFHEALTH
					Value 3
					Documentation "50% Health Remaining"
				}
				Value
				{
					Name AITRIGGER_TAKEDAMAGE
					Value 2
					Documentation "Take Damage"
				}
				Value
				{
					Name AITRIGGER_SEEPLAYER_ANGRY_AT_PLAYER
					Value 1
					Documentation "See Player"
				}
				Value
				{
					Name AITRIGGER_NONE
					Value 0
					Documentation "No Trigger"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "these bits represent the monster\'s memory"
			Name MonsterMemory
			Values
			{
				Value
				{
					Name bits_MEMORY_CUSTOM1
					Value -2147483648
					Documentation "Monster-specific memory"
				}
				Value
				{
					Name bits_MEMORY_CUSTOM2
					Value 1073741824
					Documentation "Monster-specific memory"
				}
				Value
				{
					Name bits_MEMORY_CUSTOM3
					Value 536870912
					Documentation "Monster-specific memory"
				}
				Value
				{
					Name bits_MEMORY_CUSTOM4
					Value 268435456
					Documentation "Monster-specific memory"
				}
				Value
				{
					Name bits_MEMORY_MOVE_RADIUS_ONLY
					Value 256
					Documentation "Can only get there within radius"
				}
				Value
				{
					Name bits_MEMORY_KILLED
					Value 128
					Documentation "HACKHACK -- remember that I\'ve already called my Killed()"
				}
				Value
				{
					Name bits_MEMORY_FLINCHED
					Value 64
					Documentation "Has already flinched"
				}
				Value
				{
					Name bits_MEMORY_MOVE_FAILED
					Value 32
					Documentation "Movement has already failed"
				}
				Value
				{
					Name bits_MEMORY_ON_PATH
					Value 16
					Documentation "Moving on a path"
				}
				Value
				{
					Name bits_MEMORY_PATH_FINISHED
					Value 8
					Documentation "Finished monster path (just used by big momma for now)"
				}
				Value
				{
					Name bits_MEMORY_SUSPICIOUS
					Value 4
					Documentation "Ally is suspicious of the player, and will move to provoked more easily"
				}
				Value
				{
					Name bits_MEMORY_INCOVER
					Value 2
					Documentation "monster knows it is in a covered position."
				}
				Value
				{
					Name bits_MEMORY_PROVOKED
					Value 1
					Documentation "right now only used for houndeyes."
				}
				Value
				{
					Name MEMORY_CLEAR
					Value 0
					Documentation "No memory."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Damage over time types."
			Name CDMG
			Values
			{
				Value
				{
					Name CDMG_TIMEBASED
					Value 8
					Documentation "Number of damage over time types"
				}
				Value
				{
					Name itbd_SlowFreeze
					Value 7
					Documentation ""
				}
				Value
				{
					Name itbd_SlowBurn
					Value 6
					Documentation ""
				}
				Value
				{
					Name itbd_Acid
					Value 5
					Documentation ""
				}
				Value
				{
					Name itbd_DrownRecover
					Value 4
					Documentation ""
				}
				Value
				{
					Name itbd_Radiation
					Value 3
					Documentation ""
				}
				Value
				{
					Name itbd_Poison
					Value 2
					Documentation ""
				}
				Value
				{
					Name itbd_NerveGas
					Value 1
					Documentation ""
				}
				Value
				{
					Name itbd_Paralyze
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "these bits represent conditions that may befall the monster, of which some are allowed\nto interrupt certain schedules. "
			Name MonsterCondition
			Values
			{
				Value
				{
					Name bits_COND_CAN_ATTACK
					Value 15360
					Documentation ""
				}
				Value
				{
					Name bits_COND_ALL_SPECIAL
					Value 805306368
					Documentation ""
				}
				Value
				{
					Name bits_COND_CAN_USE_TANK
					Value 16384
					Documentation "This monster can use a func_tank now"
				}
				Value
				{
					Name bits_COND_SCHEDULE_DONE
					Value -2147483648
					Documentation ""
				}
				Value
				{
					Name bits_COND_TASK_FAILED
					Value 1073741824
					Documentation ""
				}
				Value
				{
					Name bits_COND_SPECIAL2
					Value 536870912
					Documentation "Defined by individual monster"
				}
				Value
				{
					Name bits_COND_SPECIAL1
					Value 268435456
					Documentation "Defined by individual monster"
				}
				Value
				{
					Name bits_COND_CAN_MELEE_ATTACK2_MOVING
					Value 67108864
					Documentation ""
				}
				Value
				{
					Name bits_COND_CAN_RANGE_ATTACK2_MOVING
					Value 33554432
					Documentation ""
				}
				Value
				{
					Name bits_COND_CAN_MELEE_ATTACK1_MOVING
					Value 16777216
					Documentation ""
				}
				Value
				{
					Name bits_COND_CAN_RANGE_ATTACK1_MOVING
					Value 8388608
					Documentation ""
				}
				Value
				{
					Name bits_COND_SEE_NEMESIS
					Value 4194304
					Documentation "see my nemesis"
				}
				Value
				{
					Name bits_COND_SEE_CLIENT
					Value 2097152
					Documentation "see a client"
				}
				Value
				{
					Name bits_COND_ENEMY_DEAD
					Value 1048576
					Documentation "enemy was killed. If you get this in combat, try to find another enemy. If you get it in alert, victory dance."
				}
				Value
				{
					Name bits_COND_ENEMY_FACING_ME
					Value 524288
					Documentation "enemy is facing me"
				}
				Value
				{
					Name bits_COND_SMELL
					Value 262144
					Documentation "there is an interesting scent"
				}
				Value
				{
					Name bits_COND_HEAR_SOUND
					Value 131072
					Documentation "there is an interesting sound"
				}
				Value
				{
					Name bits_COND_NEW_ENEMY
					Value 65536
					Documentation ""
				}
				Value
				{
					Name bits_COND_PROVOKED
					Value 32768
					Documentation ""
				}
				Value
				{
					Name bits_COND_CAN_MELEE_ATTACK2
					Value 8192
					Documentation ""
				}
				Value
				{
					Name bits_COND_CAN_RANGE_ATTACK2
					Value 4096
					Documentation ""
				}
				Value
				{
					Name bits_COND_CAN_MELEE_ATTACK1
					Value 2048
					Documentation ""
				}
				Value
				{
					Name bits_COND_CAN_RANGE_ATTACK1
					Value 1024
					Documentation ""
				}
				Value
				{
					Name bits_COND_HEAVY_DAMAGE
					Value 512
					Documentation "hurt a lot"
				}
				Value
				{
					Name bits_COND_LIGHT_DAMAGE
					Value 256
					Documentation "hurt a little"
				}
				Value
				{
					Name bits_COND_ENEMY_TOOFAR
					Value 128
					Documentation ""
				}
				Value
				{
					Name bits_COND_SMELL_FOOD
					Value 64
					Documentation ""
				}
				Value
				{
					Name bits_COND_ENEMY_OCCLUDED
					Value 32
					Documentation "target entity occluded by the world"
				}
				Value
				{
					Name bits_COND_SEE_ENEMY
					Value 16
					Documentation "target entity is in full view."
				}
				Value
				{
					Name bits_COND_SEE_DISLIKE
					Value 8
					Documentation "see something that you dislike"
				}
				Value
				{
					Name bits_COND_SEE_FEAR
					Value 4
					Documentation "see something that you are afraid of"
				}
				Value
				{
					Name bits_COND_SEE_HATE
					Value 2
					Documentation "see something that you hate"
				}
				Value
				{
					Name bits_COND_NO_AMMO_LOADED
					Value 1
					Documentation "weapon needs to be reloaded!"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "these MoveFlag values are assigned to a WayPoint\'s TYPE in order to demonstrate the\ntype of movement the monster should use to get there."
			Name MoveFlag
			Values
			{
				Value
				{
					Name bits_MF_TO_ELEVATOR
					Value 2048
					Documentation Elevator
				}
				Value
				{
					Name bits_MF_TO_LADDER
					Value 1024
					Documentation Ladder...
				}
				Value
				{
					Name bits_MF_TO_JUMP
					Value 512
					Documentation Jumping...
				}
				Value
				{
					Name bits_MF_DONT_SIMPLIFY
					Value 256
					Documentation "Don\'t let the route code simplify this waypoint"
				}
				Value
				{
					Name bits_MF_IS_GOAL
					Value 128
					Documentation "this waypoint is the goal of the whole move."
				}
				Value
				{
					Name bits_MF_TO_LOCATION
					Value 64
					Documentation "local move to an arbitrary point"
				}
				Value
				{
					Name bits_MF_TO_NODE
					Value 32
					Documentation "local move to a node"
				}
				Value
				{
					Name bits_MF_TO_PATHCORNER
					Value 16
					Documentation "local move to a path corner"
				}
				Value
				{
					Name bits_MF_TO_DETOUR
					Value 8
					Documentation "local move to detour point."
				}
				Value
				{
					Name bits_MF_TO_COVER
					Value 4
					Documentation "local move to a hiding place"
				}
				Value
				{
					Name bits_MF_TO_ENEMY
					Value 2
					Documentation "local move to enemy"
				}
				Value
				{
					Name bits_MF_TO_TARGETENT
					Value 1
					Documentation "local move to targetent."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "These go in the flData member of TASK_WALK_TO_TARGET, TASK_RUN_TO_TARGET"
			Name TaskData
			Values
			{
				Value
				{
					Name TARGET_MOVE_SCRIPTED
					Value 1
					Documentation "Move scripted"
				}
				Value
				{
					Name TARGET_MOVE_NORMAL
					Value 0
					Documentation "Move normally"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Current state of a monster"
			Name MONSTERSTATE
			Values
			{
				Value
				{
					Name MONSTERSTATE_DEAD
					Value 8
					Documentation ""
				}
				Value
				{
					Name MONSTERSTATE_PLAYDEAD
					Value 7
					Documentation ""
				}
				Value
				{
					Name MONSTERSTATE_SCRIPT
					Value 6
					Documentation ""
				}
				Value
				{
					Name MONSTERSTATE_PRONE
					Value 5
					Documentation ""
				}
				Value
				{
					Name MONSTERSTATE_HUNT
					Value 4
					Documentation ""
				}
				Value
				{
					Name MONSTERSTATE_ALERT
					Value 3
					Documentation ""
				}
				Value
				{
					Name MONSTERSTATE_COMBAT
					Value 2
					Documentation ""
				}
				Value
				{
					Name MONSTERSTATE_IDLE
					Value 1
					Documentation ""
				}
				Value
				{
					Name MONSTERSTATE_NONE
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Activity currently being played by a monster"
			Name Activity
			Values
			{
				Value
				{
					Name ACT_FLINCH_RIGHTLEG
					Value 76
					Documentation ""
				}
				Value
				{
					Name ACT_FLINCH_LEFTLEG
					Value 75
					Documentation ""
				}
				Value
				{
					Name ACT_FLINCH_RIGHTARM
					Value 74
					Documentation ""
				}
				Value
				{
					Name ACT_FLINCH_LEFTARM
					Value 73
					Documentation ""
				}
				Value
				{
					Name ACT_FLINCH_STOMACH
					Value 72
					Documentation ""
				}
				Value
				{
					Name ACT_FLINCH_CHEST
					Value 71
					Documentation ""
				}
				Value
				{
					Name ACT_FLINCH_HEAD
					Value 70
					Documentation ""
				}
				Value
				{
					Name ACT_DIE_BACKSHOT
					Value 69
					Documentation "die, hit in back"
				}
				Value
				{
					Name ACT_DIE_GUTSHOT
					Value 68
					Documentation "die, hit in gut"
				}
				Value
				{
					Name ACT_DIE_CHESTSHOT
					Value 67
					Documentation "die, hit in chest"
				}
				Value
				{
					Name ACT_DIE_HEADSHOT
					Value 66
					Documentation "die, hit in head. "
				}
				Value
				{
					Name ACT_VICTORY_DANCE
					Value 65
					Documentation "killed a player, do a victory dance."
				}
				Value
				{
					Name ACT_RUN_SCARED
					Value 64
					Documentation ""
				}
				Value
				{
					Name ACT_WALK_SCARED
					Value 63
					Documentation ""
				}
				Value
				{
					Name ACT_COMBAT_IDLE
					Value 62
					Documentation "agitated idle."
				}
				Value
				{
					Name ACT_SPECIAL_ATTACK2
					Value 61
					Documentation ""
				}
				Value
				{
					Name ACT_SPECIAL_ATTACK1
					Value 60
					Documentation "very monster specific special attacks."
				}
				Value
				{
					Name ACT_EXCITED
					Value 59
					Documentation "for some reason, monster is excited. Sees something he really likes to eat, or whatever."
				}
				Value
				{
					Name ACT_FEAR_DISPLAY
					Value 58
					Documentation "monster just saw something that it is afraid of"
				}
				Value
				{
					Name ACT_THREAT_DISPLAY
					Value 57
					Documentation "without attacking, monster demonstrates that it is angry. (Yell, stick out chest, etc )"
				}
				Value
				{
					Name ACT_BITE
					Value 56
					Documentation "some large monsters can eat small things in one bite. This plays one time, EAT loops."
				}
				Value
				{
					Name ACT_SNIFF
					Value 55
					Documentation "this is the act of actually sniffing an item in front of the monster"
				}
				Value
				{
					Name ACT_DETECT_SCENT
					Value 54
					Documentation "this means the monster smells a scent carried by the air"
				}
				Value
				{
					Name ACT_FLY_RIGHT
					Value 53
					Documentation "Turn right in flight"
				}
				Value
				{
					Name ACT_FLY_LEFT
					Value 52
					Documentation "Turn left in flight"
				}
				Value
				{
					Name ACT_GLIDE
					Value 51
					Documentation "Fly (don\'t flap)"
				}
				Value
				{
					Name ACT_HOVER
					Value 50
					Documentation "Idle while in flight"
				}
				Value
				{
					Name ACT_RUN_HURT
					Value 49
					Documentation "limp  (loop)"
				}
				Value
				{
					Name ACT_WALK_HURT
					Value 48
					Documentation "limp  (loop)"
				}
				Value
				{
					Name ACT_IDLE_ANGRY
					Value 47
					Documentation "alternate idle animation in which the monster is clearly agitated. (loop)"
				}
				Value
				{
					Name ACT_INSPECT_WALL
					Value 46
					Documentation "for active idles, look at something directly ahead of you ( doesn\'t HAVE to be a wall or on a wall )"
				}
				Value
				{
					Name ACT_INSPECT_FLOOR
					Value 45
					Documentation "for active idles, look at something on or near the floor"
				}
				Value
				{
					Name ACT_SLEEP
					Value 44
					Documentation ""
				}
				Value
				{
					Name ACT_BARNACLE_CHEW
					Value 43
					Documentation "barnacle is holding the monster in its mouth ( loop )"
				}
				Value
				{
					Name ACT_BARNACLE_CHOMP
					Value 42
					Documentation "barnacle latches on to the monster"
				}
				Value
				{
					Name ACT_BARNACLE_PULL
					Value 41
					Documentation "barnacle is lifting the monster ( loop )"
				}
				Value
				{
					Name ACT_BARNACLE_HIT
					Value 40
					Documentation "barnacle tongue hits a monster"
				}
				Value
				{
					Name ACT_DIEVIOLENT
					Value 39
					Documentation ""
				}
				Value
				{
					Name ACT_DIEFORWARD
					Value 38
					Documentation ""
				}
				Value
				{
					Name ACT_DIEBACKWARD
					Value 37
					Documentation ""
				}
				Value
				{
					Name ACT_DIESIMPLE
					Value 36
					Documentation ""
				}
				Value
				{
					Name ACT_EAT
					Value 35
					Documentation "monster chowing on a large food item (loop)"
				}
				Value
				{
					Name ACT_DISARM
					Value 34
					Documentation "reholster gun"
				}
				Value
				{
					Name ACT_ARM
					Value 33
					Documentation "pull out gun, for instance"
				}
				Value
				{
					Name ACT_RELOAD
					Value 32
					Documentation ""
				}
				Value
				{
					Name ACT_MELEE_ATTACK2
					Value 31
					Documentation ""
				}
				Value
				{
					Name ACT_MELEE_ATTACK1
					Value 30
					Documentation ""
				}
				Value
				{
					Name ACT_RANGE_ATTACK2
					Value 29
					Documentation ""
				}
				Value
				{
					Name ACT_RANGE_ATTACK1
					Value 28
					Documentation ""
				}
				Value
				{
					Name ACT_BIG_FLINCH
					Value 27
					Documentation ""
				}
				Value
				{
					Name ACT_SMALL_FLINCH
					Value 26
					Documentation ""
				}
				Value
				{
					Name ACT_COWER
					Value 25
					Documentation ""
				}
				Value
				{
					Name ACT_TWITCH
					Value 24
					Documentation ""
				}
				Value
				{
					Name ACT_SIGNAL3
					Value 23
					Documentation ""
				}
				Value
				{
					Name ACT_SIGNAL2
					Value 22
					Documentation ""
				}
				Value
				{
					Name ACT_SIGNAL1
					Value 21
					Documentation ""
				}
				Value
				{
					Name ACT_USE
					Value 20
					Documentation ""
				}
				Value
				{
					Name ACT_STAND
					Value 19
					Documentation "the act of standing from a crouched position"
				}
				Value
				{
					Name ACT_CROUCHIDLE
					Value 18
					Documentation "holding body in crouched position (loops)"
				}
				Value
				{
					Name ACT_CROUCH
					Value 17
					Documentation "the act of crouching down from a standing position"
				}
				Value
				{
					Name ACT_TURN_RIGHT
					Value 16
					Documentation "turn quickly right (stationary)"
				}
				Value
				{
					Name ACT_TURN_LEFT
					Value 15
					Documentation "turn quickly left (stationary)"
				}
				Value
				{
					Name ACT_ROLL_RIGHT
					Value 14
					Documentation "tuck and roll, right"
				}
				Value
				{
					Name ACT_ROLL_LEFT
					Value 13
					Documentation "tuck and roll, left"
				}
				Value
				{
					Name ACT_STRAFE_RIGHT
					Value 12
					Documentation ""
				}
				Value
				{
					Name ACT_STRAFE_LEFT
					Value 11
					Documentation ""
				}
				Value
				{
					Name ACT_LAND
					Value 10
					Documentation ""
				}
				Value
				{
					Name ACT_FALL
					Value 9
					Documentation ""
				}
				Value
				{
					Name ACT_LEAP
					Value 8
					Documentation "long forward jump"
				}
				Value
				{
					Name ACT_HOP
					Value 7
					Documentation "vertical jump"
				}
				Value
				{
					Name ACT_SWIM
					Value 6
					Documentation ""
				}
				Value
				{
					Name ACT_FLY
					Value 5
					Documentation "Fly (and flap if appropriate)"
				}
				Value
				{
					Name ACT_RUN
					Value 4
					Documentation ""
				}
				Value
				{
					Name ACT_WALK
					Value 3
					Documentation ""
				}
				Value
				{
					Name ACT_GUARD
					Value 2
					Documentation ""
				}
				Value
				{
					Name ACT_IDLE
					Value 1
					Documentation ""
				}
				Value
				{
					Name ACT_RESET
					Value 0
					Documentation "Set m_Activity to this invalid value to force a reset to m_IdealActivity"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "The state of a monster\'s script."
			Name SCRIPTSTATE
			Values
			{
				Value
				{
					Name SCRIPT_RUN_TO_MARK
					Value 4
					Documentation "Run to mark"
				}
				Value
				{
					Name SCRIPT_WALK_TO_MARK
					Value 3
					Documentation "Walk to mark"
				}
				Value
				{
					Name SCRIPT_CLEANUP
					Value 2
					Documentation "Cancelling the script / cleaning up"
				}
				Value
				{
					Name SCRIPT_WAIT
					Value 1
					Documentation "Waiting on everyone in the script to be ready"
				}
				Value
				{
					Name SCRIPT_PLAYING
					Value 0
					Documentation "Playing the sequence"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Material types supported by breakables"
			Name Materials
			Values
			{
				Value
				{
					Name matLastMaterial
					Value 10
					Documentation ""
				}
				Value
				{
					Name matNone
					Value 9
					Documentation ""
				}
				Value
				{
					Name matRocks
					Value 8
					Documentation ""
				}
				Value
				{
					Name matUnbreakableGlass
					Value 7
					Documentation ""
				}
				Value
				{
					Name matComputer
					Value 6
					Documentation ""
				}
				Value
				{
					Name matCeilingTile
					Value 5
					Documentation ""
				}
				Value
				{
					Name matCinderBlock
					Value 4
					Documentation ""
				}
				Value
				{
					Name matFlesh
					Value 3
					Documentation ""
				}
				Value
				{
					Name matMetal
					Value 2
					Documentation ""
				}
				Value
				{
					Name matWood
					Value 1
					Documentation ""
				}
				Value
				{
					Name matGlass
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Return values for CBaseEntity::AddPlayerItem"
			Name AddPlayerItemResult
			Values
			{
				Value
				{
					Name APIR_Added
					Value 3
					Documentation "Player picked up this item"
				}
				Value
				{
					Name APIR_DuplicateAdd
					Value 2
					Documentation "Player was able to add it as duplicate"
				}
				Value
				{
					Name APIR_NotAdded
					Value 0
					Documentation "Player could not pick up this item"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "bullet types"
			Name Bullet
			Values
			{
				Value
				{
					Name DECAL_SCORCH_MARK
					Value 17
					Documentation ""
				}
				Value
				{
					Name BULLET_MONSTER_BUCKSHOT
					Value 16
					Documentation "Monster shotgun"
				}
				Value
				{
					Name BULLET_MONSTER_SNIPER
					Value 15
					Documentation ""
				}
				Value
				{
					Name BULLET_MONSTER_EAGLE
					Value 14
					Documentation ""
				}
				Value
				{
					Name BULLET_MONSTER_12MM
					Value 13
					Documentation ""
				}
				Value
				{
					Name BULLET_MONSTER_SAW
					Value 12
					Documentation ""
				}
				Value
				{
					Name BULLET_MONSTER_MP5
					Value 11
					Documentation ""
				}
				Value
				{
					Name BULLET_MONSTER_9MM
					Value 10
					Documentation ""
				}
				Value
				{
					Name BULLET_PLAYER_CUSTOMDAMAGE
					Value 9
					Documentation "normal bullet with custom damage"
				}
				Value
				{
					Name BULLET_PLAYER_CROWBAR
					Value 8
					Documentation ""
				}
				Value
				{
					Name BULLET_PLAYER_BUCKSHOT
					Value 7
					Documentation Shotgun
				}
				Value
				{
					Name BULLET_PLAYER_EAGLE
					Value 6
					Documentation "Desert eagle"
				}
				Value
				{
					Name BULLET_PLAYER_357
					Value 5
					Documentation Python
				}
				Value
				{
					Name BULLET_PLAYER_SNIPER
					Value 4
					Documentation ""
				}
				Value
				{
					Name BULLET_PLAYER_SAW
					Value 3
					Documentation ""
				}
				Value
				{
					Name BULLET_PLAYER_MP5
					Value 2
					Documentation mp5
				}
				Value
				{
					Name BULLET_PLAYER_9MM
					Value 1
					Documentation Glock
				}
				Value
				{
					Name BULLET_NONE
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Common entity flags used by various entities."
			Name CommonEntityFlags
			Values
			{
				Value
				{
					Name SF_NODEFAULTAMMO
					Value 32768
					Documentation "Don\'t allow default ammo to be set. Prevents players from getting too much ammo from cross map inventory"
				}
				Value
				{
					Name SF_GIVENITEM
					Value 16384
					Documentation "This item is being given to the player -- can\'t fall out of map"
				}
				Value
				{
					Name SF_DODAMAGE
					Value 8192
					Documentation "this flag indicates that a player thrown weapon should deal damage to things it hits"
				}
				Value
				{
					Name SF_CREATEDWEAPON
					Value 4096
					Documentation "this flag indicates that this entity is a weapon created for players,\nas opposed to being created by being placed by a mapper"
				}
				Value
				{
					Name SF_DELAYREMOVE
					Value 2048
					Documentation "A weapon will be removed from the map after 60sec"
				}
				Value
				{
					Name SF_NORESPAWN
					Value 1024
					Documentation "set this bit on guns and stuff that should never respawn."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "FireBullets draw mode options"
			Name FireBulletsDrawMode
			Values
			{
				Value
				{
					Name FBDM_DRAW
					Value 2
					Documentation "Draw impact decal"
				}
				Value
				{
					Name FBDM_DONTDRAW
					Value 0
					Documentation "Don\'t draw impact decal"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Render FX modes (entvars_t::renderfx)"
			Name RenderFX
			Values
			{
				Value
				{
					Name kRenderFxClampMinScale
					Value 20
					Documentation "Keep this sprite from getting very small (SPRITES only!)"
				}
				Value
				{
					Name kRenderFxGlowShell
					Value 19
					Documentation "Glowing Shell"
				}
				Value
				{
					Name kRenderFxExplode
					Value 18
					Documentation "Scale up really big!"
				}
				Value
				{
					Name kRenderFxDeadPlayer
					Value 17
					Documentation "kRenderAmt is the player index"
				}
				Value
				{
					Name kRenderFxHologram
					Value 16
					Documentation "kRenderFxDistort + distance fade"
				}
				Value
				{
					Name kRenderFxDistort
					Value 15
					Documentation "Distort/scale/translate flicker"
				}
				Value
				{
					Name kRenderFxNoDissipation
					Value 14
					Documentation ""
				}
				Value
				{
					Name kRenderFxFlickerFast
					Value 13
					Documentation ""
				}
				Value
				{
					Name kRenderFxFlickerSlow
					Value 12
					Documentation ""
				}
				Value
				{
					Name kRenderFxStrobeFaster
					Value 11
					Documentation ""
				}
				Value
				{
					Name kRenderFxStrobeFast
					Value 10
					Documentation ""
				}
				Value
				{
					Name kRenderFxStrobeSlow
					Value 9
					Documentation ""
				}
				Value
				{
					Name kRenderFxSolidFast
					Value 8
					Documentation ""
				}
				Value
				{
					Name kRenderFxSolidSlow
					Value 7
					Documentation ""
				}
				Value
				{
					Name kRenderFxFadeFast
					Value 6
					Documentation ""
				}
				Value
				{
					Name kRenderFxFadeSlow
					Value 5
					Documentation ""
				}
				Value
				{
					Name kRenderFxPulseFastWide
					Value 4
					Documentation ""
				}
				Value
				{
					Name kRenderFxPulseSlowWide
					Value 3
					Documentation ""
				}
				Value
				{
					Name kRenderFxPulseFast
					Value 2
					Documentation ""
				}
				Value
				{
					Name kRenderFxPulseSlow
					Value 1
					Documentation ""
				}
				Value
				{
					Name kRenderFxNone
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Render modes used by entities (entvars_t::rendermode)"
			Name RenderModes
			Values
			{
				Value
				{
					Name kRenderTransAdd
					Value 5
					Documentation src*a+dest
				}
				Value
				{
					Name kRenderTransAlpha
					Value 4
					Documentation src*srca+dest*(1-srca)
				}
				Value
				{
					Name kRenderGlow
					Value 3
					Documentation "src*a+dest -- No Z buffer checks"
				}
				Value
				{
					Name kRenderTransTexture
					Value 2
					Documentation src*a+dest*(1-a)
				}
				Value
				{
					Name kRenderTransColor
					Value 1
					Documentation c*a+dest*(1-a)
				}
				Value
				{
					Name kRenderNormal
					Value 0
					Documentation src
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Temp entity bounce sound types"
			Name TE_BOUNCE
			Values
			{
				Value
				{
					Name TE_BOUNCE_SHOTSHELL
					Value 2
					Documentation ""
				}
				Value
				{
					Name TE_BOUNCE_SHELL
					Value 1
					Documentation ""
				}
				Value
				{
					Name TE_BOUNCE_NULL
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Break model defines for message SVC_TEMPENTITY::TE_BREAKMODEL"
			Name BREAK
			Values
			{
				Value
				{
					Name BREAK_2
					Value 128
					Documentation "Not used"
				}
				Value
				{
					Name BREAK_CONCRETE
					Value 64
					Documentation ""
				}
				Value
				{
					Name BREAK_TRANS
					Value 32
					Documentation "Model is transparent"
				}
				Value
				{
					Name BREAK_SMOKE
					Value 16
					Documentation "Adds a smoke trail"
				}
				Value
				{
					Name BREAK_WOOD
					Value 8
					Documentation ""
				}
				Value
				{
					Name BREAK_FLESH
					Value 4
					Documentation ""
				}
				Value
				{
					Name BREAK_METAL
					Value 2
					Documentation ""
				}
				Value
				{
					Name BREAK_GLASS
					Value 1
					Documentation ""
				}
				Value
				{
					Name BREAK_TYPEMASK
					Value 79
					Documentation "Bit mask for all BREAK types."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Texture types used by the game."
			Name TextureType
			Values
			{
				Value
				{
					Name CHAR_TEX_SNOW
					Value \'O\'
					Documentation Snow
				}
				Value
				{
					Name CHAR_TEX_FLESH
					Value \'F\'
					Documentation Flesh
				}
				Value
				{
					Name CHAR_TEX_GLASS
					Value \'Y\'
					Documentation Glass
				}
				Value
				{
					Name CHAR_TEX_COMPUTER
					Value \'P\'
					Documentation Computer
				}
				Value
				{
					Name CHAR_TEX_WOOD
					Value \'W\'
					Documentation Wood
				}
				Value
				{
					Name CHAR_TEX_SLOSH
					Value \'S\'
					Documentation Slosh
				}
				Value
				{
					Name CHAR_TEX_TILE
					Value \'T\'
					Documentation Tile
				}
				Value
				{
					Name CHAR_TEX_GRATE
					Value \'G\'
					Documentation Grate
				}
				Value
				{
					Name CHAR_TEX_VENT
					Value \'V\'
					Documentation Vent
				}
				Value
				{
					Name CHAR_TEX_DIRT
					Value \'D\'
					Documentation Dirt
				}
				Value
				{
					Name CHAR_TEX_METAL
					Value \'M\'
					Documentation Metal
				}
				Value
				{
					Name CHAR_TEX_CONCRETE
					Value \'C\'
					Documentation "Concrete (Default)"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "when calling Killed(), a value that governs gib behavior is expected to be one of these three values"
			Name GIB
			Values
			{
				Value
				{
					Name GIB_NOPENALTY
					Value 3
					Documentation "No penalty applied to players that died"
				}
				Value
				{
					Name GIB_ALWAYS
					Value 2
					Documentation "always gib ( Houndeye Shock, Barnacle Bite )"
				}
				Value
				{
					Name GIB_NEVER
					Value 1
					Documentation "never gib, no matter how much death damage is done ( freezing, etc )"
				}
				Value
				{
					Name GIB_NORMAL
					Value 0
					Documentation "gib if entity was overkilled"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Dynamic decals used by code to place decals like scorch marks in the world"
			Name decal_e
			Values
			{
				Value
				{
					Name DECAL_SPORESPLAT3
					Value 47
					Documentation "Spore splat 3"
				}
				Value
				{
					Name DECAL_SPORESPLAT2
					Value 46
					Documentation "Spore splat 2"
				}
				Value
				{
					Name DECAL_SPORESPLAT1
					Value 45
					Documentation "Spore splat 1"
				}
				Value
				{
					Name DECAL_OFSCORCH3
					Value 44
					Documentation "Opposing force scorch 3"
				}
				Value
				{
					Name DECAL_OFSCORCH2
					Value 43
					Documentation "Opposing force scorch 2"
				}
				Value
				{
					Name DECAL_OFSCORCH1
					Value 42
					Documentation "Opposing force scorch 1"
				}
				Value
				{
					Name DECAL_MOMMASPLAT
					Value 41
					Documentation "Big momma splat"
				}
				Value
				{
					Name DECAL_MOMMABIRTH
					Value 40
					Documentation "Big momma birth splatter"
				}
				Value
				{
					Name DECAL_SMALLSCORCH3
					Value 39
					Documentation "Small scorch 3"
				}
				Value
				{
					Name DECAL_SMALLSCORCH2
					Value 38
					Documentation "Small scorch 2"
				}
				Value
				{
					Name DECAL_SMALLSCORCH1
					Value 37
					Documentation "Small scorch 1"
				}
				Value
				{
					Name DECAL_GARGSTOMP1
					Value 36
					Documentation "gargantua stomp crack"
				}
				Value
				{
					Name DECAL_BPROOF1
					Value 35
					Documentation "Bulletproof glass decal"
				}
				Value
				{
					Name DECAL_SPIT2
					Value 34
					Documentation "Spit 2"
				}
				Value
				{
					Name DECAL_SPIT1
					Value 33
					Documentation "Spit 1"
				}
				Value
				{
					Name DECAL_BIGSHOT5
					Value 32
					Documentation "Big shot 5"
				}
				Value
				{
					Name DECAL_BIGSHOT4
					Value 31
					Documentation "Big shot 4"
				}
				Value
				{
					Name DECAL_BIGSHOT3
					Value 30
					Documentation "Big shot 3"
				}
				Value
				{
					Name DECAL_BIGSHOT2
					Value 29
					Documentation "Big shot 2"
				}
				Value
				{
					Name DECAL_BIGSHOT1
					Value 28
					Documentation "Big shot 1"
				}
				Value
				{
					Name DECAL_GLASSBREAK3
					Value 27
					Documentation "Glass break 3"
				}
				Value
				{
					Name DECAL_GLASSBREAK2
					Value 26
					Documentation "Glass break 2"
				}
				Value
				{
					Name DECAL_GLASSBREAK1
					Value 25
					Documentation "Glass break 1"
				}
				Value
				{
					Name DECAL_YBLOOD6
					Value 24
					Documentation "Yellow blood 6"
				}
				Value
				{
					Name DECAL_YBLOOD5
					Value 23
					Documentation "Yellow blood 5"
				}
				Value
				{
					Name DECAL_YBLOOD4
					Value 22
					Documentation "Yellow blood 4"
				}
				Value
				{
					Name DECAL_YBLOOD3
					Value 21
					Documentation "Yellow blood 3"
				}
				Value
				{
					Name DECAL_YBLOOD2
					Value 20
					Documentation "Yellow blood 2"
				}
				Value
				{
					Name DECAL_YBLOOD1
					Value 19
					Documentation "Yellow blood 1"
				}
				Value
				{
					Name DECAL_BLOOD6
					Value 18
					Documentation "(Red) Blood 6"
				}
				Value
				{
					Name DECAL_BLOOD5
					Value 17
					Documentation "(Red) Blood 5"
				}
				Value
				{
					Name DECAL_BLOOD4
					Value 16
					Documentation "(Red) Blood 4"
				}
				Value
				{
					Name DECAL_BLOOD3
					Value 15
					Documentation "(Red) Blood 3"
				}
				Value
				{
					Name DECAL_BLOOD2
					Value 14
					Documentation "(Red) Blood 2"
				}
				Value
				{
					Name DECAL_BLOOD1
					Value 13
					Documentation "(Red) Blood 1"
				}
				Value
				{
					Name DECAL_SCORCH2
					Value 12
					Documentation "Scorch 1"
				}
				Value
				{
					Name DECAL_SCORCH1
					Value 11
					Documentation "Scorch 1"
				}
				Value
				{
					Name DECAL_LAMBDA6
					Value 10
					Documentation "Lambda 6"
				}
				Value
				{
					Name DECAL_LAMBDA5
					Value 9
					Documentation "Lambda 5"
				}
				Value
				{
					Name DECAL_LAMBDA4
					Value 8
					Documentation "Lambda 4"
				}
				Value
				{
					Name DECAL_LAMBDA3
					Value 7
					Documentation "Lambda 3"
				}
				Value
				{
					Name DECAL_LAMBDA2
					Value 6
					Documentation "Lambda 2"
				}
				Value
				{
					Name DECAL_LAMBDA1
					Value 5
					Documentation "Lambda 1"
				}
				Value
				{
					Name DECAL_GUNSHOT5
					Value 4
					Documentation "Gunshot 5"
				}
				Value
				{
					Name DECAL_GUNSHOT4
					Value 3
					Documentation "Gunshot 4"
				}
				Value
				{
					Name DECAL_GUNSHOT3
					Value 2
					Documentation "Gunshot 3"
				}
				Value
				{
					Name DECAL_GUNSHOT2
					Value 1
					Documentation "Gunshot 2"
				}
				Value
				{
					Name DECAL_GUNSHOT1
					Value 0
					Documentation "Gunshot 1"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Blood color"
			Name BLOOD_COLOR
			Values
			{
				Value
				{
					Name BLOOD_COLOR_GREEN
					Value 195
					Documentation "Green blood"
				}
				Value
				{
					Name BLOOD_COLOR_YELLOW
					Value 195
					Documentation "Yellow blood"
				}
				Value
				{
					Name BLOOD_COLOR_RED
					Value 247
					Documentation "Red blood"
				}
				Value
				{
					Name DONT_BLEED
					Value -1
					Documentation "Don\'t bleed"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Toggle state for entities that can be toggled."
			Name TOGGLE_STATE
			Values
			{
				Value
				{
					Name TS_GOING_DOWN
					Value 3
					Documentation "Entity is going down"
				}
				Value
				{
					Name TS_GOING_UP
					Value 2
					Documentation "Entity is going up"
				}
				Value
				{
					Name TS_AT_BOTTOM
					Value 1
					Documentation "Entity is at bottom"
				}
				Value
				{
					Name TS_AT_TOP
					Value 0
					Documentation "Entity is at top"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Damage types."
			Name DMG
			Values
			{
				Value
				{
					Name DMG_SHOWNHUD
					Value 7815448
					Documentation "Shown on HUD. These are the damage types that have clien hud art."
				}
				Value
				{
					Name DMG_GIB_CORPSE
					Value 993
					Documentation "Gib corpse. These are the damage types that are allowed to gib corpses."
				}
				Value
				{
					Name DMG_SHOCK_GLOW
					Value 134217728
					Documentation "Shock glow. Flag for shock glow effect."
				}
				Value
				{
					Name DMG_MEDKITHEAL
					Value 33554432
					Documentation "Medkit heal. Medkit healing."
				}
				Value
				{
					Name DMG_SNIPER
					Value 16777216
					Documentation "Sniper. Hit by a Sniper."
				}
				Value
				{
					Name DMG_MORTAR
					Value 8388608
					Documentation "Mortar. Hit by air raid (done to distinguish grenade from mortar)"
				}
				Value
				{
					Name DMG_SLOWFREEZE
					Value 4194304
					Documentation "Slow freeze. In a subzero freezer."
				}
				Value
				{
					Name DMG_SLOWBURN
					Value 2097152
					Documentation "Slow burn. In an oven."
				}
				Value
				{
					Name DMG_ACID
					Value 1048576
					Documentation "Acid. Toxic chemicals or acid burns."
				}
				Value
				{
					Name DMG_DROWNRECOVER
					Value 524288
					Documentation "Drown recover. Drowning recovery."
				}
				Value
				{
					Name DMG_RADIATION
					Value 262144
					Documentation "Radiation. Radiation exposure."
				}
				Value
				{
					Name DMG_POISON
					Value 131072
					Documentation "Poison. Blood poisoning."
				}
				Value
				{
					Name DMG_NERVEGAS
					Value 65536
					Documentation "Nerve gas. Nerve toxins, very bad."
				}
				Value
				{
					Name DMG_PARALYZE
					Value 32768
					Documentation "Paralyze. Slows affected creature down."
				}
				Value
				{
					Name DMG_TIMEBASED
					Value 16760832
					Documentation "Mash for time-based damage."
				}
				Value
				{
					Name DMG_DROWN
					Value 16384
					Documentation "Drown. Drowning."
				}
				Value
				{
					Name DMG_LAUNCH
					Value 67108864
					Documentation "Launch. Launch into air."
				}
				Value
				{
					Name DMG_ALWAYSGIB
					Value 8192
					Documentation "Always gib. With this bit OR\'d in, any damage type can be made to gib victims upon death."
				}
				Value
				{
					Name DMG_NEVERGIB
					Value 4096
					Documentation "Never gib. With this bit OR\'d in, no damage type will be able to gib victims upon death."
				}
				Value
				{
					Name DMG_ENERGYBEAM
					Value 1024
					Documentation "Energy beam. Laser or other high energy beam."
				}
				Value
				{
					Name DMG_SONIC
					Value 512
					Documentation "Sonic. Sound pulse shockwave."
				}
				Value
				{
					Name DMG_SHOCK
					Value 256
					Documentation "Shock. Electric shock."
				}
				Value
				{
					Name DMG_CLUB
					Value 128
					Documentation "Club. Crowbar, punch, headbutt."
				}
				Value
				{
					Name DMG_BLAST
					Value 64
					Documentation "Blast. Explosive blast damage."
				}
				Value
				{
					Name DMG_FALL
					Value 32
					Documentation "Fall. Fell too far."
				}
				Value
				{
					Name DMG_FREEZE
					Value 16
					Documentation "Freeze. Frozen."
				}
				Value
				{
					Name DMG_BURN
					Value 8
					Documentation "Burn. Heat burned."
				}
				Value
				{
					Name DMG_SLASH
					Value 4
					Documentation "Slash. Cut, clawed, stabbed."
				}
				Value
				{
					Name DMG_BULLET
					Value 2
					Documentation "Bullet. Shot."
				}
				Value
				{
					Name DMG_CRUSH
					Value 1
					Documentation "Crush damage. By falling or moving object."
				}
				Value
				{
					Name DMG_GENERIC
					Value 0
					Documentation "Generic damage."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Relationship between (monster) entities"
			Name RELATIONSHIP
			Values
			{
				Value
				{
					Name R_FR
					Value 4
					Documentation "Fear. Will attack."
				}
				Value
				{
					Name R_NM
					Value 3
					Documentation "Nemesis. A monster will ALWAYS attack its nemesis, no matter what."
				}
				Value
				{
					Name R_HT
					Value 2
					Documentation "Hate. Will attack this character instead of any DISLIKE\'d characters."
				}
				Value
				{
					Name R_DL
					Value 1
					Documentation "Dislike. Will attack."
				}
				Value
				{
					Name R_NO
					Value 0
					Documentation "No relationship. Disregard."
				}
				Value
				{
					Name R_AL
					Value -2
					Documentation "Ally. Good alternative to R_NO when applicable."
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Entity classification\nCan be set on entities with KeyValue using key \'classify\'."
			Name CLASS
			Values
			{
				Value
				{
					Name CLASS_BARNACLE
					Value 99
					Documentation "Is Barnacle"
				}
				Value
				{
					Name CLASS_TEAM4
					Value 19
					Documentation "Is on Team 4"
				}
				Value
				{
					Name CLASS_TEAM3
					Value 18
					Documentation "Is on Team 3"
				}
				Value
				{
					Name CLASS_TEAM2
					Value 17
					Documentation "Is on Team 2"
				}
				Value
				{
					Name CLASS_TEAM1
					Value 16
					Documentation "Is on Team 1"
				}
				Value
				{
					Name CLASS_XRACE_SHOCK
					Value 15
					Documentation "Is X-Race shock trooper (also Voltigores)"
				}
				Value
				{
					Name CLASS_XRACE_PITDRONE
					Value 14
					Documentation "Is X-Race pitdrone"
				}
				Value
				{
					Name CLASS_ALIEN_BIOWEAPON
					Value 13
					Documentation "Is alien bioweapon"
				}
				Value
				{
					Name CLASS_PLAYER_BIOWEAPON
					Value 12
					Documentation "Is player bioweapon"
				}
				Value
				{
					Name CLASS_PLAYER_ALLY
					Value 11
					Documentation "is player ally"
				}
				Value
				{
					Name CLASS_INSECT
					Value 10
					Documentation "Is insect"
				}
				Value
				{
					Name CLASS_ALIEN_PREDATOR
					Value 9
					Documentation "Is predator alien"
				}
				Value
				{
					Name CLASS_ALIEN_PREY
					Value 8
					Documentation "Is prey alien"
				}
				Value
				{
					Name CLASS_ALIEN_MONSTER
					Value 7
					Documentation "Is monster alien"
				}
				Value
				{
					Name CLASS_ALIEN_PASSIVE
					Value 6
					Documentation "Is passive alien"
				}
				Value
				{
					Name CLASS_ALIEN_MILITARY
					Value 5
					Documentation "Is military alien"
				}
				Value
				{
					Name CLASS_HUMAN_MILITARY
					Value 4
					Documentation "Is military human"
				}
				Value
				{
					Name CLASS_HUMAN_PASSIVE
					Value 3
					Documentation "Is passive human"
				}
				Value
				{
					Name CLASS_PLAYER
					Value 2
					Documentation "Is player"
				}
				Value
				{
					Name CLASS_MACHINE
					Value 1
					Documentation "Is machine"
				}
				Value
				{
					Name CLASS_NONE
					Value 0
					Documentation "No classification"
				}
				Value
				{
					Name CLASS_FORCE_NONE
					Value -1
					Documentation "Forces class override to none"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "CBaseEntity caps (CBaseEntity::ObjectCaps())"
			Name FCAP
			Values
			{
				Value
				{
					Name FCAP_FORCE_TRANSITION
					Value 128
					Documentation "Force transition"
				}
				Value
				{
					Name FCAP_MASTER
					Value 128
					Documentation "Is a master"
				}
				Value
				{
					Name FCAP_DIRECTIONAL_USE
					Value 64
					Documentation "Directional use"
				}
				Value
				{
					Name FCAP_ONOFF_USE
					Value 32
					Documentation "On/off use"
				}
				Value
				{
					Name FCAP_CONTINUOUS_USE
					Value 16
					Documentation "Continuous use"
				}
				Value
				{
					Name FCAP_IMPULSE_USE
					Value 8
					Documentation "Impulse use"
				}
				Value
				{
					Name FCAP_DONT_SAVE
					Value -2147483648
					Documentation "Don\'t save"
				}
				Value
				{
					Name FCAP_MUST_SPAWN
					Value 4
					Documentation "Must spawn"
				}
				Value
				{
					Name FCAP_ACROSS_TRANSITION
					Value 2
					Documentation "Across transition"
				}
				Value
				{
					Name FCAP_CUSTOMSAVE
					Value 1
					Documentation "Custom save method"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Entity variable type"
			Name Entvartype
			Values
			{
				Value
				{
					Name VAR_CUSTOM
					Value 8
					Documentation "Custom type"
				}
				Value
				{
					Name VAR_BYTE2
					Value 7
					Documentation "2 byte array type"
				}
				Value
				{
					Name VAR_BYTE4
					Value 6
					Documentation "4 byte array type"
				}
				Value
				{
					Name VAR_EDICT
					Value 5
					Documentation "Edict type"
				}
				Value
				{
					Name VAR_INTEGER
					Value 4
					Documentation "Integer type"
				}
				Value
				{
					Name VAR_FLOAT
					Value 3
					Documentation "Float type"
				}
				Value
				{
					Name VAR_VECTOR
					Value 2
					Documentation "Vector type"
				}
				Value
				{
					Name VAR_STRING
					Value 1
					Documentation "String type"
				}
				Value
				{
					Name VAR_INVALID
					Value 0
					Documentation "Invalid type"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Use type for entities. Not all entities support all use types.\nPassed to the Use method on entities."
			Name USE_TYPE
			Values
			{
				Value
				{
					Name USE_KILL
					Value 4
					Documentation "Kills an entity"
				}
				Value
				{
					Name USE_TOGGLE
					Value 3
					Documentation "Toggles the state of an entity"
				}
				Value
				{
					Name USE_SET
					Value 2
					Documentation "Sets the state of an entity (use float parameter in Use)"
				}
				Value
				{
					Name USE_ON
					Value 1
					Documentation "Turns on an entity"
				}
				Value
				{
					Name USE_OFF
					Value 0
					Documentation "Turns off an entity"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "entvars_t::fixangle modes"
			Name FixAngleMode
			Values
			{
				Value
				{
					Name FAM_ADDAVELOCITY
					Value 2
					Documentation "Add avelocity to player view angles"
				}
				Value
				{
					Name FAM_FORCEVIEWANGLES
					Value 1
					Documentation "Force player view angles to entvars_t::angles"
				}
				Value
				{
					Name FAM_NOTHING
					Value 0
					Documentation "Do nothing"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "entvars_t waterlevel values"
			Name WATERLEVEL
			Values
			{
				Value
				{
					Name WATERLEVEL_HEAD
					Value 3
					Documentation "Head underwater (completely submerged)"
				}
				Value
				{
					Name WATERLEVEL_WAIST
					Value 2
					Documentation "Waist underwater"
				}
				Value
				{
					Name WATERLEVEL_FEET
					Value 1
					Documentation "Feet underwater"
				}
				Value
				{
					Name WATERLEVEL_DRY
					Value 0
					Documentation "Not in water"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "entvars_t::effects constants"
			Name EFFECTS
			Values
			{
				Value
				{
					Name EF_FRAMEANIMTEXTURES
					Value 512
					Documentation "Use the value in pev->frame to set the texture on a brush entity"
				}
				Value
				{
					Name EF_NOANIMTEXTURES
					Value 256
					Documentation "Don\'t animate brush entities"
				}
				Value
				{
					Name EF_NODECALS
					Value 2048
					Documentation "don\'t draw decals on this entity"
				}
				Value
				{
					Name EF_NODRAW
					Value 128
					Documentation "don\'t draw entity"
				}
				Value
				{
					Name EF_LIGHT
					Value 64
					Documentation "rocket flare glow sprite"
				}
				Value
				{
					Name EF_NOINTERP
					Value 32
					Documentation "don\'t interpolate the next frame"
				}
				Value
				{
					Name EF_INVLIGHT
					Value 16
					Documentation "get lighting from ceiling"
				}
				Value
				{
					Name EF_DIMLIGHT
					Value 8
					Documentation "player flashlight"
				}
				Value
				{
					Name EF_BRIGHTLIGHT
					Value 4
					Documentation "DLIGHT centered at entity origin"
				}
				Value
				{
					Name EF_MUZZLEFLASH
					Value 2
					Documentation "single frame ELIGHT on entity attachment 0"
				}
				Value
				{
					Name EF_BRIGHTFIELD
					Value 1
					Documentation "swirling cloud of particles"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "entvars_t::takedamage values"
			Name DAMAGE
			Values
			{
				Value
				{
					Name DAMAGE_AIM
					Value 2
					Documentation "allow auto-aim"
				}
				Value
				{
					Name DAMAGE_YES
					Value 1
					Documentation "Allow damage"
				}
				Value
				{
					Name DAMAGE_NO
					Value 0
					Documentation "Don\'t allow damage"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "Entity entvars_t::deadflag values"
			Name DEAD
			Values
			{
				Value
				{
					Name DEAD_DISCARDBODY
					Value 4
					Documentation "No direct use of this"
				}
				Value
				{
					Name DEAD_RESPAWNABLE
					Value 3
					Documentation "The player is in a state where they can be respawned."
				}
				Value
				{
					Name DEAD_DEAD
					Value 2
					Documentation "dead. lying still."
				}
				Value
				{
					Name DEAD_DYING
					Value 1
					Documentation "playing death animation or still falling off of a ledge waiting to hit ground"
				}
				Value
				{
					Name DEAD_NO
					Value 0
					Documentation alive
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "entvars_t::solid constants.\nNOTE: Some movetypes will cause collisions independent of SOLID_NOT/SOLID_TRIGGER when the entity moves\nSOLID only effects OTHER entities colliding with this one when they move - UGH!"
			Name SOLID
			Values
			{
				Value
				{
					Name SOLID_BSP
					Value 4
					Documentation "bsp clip, touch on edge, block"
				}
				Value
				{
					Name SOLID_SLIDEBOX
					Value 3
					Documentation "touch on edge, but not an onground"
				}
				Value
				{
					Name SOLID_BBOX
					Value 2
					Documentation "touch on edge, block"
				}
				Value
				{
					Name SOLID_TRIGGER
					Value 1
					Documentation "touch on edge, but not blocking"
				}
				Value
				{
					Name SOLID_NOT
					Value 0
					Documentation "no interaction with other objects"
				}
				Value
				{
					Name SOLID_NOT_EXPLICIT
					Value -1
					Documentation "no interaction with other objects (forced by map)"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "entvars_t::movetype constants"
			Name MOVETYPE
			Values
			{
				Value
				{
					Name MOVETYPE_PUSHSTEP
					Value 13
					Documentation "BSP model that needs physics/world collisions (uses nearest hull for world collision)"
				}
				Value
				{
					Name MOVETYPE_FOLLOW
					Value 12
					Documentation "track movement of aiment"
				}
				Value
				{
					Name MOVETYPE_BOUNCEMISSILE
					Value 11
					Documentation "bounce w/o gravity"
				}
				Value
				{
					Name MOVETYPE_BOUNCE
					Value 10
					Documentation "Just like Toss, but reflect velocity when contacting surfaces"
				}
				Value
				{
					Name MOVETYPE_FLYMISSILE
					Value 9
					Documentation "extra size to monsters"
				}
				Value
				{
					Name MOVETYPE_NOCLIP
					Value 8
					Documentation "No gravity, no collisions, still do velocity/avelocity"
				}
				Value
				{
					Name MOVETYPE_PUSH
					Value 7
					Documentation "no clip to world, push and crush"
				}
				Value
				{
					Name MOVETYPE_TOSS
					Value 6
					Documentation gravity/collisions
				}
				Value
				{
					Name MOVETYPE_FLY
					Value 5
					Documentation "No gravity, but still collides with stuff"
				}
				Value
				{
					Name MOVETYPE_STEP
					Value 4
					Documentation "gravity, special edge handling -- monsters use this"
				}
				Value
				{
					Name MOVETYPE_WALK
					Value 3
					Documentation "Player only - moving on the ground"
				}
				Value
				{
					Name MOVETYPE_NONE
					Value 0
					Documentation "never moves"
				}
				Value
				{
					Name MOVETYPE_NONE_EXPLICIT
					Value -1
					Documentation "never moves (forced by map)"
				}
			}
		}
		Enum
		{
			Namespace ""
			Documentation "entvars_t::flags constants"
			Name EdictFlags
			Values
			{
				Value
				{
					Name FL_DORMANT
					Value 2147483648
					Documentation "Entity is dormant, no updates to client"
				}
				Value
				{
					Name FL_KILLME
					Value 1073741824
					Documentation "This entity is marked for death -- This allows the engine to kill ents at the appropriate time"
				}
				Value
				{
					Name FL_CUSTOMENTITY
					Value 536870912
					Documentation "This is a custom entity"
				}
				Value
				{
					Name FL_NOWEAPONS
					Value 134217728
					Documentation "This client is being denied weapon usage"
				}
				Value
				{
					Name FL_SPECTATOR
					Value 67108864
					Documentation "This client is a spectator, don\'t run touch functions, etc."
				}
				Value
				{
					Name FL_WORLDBRUSH
					Value 33554432
					Documentation "Not moveable/removeable brush entity (really part of the world, but represented as an entity for transparency or something)"
				}
				Value
				{
					Name FL_ONTRAIN
					Value 16777216
					Documentation "Player is _controlling_ a train, so movement commands should be ignored on client during prediction."
				}
				Value
				{
					Name FL_MONSTERCLIP
					Value 8388608
					Documentation "Only collide in with monsters who have FL_MONSTERCLIP set"
				}
				Value
				{
					Name FL_BASEVELOCITY
					Value 4194304
					Documentation "Base velocity has been applied this frame (used to convert base velocity into momentum)"
				}
				Value
				{
					Name FL_ALWAYSTHINK
					Value 2097152
					Documentation "Brush model flag -- call think every frame regardless of nextthink - ltime (for constantly changing velocity/path)"
				}
				Value
				{
					Name FL_PROXY
					Value 1048576
					Documentation "This is a spectator proxy"
				}
				Value
				{
					Name FL_IMMUNE_LAVA
					Value 524288
					Documentation "If set, players don\'t take damage from lava"
				}
				Value
				{
					Name FL_IMMUNE_SLIME
					Value 262144
					Documentation "If set, players don\'t take damage from slime"
				}
				Value
				{
					Name FL_IMMUNE_WATER
					Value 131072
					Documentation "If set, players don\'t take drown damage"
				}
				Value
				{
					Name FL_GRAPHED
					Value 65536
					Documentation "worldgraph has this ent listed as something that blocks a connection"
				}
				Value
				{
					Name FL_FLOAT
					Value 32768
					Documentation "Apply floating force to this entity when in water"
				}
				Value
				{
					Name FL_DUCKING
					Value 16384
					Documentation "Player flag -- Player is fully crouched"
				}
				Value
				{
					Name FL_FAKECLIENT
					Value 8192
					Documentation "JAC: fake client, simulated server side; don\'t send network messages to them"
				}
				Value
				{
					Name FL_FROZEN
					Value 4096
					Documentation "Player is frozen for 3rd person camera"
				}
				Value
				{
					Name FL_WATERJUMP
					Value 2048
					Documentation "player jumping out of water"
				}
				Value
				{
					Name FL_PARTIALGROUND
					Value 1024
					Documentation "not all corners are valid"
				}
				Value
				{
					Name FL_ONGROUND
					Value 512
					Documentation "At rest / on the ground"
				}
				Value
				{
					Name FL_SKIPLOCALHOST
					Value 256
					Documentation "Don\'t send entity to local host, it\'s predicting this entity itself"
				}
				Value
				{
					Name FL_NOTARGET
					Value 128
					Documentation "If set, this entity will not be targeted by monster AI"
				}
				Value
				{
					Name FL_GODMODE
					Value 64
					Documentation "If set, this entity is invincible. Only applies to players"
				}
				Value
				{
					Name FL_MONSTER
					Value 32
					Documentation "If set, this is a monster"
				}
				Value
				{
					Name FL_INWATER
					Value 16
					Documentation "If set, this entity is in water. Only applies to players"
				}
				Value
				{
					Name FL_CLIENT
					Value 8
					Documentation "If set, this is a player"
				}
				Value
				{
					Name FL_CONVEYOR
					Value 4
					Documentation "If set, entities standing on this entity are moved as if this were a conveyor"
				}
				Value
				{
					Name FL_SWIM
					Value 2
					Documentation "Changes the SV_Movestep() behavior to not need to be on ground (but stay in water)"
				}
				Value
				{
					Name FL_FLY
					Value 1
					Documentation "Changes the SV_Movestep() behavior to not need to be on ground"
				}
			}
		}
		Enum
		{
			Namespace SeekFile
			Documentation "Mode flags passed to File::Seek."
			Name SeekFile
			Values
			{
				Value
				{
					Name END
					Value 2
					Documentation "Seek from the end of the file."
				}
				Value
				{
					Name CUR
					Value 1
					Documentation "Seek from the current offset in the file."
				}
				Value
				{
					Name SET
					Value 0
					Documentation "Seek from the start of the file."
				}
			}
		}
		Enum
		{
			Namespace OpenFile
			Documentation "Flags passed to FileSystem::OpenFile."
			Name OpenFile
			Values
			{
				Value
				{
					Name BINARY
					Value 8
					Documentation "Open in binary mode."
				}
				Value
				{
					Name APPEND
					Value 4
					Documentation "Open file for appending."
				}
				Value
				{
					Name WRITE
					Value 2
					Documentation "Open file for writing."
				}
				Value
				{
					Name READ
					Value 1
					Documentation "Open file for reading."
				}
			}
		}
		Enum
		{
			Namespace Regex
			Documentation "Match format flags. These can be bitwise OR\'d together to combine options."
			Name MatchFlagType
			Values
			{
				Value
				{
					Name format_first_only
					Value 4096
					Documentation ""
				}
				Value
				{
					Name format_no_copy
					Value 2048
					Documentation ""
				}
				Value
				{
					Name format_sed
					Value 1024
					Documentation ""
				}
				Value
				{
					Name format_default
					Value 0
					Documentation ""
				}
				Value
				{
					Name match_prev_avail
					Value 256
					Documentation ""
				}
				Value
				{
					Name match_continuous
					Value 64
					Documentation ""
				}
				Value
				{
					Name match_not_null
					Value 32
					Documentation ""
				}
				Value
				{
					Name match_any
					Value 16
					Documentation ""
				}
				Value
				{
					Name match_not_eow
					Value 8
					Documentation ""
				}
				Value
				{
					Name match_not_bow
					Value 4
					Documentation ""
				}
				Value
				{
					Name match_not_eol
					Value 2
					Documentation ""
				}
				Value
				{
					Name match_not_bol
					Value 1
					Documentation ""
				}
				Value
				{
					Name match_default
					Value 0
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace Regex
			Documentation "Regular expression flags. These can be bitwise OR\'d together to combine options."
			Name FlagType
			Values
			{
				Value
				{
					Name egrep
					Value 32
					Documentation ""
				}
				Value
				{
					Name grep
					Value 16
					Documentation ""
				}
				Value
				{
					Name awk
					Value 8
					Documentation ""
				}
				Value
				{
					Name extended
					Value 4
					Documentation ""
				}
				Value
				{
					Name basic
					Value 2
					Documentation ""
				}
				Value
				{
					Name ECMAScript
					Value 1
					Documentation ""
				}
				Value
				{
					Name collate
					Value 2048
					Documentation ""
				}
				Value
				{
					Name optimize
					Value 1024
					Documentation ""
				}
				Value
				{
					Name nosubs
					Value 512
					Documentation ""
				}
				Value
				{
					Name icase
					Value 256
					Documentation ""
				}
			}
		}
		Enum
		{
			Namespace Reflection
			Documentation "Which type a reflection argument is"
			Name ArgumentType
			Values
			{
				Value
				{
					Name AT_ENUM
					Value 32
					Documentation "Argument is an enum type."
				}
				Value
				{
					Name AT_OBJECT
					Value 24
					Documentation "Argument is an object type."
				}
				Value
				{
					Name AT_PRIMITIVE
					Value 4
					Documentation "Argument is a primitive type."
				}
				Value
				{
					Name AT_VOID
					Value 2
					Documentation "Argument is void."
				}
				Value
				{
					Name AT_NONE
					Value 1
					Documentation "Argument has no type. If an argument has this type it means something went wrong during parsing."
				}
			}
		}
		Enum
		{
			Namespace String
			Documentation "Compare type."
			Name CompareType
			Values
			{
				Value
				{
					Name CaseInsensitive
					Value 1
					Documentation ""
				}
				Value
				{
					Name CaseSensitive
					Value 0
					Documentation ""
				}
			}
		}
	}
	Functions
	{
		Function
		{
			Documentation "Gets the current script\'s module."
			Namespace ""
			Declaration "CModule@ get_g_Module()"
		}
		Function
		{
			Documentation "Gets the current script\'s hook manager."
			Namespace ""
			Declaration "CModuleHookManager@ get_g_Hooks()"
		}
		Function
		{
			Documentation "Gets the current time as a unix timestamp."
			Namespace ""
			Declaration "time_t UnixTimestamp()"
		}
		Function
		{
			Documentation "Gets the map script\'s persistence manager."
			Namespace ""
			Declaration "CPersistence@ get_g_Persistence()"
		}
		Function
		{
			Documentation ""
			Namespace ""
			Declaration "CPathTrack@ PathTrackEntity_Instance(edict_t@ pEdict)"
		}
		Function
		{
			Documentation "Gets the current global sound manager entity"
			Namespace ""
			Declaration "CSoundEnt@ GetSoundEntInstance()"
		}
		Function
		{
			Documentation "Checks entvars for nullity"
			Namespace ""
			Declaration "bool FNullEnt(entvars_t@ pev)"
		}
		Function
		{
			Documentation "Checks edict for nullity"
			Namespace ""
			Declaration "bool FNullEnt(const edict_t@ pEnt)"
		}
		Function
		{
			Documentation ""
			Namespace ""
			Declaration "int TrainSpeed(int iSpeed, int iMax)"
		}
		Function
		{
			Documentation "Returns the cross product of the given vectors"
			Namespace ""
			Declaration "Vector CrossProduct(const Vector& in, const Vector& in)"
		}
		Function
		{
			Documentation "Returns the dot product of the given vectors"
			Namespace ""
			Declaration "float DotProduct(const Vector& in lhs, const Vector& in rhs)"
		}
		Function
		{
			Documentation "Returns a dot product of the given vectors"
			Namespace ""
			Declaration "float DotProduct(const Vector2D& in lhs, const Vector2D& in rhs)"
		}
		Function
		{
			Documentation "Gets the current script\'s scheduler."
			Namespace ""
			Declaration "CScheduler@ get_g_Scheduler()"
		}
		Function
		{
			Documentation "Formats the open flags into a string that represents the flags."
			Namespace FileSystem
			Declaration "bool FormatOpenFlags(OpenFileFlags_t uiOpenFlags, string& out szOutFlags)"
		}
		Function
		{
			Documentation "Filters the given flags, removing unnecessary flags."
			Namespace FileSystem
			Declaration "OpenFileFlags_t FilterFlags(OpenFileFlags_t uiOpenFlags)"
		}
		Function
		{
			Documentation "Returns whether the given open flags are valid."
			Namespace FileSystem
			Declaration "bool FlagsValid(const OpenFileFlags_t uiOpenFlags)"
		}
		Function
		{
			Documentation "Makes a copy of the target sequence (the subject) with all matches of the regular expression pRegex (the pattern) replaced by szFormat (the replacement)."
			Namespace Regex
			Declaration "string Replace(const string& in szString, const Regex@ pRegex, const string& in szFormat, MatchFlagType flags = match_default)"
		}
		Function
		{
			Documentation "Returns whether some sub-sequence in the target sequence (the subject) matches the regular expression pRegex.\npResults will contain the results of the operation, if any."
			Namespace Regex
			Declaration "bool Search(const string& in szString, MatchResults@ pResults, const Regex@ pRegex, MatchFlagType flags = match_default)"
		}
		Function
		{
			Documentation "Returns whether some sub-sequence in the target sequence (the subject) matches the regular expression pRegex."
			Namespace Regex
			Declaration "bool Search(const string& in szString, const Regex@ pRegex, MatchFlagType flags = match_default)"
		}
		Function
		{
			Documentation "Performs are regular expression matching operation.\nReturns true if the match succeeded, false otherwise.\npResults will contain the results of the operation, if any."
			Namespace Regex
			Declaration "bool Match(const string& in szString, MatchResults@ pResults, const Regex@ pRegex, MatchFlagType flags = match_default)"
		}
		Function
		{
			Documentation "Performs are regular expression matching operation.\nReturns true if the match succeeded, false otherwise"
			Namespace Regex
			Declaration "bool Match(const string& in szString, const Regex@ pRegex, MatchFlagType flags = match_default)"
		}
		Function
		{
			Documentation "Prints the format string to the destination buffer. Uses SC printf formatting style."
			Namespace ""
			Declaration "bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
		}
		Function
		{
			Documentation "Prints the format string to the destination buffer. Uses SC printf formatting style."
			Namespace ""
			Declaration "bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
		}
		Function
		{
			Documentation "Prints the format string to the destination buffer. Uses SC printf formatting style."
			Namespace ""
			Declaration "bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in, ?& in)"
		}
		Function
		{
			Documentation "Prints the format string to the destination buffer. Uses SC printf formatting style."
			Namespace ""
			Declaration "bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in, ?& in, ?& in, ?& in, ?& in)"
		}
		Function
		{
			Documentation "Prints the format string to the destination buffer. Uses SC printf formatting style."
			Namespace ""
			Declaration "bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in, ?& in, ?& in, ?& in)"
		}
		Function
		{
			Documentation "Prints the format string to the destination buffer. Uses SC printf formatting style."
			Namespace ""
			Declaration "bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in, ?& in, ?& in)"
		}
		Function
		{
			Documentation "Prints the format string to the destination buffer. Uses SC printf formatting style."
			Namespace ""
			Declaration "bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in, ?& in)"
		}
		Function
		{
			Documentation "Prints the format string to the destination buffer. Uses SC printf formatting style."
			Namespace ""
			Declaration "bool snprintf(string& out szOutBuffer, const string& in szFormat, ?& in)"
		}
		Function
		{
			Documentation "Prints the format string to the destination buffer. Uses SC printf formatting style."
			Namespace ""
			Declaration "bool snprintf(string& out szOutBuffer, const string& in szFormat)"
		}
		Function
		{
			Documentation "Formats a double into a string.\nThe options string is a combination of the following characters:\n\'l\' = left justify\n\'0\' = pad with zeroes\n\'+\' = always include the sign, even if positive\n\' \' = add a space in case of positive number\n\'e\' = exponent character with small e\n\'E\' = exponent character with capital E\n"
			Namespace ""
			Declaration "string formatFloat(double value, const string &in options = \"\", uint width = 0, uint precision = 0)"
		}
		Function
		{
			Documentation "Formats a unsigned integer into a string.\nThe options string is a combination of the following characters:\n\'l\' = left justify\n\'0\' = pad with zeroes\n\'+\' = always include the sign, even if positive\n\' \' = add a space in case of positive number\n\'h\' = hexadecimal integer small letters\n\'H\' = hexadecimal integer capital letters\n"
			Namespace ""
			Declaration "string formatUInt(uint64 value, const string &in options = \"\", uint width = 0)"
		}
		Function
		{
			Documentation "Formats a signed integer into a string.\nThe options string is a combination of the following characters:\n\'l\' = left justify\n\'0\' = pad with zeroes\n\'+\' = always include the sign, even if positive\n\' \' = add a space in case of positive number\n\'h\' = hexadecimal integer small letters\n\'H\' = hexadecimal integer capital letters\n"
			Namespace ""
			Declaration "string formatInt(int64 value, const string &in options = \"\", uint width = 0)"
		}
		Function
		{
			Documentation "Converts the given character to upper case."
			Namespace ""
			Declaration "string toupper(const string& in)"
		}
		Function
		{
			Documentation "Converts the given character to lower case."
			Namespace ""
			Declaration "string tolower(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is xdigit."
			Namespace ""
			Declaration "bool isxdigit(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is upper."
			Namespace ""
			Declaration "bool isupper(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is space."
			Namespace ""
			Declaration "bool isspace(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is punctuality."
			Namespace ""
			Declaration "bool ispunct(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is print."
			Namespace ""
			Declaration "bool isprint(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is lower."
			Namespace ""
			Declaration "bool islower(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is graph."
			Namespace ""
			Declaration "bool isgraph(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is digit."
			Namespace ""
			Declaration "bool isdigit(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is control."
			Namespace ""
			Declaration "bool iscntrl(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is alphabetic."
			Namespace ""
			Declaration "bool isalpha(const string& in)"
		}
		Function
		{
			Documentation "Returns whether character is alphanumeric."
			Namespace ""
			Declaration "bool isalnum(const string& in)"
		}
		Function
		{
			Documentation "Converts the given string to a boolean. fIsValid is true if the given string was a valid boolean value."
			Namespace ""
			Declaration "bool atobool(const string& in, bool& out fIsValid)"
		}
		Function
		{
			Documentation "Converts the given string to a boolean."
			Namespace ""
			Declaration "bool atobool(const string& in)"
		}
		Function
		{
			Documentation "Converts the given string to a 64 bit unsigned integer."
			Namespace ""
			Declaration "uint64 atoui64(const string& in, int radix = 10)"
		}
		Function
		{
			Documentation "Converts the given string to an unsigned integer."
			Namespace ""
			Declaration "uint atoui(const string& in, int radix = 10)"
		}
		Function
		{
			Documentation "Converts the given string to a 64 bit integer."
			Namespace ""
			Declaration "int64 atoi64(const string& in, int radix = 10)"
		}
		Function
		{
			Documentation "Converts the given string to an integer."
			Namespace ""
			Declaration "int atoi(const string& in, int radix = 10)"
		}
		Function
		{
			Documentation "Converts the given string to a double."
			Namespace ""
			Declaration "double atod(const string& in)"
		}
		Function
		{
			Documentation "Converts the given string to a float."
			Namespace ""
			Declaration "float atof(const string& in)"
		}
		Function
		{
			Documentation "Converts the given character to upper case."
			Namespace ""
			Declaration "char toupper(char character)"
		}
		Function
		{
			Documentation "Converts the given character to lower case."
			Namespace ""
			Declaration "char tolower(char character)"
		}
		Function
		{
			Documentation "Returns whether character is a hexadecimal numeric character."
			Namespace ""
			Declaration "bool isxdigit(char character)"
		}
		Function
		{
			Documentation "Returns whether character is upper."
			Namespace ""
			Declaration "bool isupper(char character)"
		}
		Function
		{
			Documentation "Returns whether character is space."
			Namespace ""
			Declaration "bool isspace(char character)"
		}
		Function
		{
			Documentation "Returns whether character is punctuality."
			Namespace ""
			Declaration "bool ispunct(char character)"
		}
		Function
		{
			Documentation "Returns whether character is print."
			Namespace ""
			Declaration "bool isprint(char character)"
		}
		Function
		{
			Documentation "Returns whether character is lower."
			Namespace ""
			Declaration "bool islower(char character)"
		}
		Function
		{
			Documentation "Returns whether character is graph."
			Namespace ""
			Declaration "bool isgraph(char character)"
		}
		Function
		{
			Documentation "Returns whether character is a decimal digit character."
			Namespace ""
			Declaration "bool isdigit(char character)"
		}
		Function
		{
			Documentation "Returns whether character is control."
			Namespace ""
			Declaration "bool iscntrl(char character)"
		}
		Function
		{
			Documentation "Returns whether character is alphabetic."
			Namespace ""
			Declaration "bool isalpha(char character)"
		}
		Function
		{
			Documentation "Returns whether character is alphanumeric."
			Namespace ""
			Declaration "bool isalnum(char character)"
		}
	}
	Properties
	{
		Property
		{
			Documentation "Called when the map changes. This happens when the world is destroyed. There may still be entities that exist at this point."
			Namespace Hooks::Game
			Declaration "const uint32 MapChange"
		}
		Property
		{
			Documentation "Called when a new entity is created. At this point the entity is not spawned yet and may not be fully initialized."
			Namespace Hooks::Game
			Declaration "const uint32 EntityCreated"
		}
		Property
		{
			Documentation "Called when a player disconnects. Note that this is only called if the player was fully connected, meaning the player went through ClientPutInServer. This is never called for the local host."
			Namespace Hooks::Player
			Declaration "const uint32 ClientDisconnect"
		}
		Property
		{
			Documentation "Called when a player has finished connecting and is put into the world. It is safe to send network messages to the player at this point."
			Namespace Hooks::Player
			Declaration "const uint32 ClientPutInServer"
		}
		Property
		{
			Documentation "Called when a player says something in game chat. The SayParameters class can be used to manipulate input and veto the message."
			Namespace Hooks::Player
			Declaration "const uint32 ClientSay"
		}
		Property
		{
			Documentation "Called when a player connects to the server, and the number of slots left on the server is <= the number of reserved slots. Set bAllowJoin to true to allow the player to join (default false)."
			Namespace Hooks::Player
			Declaration "const uint32 CanPlayerUseReservedSlot"
		}
		Property
		{
			Documentation "Called when a pickup object is about to be collected by a player. Note that basic checks are done before this hook is called."
			Namespace Hooks::PickupObject
			Declaration "const uint32 CanCollect"
		}
		Property
		{
			Documentation "Called when a pickup object materializes."
			Namespace Hooks::PickupObject
			Declaration "const uint32 Materialize"
		}
		Property
		{
			Documentation "Called when a pickup object is collected by a player. "
			Namespace Hooks::PickupObject
			Declaration "const uint32 Collected"
		}
		Property
		{
			Documentation "Called when a player connects to the server. if bDisallowJoin is set to false, the player is disconnected. szRejectReason is shown to the player if disconnected. The maximum length of the reject reason string is 127 characters."
			Namespace Hooks::Player
			Declaration "const uint32 ClientConnected"
		}
		Property
		{
			Documentation "Called when a player (re)spawns."
			Namespace Hooks::Player
			Declaration "const uint32 PlayerSpawn"
		}
		Property
		{
			Documentation "Called when the game wants to know if the player should be able to respawn or not.Set bCanRespawn to false to disallow, default true."
			Namespace Hooks::Player
			Declaration "const uint32 PlayerCanRespawn"
		}
		Property
		{
			Documentation "Called when a player takes damage. Note that the victim entity can\'t be changed at this point."
			Namespace Hooks::Player
			Declaration "const uint32 PlayerTakeDamage"
		}
		Property
		{
			Documentation "Called when a player is killed."
			Namespace Hooks::Player
			Declaration "const uint32 PlayerKilled"
		}
		Property
		{
			Documentation "Called when a player enters observer mode."
			Namespace Hooks::Player
			Declaration "const uint32 PlayerEnteredObserver"
		}
		Property
		{
			Documentation "Called when a player leaves observer mode."
			Namespace Hooks::Player
			Declaration "const uint32 PlayerLeftObserver"
		}
		Property
		{
			Documentation "Called when the game is processing player use input. Note that this occurs even if the player has not pressed their use key."
			Namespace Hooks::Player
			Declaration "const uint32 PlayerUse"
		}
		Property
		{
			Documentation "Called when the player is processing pre think events."
			Namespace Hooks::Player
			Declaration "const uint32 PlayerPreThink"
		}
		Property
		{
			Documentation "Called when the player is processing post think events."
			Namespace Hooks::Player
			Declaration "const uint32 PlayerPostThink"
		}
		Property
		{
			Documentation "Called when a player is about to get a spawn point before (re)spawning."
			Namespace Hooks::Player
			Declaration "const uint32 GetPlayerSpawnSpot"
		}
		Property
		{
			Documentation "Called when a player is spraypainting a decal onto a surface. The given trace result contains the surface information. "
			Namespace Hooks::Player
			Declaration "const uint32 PlayerDecal"
		}
		Property
		{
			Documentation "Called when a player attempts to spraypaint a decal onto a surface. The given trace result contains the surface information. Set bResult to false if the player shouldn\'t be able to spray. "
			Namespace Hooks::Player
			Declaration "const uint32 PlayerPreDecal"
		}
		Property
		{
			Documentation "Called when a player fires a weapon\'s primary attack."
			Namespace Hooks::Weapon
			Declaration "const uint32 WeaponPrimaryAttack"
		}
		Property
		{
			Documentation "Called when a player fires a weapon\'s secondary attack."
			Namespace Hooks::Weapon
			Declaration "const uint32 WeaponSecondaryAttack"
		}
		Property
		{
			Documentation "Called when a player fires a weapon\'s tertiary attack."
			Namespace Hooks::Weapon
			Declaration "const uint32 WeaponTertiaryAttack"
		}
		Property
		{
			Documentation "Survival Mode global instance."
			Namespace ""
			Declaration "CSurvivalMode g_SurvivalMode"
		}
		Property
		{
			Documentation "Classic Mode global instance."
			Namespace ""
			Declaration "CClassicMode g_ClassicMode"
		}
		Property
		{
			Documentation "CConCommandSystem global instance"
			Namespace ""
			Declaration "CConCommandSystem g_ConCommandSystem"
		}
		Property
		{
			Documentation "Log global instance"
			Namespace ""
			Declaration "CLog g_Log"
		}
		Property
		{
			Documentation "CAdminControl instance for plugins"
			Namespace ""
			Declaration "CAdminControl g_AdminControl"
		}
		Property
		{
			Documentation "Text menu manager global instance"
			Namespace ""
			Declaration "CTextMenus g_TextMenus"
		}
		Property
		{
			Documentation "Player start inventory manager instance"
			Namespace ""
			Declaration "CStartInventory g_StartInventory"
		}
		Property
		{
			Documentation "Plugin manager global instance."
			Namespace ""
			Declaration "CPluginManager g_PluginManager"
		}
		Property
		{
			Documentation "Map state variables instance"
			Namespace ""
			Declaration "CMap g_Map"
		}
		Property
		{
			Documentation "Map cycle manager instance"
			Namespace ""
			Declaration "CMapCycle g_MapCycle"
		}
		Property
		{
			Documentation "Angelscript debugging functions instance"
			Namespace ""
			Declaration "CAngelscript g_Angelscript"
		}
		Property
		{
			Documentation "Global state manager instance"
			Namespace ""
			Declaration "CGlobalState g_GlobalState"
		}
		Property
		{
			Documentation "Weapon functions global instance."
			Namespace ""
			Declaration "CWeaponFuncs g_WeaponFuncs"
		}
		Property
		{
			Documentation "Global player functions instance"
			Namespace ""
			Declaration "CPlayerFuncs g_PlayerFuncs"
		}
		Property
		{
			Documentation "Sven Co-op HUD color"
			Namespace ""
			Declaration "const RGBA RGBA_SVENCOOP"
		}
		Property
		{
			Documentation Orange
			Namespace ""
			Declaration "const RGBA RGBA_ORANGE"
		}
		Property
		{
			Documentation Yellow
			Namespace ""
			Declaration "const RGBA RGBA_YELLOW"
		}
		Property
		{
			Documentation Blue
			Namespace ""
			Declaration "const RGBA RGBA_BLUE"
		}
		Property
		{
			Documentation Green
			Namespace ""
			Declaration "const RGBA RGBA_GREEN"
		}
		Property
		{
			Documentation Red
			Namespace ""
			Declaration "const RGBA RGBA_RED"
		}
		Property
		{
			Documentation Black
			Namespace ""
			Declaration "const RGBA RGBA_BLACK"
		}
		Property
		{
			Documentation White
			Namespace ""
			Declaration "const RGBA RGBA_WHITE"
		}
		Property
		{
			Documentation "Global entity functions instance"
			Namespace ""
			Declaration "CEntityFuncs g_EntityFuncs"
		}
		Property
		{
			Documentation "Goes into g_Engine.trace_flags\nTraceline with a simple box"
			Namespace ""
			Declaration "const uint FTRACE_SIMPLEBOX"
		}
		Property
		{
			Documentation "Engine global variables instance"
			Namespace ""
			Declaration "CEngine g_Engine"
		}
		Property
		{
			Documentation "Sound engine instance"
			Namespace ""
			Declaration "CSoundEngine g_SoundSystem"
		}
		Property
		{
			Documentation "Volume value normal"
			Namespace ""
			Declaration "const float VOL_NORM"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const float ATTN_STATIC"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const float ATTN_IDLE"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const float ATTN_NORM"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const float ATTN_NONE"
		}
		Property
		{
			Documentation "Game functions instance"
			Namespace ""
			Declaration "CGame g_Game"
		}
		Property
		{
			Documentation "Utility methods instance"
			Namespace ""
			Declaration "CUtility g_Utility"
		}
		Property
		{
			Documentation "Custom entity functions global instance."
			Namespace ""
			Declaration "CCustomEntityFuncs g_CustomEntityFuncs"
		}
		Property
		{
			Documentation "Entity loader global instance"
			Namespace ""
			Declaration "CEntityLoader g_EntityLoader"
		}
		Property
		{
			Documentation "Item registry global instance."
			Namespace ""
			Declaration "CItemRegistry g_ItemRegistry"
		}
		Property
		{
			Documentation "Used for clips that don\'t use ammo."
			Namespace ""
			Declaration "const int WEAPON_NOCLIP"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_20DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_15DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_10DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_9DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_8DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_7DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_6DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_5DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_4DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_3DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_2DEGREES"
		}
		Property
		{
			Documentation ""
			Namespace ""
			Declaration "const Vector VECTOR_CONE_1DEGREES"
		}
		Property
		{
			Documentation "Parameter for CSoundEnt::InsertSound iVolume"
			Namespace ""
			Declaration "const int WEAPON_ACTIVITY_VOLUME"
		}
		Property
		{
			Documentation "Parameter for CSoundEnt::InsertSound iVolume"
			Namespace ""
			Declaration "const int SMALL_EXPLOSION_VOLUME"
		}
		Property
		{
			Documentation "Parameter for CSoundEnt::InsertSound iVolume"
			Namespace ""
			Declaration "const int NORMAL_EXPLOSION_VOLUME"
		}
		Property
		{
			Documentation "Parameter for CSoundEnt::InsertSound iVolume"
			Namespace ""
			Declaration "const int BIG_EXPLOSION_VOLUME"
		}
		Property
		{
			Documentation "Value used in CBasePlayer::m_iWeaponFlash"
			Namespace ""
			Declaration "const int DIM_GUN_FLASH"
		}
		Property
		{
			Documentation "Value used in CBasePlayer::m_iWeaponFlash"
			Namespace ""
			Declaration "const int NORMAL_GUN_FLASH"
		}
		Property
		{
			Documentation "Value used in CBasePlayer::m_iWeaponFlash"
			Namespace ""
			Declaration "const int BRIGHT_GUN_FLASH"
		}
		Property
		{
			Documentation "Parameter for CSoundEnt::InsertSound iVolume"
			Namespace ""
			Declaration "const int QUIET_GUN_VOLUME"
		}
		Property
		{
			Documentation "Parameter for CSoundEnt::InsertSound iVolume"
			Namespace ""
			Declaration "const int NORMAL_GUN_VOLUME"
		}
		Property
		{
			Documentation "Parameter for CSoundEnt::InsertSound iVolume"
			Namespace ""
			Declaration "const int LOUD_GUN_VOLUME"
		}
		Property
		{
			Documentation "Inventory misc functions instance"
			Namespace ""
			Declaration "CInventoryMisc g_InventoryMisc"
		}
		Property
		{
			Documentation "With this set as a sound\'s ExpireTime, the sound will never expire.\nSee CSoundEnt."
			Namespace ""
			Declaration "const int SOUND_NEVER_EXPIRE"
		}
		Property
		{
			Documentation "Identifiers passed to functions that can operate on either list, to indicate which list to operate on.\nSee CSoundEnt."
			Namespace ""
			Declaration "const int SOUNDLISTTYPE_ACTIVE"
		}
		Property
		{
			Documentation "Identifiers passed to functions that can operate on either list, to indicate which list to operate on.\nSee CSoundEnt."
			Namespace ""
			Declaration "const int SOUNDLISTTYPE_FREE"
		}
		Property
		{
			Documentation "Indicates that the sound list is empty.\nSee CSoundEnt."
			Namespace ""
			Declaration "const int SOUNDLIST_EMPTY"
		}
		Property
		{
			Documentation "maximum number of sounds handled by the world at one time.\nSee CSoundEnt."
			Namespace ""
			Declaration "const size_t MAX_WORLD_SOUNDS"
		}
		Property
		{
			Documentation "Model functions instance"
			Namespace ""
			Declaration "CModelFuncs g_ModelFuncs"
		}
		Property
		{
			Documentation "Engine functions instance"
			Namespace ""
			Declaration "CEngineFuncs g_EngineFuncs"
		}
		Property
		{
			Documentation "Time between player vocal client commands"
			Namespace ""
			Declaration "const float PLAYERCOMMAND_WAIT"
		}
		Property
		{
			Documentation Autoaim
			Namespace ""
			Declaration "const float AUTOAIM_10DEGREES"
		}
		Property
		{
			Documentation Autoaim
			Namespace ""
			Declaration "const float AUTOAIM_8DEGREES"
		}
		Property
		{
			Documentation Autoaim
			Namespace ""
			Declaration "const float AUTOAIM_5DEGREES"
		}
		Property
		{
			Documentation Autoaim
			Namespace ""
			Declaration "const float AUTOAIM_2DEGREES"
		}
		Property
		{
			Documentation "HUD item selection slots"
			Namespace ""
			Declaration "const size_t MAX_ITEM_TYPES"
		}
		Property
		{
			Documentation "Maximum number of ammo types"
			Namespace ""
			Declaration "const size_t MAX_AMMO_TYPES"
		}
		Property
		{
			Documentation "Hull view offset while ducking."
			Namespace ""
			Declaration "const Vector VEC_DUCK_VIEW"
		}
		Property
		{
			Documentation "Hull maximum while ducking. Used with CEntityFuncs::SetSize"
			Namespace ""
			Declaration "const Vector VEC_DUCK_HULL_MAX"
		}
		Property
		{
			Documentation "Hull minimum while ducking. Used with CEntityFuncs::SetSize"
			Namespace ""
			Declaration "const Vector VEC_DUCK_HULL_MIN"
		}
		Property
		{
			Documentation "View offset."
			Namespace ""
			Declaration "const Vector VEC_VIEW"
		}
		Property
		{
			Documentation "Default human hull maximum while ducking. Used with CEntityFuncs::SetSize"
			Namespace ""
			Declaration "const Vector VEC_HUMAN_HULL_DUCK"
		}
		Property
		{
			Documentation "Default human hull maximum while standing. Used with CEntityFuncs::SetSize"
			Namespace ""
			Declaration "const Vector VEC_HUMAN_HULL_MAX"
		}
		Property
		{
			Documentation "Default human hull maximum. Used with CEntityFuncs::SetSize"
			Namespace ""
			Declaration "const Vector VEC_HUMAN_HULL_MIN"
		}
		Property
		{
			Documentation "Default hull maximum. Used with CEntityFuncs::SetSize"
			Namespace ""
			Declaration "const Vector VEC_HULL_MAX"
		}
		Property
		{
			Documentation "Default hull minimum. Used with CEntityFuncs::SetSize"
			Namespace ""
			Declaration "const Vector VEC_HULL_MIN"
		}
		Property
		{
			Documentation "How many waypoints a monster can store at one time"
			Namespace ""
			Declaration "const size_t ROUTE_SIZE"
		}
		Property
		{
			Documentation "How many old enemies to remember"
			Namespace ""
			Declaration "const size_t MAX_OLD_ENEMIES"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slFail"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slTakeCoverFromBestSound"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slWaitScript"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slRunToScript"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slWalkToScript"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slError"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slDie"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slSmallFlinch"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slChaseEnemy"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slRangeAttack2"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slRangeAttack1"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slReload"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slCombatFace"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slCombatStand"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slAlertStand"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slAlertFace"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slWakeAngry"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slIdleWalk"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slIdleTrigger"
		}
		Property
		{
			Documentation ""
			Namespace Schedules
			Declaration "Schedule slIdleStand"
		}
		Property
		{
			Documentation "Activity map instance"
			Namespace ""
			Declaration "CActivityMap g_ActivityMap"
		}
		Property
		{
			Documentation "Dynamic decal manager instance"
			Namespace ""
			Declaration "CDecals g_Decals"
		}
		Property
		{
			Documentation "Ultra narrow view field"
			Namespace ""
			Declaration "const float VIEW_FIELD_ULTRA_NARROW"
		}
		Property
		{
			Documentation "Narrow view field"
			Namespace ""
			Declaration "const float VIEW_FIELD_NARROW"
		}
		Property
		{
			Documentation "Wide view field"
			Namespace ""
			Declaration "const float VIEW_FIELD_WIDE"
		}
		Property
		{
			Documentation "Full view field"
			Namespace ""
			Declaration "const float VIEW_FIELD_FULL"
		}
		Property
		{
			Documentation "Math functions instance"
			Namespace ""
			Declaration "CMath Math"
		}
		Property
		{
			Documentation "Zero vector (0, 0, 0)"
			Namespace ""
			Declaration "const Vector g_vecZero"
		}
		Property
		{
			Documentation "Debugger instance."
			Namespace ""
			Declaration " CDebugger g_Debugger"
		}
		Property
		{
			Documentation "Global file system instance"
			Namespace ""
			Declaration "CVirtualFileSystem g_FileSystem"
		}
		Property
		{
			Documentation "Reflection global class instance."
			Namespace Reflection
			Declaration "CReflection g_Reflection"
		}
		Property
		{
			Documentation "Sentinel value used by string tokenization when there are no tokens remaining."
			Namespace String
			Declaration "const size_t NO_MORE_TOKENS"
		}
		Property
		{
			Documentation "Sentinel value used by string methods."
			Namespace String
			Declaration "const size_t INVALID_INDEX"
		}
		Property
		{
			Documentation "A string that contains one instance of every whitespace character."
			Namespace String
			Declaration "const string WHITESPACE_CHARACTERS"
		}
		Property
		{
			Documentation "Empty string. Useful when a reference to a string is needed."
			Namespace String
			Declaration "const string EMPTY_STRING"
		}
		Property
		{
			Documentation "Default comparison type."
			Namespace String
			Declaration "const CompareType DEFAULT_COMPARE"
		}
		Property
		{
			Documentation "Distance from the world origin to the world boundary in a single axis"
			Namespace ""
			Declaration "const float WORLD_BOUNDARY"
		}
	}
	Typedefs
	{
		Typedef
		{
			Documentation "Type to store console command flags in"
			Namespace ""
			Type uint32
			Name ConCommandFlags_t
		}
		Typedef
		{
			Documentation "Unix timestamp type."
			Namespace ""
			Type uint64
			Name time_t
		}
		Typedef
		{
			Documentation "Menu id."
			Namespace ""
			Type int32
			Name TextMenuId_t
		}
		Typedef
		{
			Documentation "Persistence object id type."
			Namespace ""
			Type uint
			Name PersistID_t
		}
		Typedef
		{
			Documentation "Seek File Flags"
			Namespace ""
			Type uint8
			Name SeekFileFlags_t
		}
		Typedef
		{
			Documentation "Open File Flags"
			Namespace ""
			Type uint8
			Name OpenFileFlags_t
		}
		Typedef
		{
			Documentation "Size type used for denoting sizes"
			Namespace ""
			Type uint32
			Name size_t
		}
	}
	FuncDefs
	{
		FuncDef
		{
			Documentation "Called when the map changes. This happens when the world is destroyed. There may still be entities that exist at this point."
			Namespace ""
			Name "HookReturnCode MapChangeHook()"
		}
		FuncDef
		{
			Documentation "Called when a new entity is created. At this point the entity is not spawned yet and may not be fully initialized."
			Namespace ""
			Name "HookReturnCode EntityCreatedHook(CBaseEntity@)"
		}
		FuncDef
		{
			Documentation "Called when a player disconnects. Note that this is only called if the player was fully connected, meaning the player went through ClientPutInServer. This is never called for the local host."
			Namespace ""
			Name "HookReturnCode ClientDisconnectHook(CBasePlayer@)"
		}
		FuncDef
		{
			Documentation "Called when a player has finished connecting and is put into the world. It is safe to send network messages to the player at this point."
			Namespace ""
			Name "HookReturnCode ClientPutInServerHook(CBasePlayer@)"
		}
		FuncDef
		{
			Documentation "Called when a player says something in game chat. The SayParameters class can be used to manipulate input and veto the message."
			Namespace ""
			Name "HookReturnCode ClientSayHook(SayParameters@)"
		}
		FuncDef
		{
			Documentation "Called when a player connects to the server, and the number of slots left on the server is <= the number of reserved slots. Set bAllowJoin to true to allow the player to join (default false)."
			Namespace ""
			Name "HookReturnCode CanPlayerUseReservedSlotHook(edict_t@, const string& in, const string& in, bool& out)"
		}
		FuncDef
		{
			Documentation "Called when a pickup object is about to be collected by a player. Note that basic checks are done before this hook is called."
			Namespace ""
			Name "HookReturnCode CanCollectHook(CBaseEntity@, CBaseEntity@, bool& out)"
		}
		FuncDef
		{
			Documentation "Called when a pickup object materializes."
			Namespace ""
			Name "HookReturnCode MaterializeHook(CBaseEntity@)"
		}
		FuncDef
		{
			Documentation "Called when a pickup object is collected by a player. "
			Namespace ""
			Name "HookReturnCode CollectedHook(CBaseEntity@, CBaseEntity@)"
		}
		FuncDef
		{
			Documentation "Called when a player connects to the server. if bDisallowJoin is set to false, the player is disconnected. szRejectReason is shown to the player if disconnected. The maximum length of the reject reason string is 127 characters."
			Namespace ""
			Name "HookReturnCode ClientConnectedHook(edict_t@, const string& in, const string& in, bool& out, string& out)"
		}
		FuncDef
		{
			Documentation "Called when a player (re)spawns."
			Namespace ""
			Name "HookReturnCode PlayerSpawnHook(CBasePlayer@)"
		}
		FuncDef
		{
			Documentation "Called when the game wants to know if the player should be able to respawn or not.Set bCanRespawn to false to disallow, default true."
			Namespace ""
			Name "HookReturnCode PlayerCanRespawnHook(CBasePlayer@, bool& out)"
		}
		FuncDef
		{
			Documentation "Called when a player takes damage. Note that the victim entity can\'t be changed at this point."
			Namespace ""
			Name "HookReturnCode PlayerTakeDamageHook(DamageInfo@)"
		}
		FuncDef
		{
			Documentation "Called when a player is killed."
			Namespace ""
			Name "HookReturnCode PlayerKilledHook(CBasePlayer@, CBaseEntity@, int)"
		}
		FuncDef
		{
			Documentation "Called when a player enters observer mode."
			Namespace ""
			Name "HookReturnCode PlayerEnteredObserverHook(CBasePlayer@)"
		}
		FuncDef
		{
			Documentation "Called when a player leaves observer mode."
			Namespace ""
			Name "HookReturnCode PlayerLeftObserverHook(CBasePlayer@)"
		}
		FuncDef
		{
			Documentation "Called when the game is processing player use input. Note that this occurs even if the player has not pressed their use key."
			Namespace ""
			Name "HookReturnCode PlayerUseHook(CBasePlayer@, uint& out)"
		}
		FuncDef
		{
			Documentation "Called when the player is processing pre think events."
			Namespace ""
			Name "HookReturnCode PlayerPreThinkHook(CBasePlayer@, uint& out)"
		}
		FuncDef
		{
			Documentation "Called when the player is processing post think events."
			Namespace ""
			Name "HookReturnCode PlayerPostThinkHook(CBasePlayer@)"
		}
		FuncDef
		{
			Documentation "Called when a player is about to get a spawn point before (re)spawning."
			Namespace ""
			Name "HookReturnCode GetPlayerSpawnSpotHook(CBasePlayer@ pPlayer, CBaseEntity@& out ppEntSpawnSpot)"
		}
		FuncDef
		{
			Documentation "Called when a player is spraypainting a decal onto a surface. The given trace result contains the surface information. "
			Namespace ""
			Name "HookReturnCode PlayerDecalHook(CBasePlayer@, const TraceResult& in)"
		}
		FuncDef
		{
			Documentation "Called when a player attempts to spraypaint a decal onto a surface. The given trace result contains the surface information. Set bResult to false if the player shouldn\'t be able to spray. "
			Namespace ""
			Name "HookReturnCode PlayerPreDecalHook(CBasePlayer@, const TraceResult& in, bool& out bResult)"
		}
		FuncDef
		{
			Documentation "Called when a player fires a weapon\'s primary attack."
			Namespace ""
			Name "HookReturnCode WeaponPrimaryAttackHook(CBasePlayer@, CBasePlayerWeapon@)"
		}
		FuncDef
		{
			Documentation "Called when a player fires a weapon\'s secondary attack."
			Namespace ""
			Name "HookReturnCode WeaponSecondaryAttackHook(CBasePlayer@, CBasePlayerWeapon@)"
		}
		FuncDef
		{
			Documentation "Called when a player fires a weapon\'s tertiary attack."
			Namespace ""
			Name "HookReturnCode WeaponTertiaryAttackHook(CBasePlayer@, CBasePlayerWeapon@)"
		}
		FuncDef
		{
			Documentation "Callback for cvars."
			Namespace ""
			Name "void CVarCallback(CCVar@ cvar, const string& in szOldValue, float flOldValue)"
		}
		FuncDef
		{
			Documentation "Callback for client console commands."
			Namespace ""
			Name "void ClientCommandCallback(const CCommand@ args)"
		}
		FuncDef
		{
			Documentation "Callback for server console commands."
			Namespace ""
			Name "void ConCommandCallback(const CCommand@ args)"
		}
		FuncDef
		{
			Documentation "Funcdef for vote ended callbacks. If fResult is true, users voted for yes. Otherwise, voted for no."
			Namespace ""
			Name "void VoteEnd(Vote@ pVote, bool fResult, int iVoters)"
		}
		FuncDef
		{
			Documentation "Funcdef for vote blocked callbacks. The given time is when the active vote has ended."
			Namespace ""
			Name "void VoteBlocked(Vote@ pVote, float flTime)"
		}
		FuncDef
		{
			Documentation "Player slot callback for text menus."
			Namespace ""
			Name "void TextMenuPlayerSlotCallback(CTextMenu@ menu, CBasePlayer@ pPlayer, int iSlot, const CTextMenuItem@ pItem)"
		}
		FuncDef
		{
			Documentation "Function definition for custom entity Blocked functions"
			Namespace ""
			Name "void BlockedFunction(CBaseEntity@ pOther)"
		}
		FuncDef
		{
			Documentation "Function definition for custom entity Touch functions"
			Namespace ""
			Name "void TouchFunction(CBaseEntity@ pOther)"
		}
		FuncDef
		{
			Documentation "Function definition for custom entity Use functions"
			Namespace ""
			Name "void UseFunction(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue)"
		}
		FuncDef
		{
			Documentation "Function definition for custom entity Think functions"
			Namespace ""
			Name "void ThinkFunction()"
		}
	}
}
